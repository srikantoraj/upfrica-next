
===== package.json =====
{
  "name": "upfrica",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@babel/runtime": "^7.27.0",
    "@headlessui/react": "^2.2.4",
    "@next/font": "^14.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@reduxjs/toolkit": "^2.6.1",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tinymce/tinymce-react": "^5.1.1",
    "axios": "^1.11.0",
    "browser-image-compression": "^2.0.2",
    "chart.js": "^4.4.9",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "codemirror": "^6.0.1",
    "flowbite": "^2.5.2",
    "flowbite-react": "^0.11.7",
    "formik": "^2.4.6",
    "framer-motion": "^12.18.1",
    "html-react-parser": "^5.1.16",
    "libphonenumber-js": "^1.12.12",
    "lucide-react": "^0.487.0",
    "next": "^14.2.29",
    "next-redux-wrapper": "^8.1.0",
    "next-share": "^0.27.0",
    "or": "^0.2.0",
    "query-string": "^9.2.0",
    "react": "^18",
    "react-chartjs-2": "^5.3.0",
    "react-copy-to-clipboard": "^5.1.0",
    "react-country-region-selector": "^3.6.1",
    "react-datepicker": "^8.3.0",
    "react-dom": "^18",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "react-images-uploading": "^3.1.7",
    "react-markdown": "^10.1.0",
    "react-modal": "^3.16.3",
    "react-phone-input-2": "^2.15.1",
    "react-redux": "^9.2.0",
    "react-slider": "^2.0.6",
    "recharts": "^2.15.3",
    "remark-gfm": "^4.0.1",
    "sharp": "^0.33.5",
    "sonner": "^2.0.5",
    "styled-components": "^6.1.13",
    "swiper": "^11.2.6",
    "swr": "^2.3.3",
    "yup": "^1.6.1"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "postcss": "^8",
    "prettier": "^3.6.2",
    "tailwindcss": "^3.4.17"
  }
}


===== next.config.js =====
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    // ‚úÖ Route all <Image> src values through our sanitizer
    loader: 'custom',
    loaderFile: './src/lib/cdn-image-loader.js',

    // These are ignored by a custom loader, but harmless to keep
    remotePatterns: [
      { protocol: 'http',  hostname: '127.0.0.1', port: '8000', pathname: '/media/**' },
      { protocol: 'http',  hostname: 'localhost', port: '8000', pathname: '/media/**' },
      { protocol: 'http',  hostname: '192.168.1.241', port: '8000', pathname: '/media/**' },

      { protocol: 'https', hostname: 'www.upfrica.com',  pathname: '/media/**' },
      { protocol: 'https', hostname: 'media.upfrica.com', pathname: '/**' },

      { protocol: 'https', hostname: 'd3q0odwafjkyv1.cloudfront.net', pathname: '/**' },
      { protocol: 'https', hostname: 'd26ukeum83vx3b.cloudfront.net', pathname: '/**' },

      { protocol: 'https', hostname: 'images.unsplash.com', pathname: '/**' },
      { protocol: 'https', hostname: 'picsum.photos',       pathname: '/**' },

      { protocol: 'https', hostname: 'cdn.coverr.co', pathname: '/**' },
      { protocol: 'https', hostname: 'storage.googleapis.com', pathname: '/**' },
    ],
    formats: ['image/avif', 'image/webp'],
  },

  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          { key: 'Access-Control-Allow-Origin',  value: '*' },
          { key: 'Access-Control-Allow-Methods', value: 'GET,OPTIONS' },
          { key: 'Access-Control-Allow-Headers', value: 'Content-Type' },
        ],
      },
    ];
  },
};

module.exports = nextConfig;

===== middleware.js =====
// middleware.js
import { NextResponse } from "next/server";

export function middleware(request) {
  // Grab the country code from Vercel‚Äôs geo lookup (e.g. "BD"), default to "us"
  const country = request.geo?.country?.toLowerCase() || "us";
  const { pathname } = request.nextUrl;

  // If someone from BD hits "/", send them to "/bd"
  if (pathname === "/" && country === "bd") {
    const url = request.nextUrl.clone();
    url.pathname = "/bd";
    return NextResponse.redirect(url);
  }

  // If someone outside BD hits "/bd" (or any sub-path), kick them back to "/"
  if (pathname.startsWith("/bd") && country !== "bd") {
    const url = request.nextUrl.clone();
    url.pathname = "/";
    return NextResponse.redirect(url);
  }

  // Otherwise, let the request through
  return NextResponse.next();
}

// Only run this middleware on "/" and all "/bd/*" routes
export const config = {
  matcher: ["/", "/bd/:path*"],
};


===== jsconfig.json =====
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  }
}


===== src/app/(pages)/[region]/RegionSetter.jsx =====
"use client";

import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  selectCountryList,
  setSelectedCountry,
} from "@/app/store/slices/countrySlice";

export default function RegionSetter({ region }) {
  const dispatch = useDispatch();
  const countryList = useSelector(selectCountryList);

  useEffect(() => {
    const match = countryList.find(
      (c) => c.region.toLowerCase() === region.toLowerCase(),
    );
    dispatch(setSelectedCountry(match || countryList[0]));
  }, [region, countryList, dispatch]);

  return null;
}


===== src/app/(pages)/[region]/UserProfile.jsx =====
// components/User.jsx
"use client";

import { useEffect } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { useDispatch } from "react-redux";
import { setUser, clearUser } from "@/app/store/slices/userSlice";

export default function User() {
  const params = useSearchParams();
  const router = useRouter();
  const dispatch = useDispatch();

  useEffect(() => {
    // Try URL first, then localStorage
    const urlToken = params.get("token");
    // const storedToken = typeof window !== "undefined" && localStorage.getItem("token");
    // const token = urlToken || storedToken;
    const token = urlToken;

    if (!token) {
      // nothing to do
      return;
    }

    // If we got a new token in the URL, persist it (and clean up the URL)
    if (urlToken) {
      localStorage.setItem("token", urlToken);
      // remove token param from URL without reloading
      const cleaned = new URL(window.location.href);
      cleaned.searchParams.delete("token");
      router.replace(cleaned.pathname + cleaned.search, { scroll: false });
    }

    // Fetch the user's profile
    fetchProfile(token);

    async function fetchProfile(token) {
      try {
        const res = await fetch("https://media.upfrica.com/api/view-profile/", {
          method: "GET",
          headers: {
            Authorization: `Token ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!res.ok) {
          throw new Error(`Failed to fetch profile: ${res.status}`);
        }

        const user = await res.json();
        // dispatch into your slic
        dispatch(setUser({ user, token }));
      } catch (err) {
        console.error(err);
        dispatch(clearUser());
      }
    }
  }, [params, dispatch, router]);

  return null;
}


===== src/app/(pages)/[region]/[slug]/page.jsx =====
// ‚úÖ app/(pages)/[region]/[slug]/page.jsx
import { notFound, redirect } from "next/navigation";
import { BASE_API_URL } from "@/app/constants";
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import RelatedProducts from "@/components/home/ProductList/RealtedProduct";
import ProductDetailSection from "@/components/ProductDetailSection/ProductDetailSection";

// Frontend-only route prefixes that should NOT be treated as product regions
const FRONTEND_PREFIXES = new Set([
  "onboarding",
  "new-dashboard",
  "dashboard",
  "agent",
  "affiliate",
  "seller",
  "buyer",
  "login",
  "signup",
  "password",
]);

// Map region ‚Üí human country name (fallback used only if product/user don‚Äôt provide one)
const REGION_TO_COUNTRY = {
  gh: "Ghana",
  ng: "Nigeria",
  uk: "United Kingdom",
};

/**
 * Fetch product data by slug + region
 */
export async function getProductData(country, slug) {
  if (!slug) throw new Error("‚ùå No product slug provided");

  // üö´ Safety: never try to fetch frontend routes as products
  if (FRONTEND_PREFIXES.has(country)) {
    return null;
  }

  const url = `${BASE_API_URL}/api/${country}/${slug}`;
  const res = await fetch(url, { cache: "no-store" });

  console.log(`üåç Fetching: ${url}`);
  console.log(`üî¢ Status: ${res.status}`);

  if (res.status === 301 || res.status === 302) {
    let data = {};
    try {
      data = await res.json();
    } catch {
      // ignore
    }
    if (data.redirect) {
      const canonicalPath = data.redirect.replace("/api/", "/");
      redirect(canonicalPath);
    } else {
      throw new Error(`‚ùå Redirect status but no redirect key in body`);
    }
  }

  if (res.status === 404) {
    console.warn(`‚ùå Product not found: ${country}/${slug}`);
    return null;
  }

  if (!res.ok) {
    throw new Error(`‚ùå Failed to fetch product data (${res.status})`);
  }

  const product = await res.json();
  console.log("‚úÖ Product fetched:", {
    slug: product.slug,
    condition: product.condition?.slug,
    town: product.user?.town,
  });
  return product;
}

/**
 * Fetch related products
 */
async function getRelatedProducts(country, slug) {
  try {
    if (FRONTEND_PREFIXES.has(country)) return [];
    const res = await fetch(`${BASE_API_URL}/api/${country}/${slug}/related/`, {
      cache: "no-store",
    });
    if (!res.ok) return [];
    const data = await res.json();
    return data.results || [];
  } catch {
    return [];
  }
}

/**
 * Dynamic page metadata
 */
export async function generateMetadata({ params: { region, slug } }) {
  // üö´ Don‚Äôt try to build product metadata for frontend routes
  if (FRONTEND_PREFIXES.has(region)) {
    return {
      title: "Upfrica",
      description: "Buy and sell on Upfrica.",
    };
  }

  const product = await getProductData(region, slug);
  if (!product) return notFound();

  const conditionSlug = product.condition?.slug || "brand-new";
  const citySlug =
    product.user?.town?.toLowerCase().replace(/\s+/g, "-") || "accra";

  return {
    title: `${product.title} ‚Äì ${product.user?.country || "Upfrica"}`,
    description: product.description?.body || "",
    alternates: {
      canonical: `https://www.upfrica.com/${region}/${product.slug}-${conditionSlug}-${citySlug}`,
    },
  };
}

/**
 * Server-rendered Product Page
 */
export default async function ProductPage({ params: { region, slug } }) {
  // ‚úÖ If a frontend route slips in here, bounce to its real page
  if (FRONTEND_PREFIXES.has(region)) {
    redirect(`/${region}/${slug}`);
  }

  const product = await getProductData(region, slug);
  if (!product) return notFound();

  const relatedProducts = await getRelatedProducts(region, slug);

  // üìç Robust, non-hardcoded location for RelatedProducts
  const regionLower = (region || "").toLowerCase();
  const locationDisplay =
    product.seller_country ||
    product.user?.country ||
    REGION_TO_COUNTRY[regionLower] ||
    "Upfrica";

  return (
    <>
      <Header />
      <main className="w-full max-w-[1380px] mx-auto py-8 px-4 sm:px-5 lg:px-8 xl:px-[4rem] 2xl:px-[5rem]">
        <ProductDetailSection
          product={product}
          relatedProducts={relatedProducts}
        />
        <RelatedProducts
          relatedProducts={relatedProducts}
          productSlug={product.slug}
          productTitle={product.title}
          location={locationDisplay}
        />
      </main>
      <Footer />
    </>
  );
}

===== src/app/(pages)/[region]/[slug]/reviews/page.jsx =====
// /src/app/[region]/[slug]/reviews/page.jsx


import React from "react";
import Link from "next/link";
import { notFound } from "next/navigation";
import { getProductBySlug, getProductReviews } from "@/lib/products/api";
import ProductSummaryCard from "@/components/review/ProductSummaryCard";
import ReviewCard from "@/components/review/ReviewCard";
import StillInStockBanner from "@/components/review/StillInStockBanner";
import ReviewSummaryBox from "@/components/review/ReviewSummaryBox";

const CDN_BASE = "https://d3q0odwafjkyv1.cloudfront.net";

export async function generateMetadata({ params }) {
  const { slug, region } = params;
  const product = await getProductBySlug(region, slug);
  if (!product) return notFound();

  const firstImage = product.image_objects?.[0];
  const imageUrl =
    firstImage?.url?.startsWith("http")
      ? firstImage.url
      : firstImage?.key
      ? `${CDN_BASE}/${firstImage.key}`
      : product.product_image_url || null;

  return {
    title: `Reviews for ${product.seo_title || product.title} | Upfrica ${region.toUpperCase()}`,
    description: `See what buyers are saying about ${product.title}. Verified reviews, star ratings, and real photos from ${product.seller_town || region.toUpperCase()}.`,
    alternates: {
      canonical: product.canonical_url || `https://upfrica.com/${region}/${slug}/reviews`,
    },
    openGraph: {
      title: `Reviews for ${product.title}`,
      description: `Read verified reviews and see buyer photos for ${product.title}.`,
      images: imageUrl ? [{ url: imageUrl }] : [],
    },
  };
}

export default async function ProductReviewsPage({ params }) {
  const { slug, region } = params;

  const product = await getProductBySlug(region, slug);
  if (!product) return notFound();

  const {
    reviews = [],
    average_rating,
    review_count,
    rating_percent,
  } = await getProductReviews(region, slug);

  const price = product.price_cents
    ? (product.price_cents / 100).toFixed(2)
    : null;

  const firstImage = product.image_objects?.[0];
  const imageUrl =
    firstImage?.url?.startsWith("http")
      ? firstImage.url
      : firstImage?.key
      ? `${CDN_BASE}/${firstImage.key}`
      : product.product_image_url || null;

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 py-6 sm:py-8">
      {/* Back link */}
      <Link
        href={product.frontend_url || `/${region}/${slug}`}
        className="inline-flex items-center gap-1 text-sm text-gray-600 hover:text-black mb-4"
      >
        ‚Üê Back to Product
      </Link>

      {/* Page Heading */}
      <h1 className="text-xl sm:text-2xl font-semibold mb-4 leading-tight">
        Customer Reviews for <br className="sm:hidden" />
        {product.title}
      </h1>

      {/* Product summary card */}
      <div className="mb-5 sm:mb-6">
        <ProductSummaryCard
          title={product.title}
          image={imageUrl}
          price={price}
          condition={product.condition?.name}
          region={region}
          town={product.seller_town}
          buyUrl={product.frontend_url}
        />
      </div>

      {/* Ratings breakdown */}
      {review_count > 0 && (
        <div className="my-6">
          <ReviewSummaryBox
            averageRating={average_rating}
            reviewCount={review_count}
            ratingPercent={rating_percent}
          />
        </div>
      )}

      {/* Review list */}
      <div className="mt-6 space-y-6">
        {reviews.length > 0 ? (
          reviews.map((review) => (
            <ReviewCard key={review.id} review={review} />
          ))
        ) : (
          <p className="text-gray-500 italic">No reviews yet for this product.</p>
        )}
      </div>

      {/* Buy Again CTA */}
      {price && (
       
<div className="fixed bottom-0 left-0 right-0 sm:static bg-white sm:bg-transparent border-t sm:border-0 p-4 sm:p-0 z-50">
  <StillInStockBanner
    price={price}
    region={region}
    productSlug={slug}
  />
</div>
      
      )}
    </div>
  );
}

===== src/app/(pages)/[region]/[slug]/text.jsx =====
"use client";

import { useRouter } from "next/navigation";
import Image from "next/image";
import { Heart, MessageCircle, Star } from "lucide-react";
import { useState, useEffect, useRef } from "react";

export default function ProductPage() {
  const router = useRouter();
  const [currentImage, setCurrentImage] = useState(0);
  const [showBasketBadge, setShowBasketBadge] = useState(true);
  const [showStickyBuy, setShowStickyBuy] = useState(false);
  const actionRef = useRef(null);

  useEffect(() => {
    const timer = setTimeout(() => setShowBasketBadge(false), 5000);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    if (typeof window === "undefined" || window.innerWidth >= 768) return;
    const observer = new IntersectionObserver(
      ([entry]) => setShowStickyBuy(!entry.isIntersecting),
      { threshold: 0.1 },
    );
    if (actionRef.current) observer.observe(actionRef.current);
    return () => observer.disconnect();
  }, []);

  const product = {
    name: "Bluetooth Speaker",
    price: 35.0,
    rating: 4.2,
    reviews: 1830,
    discount: "15% OFF",
    seller: "TechZone",
    purchasedCount: 1123,
    inBaskets: 3,
    recentSales: 12,
    brand: "BoomAudio",
    sku: "BT-SPK-001",
    condition: "New",
    availability: "In Stock ‚Äì Ships within 24hrs",
    location: "Accra, Ghana",
    warranty: "1-year warranty",
    returnPolicy: "7-day return accepted",
    deliveryEstimate: "Delivery within 1‚Äì3 days in major cities",
    description:
      "High-quality portable Bluetooth speaker with powerful sound, durable design, and 10-hour battery life. Includes USB-C cable and warranty card.",
    images: [
      "https://d3q0odwafjkyv1.cloudfront.net/44a4795d9ee84761b06d3ed5a1f0b1c3_OIP.jpeg",
      "https://d3q0odwafjkyv1.cloudfront.net/db5688e235f04db1b8776e5c8df79911_th%20(1).jpeg",
      "https://d3q0odwafjkyv1.cloudfront.net/6771370f123d4294b8ca0cf023122466_th.jpeg",
    ],
  };

  return (
    <>
      <div className="container mx-auto px-4 md:flex md:gap-6 md:mt-10">
        {/* Left side images */}
        <div className="w-full md:w-1/2">
          <div className="relative w-full aspect-square overflow-hidden">
            <Image
              src={product.images[currentImage]}
              alt={product.name}
              fill
              className="object-cover w-full h-full transition-all duration-300"
            />
            <button
              onClick={() => router.back()}
              className="absolute top-3 left-3 bg-white p-1 rounded-full shadow z-30"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-5 h-5"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M15.75 6.75L8.25 12l7.5 5.25"
                />
              </svg>
            </button>
            {product.inBaskets > 0 && showBasketBadge && (
              <span className="absolute top-11 left-3 z-20 bg-red-600 text-white text-xs font-bold px-2 py-1 rounded-full shadow">
                IN {product.inBaskets} BASKETS
              </span>
            )}
            <span className="absolute top-3 right-3 bg-white text-xs font-semibold text-gray-800 px-2 py-1 rounded shadow-sm">
              {product.discount}
            </span>
            <div className="absolute bottom-3 left-1/2 -translate-x-1/2 flex gap-2">
              {product.images.map((_, i) => (
                <button
                  key={i}
                  className={`w-2 h-2 rounded-full ${i === currentImage ? "bg-black" : "bg-gray-300"}`}
                  onClick={() => setCurrentImage(i)}
                />
              ))}
            </div>
            <div className="absolute top-3 left-1/2 -translate-x-1/2 bg-black/60 text-white text-xs px-2 py-0.5 rounded-full">
              {currentImage + 1} / {product.images.length}
            </div>
          </div>
        </div>

        {/* Right side content */}
        <div className="w-full md:w-1/2 space-y-6 p-4">
          <h1 className="text-lg font-semibold text-gray-900 leading-tight">
            {product.name}
          </h1>
          <div className="text-xl font-bold text-gray-900 leading-snug">
            ${product.price.toFixed(2)}
          </div>
          <div className="flex items-center gap-[2px] text-yellow-500 text-sm leading-tight">
            {[...Array(Math.floor(product.rating))].map((_, i) => (
              <Star key={i} size={14} fill="currentColor" strokeWidth={0} />
            ))}
            {[...Array(5 - Math.floor(product.rating))].map((_, i) => (
              <Star
                key={i}
                size={14}
                className="text-gray-300"
                strokeWidth={0}
              />
            ))}
            <span className="ml-2 text-gray-600">
              ({product.reviews.toLocaleString()} reviews)
            </span>
          </div>

          <div className="text-sm text-gray-700 bg-gray-50 p-3 rounded border space-y-1">
            <p>
              <strong>Brand:</strong> {product.brand}
            </p>
            <p>
              <strong>Condition:</strong> {product.condition}
            </p>
            <p>
              <strong>SKU:</strong> {product.sku}
            </p>
            <p>
              <strong>Availability:</strong> {product.availability}
            </p>
            <p>
              <strong>Location:</strong> {product.location}
            </p>
          </div>

          <div ref={actionRef} className="space-y-3">
            <button className="w-full bg-purple-600 text-white font-bold py-3 rounded-full shadow">
              Buy Now
            </button>
            <button className="w-full border border-yellow-400 text-gray-900 font-medium py-2.5 rounded-full">
              Add to Basket
            </button>
            <button className="w-full border border-yellow-400 text-gray-900 font-medium py-2.5 rounded-full flex items-center justify-center gap-2">
              <Heart className="w-4 h-4 text-purple-600 fill-current" />
              Remove from Watchlist
            </button>
          </div>

          <div className="text-sm mt-2">
            <p className="text-gray-700">‚úì {product.warranty}</p>
            <p className="text-gray-700">‚úì Free shipping</p>
            <p className="text-gray-700">
              Sold by <strong>{product.seller}</strong>{" "}
              <span className="bg-green-100 text-green-700 px-2 py-0.5 rounded-full ml-2">
                ‚úî Verified Seller
              </span>
            </p>
          </div>
        </div>
      </div>

      {/* Sticky Buy Now for Mobile */}
      {showStickyBuy && (
        <div className="fixed bottom-0 left-0 w-full bg-white border-t p-3 z-50 md:hidden">
          <button className="w-full bg-purple-600 text-white font-bold py-3 rounded-none">
            Buy Now
          </button>
        </div>
      )}
    </>
  );
}


===== src/app/(pages)/[region]/[slug]/write-review/page.jsx =====
// /src/app/[region]/[slug]/write-review/page.jsx
// ‚úÖ FULLY UPDATED REVIEW FORM WITH VIDEO SUPPORT AND MEDIA LIMITS FIXED
'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { FaStar } from 'react-icons/fa'
import classNames from 'classnames'
import { BASE_API_URL } from '@/app/constants'
import { useAuth } from '@/contexts/AuthContext'
import { showToast } from '@/app/utils/showToast'
import axios from 'axios'

export default function WriteReviewForm() {
  const { user, token, hydrated } = useAuth()
  const router = useRouter()
  const searchParams = useSearchParams()

  const productIdRaw = searchParams.get('product_id')
  const productId = Number.isInteger(Number(productIdRaw)) ? Number(productIdRaw) : null
  const orderItemId = searchParams.get('order_item_id')

  const [rating, setRating] = useState(0)
  const [sellerRating, setSellerRating] = useState(0)
  const [title, setTitle] = useState('')
  const [comment, setComment] = useState('')
  const [sellerComment, setSellerComment] = useState('')
  const [images, setImages] = useState([])
  const [video, setVideo] = useState(null)
  const [media, setMedia] = useState([])
  const [previewUrls, setPreviewUrls] = useState([])
  const [product, setProduct] = useState(null)
  const [tags, setTags] = useState([])
  const [submitted, setSubmitted] = useState(false)
  const [tagGroups, setTagGroups] = useState([])
  const [allTags, setAllTags] = useState([])
  const [uploadProgress, setUploadProgress] = useState(null)

  useEffect(() => {
    if (hydrated && !user) {
      const nextUrl = window.location.pathname + window.location.search
      router.push(`/login?next=${encodeURIComponent(nextUrl)}`)
    }
  }, [hydrated, user, router])

  useEffect(() => {
    if (!user || !token || !productId) return
    const fetchProduct = async () => {
      try {
        const authToken = token || localStorage.getItem("token")?.replace(/^"|"$/g, "")
        const res = await fetch(`${BASE_API_URL}/api/products/${productId}/`, {
          headers: { Authorization: `Token ${authToken}` },
        })
        if (!res.ok) throw new Error('Failed to fetch product')
        setProduct(await res.json())
      } catch (err) {
        console.error('‚ùå Failed to fetch product info:', err)
      }
    }
    fetchProduct()
  }, [user, token, productId])

  useEffect(() => {
    if (!user || !token) return
    const fetchTags = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/review-tags/grouped/`)
        const data = await res.json()
        if (Array.isArray(data?.results)) {
          setTagGroups(data.results)
          setAllTags(data.results.flatMap(group => group.tags))
        }
      } catch (err) {
        console.error('‚ùå Failed to fetch tags:', err)
      }
    }
    fetchTags()
  }, [user, token])

  const toggleTag = (tagLabel) => {
    const tag = allTags.find(t => t.label === tagLabel)
    if (!tag) return
    const conflicts = tag.conflicts.map(id => allTags.find(t => t.id === id)?.label).filter(Boolean)
    const conflictingSelected = conflicts.find((c) => tags.includes(c))
    if (conflictingSelected) {
      showToast(`Tag conflict: "${tagLabel}" conflicts with "${conflictingSelected}".`)
      return
    }
    setTags((prev) => prev.includes(tagLabel) ? prev.filter(t => t !== tagLabel) : [...prev, tagLabel])
  }

  const handleMediaChange = (e) => {
    const files = Array.from(e.target.files)
    const imageFiles = files.filter(f => f.type.startsWith('image/'))
    const videoFiles = files.filter(f => f.type.startsWith('video/'))

    if (videoFiles.length > 0 && video) {
      showToast('Only one video is allowed per review')
      return
    }

    const newImageCount = images.length + imageFiles.length
    if (newImageCount > 4) {
      showToast('You can upload a maximum of 4 images.')
      return
    }

    if (videoFiles.length > 0) {
      const videoFile = videoFiles[0]
      if (videoFile.size > 60 * 1024 * 1024) {
        showToast('Video must be under 60MB.')
        return
      }
      setVideo(videoFile)
      setPreviewUrls(prev => [...prev, URL.createObjectURL(videoFile)])
    }

    const updatedImages = [...images, ...imageFiles]
    setImages(updatedImages)
    setPreviewUrls(prev => [...prev, ...imageFiles.map(f => URL.createObjectURL(f))])
    setMedia([...updatedImages, ...(videoFiles.length ? [videoFiles[0]] : video ? [video] : [])])
  }

  const handleRemoveFile = (index) => {
    const isVideo = video && index === images.length
    const newImages = [...images]
    const newPreviews = [...previewUrls]

    if (isVideo) {
      setVideo(null)
      newPreviews.splice(index, 1)
    } else {
      newImages.splice(index, 1)
      newPreviews.splice(index, 1)
    }

    setImages(newImages)
    setPreviewUrls(newPreviews)
    setMedia([...newImages, ...(video ? [video] : [])])

    if (newImages.length === 0 && !video) {
      setPreviewUrls([])
    }
  }

const handleSubmit = async (e) => {
  e.preventDefault()
  const authToken = token || localStorage.getItem("token")?.replace(/^"|"$/g, "")
  if (!orderItemId || !user || !authToken || !productId) {
    showToast("Missing required data. Please log in again.")
    return
  }

  try {
    const formData = new FormData()

    // Required fields
    if (productId) formData.append("product_id", String(productId))
    if (orderItemId) formData.append("order_item_id", String(orderItemId))
    if (rating !== null && rating !== undefined) formData.append("rating", String(rating))
    if (title?.trim()) formData.append("title", title.trim())
    if (comment?.trim()) formData.append("comment", comment.trim())

    // Optional seller review
    if (sellerRating > 0) {
      formData.append("seller_rating", String(sellerRating))
    }
    if (sellerComment?.trim() && sellerRating > 0) {
      formData.append("seller_comment", sellerComment.trim())
    }

    // Tags
    if (Array.isArray(tags)) {
      tags.forEach(tag => {
        if (tag?.trim()) formData.append("tags", tag)
      })
    }

    // Media
    if (Array.isArray(images)) {
      images.forEach(file => {
        if (file instanceof File) formData.append("media", file)
      })
    }

    if (video && video instanceof File) {
      formData.append("media", video)
    }

    const res = await axios.post(`${BASE_API_URL}/api/reviews/submit/`, formData, {
      headers: {
        Authorization: `Token ${authToken}`,
        'Content-Type': 'multipart/form-data',
      },
      onUploadProgress: (event) => {
        const percent = Math.round((event.loaded * 100) / event.total)
        setUploadProgress(percent)
      },
    })

    const data = res.data

    // ‚úÖ Reset form fields
    setTitle("")
    setComment("")
    setRating(null)
    setSellerRating(0)
    setSellerComment("")
    setTags([])
    setImages([])
    setVideo(null)
    setUploadProgress(null)
    setSubmitted(true)

    // ‚úÖ Delay redirect
    setTimeout(() => {
      const region = window.location.pathname.split("/")[1]
      const slug = data?.product_slug || window.location.pathname.split("/")[2]
      router.push(`/${region}/${slug}#reviews`)
    }, 3000)

  } catch (err) {
    console.error('‚ùå Submit failed:', err)
    setUploadProgress(null)

    const error = err?.response?.data?.detail || 'Submit failed. Please try again.'
    showToast(error)
  }
}
  const getCommentPlaceholder = () => {
    if (rating <= 2) return 'What went wrong or disappointed you?'
    if (rating === 3) return 'What was okay and what could be improved?'
    if (rating >= 4) return 'What did you love most about the product?'
    return 'Share your product experience'
  }

  const score = rating * 5 + sellerRating * 2 + tags.length + (comment.length > 20 ? 5 : 0)

  if (!hydrated) return <div className="text-center py-10">Loading...</div>
  if (!user) return null

const mainImage =
  product?.image ||
  product?.thumbnail ||
  product?.image_objects?.find(img => img.is_main)?.image_url ||
  product?.image_objects?.[0]?.image_url ||
  "/placeholder.png"


  return (
    <div className="max-w-2xl mx-auto px-4 py-10">
      <h1 className="text-3xl font-bold mb-6 flex items-center gap-2">üìù Write a Review</h1>

{product && (
  <div className="flex items-start gap-4 mb-6">
    <img
      src={mainImage}
      alt={product.title}
      className="w-20 h-20 object-cover rounded border"
    />
    <div>
      <p className="font-semibold text-lg">{product.title}</p>
      <p className="text-sm text-gray-500">You're reviewing this product</p>
    </div>
  </div>
)}

      <div className="sticky top-0 z-20 bg-white py-2">
        <label className="font-semibold text-base flex justify-between">
          üéØ Review Score <span>{score} / 50 points</span>
        </label>
        <div className="h-2 bg-gray-200 rounded">
          <div
            className="h-2 bg-purple-500 rounded transition-all"
            style={{ width: `${Math.min(score, 50)}%` }}
          />
        </div>
      </div>

{submitted && (
  <div className="bg-green-100 border border-green-300 text-green-700 px-4 py-3 rounded mb-6">
    ‚úÖ Review submitted successfully! Your review will be reviewed before points are awarded.
    <button
      className="ml-4 underline text-sm text-green-800"
      onClick={() => {
        const region = window.location.pathname.split("/")[1]
        const slug = window.location.pathname.split("/")[2]
        router.push(`/${region}/${slug}#reviews`)
      }}
    >
      Return to product
    </button>
  </div>
)}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="font-semibold text-lg flex items-center gap-2">üì¶ Rate the Product</label>
          <StarRating rating={rating} setRating={setRating} />
          {rating > 0 && <p className="text-sm text-purple-600 mt-1">üëç Great! Now tell us what stood out.</p>}
        </div>

        {rating > 0 && (
          <>
            <input
              type="text"
              className="w-full border px-3 py-2 rounded"
              placeholder="Title your review (required)"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
            <textarea
              className="w-full border px-3 py-2 rounded"
              rows={4}
              placeholder={getCommentPlaceholder()}
              value={comment}
              onChange={(e) => setComment(e.target.value)}
            />
          </>
        )}


{uploadProgress !== null && (
  <div className="my-4">
    <label className="text-sm font-medium text-gray-700">Uploading media...</label>
    <div className="w-full bg-gray-200 rounded-full h-2.5 mt-1">
      <div
        className="bg-purple-600 h-2.5 rounded-full transition-all"
        style={{ width: `${uploadProgress}%` }}
      ></div>
    </div>
    <p className="text-sm text-gray-600 mt-1 text-right">{uploadProgress}%</p>
  </div>
)}


        {rating > 0 && (
          <div>
            <label className="font-semibold flex items-center gap-2">
              üì∑ Add photos or videos <span className="text-sm text-gray-500">(up to 5 files)</span>
            </label>

<input
  type="file"
  accept="image/*,video/*"
  capture="environment"
  multiple
  onChange={handleMediaChange}
  className="mt-2 block w-full"
  disabled={images.length >= 4 && video !== null}
/>

{(images.length >= 4 || video) && (
  <p className="text-sm text-gray-500 mt-1">
    {images.length >= 4 && video
      ? 'Limit reached: 4 images and 1 video.'
      : images.length >= 4
      ? 'You‚Äôve reached the 4-image limit.'
      : video
      ? 'You‚Äôve uploaded the maximum 1 video.'
      : ''}
  </p>
)}
            {previewUrls.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-4">
                {previewUrls.map((src, idx) => (
                  <div key={idx} className="relative w-20 h-20 rounded overflow-hidden border shadow group">
                    <button
                      type="button"
                      onClick={() => handleRemoveFile(idx)}
                      className="absolute top-0 right-0 bg-black bg-opacity-60 text-white text-xs rounded-bl px-1 py-0.5 group-hover:block z-10"
                      title="Remove"
                    >
                      ‚úï
                    </button>
                    {src.endsWith('.mp4') || src.includes('blob:') && video ? (
                      <video src={src} className="w-full h-full object-cover" controls />
                    ) : (
                      <img src={src} className="w-full h-full object-cover" alt={`upload-${idx}`} />
                    )}
                    <p className="text-xs mt-0.5 text-center truncate">{media[idx]?.name}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {rating > 0 && Array.isArray(tagGroups) && tagGroups.map((group) => (
          <div key={group.id}>
            <label className="font-semibold flex items-center gap-2 text-lg mt-4">{group.icon} {group.name}</label>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 mt-2">
              {group.tags.map((tag) => {
                const tagLabel = tag.label
                const conflicts = tag.conflicts.map(id => allTags.find(t => t.id === id)?.label).filter(Boolean)
                const disabled = conflicts.some(conflict => tags.includes(conflict))
                const tooltip = disabled
                  ? `Conflicts with ‚Äú${conflicts.find((c) => tags.includes(c))}‚Äù`
                  : tag.description || ''
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/[region]/page.jsx =====
// import Header from "@/components/common/header/Header";
// import ProductList from "@/components/home/ProductList/ProductList";
// import FAQ from "@/components/home/Faq/Faq";
// import Footer from "@/components/common/footer/Footer";
// import Categories from "@/components/home/Categories/Categories";
// import AboutSection from "@/components/home/About/About";
// import Link from "next/link";
// import User from "@/components/User";
// import Cover from "@/components/common/header/Cover";
// import EarlyDeals from "@/components/EarlyDeals";
// import Selling from "@/components/Selling";
// import Tranding from "@/components/WomenFasion";
// import SellectedItem from "@/components/SellectedItem";
// import NewArrivals from "@/components/common/New arrivals/NewArrivals";
// import WomenFasion from "@/components/WomenFasion";
// import MenFashion from "@/components/men fashion/MenFashion";
// import RecentlyViewedList from "@/components/home/ProductList/RecentlyViewedList";
// import RegionSetter from "./RegionSetter";

// /**
//  * Dynamically generates the page‚Äôs metadata (title & description)
//  * based on the country code in the URL (bd, gb, gh, etc.)
//  */
// export async function generateMetadata({ params: { region } }) {
//   // map region codes to display names
//   const regionNames = {
//     bd: "Bangladesh",
//     gb: "United Kingdom",
//     gh: "Ghana",
//     // add more as needed
//   };
//   const countryName = regionNames[region] || "Global";

//   return {
//     title: `Upfrica ‚Äî ${countryName}`,
//     description: `Explore our curated selection of products in ${countryName}.`,
//   };
// }

// export default function CountrySpecificHome({ params: { region } }) {
//   console.log("Region:", region);

//   return (
//     <div className="bg-gray-100">
//       <RegionSetter region={region} />

//       <Header />
//       <Cover />

//       <EarlyDeals />
//       <ProductList title={`Selected by Upfrica ‚Äî ${region.toUpperCase()}`} />

//       <Selling />
//       <RecentlyViewedList title="Recently Viewed Products" />

//       <WomenFasion title="Trending in Women‚Äôs Fashion" />
//       <SellectedItem />

//       <MenFashion title="Trending in Men‚Äôs Fashion" />
//       <Selling color="green" />

//       <NewArrivals title="New arrivals" />
//       <Categories />

//       <AboutSection />

//       <FAQ />
//       <Footer />

//       <User />
//     </div>
//   );
// }

// app/[region]/page.jsx

import Header from "@/components/common/header/Header";
import ProductList from "@/components/home/ProductList/ProductList";
import FAQ from "@/components/home/Faq/Faq";
import Footer from "@/components/common/footer/Footer";
import Categories from "@/components/home/Categories/Categories";
import AboutSection from "@/components/home/About/About";
import Link from "next/link";
import User from "./UserProfile";
import Cover from "@/components/common/header/Cover";
import EarlyDeals from "@/components/EarlyDeals";
import Selling from "@/components/Selling";
import Tranding from "@/components/WomenFasion";
import SellectedItem from "@/components/SellectedItem";
import NewArrivals from "@/components/common/New arrivals/NewArrivals";
import WomenFasion from "@/components/WomenFasion";
import MenFashion from "@/components/men fashion/MenFashion";
import RecentlyViewedList from "@/components/home/ProductList/RecentlyViewedList";
import RegionSetter from "./RegionSetter";

/**
 * Dynamically generates the page‚Äôs metadata (title & description)
 * based on the country code in the URL (bd, gb, gh, etc.)
 */
export async function generateMetadata({ params: { region } }) {
  const regionNames = {
    bd: "Bangladesh",
    gb: "United Kingdom",
    gh: "Ghana",
    // add more as needed
  };
  const countryName = regionNames[region] || "Global";

  return {
    title: `Upfrica ‚Äî ${countryName}`,
    description: `Explore our curated selection of products in ${countryName}.`,
  };
}

export default function CountrySpecificHome({ params: { region } }) {
  console.log("Region:", region);

  return (
    <div className="bg-gray-100">
      <RegionSetter region={region} />

      <Header />
      <Cover />

      <EarlyDeals />
      <ProductList title={`Selected by Upfrica ‚Äî ${region.toUpperCase()}`} />

      <Selling />
      <RecentlyViewedList title="Recently Viewed Products" />

      <WomenFasion title="Trending in Women‚Äôs Fashion" />
      <SellectedItem />

      <MenFashion title="Trending in Men‚Äôs Fashion" />
      <Selling color="green" />

      <NewArrivals title="New arrivals" />
      <Categories />

      <AboutSection />

      <FAQ />
      <Footer />

      {/* This client component will pick up the token, fetch profile, and
          dispatch into Redux for you */}
      <User />
    </div>
  );
}


===== src/app/(pages)/[region]/shops/ShopBadges.jsx =====
'use client';

import React from 'react';
import BadgeStrip from '@/components/badges/BadgeStrip';

export default function ShopBadges({
  badgeKeys = ['verified','contactVerified','officialStore','secureSeller'],
  showContact = true,
  hasContact = false,
  onContactClick,
  className = '',
  sticky = true,
}) {
  const showBtn = Boolean((showContact ?? hasContact) && hasContact && onContactClick);

  return (
    <div
      className={[
        'mx-auto max-w-6xl w-full px-3 md:px-4',
        sticky ? 'sticky top-2 md:top-4 z-20' : '',
        className,
      ].join(' ')}
    >
      <div
        className={[
          // single line row; center vertically
          'flex items-center justify-between gap-3 md:gap-4',
          'bg-white/80 dark:bg-neutral-900/70 backdrop-blur',
          'rounded-full border border-neutral-200 dark:border-neutral-800',
          'px-3 md:px-4 py-2 shadow-sm',
          'min-h-[44px]',
        ].join(' ')}
        aria-label="Shop badges and contact"
      >
        {/* badges: flex-1 + min-w-0 so it scrolls instead of wrapping */}
        <BadgeStrip
          keys={badgeKeys}
          className="flex-1 min-w-0"
          onContactClick={onContactClick}
        />

        {/* CTA pinned right (desktop only) */}
        {showBtn && (
          <button
            type="button"
            onClick={onContactClick}
            className="hidden md:inline-flex shrink-0 items-center gap-2 rounded-full bg-violet-50 dark:bg-violet-950/20 text-violet-700 dark:text-violet-300 border border-violet-300 dark:border-violet-900/50 px-3 py-1.5 text-sm font-medium hover:bg-violet-100 dark:hover:bg-violet-900/30 focus:outline-none focus-visible:ring-2 focus-visible:ring-violet-400"
            aria-haspopup="dialog"
            aria-controls="contact-sheet"
          >
            <span className="text-base leading-none">üìû</span>
            Contact seller
          </button>
        )}
      </div>
    </div>
  );
}

===== src/app/(pages)/[region]/shops/ShopsPageClient.jsx =====
"use client";

import React, { useMemo, useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { HiAdjustments, HiChevronRight, HiSearch } from "react-icons/hi";
import { BASE_API_URL } from "@/app/constants";

// ‚úÖ use the robust image helpers you already ship
import { pickProductImage, fixImageUrl, FALLBACK_IMAGE } from "@/lib/image";

/* ---------------- helpers ---------------- */
function cx(...xs) {
  return xs.filter(Boolean).join(" ");
}
function Skeleton({ className = "" }) {
  return (
    <div
      className={cx(
        "animate-pulse bg-gray-200/70 dark:bg-neutral-800 rounded",
        className
      )}
    />
  );
}
function ShopCardSkeleton() {
  return (
    <div className="border rounded-xl p-3 bg-white dark:bg-neutral-900 shadow-sm">
      <Skeleton className="h-28 w-full rounded-lg mb-3" />
      <div className="flex gap-3">
        <Skeleton className="h-12 w-12 rounded-full" />
        <div className="flex-1">
          <Skeleton className="h-4 w-5/6 mb-2" />
          <Skeleton className="h-3 w-2/3" />
        </div>
      </div>
      <Skeleton className="h-8 w-full mt-3" />
    </div>
  );
}

/** Product-first hero image for a shop (product ‚Üí banner ‚Üí default). */
function pickShopCardImage(shop) {
  // 1) Nested "latest product" shapes we commonly see from APIs
  const nestedCandidates = [
    shop?.latest_product,
    shop?.last_product,
    shop?.latest_listing,
    shop?.last_listing,
    shop?.product, // some feeds use a single nested product
  ];
  for (const obj of nestedCandidates) {
    if (obj && typeof obj === "object") {
      const u = pickProductImage(obj);
      if (u && u !== FALLBACK_IMAGE) return u;
    }
  }

  // 2) Flat fields that often store a product image url directly
  const directKeys = [
    "product_image_url",
    "latest_product_image",
    "last_product_image",
    "featured_product_image",
    "hero_product_image",
    "product_image", // just in case
  ];
  for (const k of directKeys) {
    const v = shop?.[k];
    if (typeof v === "string" && v.trim()) return fixImageUrl(v);
  }

  // 3) Arrays of product-like objects (take the newest/first)
  const arrays = [shop?.recent_products, shop?.products, shop?.listings];
  for (const arr of arrays) {
    if (Array.isArray(arr) && arr.length) {
      const u = pickProductImage(arr[0]);
      if (u && u !== FALLBACK_IMAGE) return u;
    }
  }

  // 4) Fall back to a shop banner/cover/hero/logo
  const bannerKeys = [
    "top_banner",
    "shop_banner",
    "banner",
    "cover_image",
    "hero_image",
    "shop_logo",
  ];
  for (const k of bannerKeys) {
    const v = shop?.[k];
    if (typeof v === "string" && v.trim()) return fixImageUrl(v);
  }

  // 5) Absolute last resort
  return FALLBACK_IMAGE;
}

/* ---------------- cards ---------------- */
function ShopCard({ shop, region, badge }) {
  const hero = pickShopCardImage(shop);
  const logo = shop?.shop_logo ? fixImageUrl(shop.shop_logo) : null;

  return (
    <article className="group border rounded-xl bg-white dark:bg-neutral-900 shadow-sm hover:shadow-md transition overflow-hidden">
      <div className="relative h-28 w-full">
        <Image
          src={hero}
          alt={`${shop.name} featured product`}
          fill
          sizes="(max-width: 1280px) 100vw, 33vw"
          className="object-cover bg-gray-100 dark:bg-neutral-800"
        />
        {badge ? (
          <div className="absolute left-2 top-2 text-xs px-2 py-1 rounded-full bg-amber-600 text-white shadow">
            {badge}
          </div>
        ) : null}
      </div>

      <div className="p-3">
        <div className="flex items-center gap-3">
          <div className="relative w-12 h-12 rounded-full overflow-hidden border bg-white dark:bg-neutral-900">
            {logo ? (
              <Image
                src={logo}
                alt={`${shop.name} logo`}
                fill
                sizes="48px"
                className="object-cover"
              />
            ) : (
              <div className="h-full w-full bg-gray-100 dark:bg-neutral-800" />
            )}
          </div>
          <div className="min-w-0">
            <h3 className="font-semibold truncate">{shop.name}</h3>
            <p className="text-xs text-gray-600 dark:text-gray-300 truncate">
              {shop.town}
              {shop.country_name ? `, ${shop.country_name}` : ""}
            </p>
          </div>
        </div>

        <p className="text-xs text-gray-600 dark:text-gray-300 mt-2">
          {shop.active_listings}+ items ‚Ä¢ Fast delivery
        </p>

        <Link
          href={`/${region}/shops/${shop.slug}`}
          className="mt-3 inline-flex w-full items-center justify-center gap-2 rounded-lg border border-gray-300 dark:border-neutral-700 px-3 py-2 text-sm font-medium hover:bg-gray-50 dark:hover:bg-neutral-800"
        >
          View shop <HiChevronRight />
        </Link>
      </div>
    </article>
  );
}

/* ---------------- list header ---------------- */
function FiltersBar({ search, setSearch, sort, setSort, onOpenFilters, total }) {
  return (
    <div className="flex flex-col sm:flex-row sm:items-center gap-3">
      <div className="relative flex-1">
        <HiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
        <input
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="Search shops‚Ä¶"
          className="w-full pl-10 pr-3 py-2 rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900"
        />
      </div>
      <div className="flex items-center gap-2">
        <select
          value={sort}
          onChange={(e) => setSort(e.target.value)}
          className="rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm"
        >
          <option value="featured_first">Featured first</option>
          <option value="listings_desc">Most Listings</option>
          <option value="name_asc">Name A‚ÄìZ</option>
        </select>
        <button
          onClick={onOpenFilters}
          className="inline-flex items-center gap-2 rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm"
        >
          <HiAdjustments className="w-4 h-4" />
          Filters
          {typeof total === "number" ? (
            <span className="ml-1 text-xs text-gray-500">({total})</span>
          ) : null}
        </button>
      </div>
    </div>
  );
}

/* ---------------- main ---------------- */
export default function ShopsPageClient({
  region,
  initialFeatured,
  initialShops,
}) {
  const featured = (initialFeatured?.results || initialFeatured?.shops || [])
    .filter(Boolean)
    .map((s) => ({ ...s, __featured: true }));
  const initial = (initialShops?.results || initialShops?.shops || []).filter(
    Boolean
  );

  const [items, setItems] = useState(initial);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(Boolean(initialShops?.next));
  const [loadingMore, setLoadingMore] = useState(false);

  const [search, setSearch] = useState("");
  const [sort, setSort] = useState("featured_first");
  const [filtersOpen, setFiltersOpen] = useState(false);

  // De-dup + prefer featured copy; then filter + sort
  const view = useMemo(() => {
    const merged = [...featured, ...items];
    const byKey = new Map();
    for (const s of merged) {
      const key = String(s?.slug || s?.id || "");
      if (!key) continue;
      const prev = byKey.get(key);
      if (!prev || (s.__featured && !prev.__featured)) {
        byKey.set(key, {
          ...prev,
          ...s,
          __featured: !!(s.__featured || prev?.__featured),
        });
      }
    }
    let v = Array.from(byKey.values());

    if (search.trim()) {
      const q = search.toLowerCase();
      v = v.filter(
        (s) =>
          s.name?.toLowerCase().includes(q) ||
          (s.town || "").toLowerCase().includes(q)
      );
    }

    switch (sort) {
      case "listings_desc":
        v.sort(
          (a, b) => (b.active_listings || 0) - (a.active_listings || 0)
        );
        break;
      case "name_asc":
        v.sort((a, b) => String(a.name).localeCompare(String(b.name)));
        break;
      default:
        v.sort(
          (a, b) => (b.__featured ? 1 : 0) - (a.__featured ? 1 : 0)
        );
        break;
    }
    return v;
  }, [items, featured, search, sort]);

  async function loadMore() {
    if (loadingMore) return;
    setLoadingMore(true);
    const next = page + 1;
    const urls = [
      `${BASE_API_URL}/api/shops/search/?entitled=1&page=${next}`,
      `${BASE_API_URL}/api/shops/?page=${next}`,
    ];
    let data = null;
    for (const u of urls) {
      try {
        const r = await fetch(u, { headers: {}, cache: "no-store" });
        if (r.ok) {
          data = await r.json();
          break;
        }
      } catch {}
    }
    const extra = (data?.results || data?.shops || []).filter(Boolean);
    setItems((prev) => [...prev, ...extra]);
    setPage(next);
    setHasMore(Boolean(data?.next) && extra.length > 0);
    setLoadingMore(false);
  }

  return (
    <div className="max-w-6xl mx-auto p-4 sm:p-6">
      {/* hero */}
      <header className="relative overflow-hidden rounded-2xl border border-gray-200 dark:border-neutral-800 bg-white dark:bg-neutral-900">
        <div className="relative h-40 sm:h-56 w-full bg-gradient-to-br from-violet-100 to-indigo-100 dark:from-neutral-800 dark:to-neutral-700" />
        <div className="p-4 sm:p-6">
          <nav className="text-xs text-gray-600 dark:text-gray-300 mb-2">
            <span className="font-medium">Shops</span>
          </nav>
          <h1 className="text-2xl sm:text-3xl font-semibold">Discover Shops</h1>
          <p className="mt-2 text-sm text-gray-700 dark:text-gray-300 max-w-3xl">
            Explore active stores from verified sellers on Upfrica. Featured
            shops are promoted by Upfrica or partners.
          </p>
        </div>
      </header>

      {/* controls */}
      <div className="mt-6">
        <FiltersBar
          search={search}
          setSearch={setSearch}
          sort={sort}
          setSort={setSort}
          onOpenFilters={() => setFiltersOpen(true)}
          total={view.length}
        />
      </div>

      {/* grid */}
      <main className="mt-6">
        {view.length === 0 ? (
          <div className="border rounded-xl p-10 text-center bg-white dark:bg-neutral-900">
            <p className="text-gray-700 dark:text-gray-300">
              No shops to show yet. Check back soon!
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4">
            {view.map((shop) => (
              <ShopCard
                key={shop.slug || shop.id}
                shop={shop}
                region={region}
                badge={shop.__featured ? "Sponsored" : null}
              />
            ))}
          </div>
        )}

        {hasMore && (
          <div className="mt-6 flex justify-center">
            <button
              onClick={loadMore}
              disabled={loadingMore}
              className="px-4 py-2 rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 hover:bg-gray-50 dark:hover:bg-neutral-800"
            >
              {loadingMore ? "Loading‚Ä¶" : "Load more"}
            </button>
          </div>
        )}
      </main>

      {/* tiny JSON-LD list */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify({
            "@context": "https://schema.org",
            "@type": "ItemList",
            itemListElement: view.slice(0, 20).map((s, i) => ({
              "@type": "ListItem",
              position: i + 1,
              url: `/${region}/shops/${s.slug}`,
              name: s.name,
            })),
          }),
        }}
      />
    </div>
  );
}

===== src/app/(pages)/[region]/shops/[slug]/DummyShopInfo.jsx =====
// shopDummyData.js
export const aboutData = {
  description:
    "Welcome to our shop! We offer a wide range of quality products at the best prices. Customer satisfaction is our top priority.",
  mission: "Deliver quality products with excellent service to every customer.",
  established: "2019",
  location: "Accra, Ghana",
};

export const reviewsData = [
  {
    id: 1,
    reviewer: "Kwame Mensah",
    rating: 5,
    comment: "Amazing service and fast delivery! Highly recommend.",
    date: "2024-04-01",
  },
  {
    id: 2,
    reviewer: "Abena Asante",
    rating: 4,
    comment: "Good quality items, will definitely shop again.",
    date: "2024-03-25",
  },
];


===== src/app/(pages)/[region]/shops/[slug]/FaqJsonLd.jsx =====
//app/(pages)/[region]/shops/[slug]/FaqJsonLd.jsx
export default function FaqJsonLd({ schema }) {
  if (!schema?.mainEntity?.length) return null;
  return (
    <script
      type="application/ld+json"
      dangerouslySetInnerHTML={{ __html: JSON.stringify(schema) }}
    />
  );
}

===== src/app/(pages)/[region]/shops/[slug]/HeroSectionSkeleton.jsx =====
// components/HeroSectionSkeleton.jsx
"use client";

import React from "react";

export default function HeroSectionSkeleton() {
  return (
    <div className="relative animate-pulse w-[500px] ">
      {/* banner placeholder */}
      <div className="h-[300px]  bg-gray-200" />

      {/* overlay card placeholder */}
      <div className="absolute bottom-0 left-10 bg-white backdrop-blur p-6 rounded-tl-lg rounded-tr-lg w-[calc(100%-2.5rem)] max-w-lg">
        {/* shop name */}
        <div className="h-8 bg-gray-200 rounded w-8 mb-4" />

        {/* verified badge + location */}
        <div className="flex items-center gap-4 mb-4">
          <div className="h-4 w-4 bg-gray-200 rounded-full" />
          <div className="h-4 bg-gray-200 rounded w-1/4" />
          <div className="h-4 bg-gray-200 rounded w-1/2" />
        </div>

        {/* description lines */}
        <div className="space-y-2 mb-4">
          <div className="h-4 bg-gray-200 rounded w-full" />
          <div className="h-4 bg-gray-200 rounded w-3/4" />
        </div>

        {/* edit button placeholder */}
        <div className="flex gap-2">
          <div className="h-8 w-20 bg-gray-200 rounded" />
          <div className="h-8 w-12 bg-gray-200 rounded" />
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/[region]/shops/[slug]/PriceRange.jsx =====
import React, { useState } from "react";
import ReactSlider from "react-slider";
import "./PriceRange.css";

const PriceRange = () => {
  // Using one state array to store the two values [min, max]
  const [priceRange, setPriceRange] = useState([0, 1000]);

  return (
    <div
      className="price-range-container p-5 bg-white border border-[#dee2e6] drop-shadow-[0_0_10px_rgba(0,0,0,0.1)]"
      style={{ margin: "0px" }}
    >
      <label className="block text-sm font-medium mb-1">Price Range</label>
      <ReactSlider
        className="horizontal-slider"
        thumbClassName="thumb"
        trackClassName="track"
        value={priceRange}
        min={0}
        max={1000}
        onChange={(newValues) => setPriceRange(newValues)}
        withTracks={true}
      />
      <div className="flex justify-between mt-2">
        <span className="text-sm">Min: {priceRange[0]}</span>
        <span className="text-sm">Max: {priceRange[1]}</span>
      </div>
    </div>
  );
};

export default PriceRange;


===== src/app/(pages)/[region]/shops/[slug]/ProductCardSkeleton.jsx =====
"use client";
import React from "react";

export default function ProductCardSkeleton() {
  return (
    <div className="rounded-lg bg-white p-4 shadow-sm border-b border-gray-200 animate-pulse">
      {/* Image Placeholder */}
      <div className="mx-auto h-36 w-36 rounded bg-gray-300" />

      {/* Title Placeholder */}
      <div className="mt-4 h-4 bg-gray-300 rounded w-3/4 mx-auto" />

      {/* Price Placeholder */}
      <div className="mt-1 h-4 bg-gray-300 rounded w-1/3 mx-auto" />
    </div>
  );
}


===== src/app/(pages)/[region]/shops/[slug]/SearchResultSkeleton.jsx =====
"use client";
import React from "react";

export default function SearchResultSkeleton() {
  return (
    <div className="flex items-center p-4 border border-gray-200 rounded shadow animate-pulse bg-white mb-2">
      {/* Small image placeholder */}
      <div className="w-16 h-16 rounded bg-gray-300 flex-shrink-0"></div>
      {/* Content placeholders */}
      <div className="ml-4 flex flex-col space-y-2 flex-1">
        <div className="h-4 bg-gray-300 rounded w-1/2"></div>
        <div className="h-3 bg-gray-300 rounded w-3/4"></div>
        <div className="h-3 bg-gray-300 rounded w-1/4"></div>
      </div>
    </div>
  );
}


===== src/app/(pages)/[region]/shops/[slug]/ShopEditModal.jsx =====
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// You can update any of these fields on PATCH /api/shops/{slug}/update/:
//
// ‚Ä¢ name                (string)           ‚Äî your shop‚Äôs display name
// ‚Ä¢ description         (string)           ‚Äî rich-text body stored via ActionText
// ‚Ä¢ bg_color            (hex color, eg. #FFEECC)
// ‚Ä¢ shoptype_id         (integer)          ‚Äî the ID of one of your ShopType choices
// ‚Ä¢ shop_logo_upload    (file, image/png‚Ä¶) ‚Äî new logo image
// ‚Ä¢ top_banner_upload   (file, image/jpeg‚Ä¶)‚Äî new hero banner
// ‚Ä¢ video_upload        (file, video/mp4‚Ä¶) ‚Äî new shop video
//
// The server will return your updated Shop object (including fresh URLs).
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
"use client";

import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { API_BASE } from "@/app/constants"; // API_BASE already points at /api

export default function ShopEditModal({ isOpen, onClose, shop, onSave }) {
  const token = useSelector((s) => s.auth.token);
const TYPES_URL = `${API_BASE.replace(/\/$/, "")}/shoptypes/`;
  const [name, setName] = useState("");
  const [logoFile, setLogoFile] = useState(null);
  const [bannerFile, setBannerFile] = useState(null);
  const [videoFile, setVideoFile] = useState(null);
  const [description, setDescription] = useState("");
  const [bgColor, setBgColor] = useState("#ffffff");

  // shop types
  const [shopTypes, setShopTypes] = useState([]);
  const [typesLoading, setTypesLoading] = useState(false);
  const [typesError, setTypesError] = useState(null);
  const [selectedType, setSelectedType] = useState("");

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!shop) return;
    setName(shop.name || "");
    setDescription(shop.description || "");
    setBgColor(shop.bg_color || "#ffffff");
    setSelectedType(
      shop?.shoptype?.id
        ? String(shop.shoptype.id)
        : shop?.shoptype_id
        ? String(shop.shoptype_id)
        : ""
    );
    setLogoFile(null);
    setBannerFile(null);
    setVideoFile(null);
  }, [shop, isOpen]);

  // load shop types
useEffect(() => {
  if (!isOpen) return;                 // load when modal opens
  const ctrl = new AbortController();

  (async () => {
    setTypesLoading(true);
    try {
      // Keep it simple: no custom headers ‚Üí avoid unnecessary preflight/CORS issues
      const r = await fetch(TYPES_URL, { signal: ctrl.signal, cache: "no-store" });
      if (!r.ok) throw new Error(`Status ${r.status}`);
      const data = await r.json();

      // accept either an array or DRF paginated object
      const items = Array.isArray(data)
        ? data
        : Array.isArray(data?.results)
        ? data.results
        : [];

      setShopTypes(items);
      setTypesError(items.length ? null : "No shop types available");
    } catch (err) {
      console.error("Shop types fetch failed:", err);
      setShopTypes([]);
      setTypesError("Could not load shop types");
    } finally {
      setTypesLoading(false);
    }
  })();

  return () => ctrl.abort();
}, [isOpen]);  // ‚Üê reload each time the modal opens

  if (!isOpen) return null;

const handleSubmit = async () => {
  setLoading(true);
  setError(null);
  try {
    const formData = new FormData();
    formData.append("name", name);
    formData.append("description", description);
    formData.append("bg_color", bgColor);

    if (selectedType) {
      formData.append("shoptype_id", String(selectedType)); // DRF typical
      formData.append("shoptype", String(selectedType));     // alt write field
    }

    if (logoFile) formData.append("shop_logo_upload", logoFile);
    if (bannerFile) formData.append("top_banner_upload", bannerFile);
    if (videoFile) formData.append("video_upload", videoFile);

    const resp = await fetch(`${API_BASE}/shops/${shop.slug}/update/`, {
      method: "PATCH",
      headers: { Authorization: `Token ${token}` },
      body: formData,
    });
    if (!resp.ok) {
      const errText = await resp.text();
      throw new Error(`Update failed (${resp.status}): ${errText}`);
    }

    const updated = await resp.json();

    // üîÅ Ensure UI shows the chosen type immediately
    const chosenType =
      shopTypes.find(t => String(t.id) === String(selectedType)) || null;

    const hydrated = {
      ...updated,
      // support various API shapes
      shoptype:
        updated.shoptype ??
        (typeof updated.shop_type === "number"
          ? shopTypes.find(t => t.id === updated.shop_type)
          : null) ??
        chosenType,
    };

    onSave?.(hydrated);
    onClose();
  } catch (err) {
    console.error(err);
    setError(err.message);
  } finally {
    setLoading(false);
  }
};

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl h-[90vh] flex flex-col overflow-hidden">
        {/* Header */}
        <div className="px-6 py-4 border-b flex justify-between items-center">
          <h2 className="text-xl font-semibold">Edit Shop Info</h2>
          <button onClick={onClose} disabled={loading} className="text-gray-500 hover:text-gray-700">‚úï</button>
        </div>

        {/* Body */}
        <div className="p-6 overflow-y-auto flex-1 space-y-6">
          {error && <p className="text-sm text-red-600">{error}</p>}

          <div>
            <label className="block text-sm font-medium mb-1">Shop Name</label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full border rounded px-3 py-2"
              disabled={loading}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Description</label>
            <textarea
              rows={4}
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="w-full border rounded px-3 py-2"
              disabled={loading}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Background Color</label>
            <input
              type="color"
              value={bgColor}
              onChange={(e) => setBgColor(e.target.value)}
              className="h-10 w-16 p-0 border-0"
              disabled={loading}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Shop Type</label>
            <select
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
              className="w-full border rounded px-3 py-2"
              disabled={loading || typesLoading}
              aria-busy={typesLoading}
            >
              <option value="">{typesLoading ? "Loading types‚Ä¶" : "Choose a type"}</option>
              {shopTypes.map((t) => (
                <option key={t.id} value={String(t.id)}>
                  {t.name}
                </option>
              ))}
            </select>
            {typesError && <p className="mt-1 text-xs text-red-600">{typesError}</p>}
          </div>

          {/* Logo */}
          <div>
            <label className="block text-sm font-medium mb-1">Shop Logo</label>
            <div className="flex items-center gap-4 mb-2">
              {(logoFile && URL.createObjectURL(logoFile)) || shop?.shop_logo ? (
                <img
                  src={logoFile ? URL.createObjectURL(logoFile) : shop.shop_logo}
                  alt="Logo"
                  className="h-16 w-16 object-cover rounded"
                />
              ) : (
                <div className="h-16 w-16 bg-gray-100 rounded flex items-center justify-center text-gray-400">
                  No Logo
                </div>
              )}
            </div>
            <input
              type="file"
              accept="image/*"
              onChange={(e) => setLogoFile(e.target.files[0] || null)}
              disabled={loading}
            />
          </div>

          {/* Banner */}
          <div>
            <label className="block text-sm font-medium mb-1">Hero Banner</label>
            <div className="mb-2">
              {(bannerFile && URL.createObjectURL(bannerFile)) || shop?.top_banner ? (
                <img
                  src={bannerFile ? URL.createObjectURL(bannerFile) : shop.top_banner}
                  alt="Banner"
                  className="h-40 w-full object-cover rounded"
                />
              ) : (
                <div className="h-40 w-full bg-gray-100 rounded flex items-center justify-center text-gray-400">
                  No Banner
                </div>
              )}
            </div>
            <input
              type="file"
              accept="image/*"
              onChange={(e) => setBannerFile(e.target.files[0] || null)}
              disabled={loading}
            />
          </div>

          {/* Video */}
          <div>
            <label className="block text-sm font-medium mb-1">Video</label>
            <div className="mb-2">
              {videoFile ? (
                <video src={URL.createObjectURL(videoFile)} controls className="w-full rounded" />
              ) : shop?.video ? (
                <video src={shop.video} controls className="w-full rounded" />
              ) : (
                <div className="h-32 w-full bg-gray-100 rounded flex items-center justify-center text-gray-400">
                  No Video
                </div>
              )}
            </div>
            <input
              type="file"
              accept="video/*"
              onChange={(e) => setVideoFile(e.target.files[0] || null)}
              disabled={loading}
            />
          </div>
        </div>

        {/* Footer */}
        <div className="px-6 py-4 border-t flex justify-end gap-2">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
            disabled={loading}
          >
            Cancel
          </button>
          {!loading && (
            <button
              onClick={handleSubmit}
              className="px-4 py-2 bg-violet-700 text-white rounded disabled:opacity-50"
            >
              Update
            </button>
          )}
          {loading && (
            <button type="button" className="text-xl px-4 py-2 bg-[#A435F0] text-white rounded-md" disabled>
              <div className="flex space-x-2 justify-center items-center h-6">
                <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.3s]" />
                <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.15s]" />
                <div className="h-2 w-2 bg-white rounded-full animate-bounce" />
              </div>
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

===== src/app/(pages)/[region]/shops/[slug]/ShopPageClient.jsx =====
// app/(pages)/[region]/shops/[slug]/ShopPageClient.jsx
"use client";

import React, { useState, useEffect, useRef, useMemo, useCallback } from "react";
import Image from "next/image";

import { pickProductImage, fixImageUrl, FALLBACK_IMAGE } from '@/lib/image';

import Link from "next/link";
import { useSelector } from "react-redux";
import qs from "query-string";

import { API_BASE, SITE_BASE_URL, BASE_API_URL } from "@/app/constants";
const IMAGE_BASE =
  process.env.NEXT_PUBLIC_IMAGE_BASE_URL || SITE_BASE_URL || BASE_API_URL;

import {
  AiOutlineLeft,
  AiOutlineRight,
  AiOutlineSearch,
  AiOutlineClose,
  AiOutlineFilter,
} from "react-icons/ai";
import { FaStar, FaPhoneAlt, FaCommentDots } from "react-icons/fa";

import ShopBadges from "../ShopBadges";

import ShopCard from "@/components/home/ProductList/ShopCard";
import ShopFAQSection from "@/components/ShopFAQSection";
import ProductCardSkeleton from "./ProductCardSkeleton";
import SearchResultSkeleton from "./SearchResultSkeleton";
import PriceRange from "./PriceRange";
import ShopEditModal from "./ShopEditModal";
import HeroSectionSkeleton from "./HeroSectionSkeleton";
import ShopProfileCard from "./ShopProfileCard";
import DirectBuyPopup from "@/components/DirectBuyPopup";

import ShopRichArticle from "@/components/ShopRichArticle";

// ‚¨áÔ∏è Reusable contact sheet + PDP-aligned gating helpers
import ContactSheet from "@/components/ContactSheet";
import { canDisplaySellerContact, pickShopPhone } from "@/lib/seller-contact";

const PAGE_SIZE = 20;

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const mapSort = (val) => {
  if (val === "price") return "price_cents";
  if (val === "-price") return "-price_cents";
  return val;
};

const absolutize = (url) => {
  if (!url) return null;
  if (/^https?:\/\//i.test(url)) return url;
  if (url.startsWith("//")) return `https:${url}`;
  const base = (IMAGE_BASE || "").replace(/\/$/, "");
  return `${base}${url.startsWith("/") ? "" : "/"}${url}`;
};

const pickResultImage = (p) =>
  p?.thumbnail ||
  p?.image_objects?.[0]?.image_url ||
  p?.image_objects?.[0]?.url ||
  (Array.isArray(p?.product_images) && p.product_images[0]) ||
  (Array.isArray(p?.ordered_product_images) && p.ordered_product_images[0]) ||
  (Array.isArray(p?.images) && p.images[0]) ||
  null;


// Make sure every product carries a ready-to-use image in the places most cards look.
const hydrateCardImage = (p) => {
  const url = pickProductImage(p); // already runs through fixImageUrl + fallback
  if (!url) return p;
  return {
    ...p,
    // single-field styles
    thumbnail: url,
    image_url: url,
    image: url,
    main_image: url,
    product_image_url: url,
    // array styles
    product_images: Array.isArray(p.product_images) && p.product_images.length
      ? p.product_images
      : [url],
    images: Array.isArray(p.images) && p.images.length ? p.images : [url],
    image_objects: Array.isArray(p.image_objects) && p.image_objects.length
      ? p.image_objects
      : [{ url }],
  };
};


/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ event helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const hasFiredShopContactFor = (slug) => {
  try {
    return sessionStorage.getItem(`scf:${slug}`) === "1";
  } catch {
    return false;
  }
};
const markFiredShopContactFor = (slug) => {
  try {
    sessionStorage.setItem(`scf:${slug}`, "1");
  } catch {}
};
const getOrCreateSessionId = () => {
  try {
    const k = "upfrica_sid";
    let id = localStorage.getItem(k);
    if (!id) {
      id = Math.random().toString(36).slice(2) + Date.now().toString(36);
      localStorage.setItem(k, id);
    }
    return id;
  } catch {
    return "";
  }
};
const postShopContactClick = async (slug, source = "shop") => {
  const url = `${API_BASE}/shops/${slug}/event/`;
  const payload = JSON.stringify({
    event: "contact_click",
    session_id: getOrCreateSessionId(),
    source,
  });

  try {
    if (navigator.sendBeacon) {
      const blob = new Blob([payload], { type: "application/json" });
      navigator.sendBeacon(url, blob);
      return;
    }
  } catch {
    // fall-through to fetch
  }

  try {
    await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      keepalive: true,
      body: payload,
    });
  } catch {
    // silent fail ‚Äì UI should not block on analytics
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pagination ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const update = () => setIsMobile(window.innerWidth <= 768);
    update();
    window.addEventListener("resize", update);
    return () => window.removeEventListener("resize", update);
  }, []);

  const handleClick = (p) => {
    if (p >= 1 && p <= totalPages && p !== currentPage) onPageChange(p);
  };

  const pages = () => {
    if (isMobile)
      return totalPages <= 2 ? [1, ...(totalPages === 2 ? [2] : [])] : [1, 2, "‚Ä¶"];
    if (totalPages <= 5) return Array.from({ length: totalPages }, (_, i) => i + 1);
    if (currentPage <= 3) return [1, 2, 3, 4, "‚Ä¶", totalPages];
    if (currentPage >= totalPages - 2)
      return [1, "‚Ä¶", totalPages - 3, totalPages - 2, totalPages - 1, totalPages];
    return [1, "‚Ä¶", currentPage - 1, currentPage, currentPage + 1, "‚Ä¶", totalPages];
  };

  return (
    <div className="mt-8 flex justify-center overflow-x-auto">
      <button
        onClick={() => handleClick(currentPage - 1)}
        disabled={currentPage === 1}
        className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
      >
        <AiOutlineLeft className="mr-1" /> Prev
      </button>

      {pages().map((p, i) =>
        p === "‚Ä¶" ? (
          <span key={i} className="px-3 py-1 text-gray-500">‚Ä¶</span>
        ) : (
          <button
            key={i}
            onClick={() => handleClick(p)}
            className={`px-3 py-1 rounded border border-gray-300 hover:bg-gray-100 ${
              p === currentPage ? "bg-violet-700 text-white font-semibold" : ""
            }`}
          >
            {p}
          </button>
        )
      )}

      <button
        onClick={() => handleClick(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
      >
        Next <AiOutlineRight className="ml-1" />
      </button>
    </div>
  );
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main page ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export default function ShopPageClient({ slug }) {
  // auth
  const { user } = useSelector((s) => s.auth);

  // shop meta
  const [shop, setShop] = useState(null);
  const [mainError, setMainError] = useState(null);

  // products & pagination
  const [mainProducts, setMainProducts] = useState([]);
  const [filterProducts, setFilterProducts] = useState([]);
  const [mainLoading, setMainLoading] = useState(true);
  const [filterLoading, setFilterLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  // filters
  const [shopCategories, setShopCategories] = useState([]);
  const [categoriesLoading, setCategoriesLoading] = useState(true);
  const [shopConditions, setShopConditions] = useState([]);
  const [conditionsLoading, setConditionsLoading] = useState(true);

  const [selectedCategoryId, setSelectedCategoryId] = useState("");
  const [selectedConditionId, setSelectedConditionId] = useState("");
  const [sortOption, setSortOption] = useState("");
  const [priceMin, setPriceMin] = useState(0);
  const [priceMax, setPriceMax] = useState(1000);

  // search
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const searchDebounce = useRef();

  // sidebar & edit
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isEditOpen, setIsEditOpen] = useState(false);

  // direct-buy popup
  const [currentProduct, setCurrentProduct] = useState(null);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [relatedProducts, setRelatedProducts] = useState([]);
  const [relatedLoading, setRelatedLoading] = useState(false);
  const [relatedError, setRelatedError] = useState(null);

  // contact sheet open
  const [contactOpen, setContactOpen] = useState(false);

  // mobile flag for bottom bar
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const update = () => setIsMobile(window.innerWidth <= 768);
    update();
    window.addEventListener("resize", update);
    return () => window.removeEventListener("resize", update);
  }, []);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ fetch shop + unfiltered products ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const fetchMain = async (signal) => {
    setMainLoading(true);
    try {
      const res = await fetch(
        `${API_BASE}/shops/${slug}/products/?page=${currentPage}`,
        { signal }
      );
      if (!res.ok) throw new Error(`Failed to load (HTTP ${res.status})`);
// in fetchMain()
const data = await res.json();
setMainProducts((data.results || []).map(hydrateCardImage));
setShop(data.shop || null);
setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      setMainError(null);
    } catch (err) {
      if (err.name !== "AbortError") setMainError(err);
    } finally {
      setMainLoading(false);
    }
  };

  useEffect(() => {
    const ctrl = new AbortController();
    fetchMain(ctrl.signal);
    return () => ctrl.abort();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [slug, currentPage]);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ fetch categories & conditions (once) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  useEffect(() => {
    const ctrl = new AbortController();

    (async () => {
      setCategoriesLoading(true);
      try {
        const r = await fetch(`${API_BASE}/shops/${slug}/categories/`, {
          signal: ctrl.signal,
        });
        const data = r.ok ? await r.json() : [];
        setShopCategories(Array.isArray(data) ? data : []);
      } catch {
        setShopCategories([]);
      } finally {
        setCategoriesLoading(false);
      }
    })();

    (async () => {
      setConditionsLoading(true);
      try {
        const r = await fetch(`${API_BASE}/shops/${slug}/conditions/`, {
          signal: ctrl.signal,
        });
        const data = r.ok ? await r.json() : [];
        setShopConditions(Array.isArray(data) ? data : []);
      } catch {
        setShopConditions([]);
      } finally {
        setConditionsLoading(false);
      }
    })();

    return () => ctrl.abort();
  }, [slug]);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ build & fetch filtered products ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const buildFilterQS = () => {
    const params = {};
    if (selectedCategoryId) params.category = selectedCategoryId;
    if (selectedConditionId) params.condition = selectedConditionId;
    if (priceMin !== 0) params.min_price = priceMin;
    if (priceMax !== 1000) params.max_price = priceMax;
    if (sortOption) params.ordering = mapSort(sortOption);
    if (searchQuery.trim()) params.q = searchQuery.trim();
    params.page = currentPage;
    return qs.stringify(params);
  };

  useEffect(() => {
    const noFilters =
      !selectedCategoryId &&
      !selectedConditionId &&
      priceMin === 0 &&
      priceMax === 1000 &&
      !sortOption &&
      !searchQuery.trim();

    if (noFilters) {
      setFilterProducts([]);
      return;
    }

    const ctrl = new AbortController();
    (async () => {
      setFilterLoading(true);
      try {
        const qsStr = buildFilterQS();
        const res = await fetch(
          `${API_BASE}/shops/${slug}/products/filter/?${qsStr}`,
          { signal: ctrl.signal }
        );
        if (!res.ok) throw new Error(`Filter failed (HTTP ${res.status})`);
const data = await res.json();
setFilterProducts((data.results || []).map(hydrateCardImage));
setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      } catch (err) {
        if (err.name !== "AbortError") console.error(err);
      } finally {
        setFilterLoading(false);
      }
    })();
    return () => ctrl.abort();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    selectedCategoryId,
    selectedConditionId,
    priceMin,
    priceMax,
    sortOption,
    searchQuery,
    currentPage,
    slug,
  ]);

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ debounced search dropdown ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  useEffect(() => {
    if (searchDebounce.current) clearTimeout(searchDebounce.current);
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/[region]/shops/[slug]/ShopProfileCard.jsx =====
// src/app/(pages)/shops/ShopProfileCard.jsx
"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import {
  FacebookShareButton,
  TwitterShareButton,
  WhatsappShareButton,
  LinkedinShareButton,
  FacebookIcon,
  TwitterIcon,
  WhatsappIcon,
  LinkedinIcon,
} from "next-share";

import { FaTiktok, FaInstagram, FaYoutube } from "react-icons/fa"; // Add these

import { CopyToClipboard } from "react-copy-to-clipboard";
import {
  FaCopy,
  FaCheckCircle,
  FaEdit,
  FaTimes,
  FaHeart,
  FaRegHeart,
} from "react-icons/fa";
import { FiShare2 } from "react-icons/fi";
import { motion, AnimatePresence } from "framer-motion";

import { BASE_API_URL } from "@/app/constants";
import { getCleanToken } from "@/lib/getCleanToken";

/* ----------------------------- helpers ----------------------------- */

// Always hit /api and avoid double slashes
const API_BASE = (BASE_API_URL || "").replace(/\/+$/, "");
const apiUrl = (path) => `${API_BASE}/api/${String(path).replace(/^\/+/, "")}`;

const codeToFlag = (code) => {
  if (!code || typeof code !== "string") return "üåç";
  const cc = code.trim().slice(0, 2).toUpperCase();
  return String.fromCodePoint(...[...cc].map((c) => 0x1f1a5 + c.charCodeAt()));
};

const deriveLocFromShop = (shop) => {
  const town = shop?.user?.town || shop?.town || shop?.user?.city || "";
  const countryObj = shop?.user?.country || shop?.country;
  const code =
    countryObj?.code ||
    shop?.user?.country_code ||
    shop?.country_code ||
    shop?.seller_country ||
    shop?.listing_country_code ||
    "";
  const flag = countryObj?.flag_emoji || (code ? codeToFlag(code) : "üåç");
  return {
    town: town || "",
    countryCode: (code || "").slice(0, 2).toUpperCase(),
    flagEmoji: flag,
  };
};

/* ------------------------------------------------------------------- */

export default function ShopProfileCard({ shop, setIsEditOpen }) {
  const router = useRouter();
  const { user: currentUser } = useSelector((s) => s.auth);
  const cleanToken = getCleanToken();

  // seller/ownership
  const shopOwnerId = shop?.user?.id ?? null;
  const isOwner = !!(currentUser?.id && shopOwnerId && currentUser.id === shopOwnerId);

  // share state
  const [copied, setCopied] = useState(false);
  const [shareModalOpen, setShareModalOpen] = useState(false);
  const [currentUrl, setCurrentUrl] = useState("");

  // follow & counts
  const [isFollowing, setIsFollowing] = useState(false);
  const [followersCount, setFollowersCount] = useState(0);
  const [productsCount, setProductsCount] = useState(undefined);
  const [loadingFollow, setLoadingFollow] = useState(false);

  // location
  const initialLoc = deriveLocFromShop(shop);
  const [town, setTown] = useState(initialLoc.town);
  const [countryCode, setCountryCode] = useState(initialLoc.countryCode);
  const [flagEmoji, setFlagEmoji] = useState(initialLoc.flagEmoji);

  useEffect(() => {
    if (typeof window !== "undefined") setCurrentUrl(window.location.href);
  }, [router]);

  /* 1) Follow status (also provides follower count)
     NOTE: fetch even if isOwner so we can display the count. */
  useEffect(() => {
    if (!shopOwnerId) return;
    if (!cleanToken) return; // endpoint requires auth

    fetch(apiUrl(`/users/${shopOwnerId}/follow/status/`), {
      headers: { Authorization: `Token ${cleanToken}` },
    })
      .then((res) => (res.ok ? res.json() : null))
      .then((data) => {
        if (!data) return;

        // Only set "isFollowing" if not owner (button is hidden for owner anyway)
        if (!isOwner) setIsFollowing(!!data.is_following);

        const fCount = Number(data.followers_count ?? data.follower_count ?? 0);
        setFollowersCount(isNaN(fCount) ? 0 : fCount);

        if (typeof data.products_count === "number") {
          setProductsCount(data.products_count);
        }
      })
      .catch(() => {});
  }, [shopOwnerId, cleanToken, isOwner]);

  /* 2) Storefront summary ‚Üí location + products_count */
  useEffect(() => {
    if (!shopOwnerId) return;

    (async () => {
      try {
        const r = await fetch(apiUrl(`/users/${shopOwnerId}/storefront-summary/`), {
          cache: "no-store",
        });
        if (!r.ok) return;
        const d = await r.json();

        const nextTown = d.town || town || "";
        const c = d.country || {};
        const nextCode = (c.code || countryCode || "").slice(0, 2).toUpperCase();
        const nextFlag = c.flag_emoji || flagEmoji || (nextCode ? codeToFlag(nextCode) : "üåç");

        setTown(nextTown);
        setCountryCode(nextCode);
        setFlagEmoji(nextFlag);

        if (typeof d.products_count === "number") {
          setProductsCount(d.products_count);
        }
      } catch {}
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [shopOwnerId]);

  /* 3) Last-resort product count */
  useEffect(() => {
    if (typeof productsCount === "number") return;
    const slug = shop?.slug;
    if (!slug) return;

    (async () => {
      try {
        const r = await fetch(apiUrl(`/shops/${slug}/products/?page=1`), {
          cache: "no-store",
        });
        if (r.ok) {
          const d = await r.json();
          if (typeof d?.count === "number") {
            setProductsCount(d.count);
            return;
          }
        }
      } catch {}
      if (typeof shop?.products_count === "number") setProductsCount(shop.products_count);
      else setProductsCount(0);
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [shop?.slug, productsCount]);

  // toggle follow/unfollow
  const handleToggleFollow = async () => {
    if (!shopOwnerId) return;
    if (isOwner) return; // cannot follow yourself

    if (!cleanToken) {
      alert("Please log in to follow sellers.");
      return;
    }

    setLoadingFollow(true);
    try {
      const res = await fetch(apiUrl(`/users/${shopOwnerId}/follow/`), {
        method: isFollowing ? "DELETE" : "POST",
        headers: { Authorization: `Token ${cleanToken}` },
      });

      if (!res.ok) {
        const errData = await res.json().catch(() => ({}));
        if (res.status === 400 && (errData.detail === "Can't follow yourself." || errData.error)) {
          alert(errData.detail || errData.error);
          return;
        }
        throw new Error(errData.detail || "Follow action failed");
      }

      setIsFollowing((f) => !f);
      setFollowersCount((n) => n + (isFollowing ? -1 : 1));
    } catch {
      alert("Could not update follow status.");
    } finally {
      setLoadingFollow(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(currentUrl).catch(() => {});
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  if (!shop || !shop.name) {
    return (
      <div className="flex items-center justify-center h-40">
        <span className="text-gray-400 animate-pulse">Loading shop...</span>
      </div>
    );
  }

  const shopType = shop.shoptype?.name || shop.shoptype_name || "General Goods";
  const locationText = [town, countryCode].filter(Boolean).join(", ");

  return (
    <div className="relative w-full animate-fadeInUp">
      {/* Background Cover */}
      <img
        src={shop.top_banner || "https://images.pexels.com/photos/34577/pexels-photo.jpg"}
        alt="Shop Banner"
        className="w-full object-cover h-[240px] md:h-[320px] rounded-lg"
      />

      {/* Profile Card */}
      <div className="absolute inset-0 flex items-center justify-center px-4">
        <div className="bg-white/80 backdrop-blur-md rounded-lg shadow-lg p-4 w-full max-w-md text-center space-y-4">
          {/* Logo */}
          <div className="h-20 w-20 rounded-full bg-gray-200 overflow-hidden mx-auto">
            {shop.shop_logo ? (
              <img
                src={shop.shop_logo}
                alt="Shop Logo"
                className="object-cover w-full h-full"
                onError={(e) => (e.currentTarget.style.display = "none")}
              />
            ) : (
              <div className="h-full w-full flex items-center justify-center text-gray-500">
                Logo
              </div>
            )}
          </div>

          {/* Name + Edit */}
          <div className="flex items-center justify-center gap-2">
            <h1 className="text-2xl font-bold text-gray-800">{shop.name}</h1>
            {isOwner && (
              <motion.button
                onClick={() => setIsEditOpen(true)}
                className="p-1 rounded-full hover:bg-gray-200"
                title="Edit Shop"
                whileTap={{ scale: 0.9 }}
              >
                <FaEdit className="text-gray-500 text-sm" />
              </motion.button>
            )}
          </div>

          {/* Category */}
          <p className="text-gray-600">{shopType}</p>

          {/* Actions */}
          <div className="flex items-center justify-center gap-4">
            {!isOwner && (
              <button
                onClick={handleToggleFollow}
                disabled={loadingFollow}
                className={`flex items-center gap-2 px-4 py-2 rounded-full font-semibold transition ${
                  isFollowing
                    ? "bg-gray-200 text-violet-700 border border-violet-700"
                    : "bg-white text-gray-700 border border-gray-300"
                } disabled:opacity-50`}
              >
                {loadingFollow ? (
                  <div className="flex space-x-1">
                    <div className="h-2 w-2 bg-gray-700 rounded-full animate-bounce" />
                    <div className="h-2 w-2 bg-gray-700 rounded-full animate-bounce [animation-delay:-0.15s]" />
                    <div className="h-2 w-2 bg-gray-700 rounded-full animate-bounce [animation-delay:-0.3s]" />
                  </div>
                ) : (
                  <>
                    {isFollowing ? <FaHeart className="text-violet-700" /> : <FaRegHeart className="text-gray-600" />}
                    <span>{isFollowing ? "Following" : "Follow"}</span>
                  </>
                )}
              </button>
            )}

            <span>
              {followersCount} follower{followersCount !== 1 && "s"}
            </span>

            <motion.button
              onClick={() => setShareModalOpen(true)}
              whileTap={{ scale: 0.9 }}
              className="p-2 rounded-full hover:bg-gray-200"
              title="Share shop"
            >
              <FiShare2 className="text-lg" />
            </motion.button>
          </div>

          {/* Counts / Location */}
          <div className="pb-8 md:pb-0 flex flex-wrap items-center justify-center gap-2 text-gray-700 text-sm">
            <span>{typeof productsCount === "number" ? productsCount : "‚Äî"} items</span>
            <span>
              {flagEmoji} {locationText || " "}
            </span>
          </div>
        </div>
      </div>

      {/* Share Modal */}
      <AnimatePresence>
        {shareModalOpen && (
          <>
            <motion.div
              className="fixed inset-0 bg-black bg-opacity-40 z-40"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShareModalOpen(false)}
            />
            <motion.div
              className="fixed inset-0 flex items-center justify-center z-50"
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
            >
              <div className="relative bg-white rounded-lg p-6 space-y-4 max-w-xs w-full">
                <button
                  onClick={() => setShareModalOpen(false)}
                  className="absolute top-2 right-2 p-1 rounded hover:bg-gray-100"
                  title="Close"
                >
                  <FaTimes className="text-gray-600" />
                </button>

                <h2 className="text-lg font-semibold">Share this shop</h2>

    <div className="flex flex-wrap justify-around gap-4 mt-4">
      {/* WhatsApp */}
      <WhatsappShareButton url={currentUrl} title={shop.name}>
        <WhatsappIcon size={48} round />
      </WhatsappShareButton>

      {/* Facebook */}
      <FacebookShareButton url={currentUrl} quote={shop.name}>
        <FacebookIcon size={48} round />
      </FacebookShareButton>

      {/* Twitter */}
      <TwitterShareButton url={currentUrl} title={shop.name}>
        <TwitterIcon size={48} round />
      </TwitterShareButton>

      {/* LinkedIn */}
      <LinkedinShareButton url={currentUrl} title={shop.name}>
        <LinkedinIcon size={48} round />
      </LinkedinShareButton>

      {/* TikTok (link to your page or show "Copy link") */}
      <a
        href="https://www.tiktok.com/@upfrica.gh"
        target="_blank"
        rel="noopener noreferrer"
        className="hover:opacity-80"
      >
        <FaTiktok size={48} className="text-black rounded-full" />
      </a>

      {/* Instagram */}
      <a
        href="https://www.instagram.com/upfrica"
        target="_blank"
        rel="noopener noreferrer"
        className="hover:opacity-80"
      >
        <FaInstagram size={48} className="text-pink-500 rounded-full" />
      </a>

      {/* YouTube */}
      <a
        href="https://www.youtube.com/@upfricamarketplace8512"
        target="_blank"
        rel="noopener noreferrer"
        className="hover:opacity-80"
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/[region]/shops/[slug]/ShopProfileSkeleton.jsx =====
"use client";

export default function ShopProfileSkeleton() {
  return (
    <div className="relative w-full animate-pulse">
      {/* Background skeleton */}
      <div className="w-full h-[240px] md:h-[320px] bg-gray-200 rounded-lg" />

      {/* Overlay Card Skeleton */}
      <div className="absolute inset-0 flex items-center justify-center px-4">
        <div className="bg-white/80 backdrop-blur-md rounded-lg shadow-lg p-6 w-full max-w-md flex flex-col items-center text-center gap-3 mt-4 md:mt-0">
          {/* Logo Circle */}
          <div className="h-20 w-20 rounded-full bg-gray-300" />

          {/* Shop Name */}
          <div className="h-6 w-40 bg-gray-300 rounded" />

          {/* Shop Type */}
          <div className="h-4 w-24 bg-gray-200 rounded" />

          {/* Follow / Share Skeleton */}
          <div className="flex items-center gap-4 mt-2">
            <div className="h-8 w-24 bg-gray-300 rounded-full" />
            <div className="h-4 w-16 bg-gray-200 rounded" />
            <div className="h-4 w-16 bg-gray-200 rounded" />
          </div>

          {/* Info line */}
          <div className="flex items-center gap-2 mt-1">
            <div className="h-4 w-32 bg-gray-200 rounded" />
          </div>
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/[region]/shops/[slug]/page.jsx =====
// src/app/(pages)/[region]/shops/[slug]/page.jsx
import ShopPageClient from "./ShopPageClient";
import FaqJsonLd from "./FaqJsonLd";
import { cookies } from "next/headers";
import { redirect, notFound } from "next/navigation";
import { BASE_API_URL } from "@/app/constants";

// ‚úÖ centralized SEO builders
import { buildBaseMetadata, buildShopMetadata } from "@/lib/seo/builders";

/* ---------------- data helpers ---------------- */
function getAuthHeaders() {
  const t = cookies().get("auth_token")?.value || cookies().get("token")?.value;
  return t ? { Authorization: `Token ${t}` } : {};
}

async function fetchShopBundle(slug) {
  try {
    const r = await fetch(`${BASE_API_URL}/api/shops/${slug}/products/`, {
      headers: getAuthHeaders(),
      next: { revalidate: 300 },
    });
    return r.ok ? await r.json() : null;
  } catch {
    return null;
  }
}

/* ---------------- metadata ---------------- */
export async function generateMetadata({ params }) {
  const { region, slug } = params;
  const data = await fetchShopBundle(slug);
  const cc = String(region || "").toLowerCase();

  if (!data) {
    return buildBaseMetadata({
      title: "Shop",
      description: "Explore verified African shops and sellers on Upfrica.",
      canonicalPath: `/${cc}/shops/${slug}`,
      images: [],
      type: "website",
    });
  }

  const shop = data.shop || {};
  const base = buildShopMetadata({
    shop,
    products: data.results,
    region: cc,
    slug,
  });

  // Smart robots: noindex if inactive or 0 listings (unless overridden)
  const shouldNoIndex =
    (shop.is_active === false || (data.count ?? 0) === 0) &&
    !Boolean(shop?.shop_attributes?.seo_index_override);

  return {
    ...base,
    robots: shouldNoIndex
      ? { index: false, follow: true }
      : base.robots ?? { index: true, follow: true },
  };
}

/* ---------------- page ---------------- */
export default async function Page({ params }) {
  const { region, slug } = params;
  const data = await fetchShopBundle(slug);

  // If the shop truly doesn't exist
  if (!data || !data.shop) {
    notFound();
  }

  const shop = data.shop;

  // Normalize to canonical region if we know it
  const cc = shop?.user?.country_code?.toLowerCase();
  if (cc && cc !== String(region).toLowerCase()) {
    redirect(`/${cc}/shops/${slug}`);
  }

  return (
    <>
      {/* Server-rendered JSON-LD for SEO */}
      {shop?.faq_schema && <FaqJsonLd schema={shop.faq_schema} />}

      {/* Pass initial bundle to avoid an extra client fetch */}
      <ShopPageClient
        slug={slug}
        country={region?.toLowerCase()}
        initialBundle={data}   // ‚Üê hydrate on the client first
      />
    </>
  );
}

===== src/app/(pages)/[region]/shops/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <>
      <Header />
      {children}
      <Footer />
    </>
  );
};

export default layout;


===== src/app/(pages)/[region]/shops/page.jsx =====
// src/app/(pages)/[region]/shops/page.jsx
import { cookies } from "next/headers";
import { BASE_API_URL } from "@/app/constants";
import ShopsPageClient from "./ShopsPageClient";

/* ---------------- utils ---------------- */
function authHeaders() {
  const t = cookies().get("auth_token")?.value || cookies().get("token")?.value;
  return t ? { Authorization: `Token ${t}` } : {};
}

async function getJSON(url) {
  try {
    const r = await fetch(url, { headers: authHeaders(), next: { revalidate: 300 } });
    if (!r.ok) return null;
    return await r.json();
  } catch {
    return null;
  }
}

/**
 * Featured/sponsored shops.
 * Tries a few sensible endpoints; returns [] on failure.
 */
async function fetchFeatured(page = 1) {
  const candidates = [
    `${BASE_API_URL}/api/shops/search/?featured=1&page=${page}`,
    `${BASE_API_URL}/api/shops/featured/?page=${page}`,
    `${BASE_API_URL}/api/shops/search/?sponsored=1&page=${page}`,
  ];
  for (const u of candidates) {
    const data = await getJSON(u);
    if (data && (data.results || data.shops)) return data;
  }
  return { results: [] };
}

/**
 * Active (entitled) shops with at least one published product.
 * Falls back to a broader list if your bespoke endpoint is unavailable.
 */
async function fetchActive(page = 1) {
  const candidates = [
    `${BASE_API_URL}/api/shops/search/?entitled=1&page=${page}`,
    `${BASE_API_URL}/api/shops/?page=${page}`, // fallback
  ];
  for (const u of candidates) {
    const data = await getJSON(u);
    if (data && (data.results || data.shops)) return data;
  }
  return { results: [] };
}

export default async function Page({ params, searchParams }) {
  const region = String(params?.region || "").toLowerCase();
  const page = Number(searchParams?.page || 1);

  const [featured, active] = await Promise.all([
    fetchFeatured(1),
    fetchActive(page),
  ]);

  return (
    <ShopsPageClient
      region={region}
      initialFeatured={featured}
      initialShops={active}
    />
  );
}

===== src/app/(pages)/[region]/shoptypes/[slug]/ShopTypePageClient.jsx =====
"use client";

import React, { useCallback, useEffect, useMemo, useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { HiAdjustments, HiChevronRight, HiSearch } from "react-icons/hi";
import { BASE_API_URL } from "@/app/constants";

/* -------------------- utils -------------------- */
function cx(...xs) { return xs.filter(Boolean).join(" "); }

function normalizeShop(s, region) {
  return {
    id: s.id,
    name: s.name,
    slug: s.slug,
    town: s.user?.town ?? s.town ?? "",
    country_name: s.user?.country_name ?? s.country_name ?? "",
    active_listings: s.active_listings ?? 0,
    shop_logo: s.shop_logo || null,
    top_banner: s.top_banner || null,
    href: `/${region}/shops/${s.slug}`,
    // keep any additional fields if your API adds later
  };
}

function parseListPayload(payload, region, typeSlug) {
  if (!payload) return { items: [], next: null, count: 0 };

  const results = payload.results ?? payload.shops ?? payload.items ?? payload.data ?? [];
  const next = payload.next ?? null;
  const count = payload.count ?? results.length;

  let items = (results || []).map((s) => normalizeShop(s, region));

  // Fallback filter: if we ended up calling a generic list endpoint
  // and each shop includes its shoptype, filter by slug here.
  if (typeSlug && results?.length && results[0]?.shoptype?.slug) {
    items = items.filter((_, i) => results[i].shoptype?.slug === typeSlug);
  }

  return { items, next, count };
}

/* -------------------- skeletons -------------------- */
function Skeleton({ className = "" }) {
  return <div className={cx("animate-pulse bg-gray-200/70 dark:bg-neutral-800 rounded", className)} />;
}
function ShopCardSkeleton() {
  return (
    <div className="border rounded-xl p-3 bg-white dark:bg-neutral-900 shadow-sm">
      <Skeleton className="h-28 w-full rounded-lg mb-3" />
      <div className="flex gap-3">
        <Skeleton className="h-12 w-12 rounded-full" />
        <div className="flex-1">
          <Skeleton className="h-4 w-5/6 mb-2" />
          <Skeleton className="h-3 w-2/3" />
        </div>
      </div>
      <Skeleton className="h-8 w-full mt-3" />
    </div>
  );
}

/* -------------------- small UI atoms -------------------- */
function Chip({ active, children, onClick }) {
  return (
    <button
      onClick={onClick}
      className={cx(
        "px-3 py-1.5 rounded-full border text-sm transition",
        active
          ? "bg-violet-600 text-white border-violet-600"
          : "bg-white dark:bg-neutral-900 text-gray-800 dark:text-gray-100 border-gray-300 dark:border-neutral-700 hover:bg-gray-50 dark:hover:bg-neutral-800"
      )}
    >
      {children}
    </button>
  );
}

/* -------------------- card -------------------- */
function ShopCard({ shop, region }) {
  return (
    <article className="group border rounded-xl bg-white dark:bg-neutral-900 shadow-sm hover:shadow-md transition overflow-hidden">
      <div className="relative h-28 w-full bg-gray-100 dark:bg-neutral-800">
        {shop.top_banner ? <Image src={shop.top_banner} alt="" fill className="object-cover" /> : null}
      </div>

      <div className="p-3">
        <div className="flex items-center gap-3">
          <div className="relative w-12 h-12 rounded-full overflow-hidden border bg-white dark:bg-neutral-900">
            {shop.shop_logo ? <Image src={shop.shop_logo} alt={`${shop.name} logo`} fill className="object-cover" /> : null}
          </div>
          <div className="min-w-0">
            <h3 className="font-semibold truncate">{shop.name}</h3>
            <p className="text-xs text-gray-600 dark:text-gray-300 truncate">
              {shop.town}{shop.country_name ? `, ${shop.country_name}` : ""}
            </p>
          </div>
        </div>

        <p className="text-xs text-gray-600 dark:text-gray-300 mt-2">
          {shop.active_listings}+ items ‚Ä¢ Fast delivery
        </p>

        <Link
          href={shop.href || `/${region}/shops/${shop.slug}`}
          className="mt-3 inline-flex w-full items-center justify-center gap-2 rounded-lg border border-gray-300 dark:border-neutral-700 px-3 py-2 text-sm font-medium hover:bg-gray-50 dark:hover:bg-neutral-800"
        >
          View shop <HiChevronRight />
        </Link>
      </div>
    </article>
  );
}

/* -------------------- filters -------------------- */
function FiltersBar({ search, setSearch, sort, setSort, onOpenFilters, total }) {
  return (
    <div className="flex flex-col sm:flex-row sm:items-center gap-3">
      <div className="relative flex-1">
        <HiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
        <input
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="Search shops in this category‚Ä¶"
          className="w-full pl-10 pr-3 py-2 rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900"
        />
      </div>

      <div className="flex items-center gap-2">
        <select
          value={sort}
          onChange={(e) => setSort(e.target.value)}
          className="rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm"
        >
          <option value="relevance">Relevance</option>
          <option value="listings_desc">Most Listings</option>
          <option value="name_asc">Name A‚ÄìZ</option>
        </select>

        <button
          onClick={onOpenFilters}
          className="inline-flex items-center gap-2 rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm"
        >
          <HiAdjustments className="w-4 h-4" />
          Filters {typeof total === "number" ? <span className="ml-1 text-xs text-gray-500">({total})</span> : null}
        </button>
      </div>
    </div>
  );
}

function DesktopFilters({ cities, city, setCity }) {
  return (
    <aside className="hidden lg:block w-64 shrink-0">
      <div className="sticky top-4 space-y-6">
        <div>
          <h4 className="font-semibold mb-2">City</h4>
          <div className="flex flex-wrap gap-2">
            <Chip active={city === ""} onClick={() => setCity("")}>All</Chip>
            {cities.map((c) => (
              <Chip key={c} active={city === c} onClick={() => setCity(c)}>{c}</Chip>
            ))}
          </div>
        </div>
      </div>
    </aside>
  );
}

function MobileFiltersSheet({ open, onClose, cities, city, setCity }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-50">
      <div className="absolute inset-0 bg-black/40" onClick={onClose} />
      <div className="absolute bottom-0 left-0 right-0 bg-white dark:bg-neutral-900 rounded-t-2xl p-4 shadow-xl">
        <div className="mx-auto max-w-md">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold">Filters</h3>
            <button onClick={onClose} className="text-sm underline">Done</button>
          </div>
          <div className="space-y-6">
            <div>
              <h4 className="font-semibold mb-2">City</h4>
              <div className="flex flex-wrap gap-2">
                <Chip active={city === ""} onClick={() => setCity("")}>All</Chip>
                {cities.map((c) => (
                  <Chip key={c} active={city === c} onClick={() => setCity(c)}>{c}</Chip>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

/* -------------------- hero -------------------- */
function TypeHero({ type, region }) {
  return (
    <header className="relative overflow-hidden rounded-2xl border border-gray-200 dark:border-neutral-800 bg-white dark:bg-neutral-900">
      <div className="relative h-40 sm:h-56 w-full">
        {type?.banner_image_url ? (
          <Image src={type.banner_image_url} alt="" fill className="object-cover" priority />
        ) : (
          <div className="h-full w-full bg-gradient-to-br from-violet-100 to-indigo-100 dark:from-neutral-800 dark:to-neutral-700" />
        )}
      </div>
      <div className="p-4 sm:p-6">
        <nav className="text-xs text-gray-600 dark:text-gray-300 mb-2">
          <Link href={`/${region}/shoptypes`} className="hover:underline">Shop Types</Link>
          <span className="mx-1.5">/</span>
          <span className="font-medium">{type?.name || "Category"}</span>
        </nav>
        <h1 className="text-2xl sm:text-3xl font-semibold">{type?.name || "Shop Type"}</h1>
        {type?.final_seo_description ? (
          <p className="mt-2 text-sm text-gray-700 dark:text-gray-300 max-w-3xl">
            {type.final_seo_description}
          </p>
        ) : null}
      </div>
    </header>
  );
}

/* -------------------- main -------------------- */
export default function ShopTypePageClient({ slug, region, initialType, initialShops }) {
  const [type, setType] = useState(initialType || null);
  const [loadingType, setLoadingType] = useState(!initialType);
  const [error, setError] = useState("");

  const first = useMemo(() => parseListPayload(initialShops, region, slug), [initialShops, region, slug]);
  const [items, setItems] = useState(first.items);
  const [nextUrl, setNextUrl] = useState(first.next);
  const [count, setCount] = useState(first.count);
  const [loadingList, setLoadingList] = useState(!initialShops);
  const [loadingMore, setLoadingMore] = useState(false);

  const [search, setSearch] = useState("");
  const [sort, setSort] = useState("relevance");
  const [filtersOpen, setFiltersOpen] = useState(false);
  const [city, setCity] = useState("");

  const cities = useMemo(
    () => Array.from(new Set(items.map((s) => s.town).filter(Boolean))).slice(0, 12),
    [items]
  );

  const view = useMemo(() => {
    let v = [...items];
    if (search.trim()) {
      const q = search.toLowerCase();
      v = v.filter((s) => s.name.toLowerCase().includes(q) || (s.town || "").toLowerCase().includes(q));
    }
    if (city) v = v.filter((s) => s.town === city);
    switch (sort) {
      case "listings_desc":
        v.sort((a, b) => (b.active_listings || 0) - (a.active_listings || 0));
        break;
      case "name_asc":
        v.sort((a, b) => String(a.name).localeCompare(String(b.name)));
        break;
      default:
        break;
    }
    return v;
  }, [items, search, city, sort]);

  const fetchJSON = useCallback(async (url) => {
    const r = await fetch(url, { cache: "no-store" });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    return r.json();
  }, []);

  // Client-side fetchers (used when SSR didn't preload)
  const fetchType = useCallback(async () => {
    setLoadingType(true);
    try {
      const t = await fetchJSON(`${BASE_API_URL}/api/shoptypes/slug/${slug}/`);
      setType(t);
    } catch (e) {
      setError("Could not load category.");
    } finally {
      setLoadingType(false);
    }
  }, [slug, fetchJSON]);

  const fetchFirstPage = useCallback(async () => {
    setLoadingList(true);
    setError("");
    const candidates = [
      `${BASE_API_URL}/api/shoptypes/${slug}/shops/?page=1`,                                 // future-friendly
      `${BASE_API_URL}/api/shops/search/?shoptype=${encodeURIComponent(slug)}&page=1`,       // if your search supports it
      `${BASE_API_URL}/api/shops/?page=1`,                                                   // fallback: client-filter by shoptype.slug
    ];
    for (const u of candidates) {
      try {
        const data = await fetchJSON(u);
        const parsed = parseListPayload(data, region, slug);
        setItems(parsed.items);
        setNextUrl(parsed.next);
        setCount(parsed.count);
        setLoadingList(false);
        return;
      } catch {}
    }
    setLoadingList(false);
    setError("No shops found for this category.");
  }, [slug, region, fetchJSON]);

  const loadMore = useCallback(async () => {
    if (!nextUrl) return;
    setLoadingMore(true);
    try {
      const data = await fetchJSON(nextUrl);
      const parsed = parseListPayload(data, region, slug);
      setItems((prev) => [...prev, ...parsed.items]);
      setNextUrl(parsed.next);
      setCount(parsed.count || count);
    } catch {}
    setLoadingMore(false);
  }, [nextUrl, fetchJSON, region, slug, count]);

  useEffect(() => {
    if (!initialType) fetchType();
    if (!initialShops) fetchFirstPage();
  }, [initialType, initialShops, fetchType, fetchFirstPage]);

  return (
    <div className="max-w-6xl mx-auto p-4 sm:p-6">
      <TypeHero type={type} region={region} />

      <div className="mt-6">
        <FiltersBar
          search={search}
          setSearch={setSearch}
          sort={sort}
          setSort={setSort}
          onOpenFilters={() => setFiltersOpen(true)}
          total={view.length}
        />
      </div>

      <div className="mt-6 flex gap-6">
        <DesktopFilters cities={cities} city={city} setCity={setCity} />

        <main className="flex-1 min-w-0">
          {error ? (
            <div className="border rounded-xl p-10 text-center bg-white dark:bg-neutral-900">
              <p className="text-gray-700 dark:text-gray-300">{error}</p>
            </div>
          ) : null}

          {(loadingType || (loadingList && items.length === 0)) ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4">
              {Array.from({ length: 9 }).map((_, i) => <ShopCardSkeleton key={i} />)}
            </div>
          ) : (
            <>
              <div className="flex items-center justify-between mb-3">
                <p className="text-sm text-gray-600 dark:text-gray-300">
                  {count} shop{count === 1 ? "" : "s"} ‚Ä¢ showing {view.length}
                </p>
              </div>

              {items.length === 0 ? (
                <div className="border rounded-xl p-10 text-center bg-white dark:bg-neutral-900">
                  <p className="text-gray-700 dark:text-gray-300">No shops yet in this category.</p>
                </div>
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4">
                  {view.map((shop) => (
                    <ShopCard key={shop.slug || shop.id} shop={shop} region={region} />
                  ))}
                </div>
              )}

              {nextUrl ? (
                <div className="mt-6 flex justify-center">
                  <button
                    onClick={loadMore}
                    disabled={loadingMore}
                    className="px-4 py-2 rounded-lg border border-gray-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 hover:bg-gray-50 dark:hover:bg-neutral-800"
                  >
                    {loadingMore ? "Loading‚Ä¶" : "Load more"}
                  </button>
                </div>
              ) : null}
            </>
          )}
        </main>
      </div>

      <MobileFiltersSheet
        open={filtersOpen}
        onClose={() => setFiltersOpen(false)}
        cities={cities}
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/[region]/shoptypes/[slug]/page.jsx =====
import { cookies } from "next/headers";
import { notFound } from "next/navigation";
import { BASE_API_URL } from "@/app/constants";
import { buildBaseMetadata, buildShopTypeMetadata } from "@/lib/seo/builders";
import ShopTypePageClient from "./ShopTypePageClient";

function getAuthHeaders() {
  const t = cookies().get("auth_token")?.value || cookies().get("token")?.value;
  return t ? { Authorization: `Token ${t}` } : {};
}

async function fetchShopType(slug) {
  try {
    // ‚úÖ use explicit slug route you added
    const r = await fetch(`${BASE_API_URL}/api/shoptypes/slug/${slug}/`, {
      headers: getAuthHeaders(),
      next: { revalidate: 300 },
    });
    return r.ok ? await r.json() : null;
  } catch {
    return null;
  }
}

async function fetchTypeShops(slug, page = 1, typeId = null) {
  const headers = getAuthHeaders();
  const urls = [
    // if you create this endpoint later, it will be used automatically
    `${BASE_API_URL}/api/shoptypes/${slug}/shops/?page=${page}`,
    // current search endpoint with a shoptype slug param
    `${BASE_API_URL}/api/shops/search/?shoptype=${encodeURIComponent(slug)}&page=${page}`,
  ];
  // optional: if you decide to support id filtering
  if (typeId) {
    urls.push(`${BASE_API_URL}/api/shops/search/?shoptype_id=${typeId}&page=${page}`);
    urls.push(`${BASE_API_URL}/api/shops/?shoptype=${typeId}&page=${page}`);
  }
  for (const url of urls) {
    try {
      const r = await fetch(url, { headers, next: { revalidate: 120 } });
      if (r.ok) return await r.json();
    } catch {}
  }
  return null;
}

export async function generateMetadata({ params }) {
  const { region, slug } = params;
  const cc = String(region || "").toLowerCase();
  const type = await fetchShopType(slug);

  if (!type) {
    return buildBaseMetadata({
      title: "Shop Types",
      description: "Browse categories and discover verified shops on Upfrica.",
      canonicalPath: `/${cc}/shoptypes/${slug}`,
      images: [],
      type: "website",
    });
  }
  return buildShopTypeMetadata({ type, region: cc, slug });
}

export default async function Page({ params, searchParams }) {
  const { region, slug } = params;
  const type = await fetchShopType(slug); // may be null; client can still fetch
  const initialShops = await fetchTypeShops(slug, Number(searchParams?.page || 1), type?.id || null);

  return (
    <ShopTypePageClient
      slug={slug}
      region={String(region || "").toLowerCase()}
      initialType={type}
      initialShops={initialShops}
    />
  );
}

===== src/app/(pages)/addItem/page.jsx =====
"use client";
import AiDescription from "@/components/AddItem/AiDescription";
import { CategorySection } from "@/components/AddItem/CategorySection";
import CompleteListing from "@/components/AddItem/CompleteListing";
import DeliveryDetails from "@/components/AddItem/DeliveryDetails";
import EbayFooter from "@/components/AddItem/EbayFooter";
import ItemDisclosures from "@/components/AddItem/ItemDisclosures";
import ItemForm from "@/components/AddItem/ItemAttributesForm";
import LegalFAQNotice from "@/components/AddItem/LegalFAQNotice";
import ListingCTA from "@/components/AddItem/ListingCTA";
import ListingFee from "@/components/AddItem/ListingFee";
import PricingSection from "@/components/AddItem/PricingSection";
import PromoteListing from "@/components/AddItem/PromoteListing";
import ScheduleListing from "@/components/AddItem/ScheduleListing";
import { TitleSection } from "@/components/AddItem/TitleSection";
import { UploaderGrid } from "@/components/AddItem/UploaderGrid";
import Header from "@/components/common/header/Header";
import { useFormik } from "formik";
import React, { useState } from "react";
import * as Yup from "yup";
import Item from "@/components/AddItem/Item";
import ItemConditionSelector from "@/components/AddItem/ItemConditionSelector";

const AddItem = () => {
  const [uploadedImages, setUploadedImages] = useState([]); // ‚≠êÔ∏è Add this line

  // const formik = useFormik({
  //     initialValues: {
  //         title: '',
  //         price: 0,
  //         schedule: { date: '', time: '' },
  //         adRate: 9,
  //     },
  //     validationSchema: Yup.object({
  //         title: Yup.string().required('Title is required'),
  //         // price: Yup.number().min(1, 'Minimum price is 1'),
  //     }),
  //     onSubmit: (values) => {
  //         console.log('‚úÖ Final listing data:', values);

  //     },
  // });

  const formik = useFormik({
    initialValues: {
      title: "",
      price: 0,
      schedule: { date: "", time: "" },
      adRate: 9,
      images: [], // <-- Add this to formik
      itemAttributes: {}, // ‚≠êÔ∏è New field for ItemAttributes
      condition: "New", // ‚≠êÔ∏è Add this
      description: "", // ‚≠êÔ∏è Add this line
      pricing: {
        // ‚úÖ Add this block
        format: "Auction",
        duration: "7 days",
        startingBid: "47.70",
        buyItNow: "136.91",
        immediatePay: false,
        reservePrice: "",
        quantity: 1,
      },
      deliveryDetails: {
        method: "FLAT_RATE_LOCAL_PICKUP",
        weight: { kg: "", g: "" },
        dimensions: { length: "", width: "", depth: "" },
        location: "",
      },
      majorWeight: "",
      minorWeight: "",
      length: "",
      width: "",
      depth: "",
    },
    validationSchema: Yup.object({
      title: Yup.string().required("Title is required"),
    }),
    onSubmit: (values) => {
      console.log("‚úÖ Final listing data:", values);
    },
  });

  const handleImagesChange = (imgs) => {
    setUploadedImages(imgs);
    formik.setFieldValue("images", imgs); // <-- Update Formik value
  };
  return (
    <div>
      <Header />
      <form
        onSubmit={formik.handleSubmit}
        className="max-w-5xl mx-auto space-y-10 py-5 px-4"
      >
        <CompleteListing />
        <UploaderGrid onImagesChange={handleImagesChange} />
        <TitleSection formik={formik} />
        <CategorySection />
        <Item formik={formik} />
        <ItemConditionSelector formik={formik} />
        <AiDescription formik={formik} />
        <PricingSection formik={formik} />
        {/* <ScheduleListing /> */}
        <DeliveryDetails formik={formik} />
        <ItemDisclosures />
        <PromoteListing />
        <ListingFee />

        {/* footer section  */}
        {/* <ListingCTA formik={formik} />
                <LegalFAQNotice /> */}

        {/* listing cta  */}

        <div className="flex flex-col  mt-6 lg:w-2/5 space-y-3 mx-auto px-8 lg:px-0">
          <button
            type="button"
            className="px-6 py-3 text-white text-sm font-medium bg-blue-600 hover:bg-blue-700 rounded-full shadow"
            aria-label="List it for free"
          >
            List it for free
          </button>

          <button
            type="button"
            className="px-6 py-3 text-sm font-medium text-gray-700 border-black border   hover:bg-gray-200 rounded-full"
            aria-label="Save for later"
          >
            Save for later
          </button>

          <button
            // onClick={() => console.log("Preview clicked:", formik.values)}
            type="submit"
            className="px-6 py-3 text-sm font-medium text-gray-700 border-black border  hover:bg-gray-200 rounded-full"
            aria-label="Preview"
            name="preview"
          >
            Preview
          </button>
        </div>

        {/* LegalFAQNotice */}

        <div className="text-sm text-gray-700 space-y-3 leading-relaxed mt-4">
          <p>
            To improve your chances of selling, we may send you offers from
            buyers that you can choose to accept or decline.
          </p>

          <p>
            Auctions will be automatically relisted up to 8 times for free and
            do not count towards your monthly listings balance. Auctions with a
            1- or 3-day duration will be relisted with a 7-day duration.
          </p>

          <p>
            Funds from your sales may be unavailable and show as pending for a
            period of time.{" "}
            <a
              href="http://www.ebay.co.uk/help/selling/selling-getting-paid/pending-payments?id=4155"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 underline"
            >
              Learn more
            </a>
          </p>
        </div>

        {/* EbayFooter */}
        <EbayFooter />
      </form>
    </div>
  );
};

export default AddItem;


===== src/app/(pages)/address/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";

export default function RootLayout({ children }) {
  return (
    <>
      <Header></Header>
      {children}
      <Footer />
    </>
  );
}


===== src/app/(pages)/address/page.jsx =====
"use client";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import Loading from "@/components/ui/Loading";
import { GoDotFill } from "react-icons/go";
import { IoIosArrowForward } from "react-icons/io";
import { FaEdit, FaTrash } from "react-icons/fa";

// 1) Custom hook: fetch addresses
const useFetchAddresses = () => {
  const [data, setData] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const token = useSelector((s) => s.auth.token);

  useEffect(() => {
    if (!token) {
      setLoading(false);
      return;
    }

    const fetchAddresses = async () => {
      setLoading(true);
      try {
        const res = await fetch("https://media.upfrica.com/api/addresses/", {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
        });
        if (!res.ok) {
          const txt = await res.text();
          throw new Error(`HTTP ${res.status}: ${txt}`);
        }
        const json = await res.json();
        setData(Array.isArray(json) ? json : [json]);
      } catch (err) {
        console.error("Fetch failed:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAddresses();
  }, [token]);

  return { data, error, loading };
};

// 2) Modal for edit/delete
const EditModal = ({ address, onClose, onSaved, onDeleted }) => {
  const [form, setForm] = useState({
    full_name: address.full_name,
    street: address.address_data.street,
    city: address.address_data.city,
    state: address.address_data.state,
    zip_code: address.address_data.zip_code,
    country: address.address_data.country,
    phone: address.address_data.phone_number,
  });
  const token = useSelector((s) => s.auth.token);

  const handleChange = (e) =>
    setForm((f) => ({ ...f, [e.target.name]: e.target.value }));

  const handleSave = async () => {
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/addresses/${address.id}/`,
        {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
          body: JSON.stringify({
            full_name: form.full_name,
            address_data: {
              street: form.street,
              city: form.city,
              state: form.state,
              zip_code: form.zip_code,
              country: form.country,
              phone_number: form.phone,
            },
          }),
        },
      );
      if (!res.ok) throw new Error(await res.text());
      const updated = await res.json();
      console.log("updated", updated);

      onSaved(updated);
      onClose();
    } catch (err) {
      console.error("Update failed:", err);
      alert("Update failed: " + err.message);
    }
  };

  const handleDelete = async () => {
    if (!confirm("Are you sure you want to delete this address?")) return;
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/addresses/${address.id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error(await res.text());
      onDeleted(address.id);
      onClose();
    } catch (err) {
      console.error("Delete failed:", err);
      alert("Delete failed: " + err.message);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4">Edit Address</h2>

        {[
          ["full_name", "Name"],
          ["street", "Street"],
          ["city", "City"],
          ["state", "State"],
          ["zip_code", "Postal Code"],
          ["country", "Country"],
          ["phone", "Phone Number"],
        ].map(([key, label]) => (
          <div className="mb-3" key={key}>
            <label className="block text-sm mb-1" htmlFor={key}>
              {label}
            </label>
            <input
              id={key}
              name={key}
              value={form[key]}
              onChange={handleChange}
              className="w-full border p-2 rounded"
            />
          </div>
        ))}

        <div className="flex justify-end gap-3 mt-4">
          <button onClick={onClose} className="px-4 py-2">
            Cancel
          </button>
          <button
            onClick={handleDelete}
            className="px-4 py-2 text-red-600 border rounded"
          >
            Delete
          </button>
          <button
            onClick={handleSave}
            className="px-4 py-2 bg-blue-600 text-white rounded"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

// 3) Card component
const AddressCard = ({ item, onEdit }) => {
  const {
    full_name,
    address_data: { street, city, state, zip_code, country, phone_number },
  } = item;

  return (
    <div className="relative bg-white border border-gray-200 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200 p-6">
      {/* Action Icons */}
      <div className="absolute top-4 right-4 flex space-x-3">
        <FaEdit
          className="w-5 h-5 text-blue-500 hover:text-blue-600 cursor-pointer"
          onClick={() => onEdit(item)}
          title="Edit"
        />
        <FaTrash
          className="w-5 h-5 text-red-400 hover:text-red-500 cursor-pointer"
          onClick={() => onEdit(item)}
          title="Delete"
        />
      </div>

      {/* Header */}
      <h4 className="text-xl font-semibold text-gray-800 mb-4 border-b pb-2">
        {full_name}
      </h4>

      {/* Details List */}
      <dl className="space-y-3 text-gray-700">
        <div className="flex">
          <dt className="w-32 font-medium">Street:</dt>
          <dd className="flex-1">{street}</dd>
        </div>
        <div className="flex">
          <dt className="w-32 font-medium">City:</dt>
          <dd className="flex-1">{city}</dd>
        </div>
        <div className="flex">
          <dt className="w-32 font-medium">State:</dt>
          <dd className="flex-1">{state}</dd>
        </div>
        <div className="flex">
          <dt className="w-32 font-medium">Postal Code:</dt>
          <dd className="flex-1">{zip_code}</dd>
        </div>
        <div className="flex">
          <dt className="w-32 font-medium">Country:</dt>
          <dd className="flex-1">{country}</dd>
        </div>
        <div className="flex">
          <dt className="w-32 font-medium">Phone:</dt>
          <dd className="flex-1">{phone_number}</dd>
        </div>
      </dl>

      {/* Footer (Optional) */}
      {/* <div className="mt-6 text-right">
        <button
          onClick={() => onEdit(item)}
          className="text-blue-600 hover:underline text-sm"
        >
          Edit Address
        </button>
      </div> */}
    </div>
  );
};

// 4) Page component
export default function AddressPage() {
  const { data: addresses, error, loading } = useFetchAddresses();
  const [modalAddress, setModalAddress] = useState(null);
  const [list, setList] = useState([]);

  // keep local copy of data to update/delete
  useEffect(() => {
    setList(addresses);
  }, [addresses]);

  const handleSaved = (updated) => {
    setList((prev) => prev.map((a) => (a.id === updated.id ? updated : a)));
  };

  const handleDeleted = (id) => {
    setList((prev) => prev.filter((a) => a.id !== id));
  };

  if (loading) return <Loading />;
  if (error) return <p className="text-red-500">Error: {error}</p>;

  return (
    <div className="container mx-auto my-10">
      <div className="flex items-center gap-2 text-purple-500 mb-6">
        <GoDotFill /> Home <IoIosArrowForward /> Your delivery locations
      </div>

      {list.length === 0 ? (
        <p>No addresses available.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
          {list.map((addr) => (
            <AddressCard
              key={addr.id}
              item={addr}
              onEdit={(item) => setModalAddress(item)}
            />
          ))}
        </div>
      )}

      {modalAddress && (
        <EditModal
          address={modalAddress}
          onClose={() => setModalAddress(null)}
          onSaved={handleSaved}
          onDeleted={handleDeleted}
        />
      )}
    </div>
  );
}


===== src/app/(pages)/address-two/page.jsx =====
// "use client";
// import React, { useEffect, useState } from "react";
// import { useSelector } from "react-redux";

// const AddressTwo = () => {
//   const [address, setAddress] = useState(null);
//   const [loading, setLoading]   = useState(false);
//   const [error, setError]       = useState(null);
//   const token = useSelector((state) => state.auth.token);

//   useEffect(() => {
//     if (!token) return;

//     const fetchAddress = async () => {
//       setLoading(true);
//       setError(null);

//       try {
//         const res = await fetch("https://media.upfrica.com/api/addresses/", {
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Token ${token}`,
//           },
//         });

//         if (!res.ok) {
//         //   const txt = await res.text();
//           throw new Error(`HTTP ${res.status}`);
//         }

//         // ‡¶Ø‡¶¶‡¶ø ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ Array ‡¶π‡ßü ‡¶§‡ßã [address] ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
//         const data = await res.json();
//         // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü, ‡¶§‡¶æ‡¶á ‡¶∏‡ßã‡¶ú‡¶æ ‡¶∏‡ßá‡¶ü
//         setAddress(data);
//       } catch (err) {
//         console.error("Fetch failed:", err);
//         setError(err.message);
//       } finally {
//         setLoading(false);
//       }
//     };

//     fetchAddress();
//   }, [token]);

//   console.log(address);

//   // UI ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞
//   if (loading) return <p>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá‚Ä¶</p>;
//   if (error)   return <p style={{ color: "red" }}>Error: {error}</p>;
// //   if (!address) return null; // ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ñ‡¶®‡¶ì ‡¶®‡ßá‡¶á

//   // address_data ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶Ü‡¶®‡¶≤‡¶ø‡¶∂
// //   const {
// //     full_name,
// //     default: isDefault,
// //     address_data: { street, city, state, country, zip_code },
// //     created_at,
// //     updated_at,
// //   } = address;

//   return (
//     // <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow">
//     //   <h2 className="text-2xl font-semibold mb-4">Delivery Address</h2>

//     //   <p className="mb-2">
//     //     <strong>Name:</strong> {full_name}
//     //   </p>
//     //   <p className="mb-2">
//     //     <strong>Default:</strong>{" "}
//     //     {isDefault ? "Yes" : "No"}
//     //   </p>

//     //   <div className="mb-4">
//     //     <p>
//     //       <strong>Street:</strong> {street}
//     //     </p>
//     //     <p>
//     //       <strong>City:</strong> {city}
//     //     </p>
//     //     <p>
//     //       <strong>State:</strong> {state}
//     //     </p>
//     //     <p>
//     //       <strong>Postal Code:</strong> {zip_code}
//     //     </p>
//     //     <p>
//     //       <strong>Country:</strong> {country}
//     //     </p>
//     //   </div>

//     //   <p className="text-sm text-gray-500">
//     //     Created at: {new Date(created_at).toLocaleString()}
//     //   </p>
//     //   <p className="text-sm text-gray-500">
//     //     Updated at: {new Date(updated_at).toLocaleString()}
//     //   </p>
//     // </div>
//    <div className="container mx-auto my-10 p-4">
//       <h1 className="text-2xl font-bold mb-4">Your Addresses</h1>

//       {address.length === 0 ? (
//         <p>No addresses found.</p>
//       ) : (
//         <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
//           {address.map((addr) => (
//             <div
//               key={addr.id}
//               className="p-4 bg-white rounded-lg shadow hover:shadow-md transition"
//             >
//               <h2 className="font-semibold mb-2">{addr.full_name}</h2>
//               <p>{addr.address_data.street}</p>
//               <p>
//                 {addr.address_data.city}, {addr.address_data.state}{" "}
//                 {addr.address_data.zip_code}
//               </p>
//               <p>{addr.address_data.country}</p>
//             </div>
//           ))}
//         </div>
//       )}
//     </div>
//   );
// };

// export default AddressTwo;

"use client";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";

const AddressTwo = () => {
  // ‡ßß) ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const token = useSelector((state) => state.auth.token);

  useEffect(() => {
    if (!token) return;

    const fetchAddresses = async () => {
      setLoading(true);
      setError(null);

      try {
        const res = await fetch("https://media.upfrica.com/api/addresses/", {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
        });

        if (!res.ok) {
          const txt = await res.text();
          throw new Error(`HTTP ${res.status}: ${txt}`);
        }

        const data = await res.json();
        // ‡ß®) ‡¶Ø‡¶¶‡¶ø ‡¶∞‡¶ø‡¶∏‡¶™‡¶®‡ßç‡¶∏‡ßá ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ü‡¶∏‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶®,
        //    ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶ß‡¶∞‡ßÅ‡¶®
        const list = Array.isArray(data) ? data : [data];
        setAddresses(list);
      } catch (err) {
        console.error("Fetch failed:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAddresses();
  }, [token]);

  console.log("address", addresses);

  // ‡ß©) ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç / ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤
  if (loading) return <p>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá‚Ä¶</p>;
  if (error) return <p style={{ color: "red" }}>Error: {error}</p>;

  // ‡ß™) ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ map ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø address ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨
  return (
    <div className="container mx-auto my-10 p-4">
      <h1 className="text-2xl font-bold mb-4">Your Addresses</h1>

      {addresses?.length === 0 ? (
        <p>No addresses found.</p>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {addresses.map((addr) => (
            <div
              key={addr.id}
              className="p-4 bg-white rounded-lg shadow hover:shadow-md transition"
            >
              <h2 className="font-semibold mb-2">{addr.full_name}</h2>
              <p>{addr.address_data.street}</p>
              <p>
                {addr.address_data.city}, {addr.address_data.state}{" "}
                {addr.address_data.zip_code}
              </p>
              <p>{addr.address_data.country}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default AddressTwo;


===== src/app/(pages)/admin/users/page.jsx =====
import Users from "@/components/user/Users";
import UserContent from "@/components/user/UserContent";
import React from "react";

const page = () => {
  return (
    <div className=" md:grid md:grid-cols-12  gap-4 p-4">
      <div className="md:col-span-2">
        <Users />
      </div>
      <div className="md:col-span-9">
        <UserContent />
      </div>
    </div>
  );
};

export default page;


===== src/app/(pages)/all-blogs/edit/[slug]/LoadingSkeleton.jsx =====
"use client";

import React from "react";

const LoadingSkeleton = () => {
  return (
    <div className="min-h-screen bg-gray-50 container mx-auto p-20">
      <div className="animate-pulse">
        {/* Header Skeleton */}
        <div className="h-8 bg-gray-300 rounded w-1/3 mx-auto mb-6"></div>

        <div className="space-y-6">
          {/* Title Field Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-2"></div>
            <div className="h-10 bg-gray-300 rounded"></div>
          </div>

          {/* Summary Field Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-2"></div>
            <div className="h-20 bg-gray-300 rounded"></div>
          </div>

          {/* Tags Field Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-2"></div>
            <div className="flex space-x-2">
              <div className="h-10 bg-gray-300 rounded w-1/3"></div>
              <div className="h-10 bg-gray-300 rounded w-1/3"></div>
              <div className="h-10 bg-gray-300 rounded w-1/3"></div>
            </div>
          </div>

          {/* Sections Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-4"></div>
            {[1, 2].map((item) => (
              <div
                key={item}
                className="border border-gray-300 rounded-md p-4 bg-gray-100 mb-4"
              >
                <div className="flex justify-between items-center mb-4">
                  <div className="h-5 bg-gray-300 rounded w-1/4"></div>
                  <div className="h-5 bg-gray-300 rounded w-8"></div>
                </div>
                <div className="mb-2">
                  <div className="h-4 bg-gray-300 rounded w-1/2 mb-1"></div>
                  <div className="h-10 bg-gray-300 rounded"></div>
                </div>
                <div>
                  <div className="h-4 bg-gray-300 rounded w-1/3 mb-1"></div>
                  <div className="h-10 bg-gray-300 rounded"></div>
                </div>
              </div>
            ))}
          </div>

          {/* Submit Button Skeleton */}
          <div className="flex justify-center">
            <div className="h-12 w-40 bg-gray-300 rounded"></div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoadingSkeleton;


===== src/app/(pages)/all-blogs/edit/[slug]/page.jsx =====
"use client";

import dynamic from "next/dynamic";
import React, { useState, useEffect } from "react";
import { Formik, FieldArray } from "formik";
import Link from "next/link";
import Script from "next/script";
import Footer from "@/components/common/footer/Footer";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import LoadingSkeleton from "./LoadingSkeleton";
import { Editor } from "@tinymce/tinymce-react"; // ‚¨ÖÔ∏è ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ Import ‡¶¶‡¶ø‡¶§‡ßá ‡¶≠‡ßÅ‡¶≤‡ßã ‡¶®‡¶æ
import { useRef } from "react"; // ‚¨ÖÔ∏è ‡¶è‡¶ü‡¶æ‡¶ì ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá

const UpdateHelpBlogPage = ({ params }) => {
  const { slug } = params;
  const { token } = useSelector((state) => state.auth);
  const router = useRouter();

  // State for the fetched blog and initial form values.
  const [blogData, setBlogData] = useState(null);
  const [initialValues, setInitialValues] = useState({
    title: "",
    summary: "",
    tags: [],
    sections: [],
  });
  const [loading, setLoading] = useState(true);

  const summaryEditorRef = useRef(null); // ‚¨ÖÔ∏è component ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá

  useEffect(() => {
    async function fetchBlog() {
      try {
        const requestOptions = {
          method: "GET",
          redirect: "follow",
        };
        const response = await fetch(
          `https://media.upfrica.com/api/helpblogs/${slug}`,
          requestOptions,
        );
        const data = await response.json();
        setBlogData(data);
        // Set initial form values using the fetched blog data.
        setInitialValues({
          title: data.title || "",
          summary: data.summary || "",
          tags: data.tags || [],
          sections:
            data.sections && data.sections.length > 0
              ? data.sections
              : [
                  {
                    sectionType: "",
                    sectionTitle: "",
                    sectionContent: "",
                    bulletItems: [],
                    tableHeaders: [],
                    tableRows: [],
                    files: [],
                    links: [],
                  },
                ],
        });
      } catch (error) {
        console.error("Error fetching blog:", error);
      } finally {
        setLoading(false);
      }
    }
    fetchBlog();
  }, [slug]);

  const validate = (values) => {
    const errors = {};
    if (!values.title) errors.title = "Title is required.";
    if (!values.summary) errors.summary = "Summary is required.";
    return errors;
  };

  if (loading) {
    return <LoadingSkeleton />;
  }

  return (
    <>
      <div className="min-h-screen bg-gray-50 container mx-auto p-20">
        <h1 className="text-3xl font-bold text-violet-700 mb-6 text-center">
          Update Help Blog Post
        </h1>
        <Formik
          initialValues={initialValues}
          enableReinitialize
          validate={validate}
          onSubmit={(values, { setSubmitting }) => {
            const myHeaders = new Headers();
            myHeaders.append("Authorization", `Token aSJ36UapeFH5YARFamDTYhnJ`);
            myHeaders.append("Content-Type", "application/json");

            fetch(`https://media.upfrica.com/api/helpblogs/${slug}/update/`, {
              method: "PUT", // Use PATCH if your API requires it.
              headers: myHeaders,
              body: JSON.stringify(values),
              redirect: "follow",
            })
              .then((response) => response.json())
              .then((result) => {
                // console.log('result',result, )
                alert("Help blog post updated successfully!");
                router.push(`/all-blogs/`);
              })
              .catch((error) => {
                console.error("Error updating blog:", error);
                alert("Failed to update help blog post.");
              })
              .finally(() => {
                setSubmitting(false);
              });
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            setFieldValue,
            isSubmitting,
          }) => (
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Title Field */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Title <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="Enter post title"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm">{errors.title}</div>
                )}
              </div>

              {/* Summary Field */}
              {/* <div>
                                <label className="block text-gray-700 font-bold mb-1">
                                    Summary <span className="text-red-500">*</span>
                                </label>
                                <textarea
                                    name="summary"
                                    placeholder="Enter a short summary"
                                    rows="3"
                                    value={values.summary}
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                                />
                                {touched.summary && errors.summary && (
                                    <div className="text-red-600 text-sm">{errors.summary}</div>
                                )}
                            </div> */}

              {/* Summary Field */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Summary <span className="text-red-500">*</span>
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) => (summaryEditorRef.current = editor)}
                  value={values.summary || ""}
                  onEditorChange={(content) => {
                    setFieldValue("summary", content);
                  }}
                  init={{
                    height: 250,
                    menubar: false,
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline forecolor | " +
                      "alignleft aligncenter alignright alignjustify | " +
                      "bullist numlist outdent indent | removeformat | help",
                    content_style:
                      "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
                  }}
                />
                {touched.summary && errors.summary && (
                  <div className="text-red-600 text-sm">{errors.summary}</div>
                )}
              </div>

              {/* Tags Field */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Tags
                </label>
                <FieldArray name="tags">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.tags &&
                        values.tags.map((tag, index) => (
                          <div key={index} className="flex items-center gap-2">
                            <input
                              type="text"
                              name={`tags[${index}]`}
                              placeholder="Enter tag"
                              value={tag}
                              onChange={handleChange}
                              onBlur={handleBlur}
                              className="flex-1 border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                            />
                            <button
                              type="button"
                              onClick={() => remove(index)}
                              className="text-red-500 font-bold"
                            >
                              X
                            </button>
                          </div>
                        ))}
                      <button
                        type="button"
                        onClick={() => push("")}
                        className="text-violet-700 underline"
                      >
                        + Add Tag
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Sections */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Sections
                </label>
                <FieldArray name="sections">
                  {({ push, remove }) => (
                    <div className="space-y-6">
                      {values.sections &&
                        values.sections.map((section, secIndex) => (
                          <div
                            key={secIndex}
                            className="border border-gray-300 rounded-md p-4 bg-gray-100"
                          >
                            <div className="flex justify-between items-center">
                              <h2 className="text-xl font-semibold text-gray-800">
                                Section {secIndex + 1}
                              </h2>
                              {values.sections.length > 1 && (
                                <button
                                  type="button"
                                  onClick={() => remove(secIndex)}
                                  className="text-red-500 font-bold"
                                >
                                  Remove Section
                                </button>
                              )}
                            </div>

                            {/* Section Type */}
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Section Type
                              </label>
                              <select
                                name={`sections[${secIndex}].sectionType`}
                                value={section.sectionType}
                                onChange={handleChange}
                                className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                              >
                                <option value="">Select Section Type</option>
                                <option value="paragraph">Paragraph</option>
                                <option value="bullet">Bullet List</option>
                                <option value="highlight">Highlight</option>
                                <option value="table">Table</option>
                                <option value="image">Image</option>
                                <option value="links">Links</option>
                              </select>
                            </div>

                            {/* Section Title */}
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Section Title
                              </label>
                              <input
                                type="text"
                                name={`sections[${secIndex}].sectionTitle`}
                                placeholder="Enter section title"
                                value={section.sectionTitle}
                                onChange={handleChange}
                                onBlur={handleBlur}
                                className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                              />
                            </div>

                            {/* Render section content based on section type */}
                            {/* {["paragraph", "highlight"].includes(
                                                            section.sectionType
                                                        ) && (
                                                                <div className="mt-2">
                                                                    <label className="block text-gray-700 font-bold mb-1">
                                                                        Content
                                                                    </label>
                                                                    <textarea
                                                                        name={`sections[${secIndex}].sectionContent`}
                                                                        placeholder="Enter content"
                                                                        rows="4"
                                                                        value={section.sectionContent}
                                                                        onChange={handleChange}
                                                                        onBlur={handleBlur}
                                                                        className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                                                                    />
                                                                </div>
                                                            )} */}

                            {["paragraph", "highlight"].includes(
                              section.sectionType,
                            ) && (
                              <div className="mt-2">
                                <label className="block text-gray-700 font-bold mb-1">
                                  Content
                                </label>
                                <Editor
                                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut" // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ TinyMCE API Key
                                  value={section.sectionContent || ""}
                                  init={{
                                    height: 250,
                                    menubar: false,
                                    plugins: [
                                      "advlist autolink lists link charmap preview anchor",
                                      "searchreplace visualblocks code fullscreen",
                                      "insertdatetime media table paste help wordcount",
                                    ],
                                    toolbar:
                                      "undo redo | formatselect | bold italic underline forecolor | " +
                                      "alignleft aligncenter alignright alignjustify | " +
                                      "bullist numlist outdent indent | removeformat | help",
                                    content_style:
                                      "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
                                  }}
                                  onEditorChange={(content) => {
                                    setFieldValue(
                                      `sections[${secIndex}].sectionContent`,
                                      content,
                                    );
                                  }}
                                />
                              </div>
                            )}

                            {section.sectionType === "bullet" && (
                              <div className="mt-2">
                                <label className="block text-gray-700 font-bold mb-1">
                                  Bullet Items
                                </label>
                                <FieldArray
                                  name={`sections[${secIndex}].bulletItems`}
                                >
                                  {({ push, remove }) => (
                                    <div className="space-y-2">
                                      {section.bulletItems &&
                                        section.bulletItems.map(
                                          (item, index) => (
                                            <div
                                              key={index}
                                              className="flex items-center gap-2"
                                            >
                                              <input
                                                type="text"
                                                name={`sections[${secIndex}].bulletItems[${index}]`}
                                                placeholder="Bullet item"
                                                value={item}
                                                onChange={handleChange}
                                                onBlur={handleBlur}
                                                className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                                              />
                                              <button
                                                type="button"
                                                onClick={() => remove(index)}
                                                className="text-red-500 font-bold"
                                              >
                                                X
                                              </button>
                                            </div>
                                          ),
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/all-blogs/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { CiEdit } from "react-icons/ci";
import { MdDelete } from "react-icons/md";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import Header from "@/components/common/header/Header";

const convertToDaysAgo = (isoDate) => {
  const pastDate = new Date(isoDate);
  const currentDate = new Date();
  const diffMs = currentDate - pastDate;
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  if (diffDays === 0) {
    return "today";
  }
  return `${diffDays} day${diffDays === 1 ? "" : "s"} ago`;
};

const AllBlogs = () => {
  const [drafts, setDrafts] = useState([]);
  const [loading, setLoading] = useState(true);
  // State variables to track which draft is currently processing an action
  const [editLoadingId, setEditLoadingId] = useState(null);
  const [deleteLoadingId, setDeleteLoadingId] = useState(null);

  const { token, user } = useSelector((state) => state.auth);
  const router = useRouter();

  // Fetch the help blog drafts on mount
  useEffect(() => {
    const fetchDrafts = async () => {
      try {
        const headers = new Headers();
        // headers.append("Authorization", "Token ...");

        const requestOptions = {
          method: "GET",
          headers,
          redirect: "follow",
        };

        const response = await fetch(
          "https://media.upfrica.com/api/helpblogs/",
          requestOptions,
        );
        const data = await response.json();
        setDrafts(data?.results || data);
      } catch (error) {
        console.error("Error fetching drafts:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchDrafts();
  }, []);

  // Loader component to be displayed inside a button during action processing
  const Loader = () => (
    <div className="flex space-x-2 justify-center items-center h-6">
      <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.3s]" />
      <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.15s]" />
      <div className="h-2 w-2 bg-white rounded-full animate-bounce" />
    </div>
  );

  // Edit a draft
  const editBlog = async (slug, id) => {
    setEditLoadingId(id);
    // Optionally, you can simulate a delay
    router.push(`/all-blogs/edit/${slug}`);
    // As router.push navigates away, clearing state is usually not necessary.
  };

  // Delete a draft
  const deleteDraft = async (id) => {
    setDeleteLoadingId(id);
    try {
      const headers = new Headers();
      headers.append("Authorization", `Token aSJ36UapeFH5YARFamDTYhnJ`);
      headers.append("Content-Type", "application/json");

      const requestOptions = {
        method: "DELETE",
        headers,
        body: "",
        redirect: "follow",
      };

      const url = `https://media.upfrica.com/api/admin/helpblogs/${id}/`;
      const response = await fetch(url, requestOptions);
      if (!response.ok) {
        throw new Error(`Server responded with status ${response.status}`);
      }

      window.alert(`Draft with id ${id} deleted successfully!`);
      setDrafts((prevDrafts) => prevDrafts.filter((draft) => draft.id !== id));
    } catch (error) {
      console.error("Error deleting draft:", error);
      window.alert(`Error deleting draft: ${error.message}`);
    } finally {
      setDeleteLoadingId(null);
    }
  };

  // Render skeleton loader rows while drafts are being fetched
  const renderSkeletonRows = () => {
    return Array.from({ length: 5 }, (_, index) => (
      <tr key={index} className="text-base tracking-wide animate-pulse">
        <td className="border border-gray-300 px-6 py-2 md:py-8 bg-gray-300">
          &nbsp;
        </td>
        <td className="border border-gray-300 px-4 bg-gray-300">
          <div className="flex flex-col gap-2">
            <div className="w-24 h-8 bg-gray-200 rounded-lg"></div>
            <div className="w-24 h-8 bg-gray-200 rounded-lg"></div>
          </div>
        </td>
        <td className="border border-gray-300 px-6 py-4 bg-gray-300">
          <div className="space-y-2">
            <div className="w-3/4 h-4 bg-gray-200 rounded"></div>
            <div className="w-1/2 h-4 bg-gray-200 rounded"></div>
            <div className="w-2/3 h-4 bg-gray-200 rounded"></div>
            <div className="w-1/3 h-4 bg-gray-200 rounded"></div>
          </div>
        </td>
      </tr>
    ));
  };

  return (
    <>
      <Header />
      <div className="overflow-x-auto container mx-auto p-4 lg:p-10 bg-white shadow-lg rounded-md">
        <header className="mb-6 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-center">Published Blogs</h1>
          <Link href="/" className="text-blue-500 hover:underline">
            Back to Home
          </Link>
        </header>
        <table className="min-w-full table-auto border-collapse border border-gray-300">
          <thead className="bg-gray-200 text-xl font-bold">
            <tr>
              <th className="border border-gray-300 px-6 py-3 lg:w-1/12 text-left text-gray-700">
                ID
              </th>
              <th className="border border-gray-300 px-6 py-3 lg:w-3/12 text-left text-gray-700">
                Actions
              </th>
              <th className="border border-gray-300 px-6 py-3 lg:w-8/12 text-left text-gray-700">
                Details
              </th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              renderSkeletonRows()
            ) : drafts.length === 0 ? (
              <tr>
                <td
                  colSpan="3"
                  className="border border-gray-300 px-6 py-4 text-center text-base"
                >
                  No drafts available.
                </td>
              </tr>
            ) : (
              drafts.map((draft) => (
                <tr key={draft.id} className="text-base tracking-wide">
                  <td className="border border-gray-300 px-6 py-2 md:py-8">
                    {draft.id}
                  </td>
                  <td className="border border-gray-300 px-4">
                    <div className="flex flex-col gap-2">
                      {/* Edit Button */}
                      <button
                        onClick={() => editBlog(draft.slug, draft.id)}
                        className="px-4 py-2 bg-gray-500 text-white rounded shadow-md hover:bg-gray-600 transition-all duration-300 flex items-center justify-center"
                      >
                        {editLoadingId === draft.id ? (
                          <Loader />
                        ) : (
                          <>
                            <CiEdit className="mr-2" />
                            Edit
                          </>
                        )}
                      </button>
                      {/* Delete Button */}
                      <button
                        onClick={() => deleteDraft(draft.id)}
                        className="px-4 py-2 bg-red-500 text-white rounded shadow-md hover:bg-red-600 transition-all duration-300 flex items-center justify-center"
                      >
                        {deleteLoadingId === draft.id ? (
                          <Loader />
                        ) : (
                          <>
                            <MdDelete className="mr-2" />
                            Delete
                          </>
                        )}
                      </button>
                    </div>
                  </td>
                  <td className="border border-gray-300 px-6 py-4">
                    <div className="space-y-2">
                      <h2 className="text-xl font-semibold">{draft.title}</h2>
                      <p>{draft.summary}</p>
                      <p className="text-sm text-gray-600">
                        Status: {draft.status}
                      </p>
                      <p className="text-xs text-gray-500">
                        Created: {convertToDaysAgo(draft?.created_at)}
                      </p>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default AllBlogs;


===== src/app/(pages)/bigcommerce/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default layout;


===== src/app/(pages)/bigcommerce/page.jsx =====
import BlogPage from "@/components/bigcommerce/BlogPage";
import HeaderSection from "@/components/bigcommerce/HeaderSection";
import React from "react";

const Bigcommerce = () => {
  return (
    <div>
      <HeaderSection />
      <BlogPage />
    </div>
  );
};

export default Bigcommerce;


===== src/app/(pages)/blog/page.jsx =====
"use client";

import { useState } from "react";
import Link from "next/link";
import Footer from "@/components/common/footer/Footer";

// Dummy data for the search results and jobs.
const searchResults = [
  {
    title: "Automating hallucination detection with chain-of-thought reasoning",
    href: "/blog/automating-hallucination-detection-with-chain-of-thought-reasoning",
    authors: [
      { name: "Erica Salinas", href: "/author/erica-salinas" },
      { name: "Shayan Ali Akbar", href: "/author/shayan-ali-akbar" },
    ],
    date: "April 11, 2025",
    description:
      "Novel three-pronged approach combines claim‚Äêlevel evaluations, chain‚Äêof‚Äêthought reasoning, and classification of hallucination error types.",
    category: {
      name: "Conversational AI",
      href: "/research-areas/conversational-ai-natural-language-processing",
    },
  },
  {
    title: "An AI agent for data science:  Q Developer in SageMaker Canvas",
    href: "/blog/an-ai-agent-for-data-science--q-developer-in-sagemaker-canvas",
    authors: [
      { name: "Yaroslav Kharkov", href: "/author/yaroslav-kharkov" },
      { name: "Gerald Friedland", href: "/author/gerald-friedland" },
    ],
    date: "April 10, 2025",
    description:
      "New tool lets customers build, train, and deploy machine learning models using only natural language.",
    category: {
      name: "Machine learning",
      href: "/research-areas/machine-learning",
    },
  },
];

const jobs = [
  {
    title: "Manager, Applied Scientist",
    href: "https://www..jobs/jobs/2874062/manager-applied-scientist?cmpid=bsp--science",
    location: "IN, TS, Hyderabad",
    description:
      "Welcome to the Worldwide Returns & ReCommerce team (WWR&R) at . An agile, innovative organization working on exciting challenges.",
  },
  {
    title: "Applied Scientist, Personalization",
    href: "https://www..jobs/jobs/2866202/applied-scientist-personalization?cmpid=bsp--science",
    location: "GB, MLN, Edinburgh",
    description:
      "Join our Personalization team to build, train, and deploy innovative ML models using generative AI techniques.",
  },
];

export default function BlogPage() {
  const [menuOpen, setMenuOpen] = useState(false);
  const [sortValue, setSortValue] = useState("0");

  return (
    <div className="min-h-screen bg-gray-100 text-gray-900">
      {/* Header */}
      <header className="bg-white shadow sticky top-0 z-50">
        <div className="max-w-7xl mx-auto flex items-center justify-between p-4">
          <Link href="/">
            <div className="w-[171px] h-[29px] bg-gray-50 flex items-center justify-center text-xl font-bold text-gray-800">
              Upfrica
            </div>
          </Link>
          <div className="flex items-center space-x-4">
            {/* Desktop Navigation */}
            <nav className="hidden lg:block">
              <ul className="flex space-x-6">
                <li>
                  <Link
                    href="/research-areas"
                    className="hover:text-blue-600 transition"
                  >
                    Research areas
                  </Link>
                </li>
                <li>
                  <Link href="/blog" className="hover:text-blue-600 transition">
                    Blog
                  </Link>
                </li>
                <li>
                  <Link
                    href="/publications"
                    className="hover:text-blue-600 transition"
                  >
                    Publications
                  </Link>
                </li>
                <li>
                  <Link
                    href="/conferences-and-events"
                    className="hover:text-blue-600 transition"
                  >
                    Conferences
                  </Link>
                </li>
                <li>
                  <Link
                    href="/code-and-datasets"
                    className="hover:text-blue-600 transition"
                  >
                    Code and datasets
                  </Link>
                </li>
                <li>
                  <Link
                    href="/academic-engagements"
                    className="hover:text-blue-600 transition"
                  >
                    Academia
                  </Link>
                </li>
                <li>
                  <Link
                    href="/careers"
                    className="hover:text-blue-600 transition"
                  >
                    Careers
                  </Link>
                </li>
              </ul>
            </nav>
            <button
              onClick={() => setMenuOpen(!menuOpen)}
              className="lg:hidden text-gray-600 focus:outline-none"
              aria-label="Toggle Menu"
            >
              {menuOpen ? (
                <span className="font-semibold">Close</span>
              ) : (
                <span className="font-semibold">Menu</span>
              )}
            </button>
          </div>
        </div>
        {/* Mobile Navigation */}
        {menuOpen && (
          <nav className="lg:hidden bg-white">
            <ul className="flex flex-col space-y-2 p-4">
              <li>
                <Link
                  href="/research-areas"
                  className="block hover:text-blue-600 transition"
                >
                  Research areas
                </Link>
              </li>
              <li>
                <Link
                  href="/blog"
                  className="block hover:text-blue-600 transition"
                >
                  Blog
                </Link>
              </li>
              <li>
                <Link
                  href="/publications"
                  className="block hover:text-blue-600 transition"
                >
                  Publications
                </Link>
              </li>
              <li>
                <Link
                  href="/conferences-and-events"
                  className="block hover:text-blue-600 transition"
                >
                  Conferences
                </Link>
              </li>
              <li>
                <Link
                  href="/code-and-datasets"
                  className="block hover:text-blue-600 transition"
                >
                  Code and datasets
                </Link>
              </li>
              <li>
                <Link
                  href="/academic-engagements"
                  className="block hover:text-blue-600 transition"
                >
                  Academia
                </Link>
              </li>
              <li>
                <Link
                  href="/careers"
                  className="block hover:text-blue-600 transition"
                >
                  Careers
                </Link>
              </li>
            </ul>
          </nav>
        )}
      </header>

      <header
        style={{
          backgroundImage:
            'url("https://images.pexels.com/photos/6214476/pexels-photo-6214476.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2")',
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
        className="relative text-white pt-8 pb-4"
      >
        {/* Dark overlay */}
        <div className="absolute inset-0 bg-black opacity-30"></div>
        <div className="relative container mx-auto px-4 flex flex-col sm:flex-row items-center justify-between">
          {/* Skip Link */}
          <a href="#content" className="sr-only">
            Skip to content
          </a>
          {/* Logo using Upfrica image */}
          <div className="flex items-center">
            <Link href="/help" className="flex items-center">
              <img
                src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp"
                alt="Upfrica Logo"
                className="h-10"
              />
            </Link>
          </div>
          {/* Sign-in Button */}
          <div className="hidden lg:block">
            <a
              href="https://www.Upfrica.com/sso-forced/zendesk?return_to=https://help.Upfrica.com/hc/en-us?segment=shopping"
              className="inline-block"
            >
              <button className="border border-white rounded-full px-3 py-1">
                Sign in
              </button>
            </a>
          </div>
        </div>
        {/* Hero Banner with search */}
        <section className="relative text-center mt-8 p-2 mb-8">
          <h1 className="text-4xl font-semibold text-white mb-4">
            Find a blog?
          </h1>
          <div className="max-w-lg mx-auto">
            <form action="/hc/search" method="get" className="relative">
              <input
                type="search"
                name="query"
                placeholder="Type your search here..."
                className="w-full pl-4 pr-12 py-3 rounded-full border border-violet-700 focus:outline-none focus:ring-2 focus:ring-violet-700"
              />
              <button
                type="submit"
                className="absolute right-0 top-0 h-full px-4"
                aria-label="Search"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6 text-gray-600"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm11 4l-4-4"
                  />
                </svg>
              </button>
            </form>
          </div>
        </section>
      </header>

      {/* Main Container: Filters & Search Results */}
      <main className="max-w-7xl mx-auto px-4 py-8">
        <div className="bg-white shadow rounded-md p-6">
          <div className="flex flex-col md:flex-row">
            {/* Sidebar: Filter Module */}
            <aside className="md:w-1/4 border-r pr-4">
              <h2 className="text-xl font-bold mb-4">Filters</h2>
              <div className="space-y-6">
                {/* Research Area Filter */}
                <div>
                  <div className="flex justify-between items-center">
                    <h3 className="font-semibold text-gray-700">
                      Research area
                    </h3>
                    <button type="button" className="text-sm text-blue-500">
                      Toggle
                    </button>
                  </div>
                  <ul className="mt-2 space-y-1">
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>Conversational AI (288)</span>
                      </label>
                    </li>
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>Machine learning (146)</span>
                      </label>
                    </li>
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>Computer vision (70)</span>
                      </label>
                    </li>
                  </ul>
                </div>

                {/* Tag Filter */}
                <div>
                  <div className="flex justify-between items-center">
                    <h3 className="font-semibold text-gray-700">Tag</h3>
                    <button type="button" className="text-sm text-blue-500">
                      Toggle
                    </button>
                  </div>
                  <ul className="mt-2 space-y-1">
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>Alexa (147)</span>
                      </label>
                    </li>
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>Natural-language understanding (NLU) (86)</span>
                      </label>
                    </li>
                  </ul>
                </div>

                {/* Conference Filter */}
                <div>
                  <div className="flex justify-between items-center">
                    <h3 className="font-semibold text-gray-700">Conference</h3>
                    <button type="button" className="text-sm text-blue-500">
                      Toggle
                    </button>
                  </div>
                  <ul className="mt-2 space-y-1">
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>ICASSP 2019 (10)</span>
                      </label>
                    </li>
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>NeurIPS 2022 (9)</span>
                      </label>
                    </li>
                  </ul>
                </div>

                {/* Journal Filter */}
                <div>
                  <div className="flex justify-between items-center">
                    <h3 className="font-semibold text-gray-700">Journal</h3>
                  </div>
                  <ul className="mt-2 space-y-1">
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>Journal of Manufacturing Systems (1)</span>
                      </label>
                    </li>
                  </ul>
                </div>

                {/* Author Filter */}
                <div>
                  <div className="flex justify-between items-center">
                    <h3 className="font-semibold text-gray-700">Author</h3>
                    <button type="button" className="text-sm text-blue-500">
                      Toggle
                    </button>
                  </div>
                  <ul className="mt-2 space-y-1">
                    <li>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        <span>Larry Hardesty (96)</span>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/bulksell/page.jsx =====
import { FaRegEdit, FaImage, FaSortUp, FaSortDown } from "react-icons/fa";
import { FiAlertCircle } from "react-icons/fi";

const headers = [
  { label: "", width: "64px" }, // Checkbox
  { label: "Edit", width: "68px" },
  { label: "Status", width: "69px" },
  { label: "Photos", width: "86px" },
  { label: "Item category 1", width: "144px" },
  { label: "Title", width: "324px" },
  { label: "Custom label (SKU)", width: "132px" },
  { label: "Format", width: "134px" },
  { label: "Duration", width: "144px" },
  { label: "Available quantity", width: "136px" },
  { label: "Buy it now", width: "145px" },
  { label: "Starting bid", width: "128px" },
  { label: "Offers", width: "128px" },
  { label: "Dispatch time", width: "185px" },
  { label: "VAT", width: "128px" },
  { label: "Start time", width: "144px" },
  { label: "Condition", width: "150px" },
  { label: "Postage details", width: "144px" },
  { label: "Item specifics", width: "132px" },
  { label: "Item description", width: "144px" },
  { label: "Sell it faster", width: "130px" },
  { label: "Last modified", width: "144px" },
  { label: "Hazard information", width: "144px" },
  { label: "Selling fees", width: "148px" },
];

export default function BulkGridTable() {
  return (
    <div className="overflow-auto border rounded-lg shadow max-w-full container">
      <table className="min-w-[3400px] w-full border-collapse">
        <thead className="sticky top-0 bg-gray-100 z-10 text-xs text-gray-800">
          <tr>
            {headers.map((head, idx) => (
              <th
                key={idx}
                className="border-b px-2 py-3 font-medium text-left whitespace-nowrap"
                style={{ width: head.width, minWidth: head.width }}
              >
                <div className="flex items-center justify-between">
                  {head.label || <input type="checkbox" />}
                  {head.label && (
                    <span className="ml-1 text-gray-400">
                      <FaSortUp className="-mb-1" />
                      <FaSortDown className="-mt-1" />
                    </span>
                  )}
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          <tr className="hover:bg-gray-50 text-sm">
            <td className="px-2 py-2">
              <input type="checkbox" />
            </td>
            <td className="px-2 py-2 text-blue-600">
              <FaRegEdit />
            </td>
            <td className="px-2 py-2 text-yellow-500">
              <FiAlertCircle />
            </td>
            <td className="px-2 py-2">
              <img
                src="https://pics.ebaystatic.com/aw/pics/stockimage1.jpg"
                className="w-10 h-10 object-cover"
                alt="product"
              />
            </td>
            <td className="px-2 py-2">Antiques &gt; Lighting</td>
            <td className="px-2 py-2">
              <input
                type="text"
                className="w-full border rounded px-2 py-1"
                placeholder="Item title"
              />
            </td>
            <td className="px-2 py-2 text-gray-400">N/A</td>
            <td className="px-2 py-2">
              <select className="border rounded px-2 py-1 w-full">
                <option>Buy it now</option>
                <option>Auction</option>
              </select>
            </td>
            <td className="px-2 py-2">7 Days</td>
            <td className="px-2 py-2 text-right">1</td>
            <td className="px-2 py-2">¬£49.99</td>
            <td className="px-2 py-2">¬£39.99</td>
            <td className="px-2 py-2">Yes</td>
            <td className="px-2 py-2">2 Days</td>
            <td className="px-2 py-2">N/A</td>
            <td className="px-2 py-2">Today</td>
            <td className="px-2 py-2">Used</td>
            <td className="px-2 py-2">UK Post</td>
            <td className="px-2 py-2">Size, Brand</td>
            <td className="px-2 py-2">Edit</td>
            <td className="px-2 py-2">Yes</td>
            <td className="px-2 py-2">Now</td>
            <td className="px-2 py-2">No</td>
            <td className="px-2 py-2 text-right">¬£0.00</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}


===== src/app/(pages)/careers/apply/page.jsx =====
"use client";

import React, { useState } from "react";

const initialFormData = {
  name: "",
  email: "",
  dob: "",
  address: "",
  city: "",
  mobile: "",
  alerts: "No",
  inspiration: "",
  declaration: false,
};

export default function CareerWithUs() {
  const [formData, setFormData] = useState(initialFormData);
  const [resumeFile, setResumeFile] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submissionStatus, setSubmissionStatus] = useState(null);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleResumeUpload = (e) => {
    setResumeFile(e.target.files[0]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!resumeFile) {
      alert("Please upload your resume.");
      return;
    }
    if (!formData.declaration) {
      alert("Please declare that the information is true and complete.");
      return;
    }

    setIsSubmitting(true);
    setSubmissionStatus(null);

    const data = new FormData();
    Object.entries(formData).forEach(([key, value]) => {
      data.append(key, value);
    });
    data.append("resume", resumeFile);

    try {
      const res = await fetch(
        "https://media.upfrica.com/api/jobs/submit-application/",
        {
          method: "POST",
          body: data,
        },
      );

      if (res.ok) {
        alert("Your application has been submitted successfully!");
        setSubmissionStatus("success");
        setFormData(initialFormData);
        setResumeFile(null);
      } else {
        const errText = await res.text();
        alert(`Submission failed: ${errText}`);
        setSubmissionStatus("error");
      }
    } catch (err) {
      console.error(err);
      alert("An error occurred. Please try again.");
      setSubmissionStatus("error");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="bg-gray-100 min-h-screen py-10 px-4">
      <div className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-md">
        <h2 className="text-3xl font-semibold text-purple-500 mb-6 text-center">
          Job Application Form
        </h2>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Name <span className="text-red-500">*</span>
            </label>
            <input
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
              placeholder="Enter your full name"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
          </div>

          {/* Email */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email <span className="text-red-500">*</span>
            </label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
              placeholder="e.g. you@example.com"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
          </div>

          {/* Date of Birth */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Date of Birth <span className="text-red-500">*</span>
            </label>
            <input
              type="date"
              name="dob"
              value={formData.dob}
              onChange={handleChange}
              required
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
          </div>

          {/* Address */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Address <span className="text-red-500">*</span>
            </label>
            <input
              name="address"
              value={formData.address}
              onChange={handleChange}
              required
              placeholder="Enter your address"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
          </div>

          {/* City */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              City <span className="text-red-500">*</span>
            </label>
            <input
              name="city"
              value={formData.city}
              onChange={handleChange}
              required
              placeholder="Enter your city"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
          </div>

          {/* Mobile Number */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Mobile Number <span className="text-red-500">*</span>
            </label>
            <input
              type="tel"
              name="mobile"
              value={formData.mobile}
              onChange={handleChange}
              required
              placeholder="e.g. +1234567890"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
          </div>

          {/* Job Alerts */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Would you like to receive job alerts?{" "}
              <span className="text-red-500">*</span>
            </label>
            <div className="flex gap-6">
              {["Yes", "No"].map((opt) => (
                <label key={opt} className="inline-flex items-center">
                  <input
                    type="radio"
                    name="alerts"
                    value={opt}
                    checked={formData.alerts === opt}
                    onChange={handleChange}
                    className="form-radio"
                    disabled={isSubmitting}
                  />
                  <span className="ml-2">{opt}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Inspiration */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              What inspires you to work with us?{" "}
              <span className="text-red-500">*</span>
            </label>
            <textarea
              name="inspiration"
              value={formData.inspiration}
              onChange={handleChange}
              required
              rows={4}
              placeholder="Share your inspiration..."
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
          </div>

          {/* Resume Upload */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              CV / Resume <span className="text-red-500">*</span>
            </label>
            <input
              type="file"
              accept=".pdf,.doc,.docx"
              onChange={handleResumeUpload}
              required
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-violet-700"
              disabled={isSubmitting}
            />
            {resumeFile && (
              <p className="mt-2 text-sm text-gray-600">
                Selected: {resumeFile.name}
              </p>
            )}
          </div>

          {/* Declaration */}
          <div className="flex items-center">
            <input
              type="checkbox"
              name="declaration"
              checked={formData.declaration}
              onChange={handleChange}
              required
              className="h-4 w-4 text-violet-700 border-gray-300 rounded"
              disabled={isSubmitting}
            />
            <label className="ml-2 text-gray-700">
              I declare that the information on this form is true and complete.
            </label>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={isSubmitting}
            className={`w-full py-3 text-white font-medium rounded-md transition ${
              isSubmitting
                ? "bg-violet-400 cursor-not-allowed"
                : "bg-violet-700 hover:bg-violet-800"
            }`}
          >
            {isSubmitting ? "Submitting‚Ä¶" : "Submit"}
          </button>

          {submissionStatus === "error" && (
            <p className="text-red-500 text-center">
              There was an error submitting your application. Please try again.
            </p>
          )}
        </form>
      </div>
    </div>
  );
}


===== src/app/(pages)/careers/page.jsx =====
import CareersHero from "@/components/Careers/CareersHero";
import JobDetails from "@/components/Careers/JobList ";
import JoinUpfrica from "@/components/Careers/JoinUpfrica";
import JoinUsSection from "@/components/Careers/JoinUsSection";
import Header from "@/components/common/header/Header";
import React from "react";

const page = () => {
  return (
    <div>
      <Header />
      <CareersHero />
      {/* <JoinUsSection/> */}
      <JoinUpfrica />
      <JobDetails />
    </div>
  );
};

export default page;


===== src/app/(pages)/cart/layout.js =====
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
    </div>
  );
};

export default layout;


===== src/app/(pages)/cart/page.jsx =====
"use client";

import React, { useEffect, useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { FaHeart } from "react-icons/fa";
import { HiMiniXMark } from "react-icons/hi2";
import { AiOutlineMinus, AiOutlinePlus } from "react-icons/ai";
import { useSelector, useDispatch } from "react-redux";
import {
  setBasket,
  removeFromBasket,
  updateQuantity,
} from "../../store/slices/cartSlice";

const Cart = () => {
  const token = useSelector((state) => state.auth.token);
  const basket = useSelector((state) => state.basket.items);
  const dispatch = useDispatch();
  const [showCouponInput, setShowCouponInput] = useState(false);
  const [couponCode, setCouponCode] = useState("");
  const [couponError, setCouponError] = useState("");
  const [agreed, setAgreed] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  // Load basket from localStorage on mount
  useEffect(() => {
    const stored = JSON.parse(localStorage.getItem("basket")) || [];
    dispatch(setBasket(stored));
  }, [dispatch]);

  const handleQuantityChange = (id, quantity) => {
    if (quantity < 1) return;
    dispatch(updateQuantity({ id, quantity }));
  };

  const handleRemoveProduct = (id) => {
    dispatch(removeFromBasket(id));
  };

  const handleApplyCoupon = () => {
    // Stub: no valid coupons
    setCouponError("No coupon available");
  };

  const handleCheckout = async () => {
    if (!token) {
      router.push("/login");
      return;
    }
    if (!agreed) return;

    const items = basket.map((item) => ({
      product: item.id,
      quantity: item.quantity,
    }));

    setIsLoading(true);
    try {
      const response = await fetch("https://media.upfrica.com/api/cart/add/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Token ${token}`,
        },
        body: JSON.stringify({ items }),
      });

      if (!response.ok) throw new Error("Failed to add to cart");
      const result = await response.json();
      router.push(`/checkout?cart_id=${result.cart_id}`);
    } catch (error) {
      console.error("Checkout error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Calculate subtotal
  const subtotal = basket.reduce(
    (sum, item) => sum + (item.price_cents / 100) * item.quantity,
    0,
  );

  // Calculate shipping per updated rules:
  // - Group by seller
  // - For each seller group, flatten into individual units
  // - If only one unit, use its primary postage
  // - If multiple units, use the highest-primary for first, then for each extra unit
  //   use its secondary_postage if > 0 (else free)
  const shippingCost = useMemo(() => {
    const bySeller = {};
    basket.forEach((item) => {
      const seller = item.seller || "default";
      bySeller[seller] = bySeller[seller] || [];
      bySeller[seller].push(item);
    });

    let total = 0;
    Object.values(bySeller).forEach((items) => {
      // build a list of units
      const units = [];
      items.forEach(
        ({ postage_fee = 0, secondary_postage_fee = 0, quantity }) => {
          for (let i = 0; i < quantity; i++) {
            units.push({
              postage: postage_fee / 100,
              secondary: secondary_postage_fee / 100,
            });
          }
        },
      );

      if (units.length === 1) {
        total += units[0].postage;
      } else if (units.length > 1) {
        units.sort((a, b) => b.postage - a.postage);
        total += units[0].postage;
        for (let i = 1; i < units.length; i++) {
          total += units[i].secondary > 0 ? units[i].secondary : 0;
        }
      }
    });

    return total;
  }, [basket]);

  const total = subtotal + shippingCost;

  return (
    <div className="container mx-auto px-4 mt-12">
      <div className="grid lg:grid-cols-6 gap-5 my-10">
        {/* --- Cart Items --- */}
        <div className="lg:col-span-4 bg-white p-4 lg:p-6 shadow rounded-lg">
          <div className="flex justify-between border-b pb-4">
            <h1 className="text-2xl font-bold">Shopping Cart</h1>
            <h2 className="text-lg font-semibold text-gray-700">
              {basket.length} {basket.length === 1 ? "Item" : "Items"}
            </h2>
          </div>

          {basket.length > 0 ? (
            basket.map((product) => (
              <div
                key={product.id}
                className="flex items-center gap-4 py-4 border-b last:border-b-0"
              >
                <div className="flex-shrink-0 w-24 h-24 lg:w-28 lg:h-28">
                  <img
                    src={
                  
                  product.image?.[0]?.image_url ||
                  product.image?.[0]?.url ||
                  "/placeholder.png"
                    }
                    alt={product.title}
                    className="w-full h-full object-contain rounded-md"
                  />
                </div>
                <div className="flex-1 flex flex-col justify-between">
                  <div className="flex justify-between">
                    <div>
                      <p className="text-lg font-semibold text-gray-800">
                        {product.title}
                      </p>
                      <p className="text-sm text-gray-500 mt-1">
                        SKU: {product.sku || "N/A"}
                      </p>
                      <p className="text-sm text-gray-500 mt-1">
                        Postage: ‚Çµ{(product.postage_fee / 100).toFixed(2)}
                      </p>
                      {product.quantity > 1 &&
                        product.secondary_postage_fee > 0 && (
                          <p className="text-sm text-gray-500">
                            Secondary Postage: ‚Çµ
                            {(product.secondary_postage_fee / 100).toFixed(2)}
                          </p>
                        )}
                    </div>

                    {/* + / ‚Äì quantity controls */}
                    <div className="flex items-center space-x-2 ml-4">
                      <button
                        onClick={() =>
                          handleQuantityChange(product.id, product.quantity - 1)
                        }
                        disabled={product.quantity <= 1}
                        className="p-1 border border-gray-300 rounded disabled:opacity-50"
                      >
                        <AiOutlineMinus />
                      </button>
                      <span className="px-2">{product.quantity}</span>
                      <button
                        onClick={() =>
                          handleQuantityChange(product.id, product.quantity + 1)
                        }
                        disabled={product.quantity >= 10}
                        className="p-1 border border-gray-300 rounded disabled:opacity-50"
                      >
                        <AiOutlinePlus />
                      </button>
                    </div>
                  </div>

                  <div className="flex justify-between items-center mt-3">
                    <div className="flex items-center space-x-4">
                      <button className="text-gray-500 hover:text-gray-800 text-sm flex items-center">
                        <FaHeart className="mr-1" />
                        Add to Favorites
                      </button>
                      <button
                        onClick={() => handleRemoveProduct(product.id)}
                        className="text-red-600 hover:text-red-800 text-sm flex items-center"
                      >
                        <HiMiniXMark className="mr-1" />
                        Remove
                      </button>
                    </div>
                    <p className="text-lg font-medium text-gray-900">
                      ‚Çµ
                      {((product.price_cents / 100) * product.quantity).toFixed(
                        2,
                      )}
                    </p>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <p className="text-center text-gray-600 py-12">
              Your cart is empty.
            </p>
          )}

          <Link
            href="/"
            className="inline-block mt-6 text-indigo-600 hover:underline text-sm"
          >
            &larr; Continue shopping
          </Link>
        </div>

        {/* --- Order Summary --- */}
        <div className="lg:col-span-2 bg-gray-50 p-6 shadow rounded-lg flex flex-col justify-between h-[400px] lg:h-[500px] sticky top-0">
          <div>
            <h2 className="text-2xl font-bold text-gray-800 border-b pb-4">
              Order Summary
            </h2>

            <div className="flex justify-between items-center mt-6">
              <span className="text-lg text-gray-700">
                Items ({basket.length})
              </span>
              <span className="text-lg font-medium text-gray-900">
                ‚Çµ{subtotal.toFixed(2)}
              </span>
            </div>

            <div className="mt-6">
              {!showCouponInput ? (
                <button
                  type="button"
                  onClick={() => setShowCouponInput(true)}
                  className="text-sm underline underline-offset-2 text-indigo-600 hover:text-indigo-700"
                >
                  Have a coupon?
                </button>
              ) : (
                <div className="mt-2">
                  <input
                    type="text"
                    placeholder="Enter your code"
                    value={couponCode}
                    onChange={(e) => setCouponCode(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-indigo-500"
                  />
                  <button
                    type="button"
                    onClick={handleApplyCoupon}
                    className="mt-2 w-full py-3 text-sm font-medium uppercase rounded border bg-white"
                  >
                    Apply
                  </button>
                  {couponError && (
                    <p className="mt-1 text-xs text-red-500 underline">
                      {couponError}
                    </p>
                  )}
                </div>
              )}
            </div>
          </div>

          <div>
            <div className="flex justify-between text-lg font-semibold text-gray-700 mt-4">
              <span>Shipping</span>
              <span className="text-gray-900">‚Çµ{shippingCost.toFixed(2)}</span>
            </div>
            <div className="flex justify-between text-xl font-semibold text-gray-900 mt-2">
              <span>Total cost</span>
              <span>‚Çµ{total.toFixed(2)}</span>
            </div>

            {/* Terms checkbox immediately above the button */}
            <div className="mt-4 flex items-start space-x-2">
              <input
                type="checkbox"
                id="agree"
                checked={agreed}
                onChange={() => setAgreed((a) => !a)}
                className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
              />
              <label htmlFor="agree" className="text-sm text-gray-700">
                I agree to the{" "}
                <Link href="/terms" className="text-indigo-600 underline">
                  Terms & Conditions
                </Link>{" "}
                and{" "}
                <Link href="/privacy" className="text-indigo-600 underline">
                  Privacy Policy
                </Link>
                .
              </label>
            </div>

            <button
              onClick={handleCheckout}
              disabled={basket.length === 0 || isLoading || !agreed}
              className={`mt-4 w-full justify-center items-center py-3 text-lg font-semibold btn-primary rounded ${
                basket.length === 0 || isLoading || !agreed
                  ? "opacity-50 cursor-not-allowed"
                  : "btn-primary"
              }`}
            >
              {isLoading ? (
                <div className="flex space-x-2 justify-center py-3">
                  <div className="w-2 h-2 bg-white rounded-full animate-bounce" />
                  <div className="w-2 h-2 bg-white rounded-full animate-bounce delay-150" />
                  <div className="w-2 h-2 bg-white rounded-full animate-bounce delay-300" />
                </div>
              ) : (
                "Checkout"
              )}
            </button>
          </div>
        </div>
      </div>

      {/* --- Mobile Bottom Bar --- */}
      <div className="sm:hidden fixed bottom-0 left-0 w-full bg-white border-t py-3 px-6 flex justify-between items-center shadow-md">
        <span className="text-lg font-medium text-gray-900">
          ‚Çµ{total.toFixed(2)}
        </span>
        <button
          onClick={handleCheckout}
          disabled={basket.length === 0 || isLoading || !agreed}
          className={`py-3 px-4 text-sm font-semibold text-white bg-indigo-600 rounded ${
            basket.length === 0 || isLoading || !agreed
              ? "opacity-50 cursor-not-allowed"
              : "hover:bg-indigo-700"
          }`}
        >
          {isLoading ? (
            <div className="flex space-x-2">
              <div className="w-2 h-2 bg-white rounded-full animate-bounce" />
              <div className="w-2 h-2 bg-white rounded-full animate-bounce delay-150" />
              <div className="w-2 h-2 bg-white rounded-full animate-bounce delay-300" />
            </div>
          ) : (
            "Checkout"
          )}
        </button>
      </div>
    </div>
  );
};

export default Cart;


===== src/app/(pages)/categories/[slug]/page.jsx =====
"use client";
import AmazonLeftFilter from "@/components/priceFiter/LeftFilter";
import Link from "next/link";
import { useParams } from "next/navigation";
import React, { useEffect, useState } from "react";
import ProductCard from "@/components/home/ProductList/ProductCard";

const SkeletonLoader = () => (
  <div className="bg-gray-200 animate-pulse rounded-lg overflow-hidden border p-4 flex items-center space-x-6">
    <div className="w-1/4 h-52 bg-gray-300 rounded-md"></div>
    <div className="w-3/4 space-y-2">
      <div className="h-6 bg-gray-300 rounded w-3/4"></div>
      <div className="h-4 bg-gray-300 rounded w-1/2"></div>
      <div className="h-6 bg-gray-300 rounded w-1/4"></div>
      <div className="h-4 bg-gray-300 rounded w-1/3"></div>
    </div>
  </div>
);

const DetelsCategories = () => {
  const { slug } = useParams();
  const [categoryData, setCategoryData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (slug) {
      const fetchCategoryData = async () => {
        try {
          const response = await fetch(
            `https://media.upfrica.com/api/categories/${slug}/products/`,
          );
          const data = await response.json();
          setCategoryData(data.results || []);
        } catch (error) {
          console.error("Error fetching category data:", error);
        } finally {
          setLoading(false);
        }
      };
      fetchCategoryData();
    }
  }, [slug]);

  return (
    <div className={` ${loading ? "h-screen" : "h-auto"}`}>
      <div className="grid lg:grid-cols-7 gap-10">
        {/* <PriceFilter /> */}
        <div className="col-span-2  hidden lg:block">
          <AmazonLeftFilter />
        </div>
        <div className="col-span-5 p-4">
          <h1 className="text-2xl font-semibold tracking-wide pb-4">
            Speakers & Accessories in Ghana for sale
          </h1>
          <div className="grid grid-cols-1 space-y-8 ">
            {loading
              ? Array.from({ length: 4 }).map((_, index) => (
                  <SkeletonLoader key={index} />
                ))
              : categoryData.map((product) => (
                  <ProductCard key={product.id} product={product} />
                ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DetelsCategories;


===== src/app/(pages)/categories/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header></Header>
      {children}
      <Footer></Footer>
    </div>
  );
};

export default layout;


===== src/app/(pages)/categories/page.jsx =====
"use client";

import Link from "next/link";
import React, { useEffect, useState } from "react";
import { FaSearch } from "react-icons/fa";

// A small skeleton loader component
function CategorySkeleton() {
  // Let's display 6 placeholders
  const skeletonArray = [1, 2, 3, 4, 5, 6];
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6 p-4 container mx-auto">
      {skeletonArray.map((num) => (
        <div
          key={num}
          className="bg-white rounded-lg shadow-2xl border border-gray-200 p-4 h-full flex flex-col items-center
                     animate-pulse"
        >
          {/* Circle placeholder for the image */}
          <div className="rounded-full bg-gray-300 w-[200px] h-[200px] mb-4" />
          {/* Rectangle placeholder for the text */}
          <div className="h-4 bg-gray-300 w-1/2 rounded" />
        </div>
      ))}
    </div>
  );
}

const Categories = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true); // track if data is loading

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const res = await fetch("https://upfrica.com/api/v1/categories", {
          next: { revalidate: 120 },
        });

        if (!res.ok) {
          throw new Error("Failed to fetch categories");
        }

        let data = await res.json();
        console.log(data);
        data = data.categories.filter((item) => item.image && item.active);
        setCategories(data);
      } catch (error) {
        console.error(error);
      } finally {
        // Whether success or error, stop the loading spinner/skeleton
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  return (
    <div className="bg-gray-100">
      <div className="flex flex-col items-center justify-center py-6 lg:py-20 p-4">
        {/* Heading */}
        <h1 className="text-2xl lg:text-4xl font-bold mb-6">
          Shop by Categories
        </h1>

        {/* Search Input Field */}
        {/* <input
          type="text"
          placeholder="Search categories..."
          className="border border-gray-300 p-3 rounded-full w-2/6 shadow-md
                     focus:outline-none focus:border-purple-500"
        /> */}
        <div className="relative w-full sm:w-3/12">
          {/* The search input */}
          <input
            type="text"
            placeholder="Search categories..."
            className="border border-gray-300 p-3 rounded-full w-full shadow-md 
                   focus:outline-none focus:border-[#8710D8] pr-10 text-lg ps-4"
            // pr-10 gives space for the icon on the right
          />

          {/* The icon, absolutely positioned to the right */}
          <FaSearch
            className="absolute top-1/2 right-4 
                                transform -translate-y-1/2 
                                text-gray-400 hover:text-gray-600 
                                cursor-pointer h-6 w-6"
            aria-hidden="true"
          />
        </div>
      </div>

      {loading ? (
        // Render skeleton while loading
        <CategorySkeleton />
      ) : categories.length === 0 ? (
        // If no categories found, show fallback text
        <p className="text-center pb-10">No categories available.</p>
      ) : (
        // Render the real categories
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6 p-4 container mx-auto">
          {categories.map((product) => (
            <Link href={`/categories/${product.slug}`} key={product.id}>
              <div className="bg-white rounded-lg shadow-2xl border border-gray-200 p-4 h-full flex flex-col items-center hover:shadow-md hover:border-gray-300 transition">
                {/* Image Section */}
                <img
                  src={product.image}
                  alt={product.slug}
                  className="w-[200px] h-[200px] object-cover rounded-full mb-4 shadow-md"
                />

                {/* Name Section */}
                <h2 className="text-lg font-semibold text-gray-800">
                  {product.name}
                </h2>
              </div>
            </Link>
          ))}
        </div>
      )}
    </div>
  );
};

export default Categories;


===== src/app/(pages)/checkout/layout.js =====
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
    </div>
  );
};

export default layout;


===== src/app/(pages)/checkout/page.jsx =====
// "use client";

// import React, { useEffect, useState, useMemo } from "react";
// import { CountryDropdown } from "react-country-region-selector";
// import {
//   AiOutlineClose,
// } from "react-icons/ai";
// import {
//   FiTruck,
//   FiCreditCard,
//   FiEdit,
//   FiPlus,
// } from "react-icons/fi";
// import { useRouter, useSearchParams } from "next/navigation";
// import { Formik, Form, Field, ErrorMessage } from "formik";
// import * as Yup from "yup";
// import { useSelector } from "react-redux";

// const Checkout = () => {
//   const { user, token } = useSelector((state) => state.auth);
//   const router = useRouter();
//   const cartId = useSearchParams().get("cart_id");

//   const [addresses, setAddresses] = useState([]);
//   const [selectedAddress, setSelectedAddress] = useState(null);
//   const [showChangeModal, setShowChangeModal] = useState(false);
//   const [showNewModal, setShowNewModal] = useState(false);
//   const [basket, setBasket] = useState([]);
//   const [paymentMethod, setPaymentMethod] = useState("");
//   const [isLoading, setIsLoading] = useState(false);

//   // Load basket
//   useEffect(() => {
//     const stored = JSON.parse(localStorage.getItem("basket")) || [];
//     setBasket(stored);
//   }, []);

//   // Fetch addresses & pick default
//   useEffect(() => {
//     if (!token) return;
//     fetch("https://media.upfrica.com/api/addresses/", {
//       headers: { Authorization: `Token ${token}` },
//     })
//       .then((r) => r.json())
//       .then((data) => {
//         setAddresses(data);
//         const def = data.find((a) => a.default) || data[0];
//         setSelectedAddress(def?.id || null);
//       })
//       .catch(console.error);
//   }, [token]);

//   // Totals
//   const subtotal = useMemo(
//     () =>
//       basket.reduce(
//         (sum, i) => sum + (i.price_cents / 100) * i.quantity,
//         0
//       ),
//     [basket]
//   );
//   const shippingCost = useMemo(() => {
//     const bySeller = {};
//     basket.forEach((i) => {
//       const s = i.seller || "default";
//       bySeller[s] = bySeller[s] || [];
//       for (let n = 0; n < i.quantity; n++) {
//         bySeller[s].push({
//           primary: i.postage_fee / 100,
//           secondary: i.secondary_postage_fee / 100,
//         });
//       }
//     });
//     return Object.values(bySeller).reduce((sum, units) => {
//       if (!units.length) return sum;
//       if (units.length === 1) return sum + units[0].primary;
//       units.sort((a, b) => b.primary - a.primary);
//       const [first, ...rest] = units;
//       return (
//         sum +
//         first.primary +
//         rest.reduce((sub, u) => sub + (u.secondary > 0 ? u.secondary : 0), 0)
//       );
//     }, 0);
//   }, [basket]);
//   const total = subtotal + shippingCost;

//   const LoadingDots = ({ color = "white" }) => (
//     <div className="flex space-x-2 justify-center">
//       <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce`} />
//       <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-150`} />
//       <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`} />
//     </div>
//   );

//   const placeOrder = async () => {
//     if (!selectedAddress || !paymentMethod || !cartId) return;
//     setIsLoading(true);
//     try {
//       const res = await fetch(
//         "https://media.upfrica.com/api/cart/checkout/",
//         {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Token ${token}`,
//           },
//           body: JSON.stringify({
//             cart_id: Number(cartId),
//             address: selectedAddress,
//             payment_method_id: paymentMethod,
//           }),
//         }
//       );
//       const json = await res.json();
//       setIsLoading(false);
//       router.push(json.payment_url || json.stripe_url || "/");
//     } catch (err) {
//       console.error(err);
//       setIsLoading(false);
//     }
//   };

//   const addressSchema = Yup.object({
//     full_name: Yup.string().required("Required"),
//     street: Yup.string().required("Required"),
//     city: Yup.string().required("Required"),
//     state: Yup.string().required("Required"),
//     zip_code: Yup.string().required("Required"),
//     country: Yup.string().required("Required"),
//   });

//   return (
//     <main className="container mx-auto px-4 py-8">
//       <h1 className="text-3xl font-bold mb-6">Checkout</h1>
//       <div className="grid xl:grid-cols-3 gap-8">
//         {/* Shipping & Payment */}
//         <div className="xl:col-span-2 space-y-8">
//           {/* Shipping Address */}
//           <section className="bg-white p-6 rounded-lg shadow">
//             <h2 className="text-xl font-semibold flex items-center mb-4">
//               <FiTruck className="mr-2 text-indigo-600" />
//               Shipping Address
//             </h2>
//             {selectedAddress ? (
//               <>
//                 <div className="relative bg-gray-50 border rounded-lg p-4">
//                   {(() => {
//                     const a = addresses.find((x) => x.id === selectedAddress);
//                     return (
//                       <>
//                         <p className="font-medium">
//                           {a.address_data.street}, {a.address_data.city}
//                         </p>
//                         <p className="text-sm text-gray-600">
//                           {a.address_data.state}, {a.address_data.zip_code},{" "}
//                           {a.address_data.country}
//                         </p>
//                       </>
//                     );
//                   })()}
//                   <button
//                     onClick={() => setShowChangeModal(true)}
//                     className="absolute top-4 right-4 flex items-center text-indigo-600 hover:underline"
//                   >
//                     <FiEdit className="mr-1" /> Change
//                   </button>
//                 </div>
//                 <button
//                   onClick={() => setShowNewModal(true)}
//                   className="mt-4 inline-flex items-center px-4 py-2 border border-dashed border-indigo-600 text-indigo-600 rounded hover:bg-indigo-50"
//                 >
//                   <FiPlus className="mr-2" /> Add New Address
//                 </button>
//               </>
//             ) : (
//               <button
//                 onClick={() => setShowNewModal(true)}
//                 className="inline-flex items-center px-4 py-2 border border-dashed border-indigo-600 text-indigo-600 rounded hover:bg-indigo-50"
//               >
//                 <FiPlus className="mr-2" /> Add New Address
//               </button>
//             )}
//           </section>

//           {/* Payment Method */}
//           <section className="bg-white p-6 rounded-lg shadow">
//             <h2 className="text-xl font-semibold flex items-center mb-4">
//               <FiCreditCard className="mr-2 text-indigo-600" />
//               Payment Method
//             </h2>
//             <div className="space-y-3">
//               {["paystack", "stripe"].map((m) => (
//                 <label
//                   key={m}
//                   className="flex items-center p-4 border rounded-lg cursor-pointer hover:border-indigo-400"
//                 >
//                   <input
//                     type="radio"
//                     name="payment"
//                     value={m}
//                     checked={paymentMethod === m}
//                     onChange={(e) => setPaymentMethod(e.target.value)}
//                     className="form-radio text-indigo-600"
//                   />
//                   <span className="ml-3 capitalize">{m}</span>
//                 </label>
//               ))}
//             </div>
//           </section>
//         </div>

//         {/* Order Summary */}
//         {/* <aside className="space-y-6 max-h-[calc(100vh-200px)] overflow-auto">
//           <div className="bg-white p-6 rounded-lg shadow flex flex-col">
//             <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
//             <div className="divide-y flex-grow">
//               {basket.map((item) => (
//                 <div
//                   key={item.id}
//                   className="flex justify-between py-4 items-center"
//                 >
//                   <div className="flex items-center">
//                     <img
//                       src={item.image?.[0] || "/placeholder.png"}
//                       alt={item.title}
//                       className="w-16 h-16 object-cover rounded-md mr-4"
//                     />
//                     <div>
//                       <p className="font-medium">{item.title}</p>
//                       <p className="text-sm text-gray-600">
//                         Qty: {item.quantity}
//                       </p>
//                     </div>
//                   </div>
//                   <p className="font-medium">
//                     ‚Çµ{((item.price_cents / 100) * item.quantity).toFixed(2)}
//                   </p>
//                 </div>
//               ))}
//             </div>
//             <div className="pt-4">
//               <div className="flex justify-between text-gray-700">
//                 <span>Subtotal</span>
//                 <span>‚Çµ{subtotal.toFixed(2)}</span>
//               </div>
//               <div className="flex justify-between text-gray-700">
//                 <span>Shipping</span>
//                 <span>‚Çµ{shippingCost.toFixed(2)}</span>
//               </div>
//               <div className="flex justify-between font-semibold text-lg">
//                 <span>Total</span>
//                 <span>‚Çµ{total.toFixed(2)}</span>
//               </div>
//             </div>
//             <button
//               onClick={placeOrder}
//               disabled={!selectedAddress || !paymentMethod || isLoading}
//               className={`mt-6 w-full py-3 text-white font-semibold rounded-lg ${!selectedAddress || !paymentMethod || isLoading
//                   ? "bg-indigo-300 cursor-not-allowed py-3"
//                   : "btn-primary py-3"
//                 }`}
//             >
//               {isLoading ? <LoadingDots color="white" /> : "Place Order"}
//             </button>
//           </div>
//         </aside> */}
//         <aside className="xl:max-h-[calc(100vh-250px)]">
//           <div className="bg-white p-4 rounded-lg shadow h-full flex flex-col">
//             {/* 1. Header */}
//             <h2 className="text-xl font-semibold mb-4">Order Summary</h2>

//             {/* 2. Scrollable list */}
//             <div className="divide-y overflow-auto flex-grow">
//               {basket.map((item) => (
//                 <div
//                   key={item.id}
//                   className="flex justify-between py-4 items-center"
//                 >
//                   <div className="flex items-center">
//                     <img
//                       src={item.image?.[0] || "/placeholder.png"}
//                       alt={item.title}
//                       className="w-16 h-16 object-cover rounded-md mr-4"
//                     />
//                     <div>
//                       <p className="font-medium">{item.title}</p>
//                       <p className="text-sm text-gray-600">
//                         Qty: {item.quantity}
//                       </p>
//                     </div>
//                   </div>
//                   <p className="font-medium">
//                     ‚Çµ{((item.price_cents / 100) * item.quantity).toFixed(2)}
//                   </p>
//                 </div>
//               ))}
//             </div>

//             {/* 3. Summary & Button (always at bottom) */}
//             <div className="pt-2">
//               <div className="flex justify-between text-gray-700">
//                 <span>Subtotal</span>
//                 <span>‚Çµ{subtotal.toFixed(2)}</span>
//               </div>
//               <div className="flex justify-between text-gray-700 mt-2">
//                 <span>Shipping</span>
//                 <span>‚Çµ{shippingCost.toFixed(2)}</span>
//               </div>
//               <div className="flex justify-between font-semibold text-lg mt-2">
//                 <span>Total</span>
//                 <span>‚Çµ{total.toFixed(2)}</span>
//               </div>
//             </div>
//             <button
//               onClick={placeOrder}
//               disabled={!selectedAddress || !paymentMethod || isLoading}
//               className={`mt-6 w-full py-3 text-white font-semibold rounded-lg ${!selectedAddress || !paymentMethod || isLoading
//                   ? "bg-indigo-300 cursor-not-allowed"
//                   : "btn-primary"
//                 }`}
//             >
//               {isLoading ? <LoadingDots color="white" /> : "Place Order"}
//             </button>
//           </div>
//         </aside>

//       </div>

//       {/* Change Address Modal */}
//       {showChangeModal && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
//           <div className="bg-white w-full max-w-lg p-6 rounded-lg relative">
//             <button
//               onClick={() => setShowChangeModal(false)}
//               className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
//             >
//               <AiOutlineClose size={24} />
//             </button>
//             <h3 className="text-xl font-semibold mb-4">
//               Select Shipping Address
//             </h3>
//             <div className="grid gap-4">
//               {addresses.map((a) => (
//                 <button
//                   key={a.id}
//                   onClick={() => {
//                     setSelectedAddress(a.id);
//                     setShowChangeModal(false);
//                   }}
//                   className={`p-4 border rounded-lg text-left hover:border-indigo-400 ${selectedAddress === a.id
//                     ? "border-indigo-600"
//                     : "border-gray-200"
//                     }`}
//                 >
//                   <p className="font-medium">
//                     {a.address_data.street}, {a.address_data.city}
//                   </p>
//                   <p className="text-sm text-gray-600">
//                     {a.address_data.state}, {a.address_data.zip_code},{" "}
//                     {a.address_data.country}
//                   </p>
//                 </button>
//               ))}
//             </div>
//           </div>
//         </div>
//       )}

//       {/* Add New Address Modal */}
//       {showNewModal && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
//           <div className="bg-white w-full max-w-md p-6 rounded-lg relative">
//             <button
//               onClick={() => setShowNewModal(false)}
//               className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
//             >
//               <AiOutlineClose size={24} />
//             </button>
//             <h3 className="text-xl font-semibold mb-4">Add New Address</h3>
//             <Formik
//               initialValues={{
//                 full_name: "",
//                 street: "",
//                 city: "",
//                 state: "",
//                 zip_code: "",
//                 country: "",
//               }}
//               validationSchema={addressSchema}
//               onSubmit={async (vals, { setSubmitting, resetForm }) => {
//                 try {
//                   const res = await fetch(
//                     "https://media.upfrica.com/api/addresses/",
//                     {
//                       method: "POST",
//                       headers: {
//                         "Content-Type": "application/json",
//                         Authorization: `Token ${token}`,
//                       },
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/createdProduct/page.jsx =====
import { FaRegEdit } from "react-icons/fa";
import { AiFillWarning } from "react-icons/ai";
import { BsImage } from "react-icons/bs";

const DraftListingRow = () => {
  return (
    <tr>
      <td>
        <input type="checkbox" />
        {/* You could replace with an icon toggle: <FaCheckSquare /> / <FaRegSquare /> */}
      </td>
      <td>
        <button>
          <FaRegEdit title="Edit item" />
        </button>
      </td>
      <td>
        <AiFillWarning color="orange" title="Needs Attention" />
      </td>
      <td>
        <BsImage />
        {/* OR show actual image like <img src="..." alt="preview" /> */}
      </td>
      <td>
        Chandeliers, Sconces & Lighting Fixtures <br />
        Antiques &gt; Architectural Antiques
      </td>
      <td>
        <textarea placeholder="Enter title..." />
      </td>
      <td>N/A</td>
      <td>
        <select>
          <option value="Auction">Auction</option>
          <option value="BuyItNow">Buy it now</option>
        </select>
      </td>
      <td>
        <select>
          <option value="Days_3">3 days</option>
          <option value="Days_5">5 days</option>
          <option value="Days_7" selected>
            7 days
          </option>
          <option value="Days_10">10 days</option>
        </select>
      </td>
      <td>1</td>
      <td>
        ¬£ <input type="text" placeholder="Buy it now" />
      </td>
      <td>
        ¬£ <input type="text" placeholder="Starting bid" />
      </td>
      <td>No</td>
      <td>
        <select defaultValue="2">
          <option value="1">1 working day</option>
          <option value="2">2 working days</option>
          <option value="3">3 working days</option>
        </select>
      </td>
      <td>N/A</td>
      <td>Immediate</td>
      <td>-</td>
      <td></td>
      <td>0 completed</td>
      <td>
        <button>Edit description</button>
      </td>
      <td>Eligible</td>
      <td></td>
      <td>N/A</td>
      <td>¬£0.00</td>
    </tr>
  );
};

export default DraftListingRow;


===== src/app/(pages)/dashboard/Sidebar.jsx =====
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  FiHome,
  FiMessageCircle,
  FiShoppingCart,
  FiBox,
  FiBarChart2,
  FiSettings,
  FiLogOut,
} from "react-icons/fi";
import { useSelector } from "react-redux";

const navItems = [
  { href: "/dashboard", label: "Dashboard", icon: FiHome },
  { href: "/dashboard/all-products", label: "Products", icon: FiBox },
  { href: "/dashboard/chat", label: "Chat", icon: FiMessageCircle },
  { href: "/dashboard/orders", label: "Orders", icon: FiShoppingCart },
  { href: "/dashboard/stats", label: "Statistic", icon: FiBarChart2 },
  { href: "/dashboard/settings", label: "Settings", icon: FiSettings },
  { href: "/logout", label: "Logout", icon: FiLogOut },
];

export default function Sidebar() {
  const pathname = usePathname();
  const { user } = useSelector((state) => state.auth);

  return (
    <aside className="w-1/6 bg-white p-6 border-r border-gray-200 flex flex-col justify-between">
      <div>
        <Link href="/" className="flex items-center mb-10">
          <img
            src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp"
            alt="Upfrica Logo"
            className="h-12"
          />
        </Link>
        <nav className="space-y-4">
          {navItems.map(({ href, label, icon: Icon }) => {
            const active = pathname === href;
            return (
              <Link
                key={href}
                href={href}
                className={`flex items-center px-4 py-2 rounded
                  ${
                    active
                      ? "bg-purple-200 text-purple-700"
                      : "hover:bg-gray-100 text-gray-700"
                  }`}
              >
                <Icon className="mr-2" /> {label}
              </Link>
            );
          })}
        </nav>
      </div>
      <div className="bg-purple-100 p-4 rounded-lg">
        <p className="text-sm mb-3 text-gray-700">
          Hi {user?.username}, upgrade your account for more features!
        </p>
        <button className="bg-purple-600 text-white px-4 py-2 rounded">
          Learn more
        </button>
      </div>
    </aside>
  );
}

// // components/Sidebar.js
// import Link from 'next/link';
// import { useRouter } from 'next/navigation';

// const groups = [
//     {
//         title: 'Navigation',
//         items: [
//             { label: 'Dashboard', href: '/dashboard', icon: 'üè†' },
//             { label: 'Layouts', href: '/layouts', icon: 'üìê' },
//         ],
//     },
//     {
//         title: 'Widget',
//         items: [
//             { label: 'Statistics', href: '/statistics', icon: 'üìä' },
//             { label: 'User', href: '/user', icon: 'üë§' },
//             { label: 'Data', href: '/data', icon: 'üíæ' },
//             { label: 'Chart', href: '/chart', icon: 'üìà' },
//         ],
//     },
//     {
//         title: 'Application',
//         items: [
//             { label: 'Calendar', href: '/calendar', icon: 'üìÖ' },
//             { label: 'Chat', href: '/chat', icon: 'üí¨' },
//             { label: 'Gallery', href: '/gallery', icon: 'üñºÔ∏è' },
//             {
//                 label: 'Ecommerce', href: '#', icon: 'üõí', children: [
//                     { label: 'Product List', href: '/products' },
//                     { label: 'Product Detail', href: '/products/1' },
//                 ]
//             },
//         ],
//     },
// ];

// export default function Sidebar() {
//     const router = useRouter();
//     return (
//         <aside className="w-64 h-screen bg-white border-r flex flex-col">
//             <div className="p-4 flex items-center space-x-2 border-b">
//                 <img src="/logo.png" alt="Logo" className="h-6 w-6" />
//                 <span className="font-bold text-lg">Light able</span>
//             </div>

//             <nav className="flex-1 overflow-y-auto px-2 py-4 space-y-4">
//                 {groups.map((g) => (
//                     <div key={g.title}>
//                         <h6 className="text-xs font-semibold text-gray-500 uppercase px-2 mb-2">
//                             {g.title}
//                         </h6>
//                         <ul className="space-y-1">
//                             {g.items.map((it) => (
//                                 <li key={it.label}>
//                                     {!it.children ? (
//                                         <Link href={it.href}>
//                                             <span
//                                                 className={`flex items-center px-2 py-2 text-sm rounded hover:bg-gray-100 ${router.pathname === it.href
//                                                         ? 'bg-gray-200 font-medium'
//                                                         : 'text-gray-700'
//                                                     }`}
//                                             >
//                                                 <span className="mr-3">{it.icon}</span>
//                                                 {it.label}
//                                             </span>
//                                         </Link>
//                                     ) : (
//                                         <details className="group">
//                                             <summary
//                                                 className="flex items-center px-2 py-2 text-sm rounded hover:bg-gray-100 cursor-pointer
//                           group-open:bg-gray-200"
//                                             >
//                                                 <span className="mr-3">{it.icon}</span>
//                                                 {it.label}
//                                             </summary>
//                                             <ul className="ml-8 mt-1 space-y-1">
//                                                 {it.children.map((child) => (
//                                                     <li key={child.label}>
//                                                         <Link href={child.href}>
//                                                             <span
//                                                                 className={`block px-2 py-1 text-sm rounded hover:bg-gray-100 ${router.pathname === child.href
//                                                                         ? 'bg-gray-200 font-medium'
//                                                                         : 'text-gray-600'
//                                                                     }`}
//                                                             >
//                                                                 {child.label}
//                                                             </span>
//                                                         </Link>
//                                                     </li>
//                                                 ))}
//                                             </ul>
//                                         </details>
//                                     )}
//                                 </li>
//                             ))}
//                         </ul>
//                     </div>
//                 ))}
//             </nav>

//             <div className="p-4 border-t flex items-center space-x-3">
//                 <img
//                     src="/avatar.png"
//                     alt="User avatar"
//                     className="w-8 h-8 rounded-full object-cover"
//                 />
//                 <div>
//                     <div className="font-medium">John Smith</div>
//                     <div className="text-xs text-gray-500">Administrator</div>
//                 </div>
//             </div>
//         </aside>
//     );
// }


===== src/app/(pages)/dashboard/all-orders/[id]/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import DeliveryTracker from "../components/DeliveryTracker";
import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

export default function OrderDetailsPage() {
  const { id } = useParams();
  const token = useSelector((state) => state.auth.token);
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showFullInfo, setShowFullInfo] = useState(false);

  useEffect(() => {
    if (!token || !id) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(`${BASE_API_URL}/api/buyer/orders/${id}/`, {
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        if (!res.ok) throw new Error(`Failed to fetch order: ${res.status}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  if (loading) return <div className="text-center p-6">Loading...</div>;
  if (!order)
    return <div className="text-center text-red-600 p-6">Order not found.</div>;

  const item = order.order_items[0];
  const product = item.product;

  return (
    <div className="bg-white shadow rounded-xl p-4 max-w-3xl mx-auto mt-6">
      {/* Top Status Header */}
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4 bg-gray-50 p-4 rounded-md">
        {/* Left: Order Info */}
        <div>
          <p className="text-green-700 font-bold text-lg">
            ‚úÖ {item.receive_status === 1 ? "Delivered" : "Processing"}
          </p>
          <div className="text-sm mt-1 text-gray-700">
            <p>
              <strong>Order #</strong> {String(order.id).padStart(6, "0")}
            </p>
            <p>
              <strong>Order date</strong>{" "}
              {new Date(order.created_at).toLocaleString()}
            </p>
          </div>
        </div>

        {/* Right: Buttons */}
        <div className="flex flex-col sm:items-end sm:text-right">
          <p className="text-xs font-semibold text-green-700 mb-1">
            GET POINTS
          </p>
          <div className="flex flex-col sm:flex-row gap-2 sm:gap-2 w-full sm:w-auto">
            <button className="w-full sm:w-auto h-8 upfrica-btn-primary-outline-sm text-green-700">
              Mark as received
            </button>
            <button className="w-full sm:w-auto h-8 upfrica-btn-primary-outline-sm text-green-700">
              Write a review
            </button>
          </div>
        </div>
      </div>

      {/* Delivery Tracker */}
      <DeliveryTracker
        stage={item.receive_status === 1 ? 2 : 1}
        steps={[
          {
            label: "Ordered",
            date: new Date(order.created_at).toLocaleDateString(),
          },
          { label: "Dispatched", date: "Soon" },
          {
            label: "Delivered",
            note: item.receive_status === 1 ? "Delivered" : "Not confirmed",
          },
        ]}
      />

      {/* Tracking */}
      <div className="mt-4 text-sm">
        <p>
          <strong>Tracking details</strong> &nbsp;{" "}
          {order.tracking_number || "N/A"}
        </p>
      </div>

      {/* Product Info */}
      <div className="mt-6">
        <h3 className="font-semibold text-lg mb-2">Item info</h3>
        <div className="flex items-start gap-4">
          <img
            src={product?.product_images?.[0] || "/placeholder.png"}
            alt={product?.title}
            className="w-20 h-20 object-cover rounded-md"
          />
          <div>
            <p className="font-medium">{product.title}</p>
            <p className="text-sm">Seller item no.: {product.id}</p>
            <p className="text-sm">GHS {(item.price_cents / 100).toFixed(2)}</p>
            <p className="text-xs text-gray-500">
              Returns accepted until 12 May
            </p>
          </div>
        </div>
      </div>

      {/* Delivery & Payment */}
      <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-6 text-sm">
        <div>
          <h4 className="font-semibold mb-1">Delivery info</h4>
          <div className="flex items-center gap-2 text-gray-700">
            <AiOutlineHome />
            <span>
              {showFullInfo
                ? order.address.address_data.address_line_1
                : `${order.address.address_data.town}, ${order.address.address_data.country}`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlineUser />
            <span>
              {showFullInfo
                ? `${order.buyer.first_name} ${order.buyer.last_name}`
                : `${order.buyer.first_name} ${order.buyer.last_name[0]}.`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlinePhone />
            <span>
              {showFullInfo
                ? order.address.address_data.phone_number
                : "+233 *** ****"}
            </span>
          </div>
          <button
            onClick={() => setShowFullInfo(!showFullInfo)}
            className="text-purple-600 underline mt-2 text-sm"
          >
            {showFullInfo ? "Hide full address" : "View full address"}
          </button>
        </div>

        <div>
          <h4 className="font-semibold mb-1">Payment method</h4>
          <p>{order.payment_method || "N/A"}</p>
          <p>
            1 item &nbsp;&nbsp;&nbsp;&nbsp; +
            {(item.price_cents / 100).toFixed(2)}
          </p>
          <p>Discount &nbsp;&nbsp;&nbsp;&nbsp; -0.00</p>
          <p>Postage &nbsp;&nbsp;&nbsp;&nbsp; 0.00</p>
          <p className="font-semibold">
            Total &nbsp;&nbsp;&nbsp;&nbsp; GHS{" "}
            {((item.price_cents * item.quantity) / 100).toFixed(2)}
          </p>
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/dashboard/all-orders/[id]/page1.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { MdCheck, MdChat } from "react-icons/md";
import {
  AiOutlineArrowLeft,
  AiOutlineHome,
  AiOutlineMail,
  AiOutlinePhone,
} from "react-icons/ai";

const STATUSES = ["Ordered", "Processing", "Shipped", "Received"];

function OrderDetailsSkeleton() {
  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8 animate-pulse">
      {/* header */}
      <div className="h-8 bg-gray-200 rounded w-1/4"></div>

      {/* two seller sections */}
      {Array.from({ length: 2 }).map((_, s) => (
        <section key={s} className="space-y-6 border-b border-gray-200 pb-6">
          {/* seller header */}
          <div className="h-6 bg-gray-200 rounded w-1/3"></div>

          {/* products */}
          {Array.from({ length: 2 }).map((_, i) => (
            <div
              key={i}
              className="flex items-center bg-gray-50 p-4 rounded-lg"
            >
              <div className="w-24 h-24 bg-gray-300 rounded"></div>
              <div className="ml-4 flex-1 space-y-2">
                <div className="h-4 bg-gray-300 rounded w-1/2"></div>
                <div className="h-4 bg-gray-300 rounded w-1/3"></div>
              </div>
              <div className="w-24 h-8 bg-gray-300 rounded-full"></div>
            </div>
          ))}

          {/* status bar */}
          <div className="relative">
            <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
            <div className="relative flex justify-between z-10">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-8 h-8 bg-gray-300 rounded-full"></div>
              ))}
            </div>
            <div className="relative flex justify-between mt-2 text-sm text-center">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-16 h-4 bg-gray-200 rounded"></div>
              ))}
            </div>
          </div>
        </section>
      ))}

      {/* address & contact */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <div className="w-6 h-6 bg-gray-300 rounded"></div>
          <div className="flex-1 space-y-2">
            <div className="h-4 bg-gray-300 rounded w-3/4"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-2/3"></div>
          </div>
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
      </div>
    </main>
  );
}

export default function OrderDetails({ params }) {
  const { id } = params;
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [statuses, setStatuses] = useState({});
  const [loadingReceive, setLoadingReceive] = useState({});

  // fetch order
  useEffect(() => {
    if (!token) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/buyer/orders/${id}/`,
          { headers: { Authorization: `Token ${token}` } },
        );
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  // init statuses
  useEffect(() => {
    if (!order) return;
    const init = {};
    order.order_items.forEach((item) => {
      const sid = item.product.user;
      if (!(sid in init)) {
        init[sid] = item.receive_status === 1 ? STATUSES.length - 1 : 0;
      }
    });
    setStatuses(init);
  }, [order]);

  // handle receive
  const handleReceive = async (sellerId) => {
    if (statuses[sellerId] === STATUSES.length - 1) return;
    if (
      !window.confirm("Confirm you have received all items from this seller.")
    ) {
      return;
    }
    setLoadingReceive((p) => ({ ...p, [sellerId]: true }));
    try {
      const items = order.order_items.filter(
        (i) => i.product.user === sellerId,
      );
      const headers = new Headers({
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      });
      const body = JSON.stringify({ receive_status: 1 });
      await Promise.all(
        items.map((it) =>
          fetch(`https://media.upfrica.com/api/buyer/order-item/${it.id}/`, {
            method: "PATCH",
            headers,
            body,
          }).then((r) => {
            if (!r.ok) throw new Error(`Item ${it.id} failed`);
            return r.json();
          }),
        ),
      );
      setStatuses((p) => ({ ...p, [sellerId]: STATUSES.length - 1 }));
      alert("Items marked as received.");
    } catch (err) {
      console.error(err);
      alert("Failed to mark received: " + err.message);
    } finally {
      setLoadingReceive((p) => ({ ...p, [sellerId]: false }));
    }
  };

  if (loading) return <OrderDetailsSkeleton />;
  if (!order) {
    return (
      <div className="p-6 text-center text-red-600">Unable to load order.</div>
    );
  }

  // group by seller
  const bySeller = order.order_items.reduce((acc, item) => {
    const sid = item.product.user;
    (acc[sid] ||= []).push(item);
    return acc;
  }, {});

  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8">
      {/* back + header */}
      <div className="flex items-center space-x-3">
        <button
          onClick={() => router.push("/dashboard/all-orders")}
          className="p-1 rounded-full hover:bg-gray-100"
        >
          <AiOutlineArrowLeft size={20} />
        </button>
        <h1 className="text-2xl font-bold">
          Order #{String(order.id).padStart(6, "0")}
        </h1>
      </div>

      {Object.entries(bySeller).map(([sellerId, items]) => {
        const idx = statuses[sellerId] ?? 0;
        return (
          <section
            key={sellerId}
            className="space-y-6 border-b border-gray-200 pb-6"
          >
            {/* header */}
            <div className="flex justify-between items-center">
              <h2 className="text-lg font-medium">Seller #{sellerId}</h2>
              <button
                // onClick={() => router.push(`/chat/${sellerId}`)}
                className="flex items-center space-x-1 px-4 py-2 bg-violet-600 text-white rounded-full hover:bg-violet-700 transition"
              >
                <MdChat size={18} />
                <span>Contact Seller</span>
              </button>
            </div>

            {/* products */}
            <div className="space-y-4">
              {items.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center bg-gray-50 p-4 rounded-lg shadow-sm"
                >
                  <img
                    src={item.product.product_images[0]}
                    alt={item.product.title}
                    className="w-24 h-24 object-cover rounded"
                  />
                  <div className="ml-4 flex-1">
                    <h3 className="font-semibold text-lg">
                      {item.product.title}
                    </h3>
                    <p className="text-gray-700 mt-1">
                      ${(item.price_cents / 100).toFixed(2)} √ó {item.quantity}
                    </p>
                  </div>
                  <button
                    onClick={() => handleReceive(item.product.user)}
                    disabled={
                      statuses[item.product.user] === STATUSES.length - 1 ||
                      loadingReceive[item.product.user]
                    }
                    className={`px-4 py-2 rounded-full font-medium transition ${
                      statuses[item.product.user] === STATUSES.length - 1
                        ? "bg-gray-300 text-gray-600 cursor-default"
                        : "bg-violet-600 text-white hover:bg-violet-700"
                    }`}
                  >
                    {loadingReceive[item.product.user]
                      ? "Receiving‚Ä¶"
                      : statuses[item.product.user] === STATUSES.length - 1
                        ? "Received"
                        : "Mark Received"}
                  </button>
                </div>
              ))}
            </div>

            {/* status bar */}
            <div className="relative my-6">
              <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
              <div className="relative flex justify-between z-10">
                {STATUSES.map((_, i) => (
                  <div key={i} className="flex flex-col items-center">
                    <div
                      className={`w-8 h-8 flex items-center justify-center rounded-full ${
                        i <= idx
                          ? "bg-violet-600 text-white"
                          : "bg-gray-200 text-gray-400"
                      }`}
                    >
                      {i <= idx && <MdCheck />}
                    </div>
                  </div>
                ))}
              </div>
              <div className="relative flex justify-between mt-2 text-sm text-center">
                {STATUSES.map((label, i) => (
                  <span key={i} className="w-16">
                    {label}
                  </span>
                ))}
              </div>
            </div>
          </section>
        );
      })}

      {/* address & contact */}
      <section className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <AiOutlineHome size={24} className="text-violet-600 mt-1" />
          <div>
            <h4 className="font-semibold">Delivery Address</h4>
            <p className="text-gray-700">
              {order.address.address_data.address_line_1}
              {order.address.address_data.address_line_2 &&
                `, ${order.address.address_data.address_line_2}`}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.local_area},{" "}
              {order.address.address_data.town}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.country}
            </p>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <AiOutlineMail size={24} className="text-violet-600" />
            <span className="text-gray-700">{order.buyer.email}</span>
          </div>
          <div className="flex items-center space-x-3">
            <AiOutlinePhone size={24} className="text-violet-600" />
            <span className="text-gray-700">
              {order.address.address_data.phone_number}
            </span>
          </div>
        </div>
      </section>
    </main>
  );
}


===== src/app/(pages)/dashboard/all-orders/components/DeliveryTracker.js =====
"use client";

import React from "react";

export default function DeliveryTracker({ stage = 0, steps = [] }) {
  return (
    <div className="flex justify-between items-center bg-gray-50 rounded-md py-4 px-6">
      {steps.map((step, index) => {
        const isCompleted = index <= stage;
        const isLast = index === steps.length - 1;

        return (
          <div
            key={index}
            className="flex-1 flex flex-col items-center relative"
          >
            {/* Connector line */}
            {index > 0 && (
              <div className="absolute top-3 left-[-50%] w-full h-1 bg-gray-200 z-0">
                <div
                  className={`h-1 ${
                    isCompleted ? "bg-blue-600" : "bg-gray-300"
                  }`}
                  style={{
                    width: "100%",
                  }}
                />
              </div>
            )}

            {/* Circle */}
            <div
              className={`w-6 h-6 rounded-full flex items-center justify-center z-10 mb-1 ${
                isCompleted
                  ? "bg-blue-600 text-white"
                  : "bg-gray-300 text-white"
              }`}
            >
              ‚úì
            </div>

            {/* Label */}
            <div className="text-center text-sm font-semibold">
              {step.label}
            </div>

            {/* Date or note */}
            <div className="text-center text-xs text-gray-500 mt-1">
              {step.date || step.note}
            </div>
          </div>
        );
      })}
    </div>
  );
}


===== src/app/(pages)/dashboard/all-orders/components/OrderCard.jsx =====
"use client";

import { useState, useRef, useEffect } from "react";
import { useRouter } from "next/navigation"; // ‚úÖ Add this
import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

const OrderCard = ({
  status = "Processing",
  date = "1 Dec 2024",
  total = "GHS 4000",
  orderNumber = "12345678",
  productTitle = "Fresh Graviola from Sri Lanka (50g)",
  price = "GHS 200",
  returnDate = "12 May",
  imageUrl = "/placeholder.png",
  product, // ‚úÖ receives full product object
  order = {
    buyer: {
      first_name: "John",
      last_name: "Doe",
      email: "john@example.com",
    },
    address: {
      address_data: {
        address_line_1: "123 Main St",
        address_line_2: "Apt 4B",
        local_area: "Osu",
        town: "Accra",
        country: "Ghana",
        phone_number: "+233 20 000 0000",
      },
    },
  },
}) => {
  const router = useRouter(); // ‚úÖ Initialize router
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [showFullInfo, setShowFullInfo] = useState(false);
  const dropdownRef = useRef();

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (!dropdownRef.current?.contains(e.target)) setDropdownOpen(false);
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const maskedPhone = order.address.address_data.phone_number.replace(
    /(\+\d{3})\s\d{2}\s\d{3}/,
    "$1 ***",
  );

  const sellerName =
    typeof product?.shop?.name === "string" && product.shop.name
      ? product.shop.name
      : typeof product?.user?.username === "string"
        ? product.user.username
        : "Seller";

  return (
    <div className="bg-white rounded-xl shadow-upfrica mb-6 p-4">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between bg-gray-100 rounded-lg p-4 gap-4 md:gap-0">
        <div className="flex-1 min-w-0">
          <div className="text-green-600 font-bold flex items-center mb-2">
            ‚úÖ {status}
          </div>
          <div className="flex flex-wrap gap-6 text-sm text-black">
            <div>
              <span className="block font-bold text-green-600">Order #</span>
              {orderNumber}
            </div>
            <div>
              <span className="block font-bold text-green-600">Order date</span>
              {date}
            </div>
            <div>
              <span className="block font-bold text-green-600">Total</span>
              {total}
            </div>
          </div>
        </div>

        {/* Buttons */}
        <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
          <button
            className="h-8 text-white upfrica-btn-primary-sm"
            onClick={() => router.push(`/dashboard/all-orders/${order.id}`)}
          >
            View details
          </button>
          <div className="relative w-full sm:w-auto" ref={dropdownRef}>
            <button
              className="h-8 upfrica-btn-primary-outline-sm w-full sm:w-auto"
              onClick={() => setDropdownOpen(!dropdownOpen)}
            >
              More actions ‚ñº
            </button>
            {dropdownOpen && (
              <div className="absolute right-0 mt-2 bg-white border rounded-md shadow-lg z-10 w-48">
                {[
                  "Contact seller",
                  "Return this item",
                  "I didn‚Äôt receive it",
                  "Sell this item",
                  "Add note",
                  "Hide Order",
                  "Help & report",
                ].map((label, i) => (
                  <button
                    key={i}
                    className="w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                  >
                    {label}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Product Info + Delivery */}
      <div className="mt-4">
        {/* Top: Image + Info */}
        <div className="flex gap-4 mb-4">
          <div className="w-20 h-20 shrink-0">
            <img
              src={imageUrl}
              alt={productTitle}
              className="w-20 h-20 object-cover rounded-md"
            />
          </div>

          <div className="flex-1 min-w-0">
            <div className="font-semibold">{productTitle}</div>
            <div className="text-sm text-gray-500">
              Sold by:{" "}
              <span className="underline text-black cursor-pointer">
                {sellerName} ‚Ä∫
              </span>
            </div>
            <div className="text-sm">{price}</div>
            <div className="text-sm">Returns accepted until {returnDate}</div>
          </div>
        </div>

        {/* Bottom: Buttons + Address */}
        <div>
          <div className="flex gap-2 mb-4 w-full overflow-x-auto scrollbar-hide">
            <button className="upfrica-btn-primary-outline-sm text-black">
              üîÅ Buy it again
            </button>
            <button className="upfrica-btn-primary-outline-sm text-black">
              ‚úçÔ∏è Write a review
            </button>
            <button className="upfrica-btn-primary-outline-sm text-black">
              üõçÔ∏è Seller's items
            </button>
          </div>

          <hr className="border-t border-gray-200 my-4" />

          <div className="text-sm text-gray-700 space-y-2">
            <span className="font-semibold text-gray-800">Delivery Info:</span>
            <div className="grid grid-cols-1 items-center">
              <div className="flex items-center space-x-2">
                <AiOutlineHome className="text-violet-600" size={18} />
                <span>
                  {showFullInfo
                    ? `${order.address.address_data.address_line_1}${order.address.address_data.address_line_2 ? ", " + order.address.address_data.address_line_2 : ""}, ${order.address.address_data.local_area}, ${order.address.address_data.town}, ${order.address.address_data.country}`
                    : `${order.address.address_data.town}, ${order.address.address_data.country}`}
                </span>
              </div>

              <div className="flex items-center space-x-2">
                <AiOutlineUser className="text-violet-600" size={18} />
                <span>
                  {showFullInfo
                    ? `${order.buyer.first_name} ${order.buyer.last_name}`
                    : `${order.buyer.first_name} ${order.buyer.last_name[0]}.`}
                </span>
              </div>

              <div className="flex items-center space-x-2">
                <AiOutlinePhone className="text-violet-600" size={18} />
                <span>
                  {showFullInfo
                    ? order.address.address_data.phone_number
                    : maskedPhone}
                </span>
              </div>
            </div>

            <button
              onClick={() => setShowFullInfo(!showFullInfo)}
              className="text-sm text-purple-600 mt-2 underline"
            >
              {showFullInfo ? "Hide full info ‚ñ≤" : "Show full info ‚ñº"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderCard;


===== src/app/(pages)/dashboard/all-orders/components/OrdersPage.jsx =====
"use client";
import React, { useEffect, useState, useRef } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import OrderCard from "./OrderCard";
import Pagination from "@/components/Pagination";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";

const PAGE_SIZE = 20;

export default function OrdersPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const pageParam = parseInt(searchParams.get("page") || "1", 10);
  const [orders, setOrders] = useState([]);
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceRef = useRef(null);

  useEffect(() => {
    if (!token) return;

    setLoading(true);
    fetch(`${BASE_API_URL}/api/buyer/orders/?page=${pageParam}`, {
      headers: {
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      },
    })
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setOrders(data.results);
        setCount(data.count);
      })
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [token, pageParam]);

  const totalPages = Math.ceil(count / PAGE_SIZE);

  const goToPage = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      router.push(`/dashboard/all-orders?page=${newPage}`);
    }
  };

  useEffect(() => {
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(() => {
      const lowerQuery = searchQuery.toLowerCase();
      const filtered = orders.flatMap((order) =>
        order.order_items
          .filter(
            (item) =>
              item.product.title.toLowerCase().includes(lowerQuery) ||
              String(order.id).includes(lowerQuery),
          )
          .map((item) => ({ ...item, order })),
      );
      setSearchResults(filtered);
      setSearchLoading(false);
    }, 300);

    return () => clearTimeout(debounceRef.current);
  }, [searchQuery, orders]);

  const displayItems = searchQuery
    ? searchResults
    : orders.flatMap((order) =>
        order.order_items.map((item) => ({ ...item, order })),
      );

  return (
    <div className="p-0 bg-gray-100 min-h-screen text-black font-sans">
      {/* Search Bar */}
      <div className="relative max-w-xl mx-auto mb-6">
        <AiOutlineSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-xl text-gray-700" />
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search orders by product name or order #..."
          className="w-full rounded-full border border-gray-300 px-10 py-2 focus:outline-none"
        />
        {searchQuery && (
          <AiOutlineClose
            className="absolute right-3 top-1/2 -translate-y-1/2 text-xl text-gray-600 cursor-pointer"
            onClick={() => setSearchQuery("")}
          />
        )}
      </div>

      <div className="flex gap-6 mb-4 font-semibold overflow-x-auto whitespace-nowrap px-2 scrollbar-hide">
        <div className="border-b-2 border-black pb-1">All Purchases</div>
        <div>Processing</div>
        <div>Unpaid</div>
        <div>Returns & Cancelled</div>
      </div>

      <h1 className="text-2xl font-bold mb-6">My Orders</h1>

      {loading ? (
        <div className="text-center text-gray-600">Loading your orders...</div>
      ) : error ? (
        <p className="text-red-600 text-center">
          Error loading orders: {error}
        </p>
      ) : (
        <div className="space-y-6">
          {displayItems.length === 0 ? (
            <p className="text-center text-gray-500">
              No matching orders found.
            </p>
          ) : (
            displayItems.map((item, index) => (
              <OrderCard
                key={`${item.order.id}-${item.id}-${index}`}
                order={item.order} // ‚úÖ Add this
                product={item.product} // ‚úÖ Pass product as well if needed
                status={item.receive_status === 1 ? "Received" : "Processing"}
                date={new Date(item.order.created_at).toLocaleDateString()}
                total={`GHS ${((item.price_cents * item.quantity) / 100).toFixed(2)}`}
                orderNumber={String(item.order.id).padStart(8, "0")}
                productTitle={item.product.title}
                seller={
                  item.product.user_display_name ||
                  `Seller ${item.product.user}`
                }
                price={`GHS ${(item.price_cents / 100).toFixed(2)}`}
                returnDate="12 May"
                imageUrl={
                  item.product.product_images?.[0] || "/placeholder.png"
                }
              />
            ))
          )}
        </div>
      )}

      {!searchQuery && totalPages > 1 && (
        <Pagination
          currentPage={pageParam}
          totalPages={totalPages}
          onPageChange={goToPage}
        />
      )}
    </div>
  );
}


===== src/app/(pages)/dashboard/all-orders/components/SideBar.jsx =====
// 'use client';

// import React from 'react';

// export default function SideBar() {
//   return (
//     <aside className="w-[240px] p-2 text-black hidden md:block rounded-md overflow-y-auto max-h-[calc(100vh-25rem)]">
//       <h2 className="text-lg font-bold mb-4">Filters</h2>

//       <div className="mb-6 p-5 bg-white border rounded-t-[5px] drop-shadow">
//         <label className="block text-sm font-semibold mb-1">Category</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Categories</option>
//           <option>Electronics</option>
//           <option>Fashion</option>
//           <option>Home</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Condition</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Conditions</option>
//           <option>New</option>
//           <option>Used</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Sort By</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>Most Recent</option>
//           <option>Price: Low to High</option>
//           <option>Price: High to Low</option>
//         </select>
//       </div>

//       <div>
//         <label className="block text-sm font-semibold mb-1">Ratings</label>
//         <p className="text-yellow-600 font-bold">‚≠ê 4.5/5</p>
//       </div>
//     </aside>
//   );
// }


===== src/app/(pages)/dashboard/all-orders/layout.js =====
// "use client";

// import Header from "@/components/common/header/Header";
// import Footer from "@/components/common/footer/Footer";
// import SideBar from "./components/SideBar";

// export default  Layout = ({ children }) => {
//   return (
//     <>
//       <Header />
//       <div className="min-h-screen bg-gray-100 text-gray-900">
//         <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
//           <SideBar />
//           <main className="flex-1 px-0 py-0">{children}</main>
//         </div>
//       </div>
//       <Footer />
//     </>
//   );
// }

// import React from "react";
// import Header from "@/components/common/header/Header";
// import Footer from "@/components/common/footer/Footer";
// import SideBar from "./components/SideBar";

// const layout = ({ children }) => {
//   return (
//     <>
//       <Header />
//       <div className="min-h-screen bg-gray-100 text-gray-900">
//         <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
//           <SideBar />
//           <main className="flex-1 px-0 py-0">{children}</main>
//         </div>
//       </div>
//       <Footer />
//     </>
//   );
// };

// export default layout;

import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";

import React from "react";

const layout = ({ children }) => {
  return (
    <>
      <Header />
      <div className="min-h-screen bg-gray-100 text-gray-900">
        <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
          {/* <Sidebar /> */}
          <main className="flex-1 px-0 py-0">{children}</main>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default layout;


===== src/app/(pages)/dashboard/all-orders/page.jsx =====
import React from "react";
import OrdersPage from "./components/OrdersPage";

const page = () => {
  return (
    <div>
      <OrdersPage />
    </div>
  );
};

export default page;


===== src/app/(pages)/dashboard/all-orders/page2.jsx =====
// 'use client'

// import React, { useState, useEffect } from 'react'
// import { useSearchParams, useRouter } from 'next/navigation'
// import { useSelector } from 'react-redux'
// import { AiOutlineLeft, AiOutlineRight, AiOutlineArrowDown } from 'react-icons/ai'
// import { MdCheck, MdChat } from 'react-icons/md'

// const PAGE_SIZE = 20
// // Remove "Delivered", keep "Received" as final status
// const STATUSES = ['Ordered', 'Processing', 'Shipped', 'Received']

// function Pagination({ currentPage, totalPages, onPageChange }) {
//   const [isMobile, setIsMobile] = useState(false)

//   useEffect(() => {
//     const handleResize = () => setIsMobile(window.innerWidth <= 768)
//     handleResize()
//     window.addEventListener('resize', handleResize)
//     return () => window.removeEventListener('resize', handleResize)
//   }, [])

//   const handlePageClick = (page) => {
//     if (page >= 1 && page <= totalPages && page !== currentPage) {
//       onPageChange(page)
//     }
//   }

//   const getPageNumbers = () => {
//     if (isMobile) {
//       if (totalPages <= 2) return [1, ...(totalPages === 2 ? [2] : [])]
//       return [1, 2, '...']
//     }
//     if (totalPages <= 5) return Array.from({ length: totalPages }, (_, i) => i + 1)
//     if (currentPage <= 3) return [1, 2, 3, 4, '...', totalPages]
//     if (currentPage >= totalPages - 2)
//       return [1, '...', totalPages - 3, totalPages - 2, totalPages - 1, totalPages]
//     return [1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages]
//   }

//   return (
//     <div className="mt-8 flex justify-center overflow-x-auto">
//       <div className="inline-flex items-center space-x-2 whitespace-nowrap px-2">
//         <button
//           onClick={() => handlePageClick(currentPage - 1)}
//           disabled={currentPage === 1}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <AiOutlineLeft className="mr-1" />
//           <span>Prev</span>
//         </button>
//         {getPageNumbers().map((page, i) =>
//           typeof page === 'number' ? (
//             <button
//               key={i}
//               onClick={() => handlePageClick(page)}
//               className={`px-3 py-1 rounded border border-gray-300 hover:bg-gray-100 ${page === currentPage ? 'bg-violet-700 text-white font-semibold' : ''
//                 }`}
//             >
//               {page}
//             </button>
//           ) : (
//             <span key={i} className="px-3 py-1 text-gray-500">
//               ‚Ä¶
//             </span>
//           )
//         )}
//         <button
//           onClick={() => handlePageClick(currentPage + 1)}
//           disabled={currentPage === totalPages}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <span>Next</span>
//           <AiOutlineRight className="ml-1" />
//         </button>
//       </div>
//     </div>
//   )
// }

// function SkeletonOrderCard() {
//   return (
//     <div className="bg-white rounded-lg shadow p-6 space-y-6 animate-pulse border border-gray-700">
//       <div className="h-6 bg-gray-300 rounded w-1/3" />
//       <div className="h-4 bg-gray-300 rounded w-1/4" />
//       <div className="grid grid-cols-3 gap-4">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <div key={i} className="flex space-x-3 items-center">
//             <div className="w-16 h-16 bg-gray-300 rounded" />
//             <div className="flex-1 space-y-2">
//               <div className="h-4 bg-gray-300 rounded w-3/4" />
//               <div className="h-4 bg-gray-300 rounded w-1/2" />
//               <div className="h-3 bg-gray-300 rounded w-1/3" />
//             </div>
//           </div>
//         ))}
//       </div>
//       <div className="grid grid-cols-2 gap-6">
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-4 bg-gray-300 rounded w-1/3" />
//         </div>
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-6 bg-gray-300 rounded w-1/4" />
//         </div>
//       </div>
//       <div className="space-y-2">
//         <div className="h-4 bg-gray-300 rounded w-1/6" />
//         <div className="w-full bg-gray-200 h-1 rounded-full">
//           <div className="bg-gray-300 h-full" />
//         </div>
//         <div className="flex justify-between">
//           {Array.from({ length: 4 }).map((_, i) => (
//             <div key={i} className="h-4 w-12 bg-gray-300 rounded" />
//           ))}
//         </div>
//       </div>
//     </div>
//   )
// }

// export default function OrdersPage() {
//   const searchParams = useSearchParams()
//   const router = useRouter()
//   const token = useSelector((state) => state.auth.token)

//   const pageParam = parseInt(searchParams.get('page') || '1', 10)
//   const [orders, setOrders] = useState([])
//   const [count, setCount] = useState(0)
//   const [loading, setLoading] = useState(true)
//   const [error, setError] = useState(null)
//   // status index per orderId+sellerId
//   const [statusesByOrder, setStatusesByOrder] = useState({})
//   // loading state for the "receive" action per orderId+sellerId
//   const [loadingReceiveBy, setLoadingReceiveBy] = useState({})

//   useEffect(() => {
//     if (!token) return
//     setLoading(true)
//     fetch(`https://media.upfrica.com/api/buyer/orders/?page=${pageParam}`, {
//       headers: { Authorization: `Token ${token}` },
//     })
//       .then((res) => {
//         if (!res.ok) throw new Error(`HTTP ${res.status}`)
//         return res.json()
//       })
//       .then((data) => {
//         setOrders(data.results)
//         setCount(data.count)
//       })
//       .catch((err) => setError(err.message))
//       .finally(() => setLoading(false))
//   }, [token, pageParam])

//   // Initialize statuses, marking "Received" if receive_status===1
//   useEffect(() => {
//     const init = {}
//     orders.forEach((order) => {
//       const bySeller = {}
//       order.order_items.forEach((item) => {
//         const sid = item.product.user
//         // if any item for that seller is already received, mark as Received
//         const received = item.receive_status === 1
//         bySeller[sid] = received ? STATUSES.length - 1 : 0
//       })
//       init[order.id] = bySeller
//     })
//     setStatusesByOrder(init)
//   }, [orders])

//   const totalPages = Math.ceil(count / PAGE_SIZE)

//   const handlePageChange = (page) => {
//     router.push(`/orders?page=${page}`)
//   }

//   // Handle status clicks, including PATCH for Received
//   const handleStatusClick = async (orderId, sellerId, idx) => {
//     const currentIdx = statusesByOrder[orderId]?.[sellerId] ?? 0
//     const lastIdx = STATUSES.length - 1
//     // if already at final "Received", do nothing
//     if (currentIdx === lastIdx) return

//     const statusName = STATUSES[idx]

//     // Only for "Received" do we call the API
//     if (statusName === 'Received') {
//       if (
//         !window.confirm(
//           'By clicking OK, you confirm that you have received the product.'
//         )
//       ) {
//         return
//       }

//       const key = `${orderId}_${sellerId}`
//       setLoadingReceiveBy((p) => ({ ...p, [key]: true }))

//       try {
//         // gather all items for this seller
//         const items = orders
//           .find((o) => o.id === orderId)
//           .order_items.filter((it) => it.product.user === sellerId)

//         const myHeaders = new Headers()
//         myHeaders.append('Authorization', `Token ${token}`)
//         myHeaders.append('Content-Type', 'application/json')

//         const raw = JSON.stringify({ receive_status: 1 })

//         // send PATCH for each item
//         const requests = items.map((item) =>
//           fetch(
//             `https://media.upfrica.com/api/buyer/order-item/${item.id}/`,
//             {
//               method: 'PATCH',
//               headers: myHeaders,
//               body: raw,
//               redirect: 'follow',
//             }
//           )
//         )
//         const responses = await Promise.all(requests)
//         // check all succeeded
//         for (let res of responses) {
//           if (!res.ok) throw new Error(`HTTP ${res.status}`)
//           const data = await res.json()
//           if (data.receive_status !== 1) throw new Error('Bad response')
//         }

//         // success!
//         setStatusesByOrder((prev) => ({
//           ...prev,
//           [orderId]: {
//             ...prev[orderId],
//             [sellerId]: lastIdx,
//           },
//         }))
//         alert('Marked as received!')
//       } catch (err) {
//         console.error(err)
//         alert('Error marking as received: ' + err.message)
//       } finally {
//         setLoadingReceiveBy((p) => ({ ...p, [key]: false }))
//       }

//       return
//     }

//     // For other statuses, local update only
//     if (
//       !window.confirm(`Are you sure you want to mark this as "${statusName}"?`)
//     ) {
//       return
//     }
//     setStatusesByOrder((prev) => ({
//       ...prev,
//       [orderId]: {
//         ...prev[orderId],
//         [sellerId]: idx,
//       },
//     }))
//   }

//   if (loading) {
//     return (
//       <main className="max-w-6xl mx-auto px-4 py-8 space-y-6">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <SkeletonOrderCard key={i} />
//         ))}
//       </main>
//     )
//   }

//   if (error) {
//     return (
//       <p className="p-6 text-center text-red-600">
//         Error fetching orders: {error}
//       </p>
//     )
//   }

//   return (
//     <main className="space-y-8 max-w-6xl mx-auto px-4 py-8">
//       <h1 className="text-3xl font-bold">My Orders</h1>

//       <div className="space-y-6">
//         {orders.map((order) => {
//           const placedDate = new Date(order.created_at)
//           const formattedPlaced = placedDate.toLocaleDateString(undefined, {
//             year: 'numeric',
//             month: 'long',
//             day: 'numeric',
//           })
//           const itemsBySeller = order.order_items.reduce((acc, item) => {
//             const sid = item.product.user
//             if (!acc[sid]) acc[sid] = []
//             acc[sid].push(item)
//             return acc
//           }, {})

//           return (
//             <div
//               key={order.id}
//               className="bg-white rounded-lg shadow p-6 space-y-1 border border-gray-700"
//             >
//               <div className="flex justify-between items-start">
//                 <div>
//                   <h2 className="text-xl font-semibold">
//                     Order #{String(order.id).padStart(5, '0')}
//                   </h2>
//                   <p className="text-gray-600 text-sm">
//                     Placed{' '}
//                     <time dateTime={order.created_at}>{formattedPlaced}</time>
//                   </p>
//                 </div>
//                 <a
//                   href={`/dashboard/all-orders/${order.id}/`}
//                   className="text-indigo-600 hover:underline text-sm font-medium"
//                 >
//                   View details&nbsp;‚Üí
//                 </a>
//               </div>

//               {Object.entries(itemsBySeller).map(([sellerId, items]) => {
//                 const currentIdx =
//                   statusesByOrder[order.id]?.[sellerId] ?? 0
//                 const progressPercent = ((currentIdx + 1) / STATUSES.length) * 100
//                 const needsGuide = currentIdx < STATUSES.length - 1
//                 const key = `${order.id}_${sellerId}`
//                 const isLoadingReceive = loadingReceiveBy[key]
//                 const lastIdx = STATUSES.length - 1

//                 return (
//                   <div key={sellerId} className="space-y-4">
//                     <div className="flex justify-between items-center">
//                       <span className="text-sm font-medium text-gray-700">
//                         From seller #{sellerId}
//                       </span>
//                       <button
//                         onClick={() => router.push(`/chat/${sellerId}`)}
//                         className="flex flex-col items-center text-violet-700 hover:text-violet-700 text-sm font-medium"
//                       >
//                         <div className="p-2 pe-1 rounded-full bg-gray-200 hover:bg-gray-300">
//                           <MdChat size={18} />
//                         </div>
//                         Contact seller
//                       </button>
//                     </div>

//                     <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
//                       {items.map((item) => (
//                         <div
//                           key={item.id}
//                           className="flex space-x-3 items-center"
//                         >
//                           <img
//                             src={item.product.product_images[0]}
//                             alt={item.product.title}
//                             className="w-16 h-16 rounded object-cover"
//                           />
//                           <div>
//                             <h3 className="text-sm font-medium">
//                               {item.product.title}
//                             </h3>
//                             <p className="text-sm text-gray-500">
//                               ${(item.price_cents / 100).toFixed(2)}
//                             </p>
//                             <p className="text-xs text-gray-400">
//                               Qty: {item.quantity}
//                             </p>
//                           </div>
//                         </div>
//                       ))}
//                     </div>

//                     <div>
//                       <h4 className="text-sm font-medium mb-1">Status</h4>
//                       <div className="w-full bg-gray-200 h-1 rounded-full overflow-hidden">
//                         <div
//                           className="bg-indigo-600 h-full"
//                           style={{ width: `${progressPercent}%` }}
//                         />
//                       </div>
//                       <div className="flex justify-between text-xs mt-1">
//                         {STATUSES.map((status, idx) => (
//                           <div
//                             key={status}
//                             className="relative flex-1 flex justify-center"
//                           >
//                             {/* Arrow now points at "Received" */}
//                             {idx === lastIdx && needsGuide && (
//                               <div className="absolute -top-16 flex flex-col items-center bg-white">
//                                 <span className="text-xs text-gray-700 border border-gray-700 p-1 rounded">
//                                   Click here to receive
//                                 </span>
//                                 <AiOutlineArrowDown className="text-gray-700" />
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/dashboard/all-orders copy/[id]/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { useSelector } from "react-redux";
import DeliveryTracker from "../components/DeliveryTracker";
import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

export default function OrderDetailsPage() {
  const { id } = useParams();
  const token = useSelector((state) => state.auth.token);
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showFullInfo, setShowFullInfo] = useState(false);

  useEffect(() => {
    if (!token || !id) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/buyer/orders/${id}/`,
          {
            headers: {
              Authorization: `Token ${token}`,
            },
          },
        );
        if (!res.ok) throw new Error(`Failed to fetch order: ${res.status}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  if (loading) return <div className="text-center p-6">Loading...</div>;
  if (!order)
    return <div className="text-center text-red-600 p-6">Order not found.</div>;

  const item = order.order_items[0];
  const product = item.product;

  return (
    <div className="bg-white shadow rounded-xl p-4 max-w-3xl mx-auto mt-6">
      {/* Top Status Header */}
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4 bg-gray-50 p-4 rounded-md">
        {/* Left: Order Info */}
        <div>
          <p className="text-green-700 font-bold text-lg">
            ‚úÖ {item.receive_status === 1 ? "Delivered" : "Processing"}
          </p>
          <div className="text-sm mt-1 text-gray-700">
            <p>
              <strong>Order #</strong> {String(order.id).padStart(6, "0")}
            </p>
            <p>
              <strong>Order date</strong>{" "}
              {new Date(order.created_at).toLocaleString()}
            </p>
          </div>
        </div>

        {/* Right: Buttons */}
        <div className="flex flex-col sm:items-end sm:text-right">
          <p className="text-xs font-semibold text-green-700 mb-1">
            GET POINTS
          </p>
          <div className="flex flex-col sm:flex-row gap-2 sm:gap-2 w-full sm:w-auto">
            <button className="w-full sm:w-auto h-8 upfrica-btn-primary-outline-sm text-green-700">
              Mark as received
            </button>
            <button className="w-full sm:w-auto h-8 upfrica-btn-primary-outline-sm text-green-700">
              Write a review
            </button>
          </div>
        </div>
      </div>

      {/* Delivery Tracker */}
      <DeliveryTracker
        stage={item.receive_status === 1 ? 2 : 1}
        steps={[
          {
            label: "Ordered",
            date: new Date(order.created_at).toLocaleDateString(),
          },
          { label: "Dispatched", date: "Soon" },
          {
            label: "Delivered",
            note: item.receive_status === 1 ? "Delivered" : "Not confirmed",
          },
        ]}
      />

      {/* Tracking */}
      <div className="mt-4 text-sm">
        <p>
          <strong>Tracking details</strong> &nbsp;{" "}
          {order.tracking_number || "N/A"}
        </p>
      </div>

      {/* Product Info */}
      <div className="mt-6">
        <h3 className="font-semibold text-lg mb-2">Item info</h3>
        <div className="flex items-start gap-4">
          <img
            src={product?.product_images?.[0] || "/placeholder.png"}
            alt={product?.title}
            className="w-20 h-20 object-cover rounded-md"
          />
          <div>
            <p className="font-medium">{product.title}</p>
            <p className="text-sm">Seller item no.: {product.id}</p>
            <p className="text-sm">GHS {(item.price_cents / 100).toFixed(2)}</p>
            <p className="text-xs text-gray-500">
              Returns accepted until 12 May
            </p>
          </div>
        </div>
      </div>

      {/* Delivery & Payment */}
      <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-6 text-sm">
        <div>
          <h4 className="font-semibold mb-1">Delivery info</h4>
          <div className="flex items-center gap-2 text-gray-700">
            <AiOutlineHome />
            <span>
              {showFullInfo
                ? order.address.address_data.address_line_1
                : `${order.address.address_data.town}, ${order.address.address_data.country}`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlineUser />
            <span>
              {showFullInfo
                ? `${order.buyer.first_name} ${order.buyer.last_name}`
                : `${order.buyer.first_name} ${order.buyer.last_name[0]}.`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlinePhone />
            <span>
              {showFullInfo
                ? order.address.address_data.phone_number
                : "+233 *** ****"}
            </span>
          </div>
          <button
            onClick={() => setShowFullInfo(!showFullInfo)}
            className="text-purple-600 underline mt-2 text-sm"
          >
            {showFullInfo ? "Hide full address" : "View full address"}
          </button>
        </div>

        <div>
          <h4 className="font-semibold mb-1">Payment method</h4>
          <p>{order.payment_method || "N/A"}</p>
          <p>
            1 item &nbsp;&nbsp;&nbsp;&nbsp; +
            {(item.price_cents / 100).toFixed(2)}
          </p>
          <p>Discount &nbsp;&nbsp;&nbsp;&nbsp; -0.00</p>
          <p>Postage &nbsp;&nbsp;&nbsp;&nbsp; 0.00</p>
          <p className="font-semibold">
            Total &nbsp;&nbsp;&nbsp;&nbsp; GHS{" "}
            {((item.price_cents * item.quantity) / 100).toFixed(2)}
          </p>
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/dashboard/all-orders copy/[id]/page1.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { MdCheck, MdChat } from "react-icons/md";
import {
  AiOutlineArrowLeft,
  AiOutlineHome,
  AiOutlineMail,
  AiOutlinePhone,
} from "react-icons/ai";

const STATUSES = ["Ordered", "Processing", "Shipped", "Received"];

function OrderDetailsSkeleton() {
  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8 animate-pulse">
      {/* header */}
      <div className="h-8 bg-gray-200 rounded w-1/4"></div>

      {/* two seller sections */}
      {Array.from({ length: 2 }).map((_, s) => (
        <section key={s} className="space-y-6 border-b border-gray-200 pb-6">
          {/* seller header */}
          <div className="h-6 bg-gray-200 rounded w-1/3"></div>

          {/* products */}
          {Array.from({ length: 2 }).map((_, i) => (
            <div
              key={i}
              className="flex items-center bg-gray-50 p-4 rounded-lg"
            >
              <div className="w-24 h-24 bg-gray-300 rounded"></div>
              <div className="ml-4 flex-1 space-y-2">
                <div className="h-4 bg-gray-300 rounded w-1/2"></div>
                <div className="h-4 bg-gray-300 rounded w-1/3"></div>
              </div>
              <div className="w-24 h-8 bg-gray-300 rounded-full"></div>
            </div>
          ))}

          {/* status bar */}
          <div className="relative">
            <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
            <div className="relative flex justify-between z-10">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-8 h-8 bg-gray-300 rounded-full"></div>
              ))}
            </div>
            <div className="relative flex justify-between mt-2 text-sm text-center">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-16 h-4 bg-gray-200 rounded"></div>
              ))}
            </div>
          </div>
        </section>
      ))}

      {/* address & contact */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <div className="w-6 h-6 bg-gray-300 rounded"></div>
          <div className="flex-1 space-y-2">
            <div className="h-4 bg-gray-300 rounded w-3/4"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-2/3"></div>
          </div>
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
      </div>
    </main>
  );
}

export default function OrderDetails({ params }) {
  const { id } = params;
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [statuses, setStatuses] = useState({});
  const [loadingReceive, setLoadingReceive] = useState({});

  // fetch order
  useEffect(() => {
    if (!token) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/buyer/orders/${id}/`,
          { headers: { Authorization: `Token ${token}` } },
        );
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  // init statuses
  useEffect(() => {
    if (!order) return;
    const init = {};
    order.order_items.forEach((item) => {
      const sid = item.product.user;
      if (!(sid in init)) {
        init[sid] = item.receive_status === 1 ? STATUSES.length - 1 : 0;
      }
    });
    setStatuses(init);
  }, [order]);

  // handle receive
  const handleReceive = async (sellerId) => {
    if (statuses[sellerId] === STATUSES.length - 1) return;
    if (
      !window.confirm("Confirm you have received all items from this seller.")
    ) {
      return;
    }
    setLoadingReceive((p) => ({ ...p, [sellerId]: true }));
    try {
      const items = order.order_items.filter(
        (i) => i.product.user === sellerId,
      );
      const headers = new Headers({
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      });
      const body = JSON.stringify({ receive_status: 1 });
      await Promise.all(
        items.map((it) =>
          fetch(`https://media.upfrica.com/api/buyer/order-item/${it.id}/`, {
            method: "PATCH",
            headers,
            body,
          }).then((r) => {
            if (!r.ok) throw new Error(`Item ${it.id} failed`);
            return r.json();
          }),
        ),
      );
      setStatuses((p) => ({ ...p, [sellerId]: STATUSES.length - 1 }));
      alert("Items marked as received.");
    } catch (err) {
      console.error(err);
      alert("Failed to mark received: " + err.message);
    } finally {
      setLoadingReceive((p) => ({ ...p, [sellerId]: false }));
    }
  };

  if (loading) return <OrderDetailsSkeleton />;
  if (!order) {
    return (
      <div className="p-6 text-center text-red-600">Unable to load order.</div>
    );
  }

  // group by seller
  const bySeller = order.order_items.reduce((acc, item) => {
    const sid = item.product.user;
    (acc[sid] ||= []).push(item);
    return acc;
  }, {});

  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8">
      {/* back + header */}
      <div className="flex items-center space-x-3">
        <button
          onClick={() => router.push("/dashboard/all-orders")}
          className="p-1 rounded-full hover:bg-gray-100"
        >
          <AiOutlineArrowLeft size={20} />
        </button>
        <h1 className="text-2xl font-bold">
          Order #{String(order.id).padStart(6, "0")}
        </h1>
      </div>

      {Object.entries(bySeller).map(([sellerId, items]) => {
        const idx = statuses[sellerId] ?? 0;
        return (
          <section
            key={sellerId}
            className="space-y-6 border-b border-gray-200 pb-6"
          >
            {/* header */}
            <div className="flex justify-between items-center">
              <h2 className="text-lg font-medium">Seller #{sellerId}</h2>
              <button
                // onClick={() => router.push(`/chat/${sellerId}`)}
                className="flex items-center space-x-1 px-4 py-2 bg-violet-600 text-white rounded-full hover:bg-violet-700 transition"
              >
                <MdChat size={18} />
                <span>Contact Seller</span>
              </button>
            </div>

            {/* products */}
            <div className="space-y-4">
              {items.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center bg-gray-50 p-4 rounded-lg shadow-sm"
                >
                  <img
                    src={item.product.product_images[0]}
                    alt={item.product.title}
                    className="w-24 h-24 object-cover rounded"
                  />
                  <div className="ml-4 flex-1">
                    <h3 className="font-semibold text-lg">
                      {item.product.title}
                    </h3>
                    <p className="text-gray-700 mt-1">
                      ${(item.price_cents / 100).toFixed(2)} √ó {item.quantity}
                    </p>
                  </div>
                  <button
                    onClick={() => handleReceive(item.product.user)}
                    disabled={
                      statuses[item.product.user] === STATUSES.length - 1 ||
                      loadingReceive[item.product.user]
                    }
                    className={`px-4 py-2 rounded-full font-medium transition ${
                      statuses[item.product.user] === STATUSES.length - 1
                        ? "bg-gray-300 text-gray-600 cursor-default"
                        : "bg-violet-600 text-white hover:bg-violet-700"
                    }`}
                  >
                    {loadingReceive[item.product.user]
                      ? "Receiving‚Ä¶"
                      : statuses[item.product.user] === STATUSES.length - 1
                        ? "Received"
                        : "Mark Received"}
                  </button>
                </div>
              ))}
            </div>

            {/* status bar */}
            <div className="relative my-6">
              <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
              <div className="relative flex justify-between z-10">
                {STATUSES.map((_, i) => (
                  <div key={i} className="flex flex-col items-center">
                    <div
                      className={`w-8 h-8 flex items-center justify-center rounded-full ${
                        i <= idx
                          ? "bg-violet-600 text-white"
                          : "bg-gray-200 text-gray-400"
                      }`}
                    >
                      {i <= idx && <MdCheck />}
                    </div>
                  </div>
                ))}
              </div>
              <div className="relative flex justify-between mt-2 text-sm text-center">
                {STATUSES.map((label, i) => (
                  <span key={i} className="w-16">
                    {label}
                  </span>
                ))}
              </div>
            </div>
          </section>
        );
      })}

      {/* address & contact */}
      <section className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <AiOutlineHome size={24} className="text-violet-600 mt-1" />
          <div>
            <h4 className="font-semibold">Delivery Address</h4>
            <p className="text-gray-700">
              {order.address.address_data.address_line_1}
              {order.address.address_data.address_line_2 &&
                `, ${order.address.address_data.address_line_2}`}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.local_area},{" "}
              {order.address.address_data.town}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.country}
            </p>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <AiOutlineMail size={24} className="text-violet-600" />
            <span className="text-gray-700">{order.buyer.email}</span>
          </div>
          <div className="flex items-center space-x-3">
            <AiOutlinePhone size={24} className="text-violet-600" />
            <span className="text-gray-700">
              {order.address.address_data.phone_number}
            </span>
          </div>
        </div>
      </section>
    </main>
  );
}


===== src/app/(pages)/dashboard/all-orders copy/components/DeliveryTracker.js =====
"use client";

import React from "react";

export default function DeliveryTracker({ stage = 0, steps = [] }) {
  return (
    <div className="flex justify-between items-center bg-gray-50 rounded-md py-4 px-6">
      {steps.map((step, index) => {
        const isCompleted = index <= stage;
        const isLast = index === steps.length - 1;

        return (
          <div
            key={index}
            className="flex-1 flex flex-col items-center relative"
          >
            {/* Connector line */}
            {index > 0 && (
              <div className="absolute top-3 left-[-50%] w-full h-1 bg-gray-200 z-0">
                <div
                  className={`h-1 ${
                    isCompleted ? "bg-blue-600" : "bg-gray-300"
                  }`}
                  style={{
                    width: "100%",
                  }}
                />
              </div>
            )}

            {/* Circle */}
            <div
              className={`w-6 h-6 rounded-full flex items-center justify-center z-10 mb-1 ${
                isCompleted
                  ? "bg-blue-600 text-white"
                  : "bg-gray-300 text-white"
              }`}
            >
              ‚úì
            </div>

            {/* Label */}
            <div className="text-center text-sm font-semibold">
              {step.label}
            </div>

            {/* Date or note */}
            <div className="text-center text-xs text-gray-500 mt-1">
              {step.date || step.note}
            </div>
          </div>
        );
      })}
    </div>
  );
}


===== src/app/(pages)/dashboard/all-orders copy/components/OrderCard.jsx =====
"use client";

import { useState, useRef, useEffect } from "react";
import { useRouter } from "next/navigation"; // ‚úÖ Add this
import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

const OrderCard = ({
  status = "Processing",
  date = "1 Dec 2024",
  total = "GHS 4000",
  orderNumber = "12345678",
  productTitle = "Fresh Graviola from Sri Lanka (50g)",
  price = "GHS 200",
  returnDate = "12 May",
  imageUrl = "/placeholder.png",
  product, // ‚úÖ receives full product object
  order = {
    buyer: {
      first_name: "John",
      last_name: "Doe",
      email: "john@example.com",
    },
    address: {
      address_data: {
        address_line_1: "123 Main St",
        address_line_2: "Apt 4B",
        local_area: "Osu",
        town: "Accra",
        country: "Ghana",
        phone_number: "+233 20 000 0000",
      },
    },
  },
}) => {
  const router = useRouter(); // ‚úÖ Initialize router
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [showFullInfo, setShowFullInfo] = useState(false);
  const dropdownRef = useRef();

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (!dropdownRef.current?.contains(e.target)) setDropdownOpen(false);
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const maskedPhone = order.address.address_data.phone_number.replace(
    /(\+\d{3})\s\d{2}\s\d{3}/,
    "$1 ***",
  );

  const sellerName =
    typeof product?.shop?.name === "string" && product.shop.name
      ? product.shop.name
      : typeof product?.user?.username === "string"
        ? product.user.username
        : "Seller";

  return (
    <div className="bg-white rounded-xl shadow-upfrica mb-6 p-4">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between bg-gray-100 rounded-lg p-4 gap-4 md:gap-0">
        <div className="flex-1 min-w-0">
          <div className="text-green-600 font-bold flex items-center mb-2">
            ‚úÖ {status}
          </div>
          <div className="flex flex-wrap gap-6 text-sm text-black">
            <div>
              <span className="block font-bold text-green-600">Order #</span>
              {orderNumber}
            </div>
            <div>
              <span className="block font-bold text-green-600">Order date</span>
              {date}
            </div>
            <div>
              <span className="block font-bold text-green-600">Total</span>
              {total}
            </div>
          </div>
        </div>

        {/* Buttons */}
        <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
          <button
            className="h-8 text-white upfrica-btn-primary-sm"
            onClick={() => router.push(`/dashboard/all-orders/${order.id}`)}
          >
            View details
          </button>
          <div className="relative w-full sm:w-auto" ref={dropdownRef}>
            <button
              className="h-8 upfrica-btn-primary-outline-sm w-full sm:w-auto"
              onClick={() => setDropdownOpen(!dropdownOpen)}
            >
              More actions ‚ñº
            </button>
            {dropdownOpen && (
              <div className="absolute right-0 mt-2 bg-white border rounded-md shadow-lg z-10 w-48">
                {[
                  "Contact seller",
                  "Return this item",
                  "I didn‚Äôt receive it",
                  "Sell this item",
                  "Add note",
                  "Hide Order",
                  "Help & report",
                ].map((label, i) => (
                  <button
                    key={i}
                    className="w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                  >
                    {label}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Product Info + Delivery */}
      <div className="mt-4">
        {/* Top: Image + Info */}
        <div className="flex gap-4 mb-4">
          <div className="w-20 h-20 shrink-0">
            <img
              src={imageUrl}
              alt={productTitle}
              className="w-20 h-20 object-cover rounded-md"
            />
          </div>

          <div className="flex-1 min-w-0">
            <div className="font-semibold">{productTitle}</div>
            <div className="text-sm text-gray-500">
              Sold by:{" "}
              <span className="underline text-black cursor-pointer">
                {sellerName} ‚Ä∫
              </span>
            </div>
            <div className="text-sm">{price}</div>
            <div className="text-sm">Returns accepted until {returnDate}</div>
          </div>
        </div>

        {/* Bottom: Buttons + Address */}
        <div>
          <div className="flex gap-2 mb-4 w-full overflow-x-auto scrollbar-hide">
            <button className="upfrica-btn-primary-outline-sm text-black">
              üîÅ Buy it again
            </button>
            <button className="upfrica-btn-primary-outline-sm text-black">
              ‚úçÔ∏è Write a review
            </button>
            <button className="upfrica-btn-primary-outline-sm text-black">
              üõçÔ∏è Seller's items
            </button>
          </div>

          <hr className="border-t border-gray-200 my-4" />

          <div className="text-sm text-gray-700 space-y-2">
            <span className="font-semibold text-gray-800">Delivery Info:</span>
            <div className="grid grid-cols-1 items-center">
              <div className="flex items-center space-x-2">
                <AiOutlineHome className="text-violet-600" size={18} />
                <span>
                  {showFullInfo
                    ? `${order.address.address_data.address_line_1}${order.address.address_data.address_line_2 ? ", " + order.address.address_data.address_line_2 : ""}, ${order.address.address_data.local_area}, ${order.address.address_data.town}, ${order.address.address_data.country}`
                    : `${order.address.address_data.town}, ${order.address.address_data.country}`}
                </span>
              </div>

              <div className="flex items-center space-x-2">
                <AiOutlineUser className="text-violet-600" size={18} />
                <span>
                  {showFullInfo
                    ? `${order.buyer.first_name} ${order.buyer.last_name}`
                    : `${order.buyer.first_name} ${order.buyer.last_name[0]}.`}
                </span>
              </div>

              <div className="flex items-center space-x-2">
                <AiOutlinePhone className="text-violet-600" size={18} />
                <span>
                  {showFullInfo
                    ? order.address.address_data.phone_number
                    : maskedPhone}
                </span>
              </div>
            </div>

            <button
              onClick={() => setShowFullInfo(!showFullInfo)}
              className="text-sm text-purple-600 mt-2 underline"
            >
              {showFullInfo ? "Hide full info ‚ñ≤" : "Show full info ‚ñº"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderCard;


===== src/app/(pages)/dashboard/all-orders copy/components/OrdersPage.jsx =====
"use client";
import React, { useEffect, useState, useRef } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import OrderCard from "./OrderCard";
import Pagination from "@/components/Pagination";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";

const PAGE_SIZE = 20;

export default function OrdersPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const pageParam = parseInt(searchParams.get("page") || "1", 10);
  const [orders, setOrders] = useState([]);
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceRef = useRef(null);

  useEffect(() => {
    if (!token) return;

    setLoading(true);
    fetch(`https://media.upfrica.com/api/buyer/orders/?page=${pageParam}`, {
      headers: {
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      },
    })
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setOrders(data.results);
        setCount(data.count);
      })
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [token, pageParam]);

  const totalPages = Math.ceil(count / PAGE_SIZE);

  const goToPage = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      router.push(`/dashboard/all-orders?page=${newPage}`);
    }
  };

  useEffect(() => {
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(() => {
      const lowerQuery = searchQuery.toLowerCase();
      const filtered = orders.flatMap((order) =>
        order.order_items
          .filter(
            (item) =>
              item.product.title.toLowerCase().includes(lowerQuery) ||
              String(order.id).includes(lowerQuery),
          )
          .map((item) => ({ ...item, order })),
      );
      setSearchResults(filtered);
      setSearchLoading(false);
    }, 300);

    return () => clearTimeout(debounceRef.current);
  }, [searchQuery, orders]);

  const displayItems = searchQuery
    ? searchResults
    : orders.flatMap((order) =>
        order.order_items.map((item) => ({ ...item, order })),
      );

  return (
    <div className="p-0 bg-gray-100 min-h-screen text-black font-sans">
      {/* Search Bar */}
      <div className="relative max-w-xl mx-auto mb-6">
        <AiOutlineSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-xl text-gray-700" />
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search orders by product name or order #..."
          className="w-full rounded-full border border-gray-300 px-10 py-2 focus:outline-none"
        />
        {searchQuery && (
          <AiOutlineClose
            className="absolute right-3 top-1/2 -translate-y-1/2 text-xl text-gray-600 cursor-pointer"
            onClick={() => setSearchQuery("")}
          />
        )}
      </div>

      <div className="flex gap-6 mb-4 font-semibold overflow-x-auto whitespace-nowrap px-2 scrollbar-hide">
        <div className="border-b-2 border-black pb-1">All Purchases</div>
        <div>Processing</div>
        <div>Unpaid</div>
        <div>Returns & Cancelled</div>
      </div>

      <h1 className="text-2xl font-bold mb-6">My Orders</h1>

      {loading ? (
        <div className="text-center text-gray-600">Loading your orders...</div>
      ) : error ? (
        <p className="text-red-600 text-center">
          Error loading orders: {error}
        </p>
      ) : (
        <div className="space-y-6">
          {displayItems.length === 0 ? (
            <p className="text-center text-gray-500">
              No matching orders found.
            </p>
          ) : (
            displayItems.map((item, index) => (
              <OrderCard
                key={`${item.order.id}-${item.id}-${index}`}
                order={item.order} // ‚úÖ Add this
                product={item.product} // ‚úÖ Pass product as well if needed
                status={item.receive_status === 1 ? "Received" : "Processing"}
                date={new Date(item.order.created_at).toLocaleDateString()}
                total={`GHS ${((item.price_cents * item.quantity) / 100).toFixed(2)}`}
                orderNumber={String(item.order.id).padStart(8, "0")}
                productTitle={item.product.title}
                seller={
                  item.product.user_display_name ||
                  `Seller ${item.product.user}`
                }
                price={`GHS ${(item.price_cents / 100).toFixed(2)}`}
                returnDate="12 May"
                imageUrl={
                  item.product.product_images?.[0] || "/placeholder.png"
                }
              />
            ))
          )}
        </div>
      )}

      {!searchQuery && totalPages > 1 && (
        <Pagination
          currentPage={pageParam}
          totalPages={totalPages}
          onPageChange={goToPage}
        />
      )}
    </div>
  );
}


===== src/app/(pages)/dashboard/all-orders copy/components/SideBar.jsx =====
// 'use client';

// import React from 'react';

// export default function SideBar() {
//   return (
//     <aside className="w-[240px] p-2 text-black hidden md:block rounded-md overflow-y-auto max-h-[calc(100vh-25rem)]">
//       <h2 className="text-lg font-bold mb-4">Filters</h2>

//       <div className="mb-6 p-5 bg-white border rounded-t-[5px] drop-shadow">
//         <label className="block text-sm font-semibold mb-1">Category</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Categories</option>
//           <option>Electronics</option>
//           <option>Fashion</option>
//           <option>Home</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Condition</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Conditions</option>
//           <option>New</option>
//           <option>Used</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Sort By</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>Most Recent</option>
//           <option>Price: Low to High</option>
//           <option>Price: High to Low</option>
//         </select>
//       </div>

//       <div>
//         <label className="block text-sm font-semibold mb-1">Ratings</label>
//         <p className="text-yellow-600 font-bold">‚≠ê 4.5/5</p>
//       </div>
//     </aside>
//   );
// }


===== src/app/(pages)/dashboard/all-orders copy/layout.js =====
// "use client";

// import Header from "@/components/common/header/Header";
// import Footer from "@/components/common/footer/Footer";
// import SideBar from "./components/SideBar";

// export default  Layout = ({ children }) => {
//   return (
//     <>
//       <Header />
//       <div className="min-h-screen bg-gray-100 text-gray-900">
//         <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
//           <SideBar />
//           <main className="flex-1 px-0 py-0">{children}</main>
//         </div>
//       </div>
//       <Footer />
//     </>
//   );
// }

// import React from "react";
// import Header from "@/components/common/header/Header";
// import Footer from "@/components/common/footer/Footer";
// import SideBar from "./components/SideBar";

// const layout = ({ children }) => {
//   return (
//     <>
//       <Header />
//       <div className="min-h-screen bg-gray-100 text-gray-900">
//         <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
//           <SideBar />
//           <main className="flex-1 px-0 py-0">{children}</main>
//         </div>
//       </div>
//       <Footer />
//     </>
//   );
// };

// export default layout;

import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";

import React from "react";

const layout = ({ children }) => {
  return (
    <>
      <Header />
      <div className="min-h-screen bg-gray-100 text-gray-900">
        <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
          {/* <Sidebar /> */}
          <main className="flex-1 px-0 py-0">{children}</main>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default layout;


===== src/app/(pages)/dashboard/all-orders copy/page.jsx =====
import React from "react";
import OrdersPage from "./components/OrdersPage";

const page = () => {
  return (
    <div>
      <OrdersPage />
    </div>
  );
};

export default page;


===== src/app/(pages)/dashboard/all-orders copy/page2.jsx =====
// 'use client'

// import React, { useState, useEffect } from 'react'
// import { useSearchParams, useRouter } from 'next/navigation'
// import { useSelector } from 'react-redux'
// import { AiOutlineLeft, AiOutlineRight, AiOutlineArrowDown } from 'react-icons/ai'
// import { MdCheck, MdChat } from 'react-icons/md'

// const PAGE_SIZE = 20
// // Remove "Delivered", keep "Received" as final status
// const STATUSES = ['Ordered', 'Processing', 'Shipped', 'Received']

// function Pagination({ currentPage, totalPages, onPageChange }) {
//   const [isMobile, setIsMobile] = useState(false)

//   useEffect(() => {
//     const handleResize = () => setIsMobile(window.innerWidth <= 768)
//     handleResize()
//     window.addEventListener('resize', handleResize)
//     return () => window.removeEventListener('resize', handleResize)
//   }, [])

//   const handlePageClick = (page) => {
//     if (page >= 1 && page <= totalPages && page !== currentPage) {
//       onPageChange(page)
//     }
//   }

//   const getPageNumbers = () => {
//     if (isMobile) {
//       if (totalPages <= 2) return [1, ...(totalPages === 2 ? [2] : [])]
//       return [1, 2, '...']
//     }
//     if (totalPages <= 5) return Array.from({ length: totalPages }, (_, i) => i + 1)
//     if (currentPage <= 3) return [1, 2, 3, 4, '...', totalPages]
//     if (currentPage >= totalPages - 2)
//       return [1, '...', totalPages - 3, totalPages - 2, totalPages - 1, totalPages]
//     return [1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages]
//   }

//   return (
//     <div className="mt-8 flex justify-center overflow-x-auto">
//       <div className="inline-flex items-center space-x-2 whitespace-nowrap px-2">
//         <button
//           onClick={() => handlePageClick(currentPage - 1)}
//           disabled={currentPage === 1}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <AiOutlineLeft className="mr-1" />
//           <span>Prev</span>
//         </button>
//         {getPageNumbers().map((page, i) =>
//           typeof page === 'number' ? (
//             <button
//               key={i}
//               onClick={() => handlePageClick(page)}
//               className={`px-3 py-1 rounded border border-gray-300 hover:bg-gray-100 ${page === currentPage ? 'bg-violet-700 text-white font-semibold' : ''
//                 }`}
//             >
//               {page}
//             </button>
//           ) : (
//             <span key={i} className="px-3 py-1 text-gray-500">
//               ‚Ä¶
//             </span>
//           )
//         )}
//         <button
//           onClick={() => handlePageClick(currentPage + 1)}
//           disabled={currentPage === totalPages}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <span>Next</span>
//           <AiOutlineRight className="ml-1" />
//         </button>
//       </div>
//     </div>
//   )
// }

// function SkeletonOrderCard() {
//   return (
//     <div className="bg-white rounded-lg shadow p-6 space-y-6 animate-pulse border border-gray-700">
//       <div className="h-6 bg-gray-300 rounded w-1/3" />
//       <div className="h-4 bg-gray-300 rounded w-1/4" />
//       <div className="grid grid-cols-3 gap-4">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <div key={i} className="flex space-x-3 items-center">
//             <div className="w-16 h-16 bg-gray-300 rounded" />
//             <div className="flex-1 space-y-2">
//               <div className="h-4 bg-gray-300 rounded w-3/4" />
//               <div className="h-4 bg-gray-300 rounded w-1/2" />
//               <div className="h-3 bg-gray-300 rounded w-1/3" />
//             </div>
//           </div>
//         ))}
//       </div>
//       <div className="grid grid-cols-2 gap-6">
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-4 bg-gray-300 rounded w-1/3" />
//         </div>
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-6 bg-gray-300 rounded w-1/4" />
//         </div>
//       </div>
//       <div className="space-y-2">
//         <div className="h-4 bg-gray-300 rounded w-1/6" />
//         <div className="w-full bg-gray-200 h-1 rounded-full">
//           <div className="bg-gray-300 h-full" />
//         </div>
//         <div className="flex justify-between">
//           {Array.from({ length: 4 }).map((_, i) => (
//             <div key={i} className="h-4 w-12 bg-gray-300 rounded" />
//           ))}
//         </div>
//       </div>
//     </div>
//   )
// }

// export default function OrdersPage() {
//   const searchParams = useSearchParams()
//   const router = useRouter()
//   const token = useSelector((state) => state.auth.token)

//   const pageParam = parseInt(searchParams.get('page') || '1', 10)
//   const [orders, setOrders] = useState([])
//   const [count, setCount] = useState(0)
//   const [loading, setLoading] = useState(true)
//   const [error, setError] = useState(null)
//   // status index per orderId+sellerId
//   const [statusesByOrder, setStatusesByOrder] = useState({})
//   // loading state for the "receive" action per orderId+sellerId
//   const [loadingReceiveBy, setLoadingReceiveBy] = useState({})

//   useEffect(() => {
//     if (!token) return
//     setLoading(true)
//     fetch(`https://media.upfrica.com/api/buyer/orders/?page=${pageParam}`, {
//       headers: { Authorization: `Token ${token}` },
//     })
//       .then((res) => {
//         if (!res.ok) throw new Error(`HTTP ${res.status}`)
//         return res.json()
//       })
//       .then((data) => {
//         setOrders(data.results)
//         setCount(data.count)
//       })
//       .catch((err) => setError(err.message))
//       .finally(() => setLoading(false))
//   }, [token, pageParam])

//   // Initialize statuses, marking "Received" if receive_status===1
//   useEffect(() => {
//     const init = {}
//     orders.forEach((order) => {
//       const bySeller = {}
//       order.order_items.forEach((item) => {
//         const sid = item.product.user
//         // if any item for that seller is already received, mark as Received
//         const received = item.receive_status === 1
//         bySeller[sid] = received ? STATUSES.length - 1 : 0
//       })
//       init[order.id] = bySeller
//     })
//     setStatusesByOrder(init)
//   }, [orders])

//   const totalPages = Math.ceil(count / PAGE_SIZE)

//   const handlePageChange = (page) => {
//     router.push(`/orders?page=${page}`)
//   }

//   // Handle status clicks, including PATCH for Received
//   const handleStatusClick = async (orderId, sellerId, idx) => {
//     const currentIdx = statusesByOrder[orderId]?.[sellerId] ?? 0
//     const lastIdx = STATUSES.length - 1
//     // if already at final "Received", do nothing
//     if (currentIdx === lastIdx) return

//     const statusName = STATUSES[idx]

//     // Only for "Received" do we call the API
//     if (statusName === 'Received') {
//       if (
//         !window.confirm(
//           'By clicking OK, you confirm that you have received the product.'
//         )
//       ) {
//         return
//       }

//       const key = `${orderId}_${sellerId}`
//       setLoadingReceiveBy((p) => ({ ...p, [key]: true }))

//       try {
//         // gather all items for this seller
//         const items = orders
//           .find((o) => o.id === orderId)
//           .order_items.filter((it) => it.product.user === sellerId)

//         const myHeaders = new Headers()
//         myHeaders.append('Authorization', `Token ${token}`)
//         myHeaders.append('Content-Type', 'application/json')

//         const raw = JSON.stringify({ receive_status: 1 })

//         // send PATCH for each item
//         const requests = items.map((item) =>
//           fetch(
//             `https://media.upfrica.com/api/buyer/order-item/${item.id}/`,
//             {
//               method: 'PATCH',
//               headers: myHeaders,
//               body: raw,
//               redirect: 'follow',
//             }
//           )
//         )
//         const responses = await Promise.all(requests)
//         // check all succeeded
//         for (let res of responses) {
//           if (!res.ok) throw new Error(`HTTP ${res.status}`)
//           const data = await res.json()
//           if (data.receive_status !== 1) throw new Error('Bad response')
//         }

//         // success!
//         setStatusesByOrder((prev) => ({
//           ...prev,
//           [orderId]: {
//             ...prev[orderId],
//             [sellerId]: lastIdx,
//           },
//         }))
//         alert('Marked as received!')
//       } catch (err) {
//         console.error(err)
//         alert('Error marking as received: ' + err.message)
//       } finally {
//         setLoadingReceiveBy((p) => ({ ...p, [key]: false }))
//       }

//       return
//     }

//     // For other statuses, local update only
//     if (
//       !window.confirm(`Are you sure you want to mark this as "${statusName}"?`)
//     ) {
//       return
//     }
//     setStatusesByOrder((prev) => ({
//       ...prev,
//       [orderId]: {
//         ...prev[orderId],
//         [sellerId]: idx,
//       },
//     }))
//   }

//   if (loading) {
//     return (
//       <main className="max-w-6xl mx-auto px-4 py-8 space-y-6">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <SkeletonOrderCard key={i} />
//         ))}
//       </main>
//     )
//   }

//   if (error) {
//     return (
//       <p className="p-6 text-center text-red-600">
//         Error fetching orders: {error}
//       </p>
//     )
//   }

//   return (
//     <main className="space-y-8 max-w-6xl mx-auto px-4 py-8">
//       <h1 className="text-3xl font-bold">My Orders</h1>

//       <div className="space-y-6">
//         {orders.map((order) => {
//           const placedDate = new Date(order.created_at)
//           const formattedPlaced = placedDate.toLocaleDateString(undefined, {
//             year: 'numeric',
//             month: 'long',
//             day: 'numeric',
//           })
//           const itemsBySeller = order.order_items.reduce((acc, item) => {
//             const sid = item.product.user
//             if (!acc[sid]) acc[sid] = []
//             acc[sid].push(item)
//             return acc
//           }, {})

//           return (
//             <div
//               key={order.id}
//               className="bg-white rounded-lg shadow p-6 space-y-1 border border-gray-700"
//             >
//               <div className="flex justify-between items-start">
//                 <div>
//                   <h2 className="text-xl font-semibold">
//                     Order #{String(order.id).padStart(5, '0')}
//                   </h2>
//                   <p className="text-gray-600 text-sm">
//                     Placed{' '}
//                     <time dateTime={order.created_at}>{formattedPlaced}</time>
//                   </p>
//                 </div>
//                 <a
//                   href={`/dashboard/all-orders/${order.id}/`}
//                   className="text-indigo-600 hover:underline text-sm font-medium"
//                 >
//                   View details&nbsp;‚Üí
//                 </a>
//               </div>

//               {Object.entries(itemsBySeller).map(([sellerId, items]) => {
//                 const currentIdx =
//                   statusesByOrder[order.id]?.[sellerId] ?? 0
//                 const progressPercent = ((currentIdx + 1) / STATUSES.length) * 100
//                 const needsGuide = currentIdx < STATUSES.length - 1
//                 const key = `${order.id}_${sellerId}`
//                 const isLoadingReceive = loadingReceiveBy[key]
//                 const lastIdx = STATUSES.length - 1

//                 return (
//                   <div key={sellerId} className="space-y-4">
//                     <div className="flex justify-between items-center">
//                       <span className="text-sm font-medium text-gray-700">
//                         From seller #{sellerId}
//                       </span>
//                       <button
//                         onClick={() => router.push(`/chat/${sellerId}`)}
//                         className="flex flex-col items-center text-violet-700 hover:text-violet-700 text-sm font-medium"
//                       >
//                         <div className="p-2 pe-1 rounded-full bg-gray-200 hover:bg-gray-300">
//                           <MdChat size={18} />
//                         </div>
//                         Contact seller
//                       </button>
//                     </div>

//                     <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
//                       {items.map((item) => (
//                         <div
//                           key={item.id}
//                           className="flex space-x-3 items-center"
//                         >
//                           <img
//                             src={item.product.product_images[0]}
//                             alt={item.product.title}
//                             className="w-16 h-16 rounded object-cover"
//                           />
//                           <div>
//                             <h3 className="text-sm font-medium">
//                               {item.product.title}
//                             </h3>
//                             <p className="text-sm text-gray-500">
//                               ${(item.price_cents / 100).toFixed(2)}
//                             </p>
//                             <p className="text-xs text-gray-400">
//                               Qty: {item.quantity}
//                             </p>
//                           </div>
//                         </div>
//                       ))}
//                     </div>

//                     <div>
//                       <h4 className="text-sm font-medium mb-1">Status</h4>
//                       <div className="w-full bg-gray-200 h-1 rounded-full overflow-hidden">
//                         <div
//                           className="bg-indigo-600 h-full"
//                           style={{ width: `${progressPercent}%` }}
//                         />
//                       </div>
//                       <div className="flex justify-between text-xs mt-1">
//                         {STATUSES.map((status, idx) => (
//                           <div
//                             key={status}
//                             className="relative flex-1 flex justify-center"
//                           >
//                             {/* Arrow now points at "Received" */}
//                             {idx === lastIdx && needsGuide && (
//                               <div className="absolute -top-16 flex flex-col items-center bg-white">
//                                 <span className="text-xs text-gray-700 border border-gray-700 p-1 rounded">
//                                   Click here to receive
//                                 </span>
//                                 <AiOutlineArrowDown className="text-gray-700" />
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/dashboard/all-products/page.jsx =====
"use client";

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { FiSearch } from "react-icons/fi";
import { useRouter } from "next/navigation";
import Pagination from "@/components/Pagination";

const PAGE_SIZE = 20;
const SKELETON_ROWS = 10;
const DEBOUNCE_DELAY = 500;

export default function DashboardPage() {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // PRODUCTS & PAGINATION
  const [products, setProducts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);

  // SEARCH
  const [searchInput, setSearchInput] = useState(""); // immediate input
  const [searchQuery, setSearchQuery] = useState(""); // debounced

  // DELETE STATE & ALERT
  const [deletingId, setDeletingId] = useState(null);
  const [alert, setAlert] = useState({ type: "", message: "" });

  // Fetch products (list or search) when token, page or searchQuery changes
  useEffect(() => {
    if (!token) return;

    const fetchProducts = async () => {
      setLoading(true);
      try {
        const base = "https://media.upfrica.com/api/seller/products";
        const url = searchQuery
          ? `${base}/search/?q=${encodeURIComponent(searchQuery)}&page=${currentPage}`
          : `${base}/?page=${currentPage}`;

        const res = await fetch(url, {
          method: "GET",
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch products");
        const data = await res.json();

        setProducts(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      } catch (err) {
        console.error(err);
        setAlert({ type: "error", message: "Could not load products." });
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [token, currentPage, searchQuery]);

  // Debounce the searchInput into searchQuery
  useEffect(() => {
    const handler = setTimeout(() => {
      setSearchQuery(searchInput.trim());
      setCurrentPage(1);
    }, DEBOUNCE_DELAY);

    return () => clearTimeout(handler);
  }, [searchInput]);

  // DELETE handler with loading button text and alert
  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this product?"))
      return;

    setDeletingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/seller/products/${id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error("Failed to delete product");

      setProducts((prev) => prev.filter((p) => p.id !== id));
      setAlert({ type: "success", message: "Product deleted successfully." });
    } catch (err) {
      console.error(err);
      setAlert({
        type: "error",
        message: "Could not delete product. Please try again.",
      });
    } finally {
      setDeletingId(null);
    }
  };

  const handleEdit = (slug) => {
    router.push(`/products/edit/${slug}`);
  };

  return (
    <>
      {/* HEADER + SEARCH */}
      <header className="flex items-center space-x-6 mb-6">
        <div>
          <h1 className="text-3xl font-semibold">Hi {user?.username}</h1>
          <p className="text-gray-600">Welcome to seller dashboard</p>
        </div>
        <div className="relative flex-1 max-w-full">
          <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            type="text"
            placeholder="Search products‚Ä¶"
            className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
            value={searchInput}
            onChange={(e) => setSearchInput(e.target.value)}
          />
        </div>
      </header>

      {/* ALERT BANNER */}
      {alert.message && (
        <div
          className={`mb-4 px-4 py-3 border rounded ${
            alert.type === "success"
              ? "bg-green-100 border-green-400 text-green-700"
              : "bg-red-100 border-red-400 text-red-700"
          }`}
        >
          <span>{alert.message}</span>
          <button
            onClick={() => setAlert({ type: "", message: "" })}
            className="float-right font-bold"
          >
            √ó
          </button>
        </div>
      )}

      {/* PRODUCTS TABLE */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold">All Products</h2>
          {totalPages > 1 && (
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
            />
          )}
        </div>

        <table className="w-full table-fixed text-left">
          <thead>
            <tr className="border-b border-gray-200">
              <th className="w-[35%] pb-2">Product Info</th>
              <th className="w-[10%] pb-2">Date Added</th>
              <th className="w-[10%] pb-2">Price</th>
              <th className="w-[10%] pb-2">Status</th>
              <th className="w-[10%] pb-2">Viewed</th>
              <th className="w-[10%] pb-2">Sold</th>
              <th className="w-[15%] pb-2">Action</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              Array.from({ length: SKELETON_ROWS }).map((_, idx) => (
                <tr key={idx} className="even:bg-gray-50 animate-pulse">
                  <td className="py-3">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-gray-200 rounded" />
                      <div className="flex-1 max-w-[40%]">
                        <div className="h-4 bg-gray-200 mb-2 rounded w-3/4" />
                        <div className="h-3 bg-gray-200 rounded w-1/2" />
                      </div>
                    </div>
                  </td>
                  <td className="py-3">
                    <div className="h-4 bg-gray-200 rounded w-24 mx-auto" />
                  </td>
                  <td className="py-3">
                    <div className="h-4 bg-gray-200 rounded w-16 mx-auto" />
                  </td>
                  <td className="py-3">
                    <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                  </td>
                  <td className="py-3">
                    <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                  </td>
                  <td className="py-3">
                    <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                  </td>
                  <td className="py-3">
                    <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                  </td>
                </tr>
              ))
            ) : products.length > 0 ? (
              products.map((p) => (
                <tr key={p.id} className="even:bg-gray-50">
                  <td className="py-3">
                    <div className="flex items-center space-x-3">
                      {p.product_images[0] && (
                        <img
                          src={p.product_images[0]}
                          alt={p.title}
                          className="w-20 h-20 object-cover rounded"
                        />
                      )}
                      <div className="flex-1">
                        <div>{p.title}</div>
                        <div className="text-gray-500 text-sm">
                          SKU: {p.u_pid}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="py-3">
                    {new Date(p.created_at).toLocaleDateString()}
                  </td>
                  <td className="py-3">
                    {(p.price_cents / 100).toFixed(2)} {p.price_currency}
                  </td>
                  <td className="py-3">
                    <span
                      className={
                        p.status === 1 ? "text-green-600" : "text-red-600"
                      }
                    >
                      {p.status === 1 ? "In Stock" : "Out of Stock"}
                    </span>
                  </td>
                  <td className="py-3">{p.impressions_count ?? 0}</td>
                  <td className="py-3">{p.likes ?? 0}</td>
                  <td className="py-3 space-x-4">
                    <button
                      onClick={() => handleEdit(p.slug)}
                      className="text-blue-600 hover:underline"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(p.id)}
                      disabled={deletingId === p.id}
                      className={`${
                        deletingId === p.id
                          ? "text-gray-400 cursor-not-allowed"
                          : "text-red-600 hover:underline"
                      }`}
                    >
                      {deletingId === p.id ? "Deleting‚Ä¶" : "Delete"}
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={7} className="py-4 text-center text-gray-500">
                  No products found.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* BOTTOM PAGINATION */}
      {totalPages > 1 && (
        <div className="flex items-center justify-center mt-4">
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        </div>
      )}
    </>
  );
}

// // 'use client';

// // import { useState, useEffect } from 'react';
// // import { useSelector } from 'react-redux';
// // import { FiSearch } from 'react-icons/fi';
// // import { useRouter } from 'next/navigation';
// // import Pagination from '@/components/Pagination';

// // const PAGE_SIZE = 20;
// // const SKELETON_ROWS = 10;

// // export default function DashboardPage() {
// //     const { user, token } = useSelector((state) => state.auth);
// //     const router = useRouter();

// //     const [products, setProducts] = useState([]);
// //     const [currentPage, setCurrentPage] = useState(1);
// //     const [totalPages, setTotalPages] = useState(1);
// //     const [loading, setLoading] = useState(false);

// //     useEffect(() => {
// //         if (!token) return;
// //         setLoading(true);
// //         fetch(`https://media.upfrica.com/api/seller/products/?page=${currentPage}`, {
// //             method: 'GET',
// //             headers: { Authorization: `Token ${token}` },
// //         })
// //             .then((res) => {
// //                 if (!res.ok) throw new Error('Failed to fetch products');
// //                 return res.json();
// //             })
// //             .then((data) => {
// //                 setProducts(data.results || []);
// //                 setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
// //             })
// //             .catch((err) => console.error(err))
// //             .finally(() => setLoading(false));
// //     }, [token, currentPage]);

// //     const handleDelete = async (id) => {
// //         const confirmed = window.confirm(
// //             'Are you sure you want to delete this product?'
// //         );
// //         if (!confirmed) return;

// //         try {
// //             const res = await fetch(
// //                 `https://media.upfrica.com/api/seller/products/${id}/`,
// //                 {
// //                     method: 'DELETE',
// //                     headers: { Authorization: `Token ${token}` },
// //                 }
// //             );
// //             if (!res.ok) throw new Error('Failed to delete product');
// //             // remove from local state
// //             setProducts((prev) => prev.filter((p) => p.id !== id));
// //         } catch (err) {
// //             console.error(err);
// //             alert('Could not delete product. Please try again.');
// //         }
// //     };

// //     const handleEdit = (id) => {
// //         router.push(`/products/edit/${id}`);
// //     };

// //     return (
// //         <>
// //             {/* HEADER + SEARCH */}
// //             <header className="flex items-center space-x-6 mb-6">
// //                 <div>
// //                     <h1 className="text-3xl font-semibold">Hi {user?.username}</h1>
// //                     <p className="text-gray-600">Welcome to seller dashboard</p>
// //                 </div>
// //                 <div className="relative flex-1 max-w-full">
// //                     <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
// //                     <input
// //                         type="text"
// //                         placeholder="Search something here ‚Ä¶"
// //                         className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
// //                     />
// //                 </div>
// //             </header>

// //             {/* ALL PRODUCTS TABLE */}
// //             <div className="bg-white p-4 rounded-lg shadow-sm">
// //                 {/* Title + Pagination */}
// //                 <div className="flex items-center justify-between mb-4">
// //                     <h2 className="text-xl font-semibold">All Products</h2>
// //                     {totalPages > 1 && (
// //                         <Pagination
// //                             currentPage={currentPage}
// //                             totalPages={totalPages}
// //                             onPageChange={setCurrentPage}
// //                         />
// //                     )}
// //                 </div>

// //                 <table className="w-full table-fixed text-left">
// //                     <thead>
// //                         <tr className="border-b border-gray-200">
// //                             <th className="w-[35%] pb-2">Product Info</th>
// //                             <th className="w-[10%] pb-2">Date Added</th>
// //                             <th className="w-[10%] pb-2">Price</th>
// //                             <th className="w-[10%] pb-2">Status</th>
// //                             <th className="w-[10%] pb-2">Viewed</th>
// //                             <th className="w-[10%] pb-2">Sold</th>
// //                             <th className="w-[15%] pb-2">Action</th>
// //                         </tr>
// //                     </thead>
// //                     <tbody>
// //                         {loading ? (
// //                             Array.from({ length: SKELETON_ROWS }).map((_, idx) => (
// //                                 <tr key={idx} className="even:bg-gray-50 animate-pulse">
// //                                     <td className="py-3">
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/dashboard/create-help-blog/dummy/page.jsx =====
"use client";
import React from "react";
import { Formik, FieldArray } from "formik";
import Link from "next/link";
import Script from "next/script";
import Footer from "@/components/common/footer/Footer";

// ----------------------------------------------------------------------
// Dummy initial values to prefill the form (simulate data from the backend)
// ----------------------------------------------------------------------
const initialFormValues = {
  title: "How to Set Up Delivery Information for your Listings",
  summary:
    "Etsy offers many delivery tools to help you set postage rates in your shop.",
  tags: ["delivery", "postage", "Etsy"],
  sections: [
    {
      sectionTitle: "Introduction",
      sectionType: "paragraph",
      sectionContent:
        "Etsy offers many delivery tools to help you set up your listings. Use delivery profiles, offer discounts on postage for multiple items and more.",
      bulletItems: [],
      tableHeaders: [],
      tableRows: [],
      files: [], // File objects will be stored here
      links: [],
    },
    {
      sectionTitle: "Postage Pricing",
      sectionType: "bullet",
      sectionContent: "",
      bulletItems: [
        "Listings with postage under $6 are prioritised.",
        "Check guidelines for postage price search.",
      ],
      tableHeaders: [],
      tableRows: [],
      files: [],
      links: [],
    },
    {
      sectionTitle: "Delivery Profile Highlight",
      sectionType: "highlight",
      sectionContent:
        "A delivery profile allows you to apply consistent settings to multiple listings. Update once to save everywhere.",
      bulletItems: [],
      tableHeaders: [],
      tableRows: [],
      files: [],
      links: [],
    },
    {
      sectionTitle: "Sample Pricing Table",
      sectionType: "table",
      sectionContent: "",
      bulletItems: [],
      tableHeaders: ["Item", "One item price", "Additional item price"],
      tableRows: [
        ["Item A", "2.00 USD", "0.50 USD"],
        ["Item B", "1.00 USD", "0.75 USD"],
      ],
      files: [],
      links: [],
    },
    {
      sectionTitle: "Additional Resources",
      sectionType: "links",
      sectionContent: "",
      bulletItems: [],
      tableHeaders: [],
      tableRows: [],
      files: [],
      links: [
        { text: "Learn about free delivery", url: "/help/free-delivery" },
        { text: "Calculated postage info", url: "/help/calculated-postage" },
      ],
    },
  ],
};

// ----------------------------------------------------------------------
// Basic Formik validation (extend as needed)
// ----------------------------------------------------------------------
const validate = (values) => {
  const errors = {};
  if (!values.title) errors.title = "Title is required.";
  if (!values.summary) errors.summary = "Summary is required.";
  return errors;
};

// ----------------------------------------------------------------------
// PreviewTable Component ‚Äì Renders a table that shows the current sections
// from the form values.
// ----------------------------------------------------------------------
const PreviewTable = ({ sections }) => {
  return (
    <div className="overflow-x-auto my-8 border-t pt-8">
      <h2 className="text-2xl font-bold text-violet-700 mb-4">
        Preview Sections Data
      </h2>
      <table className="min-w-full border border-gray-400">
        <thead>
          <tr className="bg-violet-700 text-white">
            <th className="px-4 py-2 border">Index</th>
            <th className="px-4 py-2 border">Section Title</th>
            <th className="px-4 py-2 border">Type</th>
            <th className="px-4 py-2 border">Content Summary</th>
          </tr>
        </thead>
        <tbody>
          {sections.map((section, i) => (
            <tr key={i}>
              <td className="px-4 py-2 border">{i + 1}</td>
              <td className="px-4 py-2 border">{section.sectionTitle}</td>
              <td className="px-4 py-2 border">
                {section.sectionType || "Not selected"}
              </td>
              <td className="px-4 py-2 border">
                {section.sectionType === "paragraph" ||
                section.sectionType === "highlight" ? (
                  section.sectionContent
                ) : section.sectionType === "bullet" ? (
                  section.bulletItems.join("; ")
                ) : section.sectionType === "table" ? (
                  <>
                    Headers: {section.tableHeaders.join(", ")} <br />
                    Rows:{" "}
                    {section.tableRows
                      .map((row) => row.join(" | "))
                      .join(" ; ")}
                  </>
                ) : section.sectionType === "links" ? (
                  section.links.map((lk) => `${lk.text} (${lk.url})`).join("; ")
                ) : section.sectionType === "image" ? (
                  `${section.files.length} file(s) selected`
                ) : (
                  "N/A"
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

// ----------------------------------------------------------------------
// Main CreateHelpBlogPage Component
// ----------------------------------------------------------------------
export default function CreateHelpBlogPage() {
  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <h1 className="text-3xl font-bold text-violet-700 mb-6">
        Create Help Blog Post
      </h1>
      <Formik
        initialValues={initialFormValues}
        validate={validate}
        onSubmit={(values) => {
          // When the form is submitted, log the data
          console.log("Submitted data:", values);
          alert("Help Blog Post submitted. Check the console for data.");
        }}
        enableReinitialize
      >
        {({
          values,
          errors,
          touched,
          handleChange,
          handleBlur,
          handleSubmit,
          setFieldValue,
        }) => (
          <>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Post Title */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Title <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="Enter post title"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm">{errors.title}</div>
                )}
              </div>

              {/* Summary */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Summary
                </label>
                <textarea
                  name="summary"
                  placeholder="Enter a short summary"
                  rows="2"
                  value={values.summary}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.summary && errors.summary && (
                  <div className="text-red-600 text-sm">{errors.summary}</div>
                )}
              </div>

              {/* Tags */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Tags
                </label>
                <FieldArray name="tags">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.tags.map((tag, idx) => (
                        <div key={idx} className="flex items-center gap-2">
                          <input
                            type="text"
                            name={`tags[${idx}]`}
                            placeholder="Enter tag"
                            value={tag}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                          />
                          <button
                            type="button"
                            onClick={() => remove(idx)}
                            className="text-red-500 font-bold"
                          >
                            X
                          </button>
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={() => push("New Tag")}
                        className="text-violet-700 underline"
                      >
                        + Add Tag
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Sections */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Sections
                </label>
                <FieldArray name="sections">
                  {({ push, remove }) => (
                    <div className="space-y-6">
                      {values.sections.map((section, secIndex) => (
                        <div
                          key={secIndex}
                          className="border border-gray-300 rounded-md p-4 bg-gray-100"
                        >
                          <div className="flex justify-between items-center">
                            <h2 className="text-xl font-semibold text-gray-800">
                              Section {secIndex + 1}
                            </h2>
                            {values.sections.length > 1 && (
                              <button
                                type="button"
                                onClick={() => remove(secIndex)}
                                className="text-red-500 font-bold"
                              >
                                Remove Section
                              </button>
                            )}
                          </div>
                          {/* Section Title */}
                          <div className="mt-2">
                            <label className="block text-gray-700 font-bold mb-1">
                              Section Title
                            </label>
                            <input
                              type="text"
                              name={`sections[${secIndex}].sectionTitle`}
                              placeholder="Enter section title"
                              value={section.sectionTitle}
                              onChange={handleChange}
                              onBlur={handleBlur}
                              className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                            />
                          </div>

                          {/* Section Type */}
                          <div className="mt-2">
                            <label className="block text-gray-700 font-bold mb-1">
                              Section Type
                            </label>
                            <select
                              name={`sections[${secIndex}].sectionType`}
                              value={section.sectionType}
                              onChange={handleChange}
                              className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                            >
                              <option value="">Select Type</option>
                              <option value="paragraph">Paragraph</option>
                              <option value="bullet">Bullet List</option>
                              <option value="highlight">Highlight</option>
                              <option value="table">Table</option>
                              <option value="image">Image</option>
                              <option value="links">Links</option>
                            </select>
                          </div>

                          {/* Conditional Fields Based on Section Type */}
                          {["paragraph", "highlight"].includes(
                            section.sectionType,
                          ) && (
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Content
                              </label>
                              <textarea
                                name={`sections[${secIndex}].sectionContent`}
                                placeholder="Enter content"
                                rows="4"
                                value={section.sectionContent}
                                onChange={handleChange}
                                onBlur={handleBlur}
                                className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                              />
                            </div>
                          )}

                          {section.sectionType === "bullet" && (
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Bullet Items
                              </label>
                              <FieldArray
                                name={`sections[${secIndex}].bulletItems`}
                              >
                                {({ push, remove }) => (
                                  <div className="space-y-2">
                                    {(section.bulletItems || []).map(
                                      (item, index) => (
                                        <div
                                          key={index}
                                          className="flex items-center gap-2"
                                        >
                                          <input
                                            type="text"
                                            name={`sections[${secIndex}].bulletItems[${index}]`}
                                            placeholder="Bullet item"
                                            value={item}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                            className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                                          />
                                          <button
                                            type="button"
                                            onClick={() => remove(index)}
                                            className="text-red-500 font-bold"
                                          >
                                            X
                                          </button>
                                        </div>
                                      ),
                                    )}
                                    <button
                                      type="button"
                                      onClick={() => push("Bullet Item")}
                                      className="text-violet-700 underline"
                                    >
                                      + Add Bullet
                                    </button>
                                  </div>
                                )}
                              </FieldArray>
                            </div>
                          )}

                          {section.sectionType === "table" && (
                            <div className="mt-2 space-y-4">
                              {/* Table Headers */}
                              <div>
                                <label className="block text-gray-700 font-bold mb-1">
                                  Table Headers
                                </label>
                                <FieldArray
                                  name={`sections[${secIndex}].tableHeaders`}
                                >
                                  {({ push, remove }) => (
                                    <div className="space-y-2">
                                      {(section.tableHeaders || []).map(
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/dashboard/create-help-blog/page.jsx =====
"use client";
import React from "react";
import { Editor } from "@tinymce/tinymce-react";
import { useRef } from "react";
import { Formik, FieldArray } from "formik";
import Link from "next/link";
import Script from "next/script";
import Footer from "@/components/common/footer/Footer";
import { useSelector } from "react-redux";

// Initial form values for creating a Help Blog Post.
// In production, you might start with empty values or fetch defaults from your backend.
const initialFormValues = {
  title: "",
  summary: "",
  tags: [], // e.g. ["shipping", "delivery"]
  sections: [
    {
      sectionTitle: "",
      sectionType: "", // Options: "paragraph", "bullet", "highlight", "table", "image", "links"
      // For paragraph or highlight types:
      sectionContent: "",
      // For bullet list type:
      bulletItems: [],
      // For table type:
      tableHeaders: [],
      tableRows: [], // Each row is an array of cell strings.
      // For image type:
      files: [], // File objects uploaded by the user.
      // For links type:
      links: [], // Each link is an object: { text: "", url: "" }
    },
  ],
};

// Simple Formik validation
const validate = (values) => {
  const errors = {};
  if (!values.title) errors.title = "Title is required.";
  if (!values.summary) errors.summary = "Summary is required.";
  // You can extend further validations as needed.
  return errors;
};

export default function CreateHelpBlogPage() {
  const summaryEditorRef = useRef(null);
  const { token, user } = useSelector((state) => state.auth);
  return (
    <>
      <div className="min-h-screen bg-gray-50 p-4 container mx-auto lg:p-20">
        <h1 className="text-3xl font-bold text-violet-700 mb-6 text-center">
          Create Help Blog Post
        </h1>
        <Formik
          initialValues={initialFormValues}
          validate={validate}
          onSubmit={(values) => {
            const myHeaders = new Headers();
            myHeaders.append("Authorization", `Token ${token}`);
            myHeaders.append("Content-Type", "application/json");
            fetch("https://media.upfrica.com/api/admin/helpblogs/", {
              method: "POST",
              headers: myHeaders,
              body: JSON.stringify(values),
              redirect: "follow",
            })
              .then((response) => response.json())
              .then((result) => {
                console.log(result);
                alert("Help blog post created successfully!");
                // Redirect to the newly created blog post page
                window.location.href = `/help-draft/`;
              })
              .catch((error) => {
                console.error("Error:", error);
                alert("Failed to create help blog post.");
              });
          }}
          enableReinitialize
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            setFieldValue,
            isSubmitting,
          }) => (
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Post Title */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Title <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="Enter post title"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm">{errors.title}</div>
                )}
              </div>

              {/* Summary (TinyMCE) */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Summary <span className="text-red-500">*</span>
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) => (summaryEditorRef.current = editor)}
                  value={values.summary || ""}
                  onEditorChange={(content) => {
                    setFieldValue("summary", content);
                  }}
                  init={{
                    height: 250,
                    menubar: false,
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | " +
                      "bold italic underline forecolor | " +
                      "alignleft aligncenter alignright alignjustify | " +
                      "bullist numlist outdent indent | removeformat | help",
                    content_style:
                      "body {font - family:Helvetica,Arial,sans-serif; font-size:14px }",
                  }}
                />
                {touched.summary && errors.summary && (
                  <div className="text-red-600 text-sm">{errors.summary}</div>
                )}
              </div>

              {/* Tags */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Tags
                </label>
                <FieldArray name="tags">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.tags.map((tag, index) => (
                        <div key={index} className="flex items-center gap-2">
                          <input
                            type="text"
                            name={`tags[${index}]`}
                            placeholder="Enter tag"
                            value={tag}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            className="flex-1 border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                          />
                          <button
                            type="button"
                            onClick={() => remove(index)}
                            className="text-red-500 font-bold"
                          >
                            X
                          </button>
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={() => push("")}
                        className="text-violet-700 underline"
                      >
                        + Add Tag
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Sections */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Sections
                </label>
                <FieldArray name="sections">
                  {({ push, remove }) => (
                    <div className="space-y-6">
                      {values.sections.map((section, secIndex) => (
                        <div
                          key={secIndex}
                          className="border border-gray-300 rounded-md p-4 bg-gray-100"
                        >
                          <div className="flex justify-between items-center">
                            <h2 className="text-xl font-semibold text-gray-800">
                              Section {secIndex + 1}
                            </h2>
                            {values.sections.length > 1 && (
                              <button
                                type="button"
                                onClick={() => remove(secIndex)}
                                className="text-red-500 font-bold"
                              >
                                Remove Section
                              </button>
                            )}
                          </div>

                          {/* Section Title */}
                          <div className="mt-2">
                            <label className="block text-gray-700 font-bold mb-1">
                              Section Title
                            </label>
                            <input
                              type="text"
                              name={`sections[${secIndex}].sectionTitle`}
                              placeholder="Enter section title"
                              value={section.sectionTitle}
                              onChange={handleChange}
                              onBlur={handleBlur}
                              className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                            />
                          </div>

                          {/* Section Type */}
                          <div className="mt-2">
                            <label className="block text-gray-700 font-bold mb-1">
                              Section Type
                            </label>
                            <select
                              name={`sections[${secIndex}].sectionType`}
                              value={section.sectionType}
                              onChange={handleChange}
                              className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                            >
                              <option value="">Select Section Type</option>
                              <option value="paragraph">Paragraph</option>
                              <option value="bullet">Bullet List</option>
                              <option value="highlight">Highlight</option>
                              <option value="table">Table</option>
                              <option value="image">Image</option>
                              <option value="links">Links</option>
                            </select>
                          </div>

                          {/* Conditionally render fields based on Section Type */}
                          {["paragraph", "highlight"].includes(
                            section.sectionType,
                          ) && (
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Content
                              </label>
                              <textarea
                                name={`sections[${secIndex}].sectionContent`}
                                value={section.sectionContent}
                                onChange={handleChange}
                                onBlur={handleBlur}
                                placeholder="Enter content"
                                rows="4"
                                className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                              />
                            </div>
                          )}

                          {section.sectionType === "bullet" && (
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Bullet Items
                              </label>
                              <FieldArray
                                name={`sections[${secIndex}].bulletItems`}
                              >
                                {({ push, remove }) => (
                                  <div className="space-y-2">
                                    {(section.bulletItems || []).map(
                                      (item, index) => (
                                        <div
                                          key={index}
                                          className="flex items-center gap-2"
                                        >
                                          <input
                                            type="text"
                                            name={`sections[${secIndex}].bulletItems[${index}]`}
                                            value={item}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                            placeholder="Bullet item"
                                            className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                                          />
                                          <button
                                            type="button"
                                            onClick={() => remove(index)}
                                            className="text-red-500 font-bold"
                                          >
                                            X
                                          </button>
                                        </div>
                                      ),
                                    )}
                                    <button
                                      type="button"
                                      onClick={() => push("")}
                                      className="text-violet-700 underline"
                                    >
                                      + Add Bullet
                                    </button>
                                  </div>
                                )}
                              </FieldArray>
                            </div>
                          )}

                          {section.sectionType === "table" && (
                            <div className="mt-2 space-y-4">
                              {/* Table Headers */}
                              <div>
                                <label className="block text-gray-700 font-bold mb-1">
                                  Table Headers
                                </label>
                                <FieldArray
                                  name={`sections[${secIndex}].tableHeaders`}
                                >
                                  {({ push, remove }) => (
                                    <div className="space-y-2">
                                      {(section.tableHeaders || []).map(
                                        (header, index) => (
                                          <div
                                            key={index}
                                            className="flex items-center gap-2"
                                          >
                                            <input
                                              type="text"
                                              name={`sections[${secIndex}].tableHeaders[${index}]`}
                                              value={header}
                                              onChange={handleChange}
                                              onBlur={handleBlur}
                                              placeholder="Header"
                                              className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                                            />
                                            <button
                                              type="button"
                                              onClick={() => remove(index)}
                                              className="text-red-500"
                                            >
                                              X
                                            </button>
                                          </div>
                                        ),
                                      )}
                                      <button
                                        type="button"
                                        onClick={() => push("")}
                                        className="text-violet-700 underline"
                                      >
                                        + Add Header
                                      </button>
                                    </div>
                                  )}
                                </FieldArray>
                              </div>
                              {/* Table Rows */}
                              <div>
                                <label className="block text-gray-700 font-bold mb-1">
                                  Table Rows
                                </label>
                                <FieldArray
                                  name={`sections[${secIndex}].tableRows`}
                                >
                                  {({ push, remove }) => (
                                    <div className="space-y-4">
                                      {(section.tableRows || []).map(
                                        (row, rowIndex) => (
                                          <div
                                            key={rowIndex}
                                            className="space-y-2 border p-2 rounded"
                                          >
                                            <label className="block font-bold text-gray-700">
                                              Row {rowIndex + 1}
                                            </label>
                                            <FieldArray
                                              name={`sections[${secIndex}].tableRows[${rowIndex}]`}
                                            >
                                              {({ push, remove }) => (
                                                <div className="space-y-2">
                                                  {row.map(
                                                    (cell, cellIndex) => (
                                                      <div
                                                        key={cellIndex}
                                                        className="flex items-center gap-2"
                                                      >
                                                        <input
                                                          type="text"
                                                          name={`sections[${secIndex}].tableRows[${rowIndex}][${cellIndex}]`}
                                                          value={cell}
                                                          onChange={
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/dashboard/create-job/page.jsx =====
"use client";

import React, { useState, useRef } from "react";
import { Formik, FieldArray } from "formik";
import { useSelector } from "react-redux";
import { Editor } from "@tinymce/tinymce-react";
import Footer from "@/components/common/footer/Footer";

const initialValues = {
  title: "",
  department: "",
  employment_type: "",
  location: "",
  deadline: "",
  description: "",
  role_details: "",
  qualifications: [""],
  contact_email: "",
  is_active: true,
};

const validate = (values) => {
  const errors = {};
  if (!values.title) errors.title = "Title is required";
  if (!values.department) errors.department = "Department is required";
  if (!values.employment_type)
    errors.employment_type = "Employment type is required";
  if (!values.location) errors.location = "Location is required";
  if (!values.description) errors.description = "Description is required";
  return errors;
};

export default function CreateJobPage() {
  const { token } = useSelector((state) => state.auth);
  const [submitError, setSubmitError] = useState("");
  const descriptionEditorRef = useRef(null);
  const roleEditorRef = useRef(null);

  return (
    <div className="min-h-screen bg-gray-50 py-16 px-4">
      <div className="max-w-4xl mx-auto bg-white shadow-md rounded-md p-8">
        <h1 className="text-3xl font-bold mb-8 text-center text-gray-800">
          Create Job Post
        </h1>
        <Formik
          initialValues={initialValues}
          validate={validate}
          onSubmit={async (values, { setSubmitting, resetForm }) => {
            setSubmitError("");
            try {
              const res = await fetch("https://media.upfrica.com/api/jobs/", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Token ${token}`,
                },
                body: JSON.stringify(values),
              });
              const data = await res.json();
              if (res.ok) {
                alert("Job created successfully!");
                resetForm();
              } else {
                setSubmitError(
                  typeof data === "object" ? JSON.stringify(data) : data,
                );
              }
            } catch (err) {
              setSubmitError(err.message);
            } finally {
              setSubmitting(false);
            }
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            isSubmitting,
            setFieldValue,
          }) => (
            <form onSubmit={handleSubmit} className="space-y-6">
              {submitError && (
                <div className="text-red-600 text-center">{submitError}</div>
              )}

              {/* Title */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Title<span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="e.g. Customer Experience Manager"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.title}
                  </div>
                )}
              </div>

              {/* Department */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Department<span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="department"
                  placeholder="e.g. Customer Support"
                  value={values.department}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.department && errors.department && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.department}
                  </div>
                )}
              </div>

              {/* Employment Type */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Employment Type<span className="text-red-500">*</span>
                </label>
                <select
                  name="employment_type"
                  value={values.employment_type}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                >
                  <option value="">Select type</option>
                  <option value="full_time">Full Time</option>
                  <option value="part_time">Part Time</option>
                  <option value="contract">Contract</option>
                  <option value="agent">Agent</option>
                </select>
                {touched.employment_type && errors.employment_type && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.employment_type}
                  </div>
                )}
              </div>

              {/* Location */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Location<span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="location"
                  placeholder="e.g. Remote or Multiple Locations"
                  value={values.location}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.location && errors.location && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.location}
                  </div>
                )}
              </div>

              {/* Deadline */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Application Deadline
                </label>
                <input
                  type="text"
                  name="deadline"
                  placeholder="e.g. 2025-06-30 or Open Until Filled"
                  value={values.deadline}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Description (TinyMCE) */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Description<span className="text-red-500">*</span>
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) =>
                    (descriptionEditorRef.current = editor)
                  }
                  value={values.description}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Short summary, e.g. Lead our customer support team to excellence",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("description", content)
                  }
                />
                {touched.description && errors.description && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.description}
                  </div>
                )}
              </div>

              {/* Role Responsibilities (TinyMCE) */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Role Responsibilities
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) => (roleEditorRef.current = editor)}
                  value={values.role_details}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Detailed responsibilities, e.g. Resolve escalations and coach teammates",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("role_details", content)
                  }
                />
              </div>

              {/* Qualifications */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Qualifications
                </label>
                <FieldArray name="qualifications">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.qualifications.map((q, i) => (
                        <div key={i} className="flex gap-2 items-center">
                          <input
                            type="text"
                            name={`qualifications[${i}]`}
                            placeholder="e.g. 5+ years in customer service"
                            value={q}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            className="flex-1 px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                          />
                          {values.qualifications.length > 1 && (
                            <button
                              type="button"
                              onClick={() => remove(i)}
                              className="text-red-500 font-bold"
                            >
                              √ó
                            </button>
                          )}
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={() => push("")}
                        className="text-violet-700 hover:underline text-sm"
                      >
                        + Add Qualification
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Contact Email */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Contact Email
                </label>
                <input
                  type="email"
                  name="contact_email"
                  placeholder="e.g. careers@upfrica.com"
                  value={values.contact_email}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Active Toggle */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  name="is_active"
                  checked={values.is_active}
                  onChange={(e) => setFieldValue("is_active", e.target.checked)}
                  className="h-4 w-4 text-violet-700 border-gray-300 rounded"
                />
                <label className="ml-2 text-gray-700">Active</label>
              </div>

              {/* Submit Button */}
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full py-3 bg-violet-700 text-white font-semibold rounded-md hover:bg-violet-800 transition"
              >
                {isSubmitting ? "Creating‚Ä¶" : "Create Job"}
              </button>
            </form>
          )}
        </Formik>
      </div>
      <Footer />
    </div>
  );
}


===== src/app/(pages)/dashboard/edit-job/[id]/page.jsx =====
"use client";

import React, { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import { Formik, FieldArray } from "formik";
import { useSelector } from "react-redux";
import { Editor } from "@tinymce/tinymce-react";
import Footer from "@/components/common/footer/Footer";

const validate = (values) => {
  const errors = {};
  if (!values.title) errors.title = "Title is required";
  if (!values.department) errors.department = "Department is required";
  if (!values.employment_type)
    errors.employment_type = "Employment type is required";
  if (!values.location) errors.location = "Location is required";
  if (!values.description) errors.description = "Description is required";
  return errors;
};

export default function EditJobPage({ params }) {
  const router = useRouter();
  const { id } = params;
  const { token } = useSelector((state) => state.auth);

  const [job, setJob] = useState(null);
  const [loading, setLoading] = useState(true);
  const [submitError, setSubmitError] = useState("");
  const descriptionEditorRef = useRef(null);
  const roleEditorRef = useRef(null);

  useEffect(() => {
    if (!id) return;
    setLoading(true);
    fetch(`https://media.upfrica.com/api/jobs/${id}/`, {
      method: "GET",
    })
      .then((res) => res.json())
      .then((data) => {
        setJob(data);
      })
      .catch((err) => {
        console.error("Fetch job error:", err);
      })
      .finally(() => {
        setLoading(false);
      });
  }, [id]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        Loading‚Ä¶
      </div>
    );
  }

  if (!job) {
    return (
      <div className="min-h-screen flex items-center justify-center text-red-600">
        Job not found.
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-16 px-4">
      <div className="max-w-4xl mx-auto bg-white shadow-md rounded-md p-8">
        <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">
          Edit Job Post
        </h1>

        <Formik
          initialValues={{
            title: job.title || "",
            department: job.department || "",
            employment_type: job.employment_type || "",
            location: job.location || "",
            deadline: job.deadline || "",
            description: job.description || "",
            role_details: job.role_details || "",
            qualifications: job.qualifications.length
              ? job.qualifications
              : [""],
            contact_email: job.contact_email || "",
            is_active: job.is_active,
          }}
          validate={validate}
          onSubmit={async (values, { setSubmitting }) => {
            setSubmitError("");
            try {
              const res = await fetch(
                `https://media.upfrica.com/api/jobs/${id}/`,
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Token ${token}`,
                  },
                  body: JSON.stringify(values),
                },
              );
              const data = await res.json();
              if (res.ok) {
                alert("Job updated successfully!");
                router.push("/careers"); // redirect back to listing
              } else {
                setSubmitError(
                  typeof data === "object" ? JSON.stringify(data) : data,
                );
              }
            } catch (err) {
              setSubmitError(err.message);
            } finally {
              setSubmitting(false);
            }
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            isSubmitting,
            setFieldValue,
          }) => (
            <form onSubmit={handleSubmit} className="space-y-6">
              {submitError && (
                <div className="text-red-600 text-center">{submitError}</div>
              )}

              {/* Title */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Title <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="e.g. Customer Experience Manager"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.title}
                  </div>
                )}
              </div>

              {/* Department */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Department <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="department"
                  placeholder="e.g. Customer Support"
                  value={values.department}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.department && errors.department && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.department}
                  </div>
                )}
              </div>

              {/* Employment Type */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Employment Type <span className="text-red-500">*</span>
                </label>
                <select
                  name="employment_type"
                  value={values.employment_type}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                >
                  <option value="">Select type</option>
                  <option value="full_time">Full Time</option>
                  <option value="part_time">Part Time</option>
                  <option value="contract">Contract</option>
                  <option value="agent">Agent</option>
                </select>
                {touched.employment_type && errors.employment_type && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.employment_type}
                  </div>
                )}
              </div>

              {/* Location */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Location <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="location"
                  placeholder="e.g. Remote or Multiple Locations"
                  value={values.location}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.location && errors.location && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.location}
                  </div>
                )}
              </div>

              {/* Deadline */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Application Deadline
                </label>
                <input
                  type="text"
                  name="deadline"
                  placeholder="e.g. 2025-06-30 or Open Until Filled"
                  value={values.deadline}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Description */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Description <span className="text-red-500">*</span>
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) =>
                    (descriptionEditorRef.current = editor)
                  }
                  value={values.description}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Short summary, e.g. Lead our customer support team to excellence",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("description", content)
                  }
                />
                {touched.description && errors.description && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.description}
                  </div>
                )}
              </div>

              {/* Role Responsibilities */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Role Responsibilities
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) => (roleEditorRef.current = editor)}
                  value={values.role_details}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Detailed responsibilities, e.g. Resolve escalations and coach teammates",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("role_details", content)
                  }
                />
              </div>

              {/* Qualifications */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Qualifications
                </label>
                <FieldArray name="qualifications">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.qualifications.map((q, i) => (
                        <div key={i} className="flex gap-2 items-center">
                          <input
                            type="text"
                            name={`qualifications[${i}]`}
                            placeholder="e.g. 5+ years in customer service"
                            value={q}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            className="flex-1 px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                          />
                          {values.qualifications.length > 1 && (
                            <button
                              type="button"
                              onClick={() => remove(i)}
                              className="text-red-500 font-bold"
                            >
                              √ó
                            </button>
                          )}
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={() => push("")}
                        className="text-violet-700 hover:underline text-sm"
                      >
                        + Add Qualification
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Contact Email */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Contact Email
                </label>
                <input
                  type="email"
                  name="contact_email"
                  placeholder="e.g. careers@upfrica.com"
                  value={values.contact_email}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Active Toggle */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  name="is_active"
                  checked={values.is_active}
                  onChange={(e) => setFieldValue("is_active", e.target.checked)}
                  className="h-4 w-4 text-violet-700 border-gray-300 rounded"
                />
                <label className="ml-2 text-gray-700">Active</label>
              </div>

              {/* Submit Button */}
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full py-3 bg-violet-700 text-white font-semibold rounded-md hover:bg-violet-800 transition"
              >
                {isSubmitting ? "Updating‚Ä¶" : "Update Job"}
              </button>
            </form>
          )}
        </Formik>
      </div>
      <Footer />
    </div>
  );
}


===== src/app/(pages)/dashboard/layout.js =====
"use client";
import Sidebar from "./Sidebar";

export default function DashboardLayout({ children }) {
  return (
    <div className="flex h-screen bg-white text-gray-900">
      <Sidebar />

      {/* All /dashboard/* pages will be rendered here */}
      <main className="flex-1 p-6 overflow-y-auto">{children}</main>
    </div>
  );
}


===== src/app/(pages)/dashboard/page.jsx =====
"use client";

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import { FiSearch } from "react-icons/fi";
import { useRouter } from "next/navigation";
import Pagination from "@/components/Pagination";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Tooltip,
  Legend,
} from "chart.js";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Tooltip,
  Legend,
);

const PAGE_SIZE = 20;

export default function DashboardPage() {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // ORDER ITEMS & PAGINATION
  const [orderItems, setOrderItems] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);

  // DELETE STATE
  const [deletingId, setDeletingId] = useState(null);

  useEffect(() => {
    if (!token) return;

    const fetchOrderItems = async () => {
      setLoading(true);
      try {
        const url = `${BASE_API_URL}/api/seller/order-items/?page=${currentPage}`;
        const res = await fetch(url, {
          method: "GET",
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        if (!res.ok) throw new Error("Failed to fetch order items");
        const data = await res.json();
        setOrderItems(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchOrderItems();
  }, [token, currentPage]);

  const handleEdit = (id) => {
    router.push(`/order-items/edit/${id}`);
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this item?")) return;
    setDeletingId(id);
    try {
      const res = await fetch(`${BASE_API_URL}/api/seller/order-items/${id}/`, {
        method: "DELETE",
        headers: { Authorization: `Token ${token}` },
      });
      if (!res.ok) throw new Error("Delete failed");
      setOrderItems((prev) => prev.filter((item) => item.id !== id));
    } catch (err) {
      console.error(err);
    } finally {
      setDeletingId(null);
    }
  };

  // Example stats ‚Äî replace with real data if you have it
  const stats = {
    newOrders: 23,
    shipped: 14,
    complaints: 2,
    newChats: 19,
  };

  const statsCards = [
    {
      title: "New Order",
      value: stats.newOrders,
      change: "+21% from last month",
      type: "green",
    },
    {
      title: "Shipped",
      value: stats.shipped,
      change: "+56% from last month",
      type: "green",
    },
    {
      title: "Complain",
      value: stats.complaints,
      change: "-40% from last month",
      type: "red",
    },
    {
      title: "New Chat",
      value: stats.newChats,
      change: "+37% from last month",
      type: "green",
    },
  ];

  // Example selling chart data ‚Äî replace with your own
  const sellingData = {
    labels: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ],
    datasets: [
      {
        data: [
          1000, 1200, 1500, 1300, 2700, 2200, 1800, 1450, 2784, 2330, 1600,
          2000,
        ],
        tension: 0.4,
        borderColor: "#7C3AED",
        fill: false,
      },
    ],
  };

  return (
    <>
      {/* HEADER + SEARCH */}
      <header className="flex items-center mb-6 space-x-6">
        <div>
          <h1 className="text-3xl font-semibold">Hi {user?.username}</h1>
          <p className="text-gray-600">Welcome to seller dashboard</p>
        </div>
        <div className="relative flex-1 max-w-full">
          <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            type="text"
            placeholder="Search something here ..."
            className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
          />
        </div>
      </header>

      {/* STATS CARDS */}
      <div className="grid grid-cols-4 gap-6 mb-4">
        {statsCards.map((c, i) => (
          <div key={i} className="bg-gray-50 p-4 rounded-lg shadow-sm">
            <p className="text-gray-600">{c.title}</p>
            <p className="text-2xl font-bold">{c.value}</p>
            <p
              className={`text-sm ${c.type === "green" ? "text-green-600" : "text-red-600"}`}
            >
              {c.change}
            </p>
          </div>
        ))}
      </div>

      {/* SELLING CHART */}
      <div className="bg-white p-6 rounded-lg shadow-sm h-40 py-2 mb-10">
        <h2 className="text-xl font-semibold mb-4">Your Selling</h2>
        <div className="h-36">
          <Line
            data={sellingData}
            options={{
              responsive: true,
              maintainAspectRatio: false,
              plugins: { legend: { display: false } },
              scales: { y: { beginAtZero: true } },
            }}
          />
        </div>
      </div>

      {/* RECENT ORDERS TABLE */}
      <div className="bg-white p-4 rounded-lg shadow-sm">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold">Recent Orders</h2>
          {totalPages > 1 && (
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
            />
          )}
        </div>

        <table className="w-full text-left">
          <thead>
            <tr className="border-b border-gray-200">
              <th className="pb-2 w-[40%]">Product Info</th>
              <th className="pb-2">Date Added</th>
              <th className="pb-2">Price</th>
              <th className="pb-2">Status</th>
              <th className="pb-2">Viewed</th>
              <th className="pb-2">Sold</th>
              <th className="pb-2">Action</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td colSpan="7" className="text-center py-4">
                  Loading...
                </td>
              </tr>
            ) : orderItems.length > 0 ? (
              orderItems.map((item) => {
                const { product } = item;
                const statusText =
                  item.dispatch_status === 0 ? "Pending" : "Dispatched";
                const statusColor =
                  item.dispatch_status === 0
                    ? "text-yellow-600"
                    : "text-green-600";

                return (
                  <tr key={item.id} className="even:bg-gray-50">
                    <td className="py-3">
                      <div className="flex items-center space-x-3">
                        {product.product_images[0] && (
                          <img
                            src={product.product_images[0]}
                            alt={product.title}
                            className="w-10 h-10 object-cover rounded"
                          />
                        )}
                        <div>
                          <div>{product.title}</div>
                          <div className="text-gray-500 text-sm">
                            SKU: {product.u_pid}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td>{new Date(item.order_date).toLocaleDateString()}</td>
                    <td>
                      {(item.price_cents / 100).toFixed(2)}{" "}
                      {item.price_currency.toUpperCase()}
                    </td>
                    <td>
                      <span className={statusColor}>{statusText}</span>
                    </td>
                    <td>{product.impressions_count ?? 0}</td>
                    <td>{item.quantity}</td>
                    <td className="py-3 space-x-4">
                      <button
                        onClick={() => handleEdit(item.id)}
                        className="text-blue-600 hover:underline"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(item.id)}
                        disabled={deletingId === item.id}
                        className={`${
                          deletingId === item.id
                            ? "text-gray-400 cursor-not-allowed"
                            : "text-red-600 hover:underline"
                        }`}
                      >
                        {deletingId === item.id ? "Deleting‚Ä¶" : "Delete"}
                      </button>
                    </td>
                  </tr>
                );
              })
            ) : (
              <tr>
                <td colSpan="7" className="py-4 text-center text-gray-500">
                  No recent orders found!
                </td>
              </tr>
            )}
          </tbody>
        </table>

        {totalPages > 1 && (
          <div className="flex justify-center mt-4">
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
            />
          </div>
        )}
      </div>
    </>
  );
}


===== src/app/(pages)/dashboard/payment-success/page.jsx =====
"use client";

import Link from "next/link";
import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";

export default function PaymentSuccess({ searchParams }) {
  const orderId = searchParams.order_id;
  const token = useSelector((state) => state.auth.token);
  const router = useRouter();

  const [order, setOrder] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showDrawer, setShowDrawer] = useState(false);

  useEffect(() => {
    if (!orderId) {
      setLoading(false);
      return;
    }

    async function loadOrder() {
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/buyer/orders/${orderId}/`,
          {
            headers: {
              Authorization: `Token ${token}`,
              "Content-Type": "application/json",
            },
            cache: "no-store",
          },
        );
        if (!res.ok) throw new Error(res.statusText);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        setError(err.message || "Unknown error");
      } finally {
        setLoading(false);
      }
    }

    loadOrder();
  }, [orderId, token]);

  useEffect(() => {
    if (!loading && order && !error) {
      setShowDrawer(true);
    }
  }, [loading, order, error]);

  if (loading) {
    return (
      <div className="container mx-auto py-16 text-center">
        <p className="text-lg text-gray-600">Loading your order‚Ä¶</p>
      </div>
    );
  }

  if (!orderId) {
    return (
      <div className="container mx-auto py-16 text-center">
        <h1 className="text-2xl font-semibold text-red-600">
          No order ID provided
        </h1>
        <p className="mt-4 text-gray-700">
          Please check your payment confirmation link.
        </p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto py-16 text-center">
        <h1 className="text-2xl font-semibold text-red-600">
          Something went wrong
        </h1>
        <p className="mt-4 text-gray-700">{error}</p>
      </div>
    );
  }

  return (
    <>
      <OrderConfirmationDrawer
        isOpen={showDrawer}
        onClose={() => {
          setShowDrawer(false);
          router.push("/");
        }}
        order={order}
        router={router}
      />
    </>
  );
}

function OrderConfirmationDrawer({ isOpen, onClose, order, router }) {
  if (!order) return null;

  return (
    <div
      id="orderConfirmationDrawer"
      className={`
        fixed inset-0 z-50 flex items-start justify-center overflow-auto
        bg-black bg-opacity-40 transition-opacity
        ${isOpen ? "opacity-100 pointer-events-auto" : "opacity-0 pointer-events-none"}
      `}
      role="dialog"
      aria-modal="true"
      aria-labelledby="drawer-label"
      tabIndex={-1}
    >
      <div
        className="
          my-10 w-full
                  /* base: up to ~28rem */
          sm:max-w-lg      /* ‚â•640px: ~32rem */
          md:max-w-lg      /* ‚â•768px: ~36rem */
          lg:max-w-lg    /* ‚â•1024px: ~42rem */
          xl:max-w-3xl     /* ‚â•1280px: ~48rem */
          h-[95vh] bg-white rounded-lg shadow-lg flex flex-col
        "
      >
        {/* Header */}
        <div className="flex items-center justify-between border-b px-6 py-4 flex-shrink-0">
          <h2 id="drawer-label" className="text-xl font-semibold">
            Order confirmation
          </h2>
          <button
            onClick={onClose}
            className="p-1 text-gray-500 hover:text-gray-700"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        {/* Scrollable Content */}
        <div className="px-6 py-4 overflow-y-auto flex-1">
          {/* Success Message */}
          <div className="flex items-center space-x-3 mb-4">
            <svg
              className="h-8 w-8 text-green-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M5 13l4 4L19 7"
              />
            </svg>
            <h3 className="text-lg font-medium">Thanks for your order!</h3>
          </div>
          <p className="mb-6 text-gray-600">
            Your order will be processed within 24 hours during working days. We
            will notify you by email once it‚Äôs shipped.
          </p>

          {/* Order Summary */}
          <h3 className="text-lg font-semibold text-gray-800 mb-2">
            Order Summary
          </h3>
          <Detail label="Order number" value={`#${order.id}`} />
          <Detail label="Buyer ID" value={order.buyer} />
          <Detail label="Shipping Addr. ID" value={order.address} />
          <Detail
            label="Total Paid"
            value={`${(order.total_fee_cents / 100).toFixed(2)} ${order.total_fee_currency.toUpperCase()}`}
          />
          <Detail
            label="Order Date"
            value={new Date(order.created_at).toLocaleString()}
          />

          {/* Items Purchased */}
          <div className="mt-6 bg-gray-50 p-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-2">
              Items Purchased
            </h3>
            <div className="space-y-4">
              {order.order_items.map((item) => (
                <div key={item.id} className="flex items-center space-x-4">
                  <img
                    src={item.product.product_images[0]}
                    alt={item.product.title}
                    className="w-16 h-16 object-cover rounded-md border"
                  />
                  <div>
                    <p className="font-medium text-gray-900">
                      {item.product.title}
                    </p>
                    <p className="text-gray-700">Qty: {item.quantity}</p>
                    <p className="text-gray-700">
                      ${(item.price_cents / 100).toFixed(2)}{" "}
                      {item.product.price_currency.toUpperCase()}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Customer & Delivery Details */}
          <div className="mt-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-2">
              Customer & Delivery
            </h3>
            <Detail
              label="Payment Method"
              value={order.payment_method || "‚Äî"}
            />
            <Detail label="Name" value={order.buyer_name || order.buyer} />
            <Detail
              label="Address"
              value={order.shipping_address || order.address}
            />
            <Detail label="Phone" value={order.buyer_phone || "‚Äî"} />
            <Detail label="Email" value={order.buyer_email || "‚Äî"} />
            <Detail
              label="Estimated Delivery"
              value={order.estimated_delivery || "‚Äî"}
            />
          </div>
        </div>

        {/* Actions */}
        <div className="flex items-center justify-end space-x-3 border-t px-6 py-3 flex-shrink-0 bg-white">
          <button
            onClick={() => router.push(`/dashboard/all-orders/${order.id}`)}
            className="btn-base btn-primary w-full py-3"
          >
            Track your order
          </button>

          <button
            onClick={() => router.push("/")}
            className="btn-base btn-outline w-full py-3"
          >
            Return to shopping
          </button>
        </div>
      </div>
    </div>
  );
}

function Detail({ label, value }) {
  return (
    <dl className="flex justify-between text-gray-700 py-1">
      <dt className="font-medium">{label}</dt>
      <dd>{value}</dd>
    </dl>
  );
}


===== src/app/(pages)/deals/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <>
      <Header />
      {children}
      <Footer />
    </>
  );
};

export default layout;


===== src/app/(pages)/deals/page.jsx =====
import React from "react";
import { IoIosCheckmarkCircle } from "react-icons/io";

const DealsPage = () => {
  const data = [
    {
      title: "Best e-commerce tools",
    },
    {
      title: "Best e-commerce tools",
    },
    {
      title: "Best e-commerce tools",
    },
  ];
  return (
    <div className=" bg-[#eeedf5] shadow-md">
      <div className="text-center py-10 space-y-8 container mx-auto">
        <h1 className="text-2xl lg:text-6xl font-bold">
          Start selling with Upfrica
        </h1>
        <p className="text-lg lg:text-2xl font-bold max-w-3xl mx-auto">
          Africa's E-commerce platform for selling your products. Buy with
          confidence; low prices. Start selling today with no start-up fee.
        </p>
        <button className="px-6 py-2 border border-3 border-[#754ffe] text-[#754ffe] rounded-md">
          Try for Free
        </button>
        <ul className="text-gray-600 space-y-2 text-center flex space-x-4 items-center justify-center">
          {data.map((item, i) => (
            <li
              key={i}
              className="flex gap-2 text-base  md:text-xl items-center justify-center text-center"
            >
              <span className="bg-green-200 rounded-full w-5 h-5 flex items-center justify-center">
                <IoIosCheckmarkCircle className="text-green-600" />
              </span>
              <span>{item.title}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default DealsPage;


===== src/app/(pages)/details/[slug]/page.jsx =====
// 'use client'
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import ProductList from "@/components/home/ProductList/ProductList";
import RelatedProducts from "@/components/home/ProductList/RealtedProduct";
import ProductDetailSection from "@/components/ProductDetailSection/ProductDetailSection";
import Slider from "@/components/Slider";
import TextSection from "@/components/TextSection";
import Dummy from "@/components/ui/details/Dummy";
import React from "react";
// import ReactImageMagnify from 'react-image-magnify';

async function getProductData(slug) {
  const res = await fetch(`https://media.upfrica.com/api/products/${slug}/`, {
    // Cache the response for better performance
    cache: "no-store", // Use 'no-store' if data changes frequently
  });

  if (!res.ok) {
    // Handle errors gracefully
    throw new Error("Failed to fetch product data");
  }

  const product = await res.json();
  return product;
}

// Function to generate dynamic metadata for each product page
export async function generateMetadata({ params }) {
  const { slug } = params;
  const product = await getProductData(slug);

  function removeSpecificTags(input) {
    if (typeof input !== "string") {
      throw new TypeError("Input must be a string");
    }
    const regex = /<\/?(li|ul|p)[^>]*>/gi;
    const cleanedString = input.replace(regex, "");

    return cleanedString;
  }

  return {
    title: `${product.title}  - ${product?.user?.country}`, // Ensure 'product.name' exists
    description: product?.description?.body, // Ensure 'product.description.body' exists
    // You can add more metadata here if needed
  };
}

// The main component to render product details
export default async function ProductDetails({ params }) {
  const { slug } = params;
  // Fetch the product data
  const product = await getProductData(slug);
  const { product_images, title, description } = product || {};

  const laptopDetails = [
    {
      Condition: "Renewed",
      Brand: "Dell",
      Type: "Laptops",
      ModelName: "Dell Latitude 3380",
      ScreenSizeInches: 13.3,
      HardDiskSizeGB: 128,
      CpuModelGHz: 2.0,
      RamMemoryGB: 4,
      OperatingSystem: "Windows 11",
      Series: "Core i3",
      Features: ["HDMI", "Bluetooth", "Camera", "WiFi Connection", "USB Ports"],
      UpfricaItemID: "JERB7PX8",
      ItemNumber: "0000003487",
    },
  ];

  return (
    <>
      <Header />
      <div>
        <div className=" container mx-auto">
          {/* <div className="grid grid-cols-1 md:grid-cols-2 gap-5 py-10 ">
            <Slider images={product_images} />
            <TextSection product={product} />
          </div> */}
          <ProductDetailSection product={product} />
          {/* <Dummy title={title} description={description || "This is a test description"} /> */}
          <RelatedProducts productId={slug} />
        </div>
      </div>
      <Footer />
    </>
  );
}


===== src/app/(pages)/draft/page.jsx =====
"use client";
import React, { useState, useEffect } from "react";
import { FaLocationPin } from "react-icons/fa6";
import { MdDelete } from "react-icons/md";
import { CiEdit } from "react-icons/ci";
import Link from "next/link";
import { useSelector } from "react-redux";

const DrafPage = () => {
  const { token, user } = useSelector((state) => state.auth);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [openDropdownId, setOpenDropdownId] = useState(null);
  const [statuses, setStatuses] = useState({});

  // Fetch products on mount
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const myHeaders = new Headers();
        myHeaders.append("Authorization", `Token ${token}`);

        const requestOptions = {
          method: "GET",
          headers: myHeaders,
          redirect: "follow",
        };

        const response = await fetch(
          "https://media.upfrica.com/api/products/draft/",
          requestOptions,
        );
        const result = await response.json();
        console.log(result);
        setProducts(result?.results || []);

        // Initialize statuses from fetched products (default to "Draft" if none exists)
        const initialStatuses = {};
        (result?.results || []).forEach((product) => {
          initialStatuses[product.id] = product.status || "Draft";
        });
        setStatuses(initialStatuses);
      } catch (error) {
        console.error("Error fetching products:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [token]);

  // Function to update product status via API and show confirmation/error popup.
  // If a product is published successfully, it is removed from the draft list.
  const updateProductStatus = async (productId, newStatus) => {
    try {
      const myHeaders = new Headers();
      myHeaders.append("Authorization", `Token ${token}`);
      myHeaders.append("Content-Type", "application/json");

      // Convert the status string to the value expected by the API:
      // Published -> 1, Draft -> 0
      const statusValue = newStatus === "Published" ? 1 : 0;
      const raw = JSON.stringify({ status: statusValue });

      const requestOptions = {
        method: "POST",
        headers: myHeaders,
        body: raw,
        redirect: "follow",
      };

      const url = `https://media.upfrica.com/api/products/draft/${productId}/`;
      const response = await fetch(url, requestOptions);

      if (!response.ok) {
        throw new Error(`Server responded with status ${response.status}`);
      }

      const result = await response.json();
      console.log(result);

      // Check response based on expected structure.
      if (newStatus === "Published" && result?.new_status === 1) {
        window.alert(`Product  with id ${result?.id} published successfully!`);
        // Remove the published product from state
        setProducts((prevProducts) =>
          prevProducts.filter((product) => product.id !== productId),
        );
        setStatuses((prevStatuses) => {
          const updated = { ...prevStatuses };
          delete updated[productId];
          return updated;
        });
      } else if (newStatus === "Draft" && result?.new_status === 0) {
        window.alert(
          `Product set to draft successfully! ${JSON.stringify(result)}`,
        );
      } else {
        throw new Error("Invalid response received from the server.");
      }
    } catch (error) {
      console.error("Error updating status:", error);
      window.alert(`Error updating product status: ${error.message}`);
    }
  };

  // Toggle dropdown for a specific product
  const handleDropdownToggle = (productId) => {
    setOpenDropdownId((prev) => (prev === productId ? null : productId));
  };

  // Handle status selection and trigger API call
  const handleStatusSelect = (productId, newStatus) => {
    // Update local UI state immediately
    setStatuses((prevStatuses) => ({
      ...prevStatuses,
      [productId]: newStatus,
    }));
    setOpenDropdownId(null);
    // Trigger API update call
    updateProductStatus(productId, newStatus);
  };

  // Render animated skeleton loader rows while products are being fetched
  const renderSkeletonRows = () => {
    return Array.from({ length: 5 }, (_, index) => (
      <tr key={index} className="text-base tracking-wide animate-pulse">
        <td className="border border-gray-300 px-6 py-2 md:py-8 bg-gray-300">
          &nbsp;
        </td>
        <td className="border border-gray-300 px-4 bg-gray-300">
          <div className="md:flex justify-between items-center space-x-2">
            <div className="w-24 h-8 bg-gray-200 rounded-lg"></div>
            <div className="w-16 h-8 bg-gray-200 rounded-lg"></div>
            <div className="w-16 h-8 bg-gray-200 rounded-lg"></div>
          </div>
        </td>
        <td className="border border-gray-300 px-6 py-4 bg-gray-300">
          <div className="space-y-2">
            <div className="w-3/4 h-4 bg-gray-200 rounded"></div>
            <div className="w-1/2 h-4 bg-gray-200 rounded"></div>
            <div className="w-2/3 h-4 bg-gray-200 rounded"></div>
            <div className="w-1/3 h-4 bg-gray-200 rounded"></div>
          </div>
        </td>
      </tr>
    ));
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full table-auto border-collapse border border-gray-300">
        <thead className="bg-gray-200 text-xl font-bold">
          <tr>
            <th className="border border-gray-300 px-6 py-3 lg:w-1/12 text-left text-gray-700">
              ID
            </th>
            <th className="border border-gray-300 px-6 py-3 lg:w-2/12 text-left text-gray-700">
              Product
            </th>
            <th className="border border-gray-300 px-6 py-3 lg:w-9/12 text-left text-gray-700">
              Details
            </th>
          </tr>
        </thead>
        <tbody>
          {loading
            ? renderSkeletonRows()
            : products?.map((product) => (
                <tr
                  key={product.id}
                  className="text-base tracking-wide cursor-pointer"
                >
                  <td className="border border-gray-300 px-6 py-2 md:py-8">
                    {product.id}
                  </td>
                  <td className="border border-gray-300 px-4">
                    <div className="md:flex justify-between items-center space-x-2">
                      {/* Status Dropdown */}
                      <div className="relative">
                        <button
                          onClick={() => handleDropdownToggle(product.id)}
                          className="bg-[#F3E8FF] text-[#8710D8] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-[#E0C9FF] transition-all duration-300 ease-in-out cursor-pointer"
                        >
                          {statuses[product.id]}
                        </button>
                        {openDropdownId === product.id && (
                          <div className="absolute left-0 mb-10 w-32 bg-white border border-gray-300 rounded-lg shadow-xl z-10">
                            <ul className="py-1">
                              <li
                                className="px-8 py-2 text-gray-700 hover:bg-[#F3E8FF] hover:text-[#8710D8] transition-all duration-300 ease-in-out cursor-pointer"
                                onClick={() =>
                                  handleStatusSelect(product.id, "Draft")
                                }
                              >
                                Draft
                              </li>
                              <li
                                className="px-8 py-2 text-gray-700 hover:bg-[#F3E8FF] hover:text-[#8710D8] transition-all duration-300 ease-in-out cursor-pointer"
                                onClick={() =>
                                  handleStatusSelect(product.id, "Published")
                                }
                              >
                                Published
                              </li>
                            </ul>
                          </div>
                        )}
                      </div>

                      {/* Edit Button */}
                      <Link
                        href={`/products/new/${product.id}`}
                        className="text-[#AF35F0] font-semibold cursor-pointer hover:underline flex items-center gap-2"
                      >
                        <span>
                          <CiEdit className="h-5 w-5" />
                        </span>
                        Edit
                      </Link>

                      {/* Delete Button */}
                      <span className="flex items-center space-x-1 text-blue-500 cursor-pointer hover:text-blue-700">
                        <MdDelete className="h-6 w-6" />
                        <span className="font-semibold">Delete</span>
                      </span>
                    </div>
                  </td>

                  <td className="border border-gray-300 px-6 py-4 text-base flex gap-5">
                    <div className="space-y-2">
                      <p>{product?.title}</p>
                      <p className="flex gap-4 items-center">
                        <span>Price: ${product?.price?.cents}</span>
                        <span>Delivery: Free</span>
                      </p>
                      <p className="flex items-center space-x-2">
                        <span>
                          <FaLocationPin className="text-gray-400" />
                        </span>
                        <span>
                          {product?.user?.town}, {product?.user?.country}
                        </span>
                        <span>{product?.user?.first_name}</span> |{" "}
                        <span className="hover:text-red-500">
                          {product?.user?.username}
                        </span>{" "}
                        | <span className="hover:text-red-500"> Whatsap </span>{" "}
                        |{" "}
                        <span className="hover:text-red-500">
                          {product?.user?.email}
                        </span>
                      </p>
                      <p>3 days ago</p>
                    </div>
                  </td>
                </tr>
              ))}
        </tbody>
      </table>
    </div>
  );
};

export default DrafPage;


===== src/app/(pages)/dropship/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default layout;


===== src/app/(pages)/dropship/page.jsx =====
import CommonButton from "@/components/CommonButton";
import React from "react";
import { IoIosCheckmarkCircle } from "react-icons/io";

const DropShip = () => {
  const data = [
    {
      title: "Upfrica Dropshipping & Wholesale Buy",
      description: `Upfrica Dropshipping delivers products directly to your customer, and you get a commission on each item sold. Upfrica wholesale Buy sources products for sellers at discounted prices.`,
      data: [
        "No upfront inventory costs",
        "No hassles with deliveries",
        "No hassles with deliveries",
      ],
    },
    // Add more objects if needed
  ];
  return (
    <>
      <div>
        <div className="p-4 text-center container mx-auto max-w-5xl ">
          {data.map((item) => (
            <section key={item.id} className="mb-6 space-y-5">
              <h2 className="text-3xl lg:text-7xl font-semibold text-purple-500 mb-2">
                {item.title}
              </h2>
              <p className="text-base md:text-2xl font-bold mb-4">
                {item.description}
              </p>
              <CommonButton
                text="Join The Whatsapp Group"
                aria-label="Join The Whatsapp Group"
                className="ml-4 px-4 lg:px-6 py-2 bg-[#754FFE] text-white rounded transition duration-300 font-bold text-lg md:text-xl"
              />
              <ul className="text-gray-600 space-y-2 text-center">
                {item.data.map((point, i) => (
                  <li
                    key={i}
                    className="flex gap-2 text-base  md:text-xl items-center justify-center text-center"
                  >
                    <span className="bg-green-200 rounded-full w-5 h-5 flex items-center justify-center">
                      <IoIosCheckmarkCircle className="text-green-600" />
                    </span>
                    <span>{point}</span>
                  </li>
                ))}
              </ul>
            </section>
          ))}
        </div>
      </div>

      <section className="bg-gray-100 py-10">
        <div className="container mx-auto px-4 max-w-5xl text-center space-y-8">
          <h1 className="font-bold text-2xl md:text-4xl">
            How It Works with Drop Shipment
          </h1>
          <ul className=" space-y-4 text-xl text-gray-700 px-4">
            <li>
              Post any Upfrica item for sale on social media; your status,
              Facebook timeline, Instagram, or WhatsApp *at your own price
            </li>
            <li>
              Promote the items through your channels to reach potential
              customers effectively.
            </li>
            <li>
              Manage orders and ensure timely delivery to maintain customer
              satisfaction.
            </li>
          </ul>
          <div className="flex justify-center">
            <img
              src="https://proinsidegh.s3.amazonaws.com/static/Dropshipimpupfrica.jpg"
              alt="Drop Shipment Process"
              className="w-full h-auto max-w-md object-cover rounded shadow-lg"
            />
          </div>
        </div>
      </section>
    </>
  );
};

export default DropShip;


===== src/app/(pages)/edit/page.jsx =====
"use client";
import React from "react";
import FormInput from "@/components/ui/FormInput";
import Checkbox from "@/components/ui/Checkbox";
import { Button } from "@/components/ui/button";
const UserEdit = () => {
  return (
    <div className="w-full bg-white shadow-2xl rounded-md space-y-4 md:p-10 p-2">
      <div className="md:flex justify-between">
        <h2 className="text-base md:text-2xl lg:text-3xl font-bold">
          Edit User jeobless
        </h2>
        <Button label="Show User jeobless"></Button>
      </div>
      <hr />
      <form className="lg:w-2/3 md:p-10 mx-auto space-y-4 py-10">
        <FormInput
          label="Full Name:"
          type="text"
          id="fullName"
          placeholder="Enter your full name"
        />
        <FormInput
          label="Username:"
          type="text"
          id="username"
          placeholder="Enter your username"
        />
        <FormInput
          label="Email:"
          type="email"
          id="email"
          placeholder="Enter your email"
        />
        <FormInput
          label="Password:"
          type="password"
          id="password"
          placeholder="Enter your password"
        />
        <FormInput
          label="Password Confirmation:"
          type="password"
          id="confirmPassword"
          placeholder="Confirm your password"
        />
        <Checkbox label="Admin" id="isAdmin" />
        <Checkbox label="Terms of service" id="terms" />

        {/* Button centered on small devices */}
        <div className="flex justify-center">
          <Button label="Update User" />
        </div>
      </form>
    </div>
  );
};

export default UserEdit;


===== src/app/(pages)/filter/Filter.jsx =====
"use client";

import React, { useState, useRef, useEffect } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { IoIosArrowDown, IoIosArrowUp } from "react-icons/io";
import { FaStar } from "react-icons/fa";
import { AiOutlineFilter, AiOutlineClose } from "react-icons/ai";
// import PriceRange from './priceRange';
// import './PriceRange.css';

function FilterGroup({ title, children, defaultOpen = true }) {
  const [open, setOpen] = useState(defaultOpen);
  return (
    <div className="border-b border-gray-200 py-3">
      <button
        onClick={() => setOpen((o) => !o)}
        className="w-full flex justify-between items-center focus:outline-none"
        aria-expanded={open}
      >
        <h2 className="font-semibold text-base lg:text-lg text-gray-700">
          {title}
        </h2>
      </button>
      {open && <div className="mt-2">{children}</div>}
    </div>
  );
}

export default function Filter() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isOpen, setIsOpen] = useState(false);
  const sidebarRef = useRef();

  // helper to update URL params
  const updateFilter = (key, value) => {
    const params = new URLSearchParams(searchParams.toString());
    if (value) params.set(key, value);
    else params.delete(key);
    params.set("page", "1"); // reset to first page
    router.push(`?${params.toString()}`);
  };

  // API-fetched data
  const [categories, setCategories] = useState([]);
  const [conditions, setConditions] = useState([]);
  const [brands, setBrands] = useState([]);

  useEffect(() => {
    fetch("https://media.upfrica.com/api/categories/")
      .then((res) => (res.ok ? res.json() : Promise.reject(res)))
      .then((data) => setCategories(data.results ?? data))
      .catch((err) => console.error("Failed to load categories:", err));
  }, []);

  useEffect(() => {
    fetch("https://media.upfrica.com/api/conditions/")
      .then((res) => (res.ok ? res.json() : Promise.reject(res)))
      .then((data) => setConditions(data.results ?? data))
      .catch((err) => console.error("Failed to load conditions:", err));
  }, []);

  useEffect(() => {
    fetch("https://media.upfrica.com/api/brands/")
      .then((res) => (res.ok ? res.json() : Promise.reject(res)))
      .then((data) => setBrands(data.results ?? data))
      .catch((err) => console.error("Failed to load brands:", err));
  }, []);

  // close drawer on outside click
  useEffect(() => {
    const handleClick = (e) => {
      if (
        isOpen &&
        sidebarRef.current &&
        !sidebarRef.current.contains(e.target)
      ) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClick);
    return () => document.removeEventListener("mousedown", handleClick);
  }, [isOpen]);

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Mobile ‚ÄúFilters‚Äù button */}
      <div className="md:hidden p-4">
        <button
          onClick={() => setIsOpen((o) => !o)}
          className="flex items-center space-x-2 border rounded px-4 py-2"
        >
          <AiOutlineFilter />
          <span>Filters</span>
        </button>
      </div>

      {/* Overlay */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={() => setIsOpen(false)}
        />
      )}

      {/* Sidebar */}
      <aside
        ref={sidebarRef}
        className={`
          fixed top-0 left-0 z-50 h-full w-full bg-white p-6
          transform transition-transform duration-300
          ${isOpen ? "translate-x-0" : "-translate-x-full"}
          md:relative md:translate-x-0 md:w-full
        `}
      >
        {/* Mobile header */}
        <div className="flex items-center justify-between md:hidden mb-4">
          <h2 className="text-xl font-semibold">Filters</h2>
          <button
            onClick={() => setIsOpen(false)}
            className="p-1 rounded hover:bg-gray-100"
          >
            <AiOutlineClose size={24} />
          </button>
        </div>

        {/* 1. Category */}
        <FilterGroup title="Category">
          <select
            value={searchParams.get("category") || ""}
            onChange={(e) => updateFilter("category", e.target.value)}
            className="w-full rounded border px-3 py-2"
          >
            <option value="">All Categories</option>
            {categories.map((c) => (
              <option key={c.id} value={c.id}>
                {c.name}
              </option>
            ))}
          </select>
        </FilterGroup>

        {/* 2. Condition */}
        <FilterGroup title="Condition">
          <select
            value={searchParams.get("condition") || ""}
            onChange={(e) => updateFilter("condition", e.target.value)}
            className="w-full rounded border px-3 py-2"
          >
            <option value="">All Conditions</option>
            {conditions.map((c) => (
              <option key={c.id} value={c.id}>
                {c.name}
              </option>
            ))}
          </select>
        </FilterGroup>

        {/* 3. Brand */}
        <FilterGroup title="Brand">
          <select
            value={searchParams.get("brand") || ""}
            onChange={(e) => updateFilter("brand", e.target.value)}
            className="w-full rounded border px-3 py-2"
          >
            <option value="">All Brands</option>
            {brands.map((b) => (
              <option key={b.id} value={b.id}>
                {b.name}
              </option>
            ))}
          </select>
        </FilterGroup>

        {/* 4. Sort By */}
        <FilterGroup title="Sort By">
          <select
            value={searchParams.get("ordering") || ""}
            onChange={(e) => updateFilter("ordering", e.target.value)}
            className="w-full rounded border px-3 py-2"
          >
            <option value="">Sort by</option>
            <option value="price">Price: Low ‚Üí High</option>
            <option value="-price">Price: High ‚Üí Low</option>
          </select>
        </FilterGroup>

        {/* 5. Price Range */}
        {/* <FilterGroup title="Price Range">
                    <PriceRange />
                </FilterGroup> */}

        {/* 6. Ratings (static) */}
        <FilterGroup title="Ratings">
          <div className="flex items-center">
            {[...Array(5)].map((_, i) => (
              <FaStar key={i} className="text-yellow-400" />
            ))}
            <span className="ml-2 text-sm">4.5/5</span>
          </div>
        </FilterGroup>

        {/* 7. Customer Reviews (static) */}
        <FilterGroup title="Customer Reviews">
          <ul className="space-y-2 text-base text-gray-600">
            {[5, 4, 3, 2, 1].map((n) => (
              <li
                key={n}
                className="flex items-center space-x-2 text-yellow-400 text-lg"
              >
                {[...Array(n)].map((_, i) => (
                  <FaStar key={i} />
                ))}
                <span className="text-gray-800">& Up</span>
              </li>
            ))}
          </ul>
        </FilterGroup>

        {/* 8. Deals & Discounts (static) */}
        <FilterGroup title="Deals & Discounts">
          <ul className="space-y-1 text-gray-600">
            <li>
              <a href="#allDiscounts" className="hover:text-blue-700">
                All Discounts
              </a>
            </li>
            <li>
              <a href="#todaysDeals" className="hover:text-blue-700">
                Today's Deals
              </a>
            </li>
          </ul>
        </FilterGroup>

        {/* ‚Ä¶add other static groups as needed‚Ä¶ */}
      </aside>
    </div>
  );
}


===== src/app/(pages)/filter/Pagination.jsx =====
import { FaCheckCircle, FaStar, FaEdit } from "react-icons/fa";
import {
  AiOutlineSearch,
  AiOutlineClose,
  AiOutlineLeft,
  AiOutlineRight,
  AiOutlineFilter,
} from "react-icons/ai";
import { HiOutlineCalendar } from "react-icons/hi";

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  const handlePageClick = (page) => {
    if (page >= 1 && page <= totalPages && page !== currentPage) {
      onPageChange(page);
    }
  };

  const getPageNumbers = () => {
    const pages = [];
    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) pages.push(i);
    } else {
      if (currentPage <= 3) {
        pages.push(1, 2, 3, 4, "...", totalPages);
      } else if (currentPage >= totalPages - 2) {
        pages.push(
          1,
          "...",
          totalPages - 3,
          totalPages - 2,
          totalPages - 1,
          totalPages,
        );
      } else {
        pages.push(
          1,
          "...",
          currentPage - 1,
          currentPage,
          currentPage + 1,
          "...",
          totalPages,
        );
      }
    }
    return pages;
  };

  return (
    <div className="flex items-center space-x-2">
      <button
        onClick={() => handlePageClick(currentPage - 1)}
        disabled={currentPage === 1}
        className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
      >
        <AiOutlineLeft className="mr-1" />
        <span>Prev</span>
      </button>
      {getPageNumbers().map((page, i) =>
        typeof page === "number" ? (
          <button
            key={i}
            onClick={() => handlePageClick(page)}
            className={`px-3 py-1 rounded-md border border-gray-300 hover:bg-gray-100 ${page === currentPage ? "bg-violet-700 text-white" : ""}`}
          >
            {page}
          </button>
        ) : (
          <span key={i} className="px-3 py-1">
            {page}
          </span>
        ),
      )}
      <button
        onClick={() => handlePageClick(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
      >
        <span>Next</span>
        <AiOutlineRight className="ml-1" />
      </button>
    </div>
  );
};

export default Pagination;


===== src/app/(pages)/filter/SearchBox.jsx =====
"use client";

import { useState, useEffect } from "react";
import { IoMdSearch, IoMdClose } from "react-icons/io";
import { useRouter } from "next/navigation";
import Link from "next/link";

// A simple animated skeleton loader for the dropdown
const SkeletonLoader = () => (
  <div className="space-y-2 p-3">
    {[1, 2, 3, 4].map((i) => (
      <div key={i} className="flex items-center space-x-4 animate-pulse">
        <div className="w-12 h-12 bg-gray-300 rounded" />
        <div className="flex-1 space-y-2">
          <div className="h-4 bg-gray-300 rounded w-3/4" />
          <div className="h-3 bg-gray-300 rounded w-1/2" />
        </div>
      </div>
    ))}
  </div>
);

export default function SearchBox() {
  const [searchText, setSearchText] = useState("");
  const [debouncedSearchText, setDebouncedSearchText] = useState("");
  const [results, setResults] = useState([]);
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  // debounce
  useEffect(() => {
    const timer = setTimeout(() => setDebouncedSearchText(searchText), 400);
    return () => clearTimeout(timer);
  }, [searchText]);

  // toggles loading skeleton
  useEffect(() => {
    if (searchText) {
      setLoading(true);
    } else {
      setLoading(false);
      setDropdownVisible(false);
      setResults([]);
    }
  }, [searchText]);

  // fetch
  useEffect(() => {
    const fetchResults = async () => {
      if (!debouncedSearchText) {
        setResults([]);
        setDropdownVisible(false);
        setLoading(false);
        return;
      }
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/products/search/?q=${encodeURIComponent(debouncedSearchText)}`,
        );
        const json = await res.json();
        const items = json.results || [];
        setResults(items);
        setDropdownVisible(items.length > 0);
      } catch (err) {
        console.error(err);
        setResults([]);
        setDropdownVisible(false);
      }
      setLoading(false);
    };
    fetchResults();
  }, [debouncedSearchText]);

  const clearSearch = () => {
    setSearchText("");
    setResults([]);
    setDropdownVisible(false);
    setLoading(false);
  };

  const onKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const q = searchText.trim();
      if (q) router.push(`/filter?q=${encodeURIComponent(q)}`);
    }
  };

  return (
    <div className="relative w-full">
      {/* search icon */}
      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <IoMdSearch className="h-6 w-6 text-purple-500" />
      </div>

      <input
        type="text"
        className="block w-full pl-10 pr-10 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-500 text-base"
        placeholder="Type to search products..."
        value={searchText}
        onChange={(e) => setSearchText(e.target.value)}
        onKeyDown={onKeyDown}
        onFocus={() => results.length > 0 && setDropdownVisible(true)}
      />

      {/* clear button */}
      {searchText && (
        <button
          className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500 hover:text-gray-700"
          onClick={clearSearch}
        >
          <IoMdClose className="h-6 w-6" />
        </button>
      )}

      {/* dropdown */}
      {(loading || dropdownVisible) && (
        <div className="absolute top-full mt-1 w-full z-20">
          <div className="bg-white border shadow-lg rounded-md max-h-80 overflow-y-auto">
            {loading ? (
              <SkeletonLoader />
            ) : (
              results.map((item) => {
                const country = (item.seller_country || "gh").toLowerCase();
                return (
                  <Link
                    key={item.id}
                    href={`/${country}/${item.seo_slug || ""}/`}
                    className="block p-3 hover:bg-gray-100 flex items-center gap-3"
                    onClick={() => setDropdownVisible(false)}
                  >
                    <img
                      src={item.product_images?.[0] || "/placeholder.jpg"}
                      alt={item.title}
                      className="w-12 h-12 rounded object-cover"
                    />
                    <div>
                      <p className="font-medium text-sm text-gray-800">
                        {item.title}
                      </p>
                      <p className="text-xs text-gray-500">
                        {(item.price_cents / 100).toFixed(2)}{" "}
                        {item.price_currency}
                      </p>
                    </div>
                  </Link>
                );
              })
            )}
          </div>
        </div>
      )}
    </div>
  );
}


===== src/app/(pages)/filter/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header></Header>
      {children}
      <Footer></Footer>
    </div>
  );
};

export default layout;


===== src/app/(pages)/filter/page.jsx =====
// 'use client';

// import React, { useEffect, useState } from 'react';
// import { useSearchParams, useRouter } from 'next/navigation';
// import { AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';

// import Filter from './Filter';
// import ProductCard from '@/components/home/ProductList/ProductCard';
// import SearchBox from './SearchBox';

// const PAGE_SIZE = 20;

// const SkeletonLoader = () => (
//     <div className="bg-gray-200 animate-pulse rounded-lg overflow-hidden border p-4 flex items-center space-x-6">
//         <div className="w-1/4 h-52 bg-gray-300 rounded-md"></div>
//         <div className="w-3/4 space-y-2">
//             <div className="h-6 bg-gray-300 rounded w-3/4"></div>
//             <div className="h-4 bg-gray-300 rounded w-1/2"></div>
//             <div className="h-6 bg-gray-300 rounded w-1/4"></div>
//             <div className="h-4 bg-gray-300 rounded w-1/3"></div>
//         </div>
//     </div>
// );

// // --- Inline Pagination component ---
// function Pagination({ currentPage, totalPages, onPageChange }) {
//     const handlePageClick = (page) => {
//         if (page >= 1 && page <= totalPages && page !== currentPage) {
//             onPageChange(page);
//         }
//     };

//     const getPageNumbers = () => {
//         const pages = [];
//         if (totalPages <= 5) {
//             for (let i = 1; i <= totalPages; i++) pages.push(i);
//         } else {
//             if (currentPage <= 3) {
//                 pages.push(1, 2, 3, 4, '...', totalPages);
//             } else if (currentPage >= totalPages - 2) {
//                 pages.push(1, '...', totalPages - 3, totalPages - 2, totalPages - 1, totalPages);
//             } else {
//                 pages.push(
//                     1,
//                     '...',
//                     currentPage - 1,
//                     currentPage,
//                     currentPage + 1,
//                     '...',
//                     totalPages
//                 );
//             }
//         }
//         return pages;
//     };

//     return (
//         <div className="flex items-center space-x-2">
//             <button
//                 onClick={() => handlePageClick(currentPage - 1)}
//                 disabled={currentPage === 1}
//                 className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//             >
//                 <AiOutlineLeft className="mr-1" />
//                 <span>Prev</span>
//             </button>

//             {getPageNumbers().map((page, idx) =>
//                 typeof page === 'number' ? (
//                     <button
//                         key={idx}
//                         onClick={() => handlePageClick(page)}
//                         className={`px-3 py-1 rounded-md border border-gray-300 hover:bg-gray-100 ${page === currentPage ? 'bg-violet-700 text-white' : ''
//                             }`}
//                     >
//                         {page}
//                     </button>
//                 ) : (
//                     <span key={idx} className="px-3 py-1">
//                         {page}
//                     </span>
//                 )
//             )}

//             <button
//                 onClick={() => handlePageClick(currentPage + 1)}
//                 disabled={currentPage === totalPages}
//                 className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//             >
//                 <span>Next</span>
//                 <AiOutlineRight className="ml-1" />
//             </button>
//         </div>
//     );
// }
// // --- end Pagination ---

// export default function FilterPage() {
//     const router = useRouter();
//     const searchParams = useSearchParams();
//     const q = searchParams.get('q') || '';
//     const currentPage = parseInt(searchParams.get('page') || '1', 10);

//     const [products, setProducts] = useState([]);
//     const [count, setCount] = useState(0);
//     const [loading, setLoading] = useState(true);

//     useEffect(() => {
//         const fetchProducts = async () => {
//             if (!q) {
//                 setProducts([]);
//                 setCount(0);
//                 setLoading(false);
//                 return;
//             }

//             setLoading(true);
//             try {
//                 const res = await fetch(
//                     `https://media.upfrica.com/api/products/?search=${encodeURIComponent(q)}&page=${currentPage}`
//                 );
//                 const json = await res.json();
//                 setProducts(json.results ?? []);
//                 setCount(json.count ?? 0);
//             } catch (err) {
//                 console.error("Error fetching search results:", err);
//                 setProducts([]);
//                 setCount(0);
//             } finally {
//                 setLoading(false);
//             }
//         };

//         fetchProducts();
//     }, [q, currentPage]);

//     const totalPages = Math.ceil(count / PAGE_SIZE);

//     const onPageChange = (page) => {
//         const params = new URLSearchParams();
//         if (q) params.set('q', q);
//         params.set('page', String(page));
//         router.push(`?${params.toString()}`);
//     };

//     return (
//         <div className={loading ? 'h-screen' : 'h-auto'}>
//             <div className="grid lg:grid-cols-7 gap-10">
//                 {/* sidebar filters */}
//                 <div className="col-span-2 hidden lg:block">
//                     <Filter />
//                 </div>

//                 {/* main content */}
//                 <div className="col-span-5 p-4">
//                     {/* <div className='py-4'>
//                         <SearchBox />
//                     </div> */}
//                     <h1 className="text-2xl font-semibold tracking-wide pb-4">
//                         {q
//                             ? `Search results for ‚Äú${q}‚Äù`
//                             : 'Enter a search term to find products'}
//                     </h1>

//                     <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
//                         {loading
//                             ? Array.from({ length: PAGE_SIZE }).map((_, i) => (
//                                 <SkeletonLoader key={i} />
//                             ))
//                             : products.length > 0
//                                 ? products.map((product) => (
//                                     <ProductCard key={product.id} product={product} />
//                                 ))
//                                 : (
//                                     <p className="text-gray-500 col-span-full">
//                                         No products found for ‚Äú{q}‚Äù
//                                     </p>
//                                 )}
//                     </div>

//                     {/* pagination */}
//                     {!loading && products.length > 0 && (
//                         <div className="mt-8 flex justify-center">
//                             <Pagination
//                                 currentPage={currentPage}
//                                 totalPages={totalPages}
//                                 onPageChange={onPageChange}
//                             />
//                         </div>
//                     )}
//                 </div>
//             </div>
//         </div>
//     );
// }

"use client";

import React, { useEffect, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { AiOutlineLeft, AiOutlineRight } from "react-icons/ai";

import Filter from "./Filter";
import ProductCard from "@/components/home/ProductList/ProductCard";
import SearchBox from "./SearchBox";

const PAGE_SIZE = 20;

function SkeletonLoader() {
  return (
    <div className="bg-gray-200 animate-pulse rounded-lg overflow-hidden border p-4 flex items-center space-x-6">
      <div className="w-1/4 h-52 bg-gray-300 rounded-md"></div>
      <div className="w-3/4 space-y-2">
        <div className="h-6 bg-gray-300 rounded w-3/4"></div>
        <div className="h-4 bg-gray-300 rounded w-1/2"></div>
        <div className="h-6 bg-gray-300 rounded w-1/4"></div>
        <div className="h-4 bg-gray-300 rounded w-1/3"></div>
      </div>
    </div>
  );
}

function Pagination({ currentPage, totalPages, onPageChange }) {
  const handlePageClick = (page) => {
    if (page >= 1 && page <= totalPages && page !== currentPage) {
      onPageChange(page);
    }
  };

  const getPageNumbers = () => {
    const pages = [];
    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) pages.push(i);
    } else {
      if (currentPage <= 3) {
        pages.push(1, 2, 3, 4, "...", totalPages);
      } else if (currentPage >= totalPages - 2) {
        pages.push(
          1,
          "...",
          totalPages - 3,
          totalPages - 2,
          totalPages - 1,
          totalPages,
        );
      } else {
        pages.push(
          1,
          "...",
          currentPage - 1,
          currentPage,
          currentPage + 1,
          "...",
          totalPages,
        );
      }
    }
    return pages;
  };

  return (
    <div className="flex items-center space-x-2">
      <button
        onClick={() => handlePageClick(currentPage - 1)}
        disabled={currentPage === 1}
        className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
      >
        <AiOutlineLeft className="mr-1" />
        <span>Prev</span>
      </button>

      {getPageNumbers().map((page, idx) =>
        typeof page === "number" ? (
          <button
            key={idx}
            onClick={() => handlePageClick(page)}
            className={`px-3 py-1 rounded-md border border-gray-300 hover:bg-gray-100 ${
              page === currentPage ? "bg-violet-700 text-white" : ""
            }`}
          >
            {page}
          </button>
        ) : (
          <span key={idx} className="px-3 py-1">
            {page}
          </span>
        ),
      )}

      <button
        onClick={() => handlePageClick(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
      >
        <span>Next</span>
        <AiOutlineRight className="ml-1" />
      </button>
    </div>
  );
}

export default function SearchPage() {
  const router = useRouter();
  const searchParams = useSearchParams();

  const q = searchParams.get("q") || "";
  const category = searchParams.get("category") || "";
  const condition = searchParams.get("condition") || "";
  const brand = searchParams.get("brand") || "";
  const ordering = searchParams.get("ordering") || "";
  const currentPage = parseInt(searchParams.get("page") || "1", 10);

  const [products, setProducts] = useState([]);
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchProducts = async () => {
      if (!q && !category && !condition && !brand) {
        setProducts([]);
        setCount(0);
        setLoading(false);
        return;
      }

      setLoading(true);
      try {
        const url = new URL("https://media.upfrica.com/api/products/search/");
        url.searchParams.set("q", q);
        url.searchParams.set("page", currentPage);
        if (category) url.searchParams.set("category", category);
        if (condition) url.searchParams.set("condition", condition);
        if (brand) url.searchParams.set("brand", brand);
        if (ordering) url.searchParams.set("ordering", ordering);
        console.log(url.toString());

        const res = await fetch(url.toString());
        const json = await res.json();
        setProducts(json.results ?? []);
        setCount(json.count ?? 0);
      } catch (err) {
        console.error("Error fetching search results:", err);
        setProducts([]);
        setCount(0);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [q, category, condition, brand, ordering, currentPage]);

  const totalPages = Math.ceil(count / PAGE_SIZE);

  const onPageChange = (page) => {
    const params = new URLSearchParams(searchParams.toString());
    params.set("page", String(page));
    router.push(`?${params.toString()}`);
  };

  return (
    <div className={loading ? "h-screen" : "h-auto"}>
      <div className="grid lg:grid-cols-7 gap-10">
        {/* sidebar filters */}
        <div className="col-span-2 hidden lg:block">
          <Filter />
        </div>

        {/* main content */}
        <div className="col-span-5 p-4">
          <div className="py-4">
            <SearchBox />
          </div>
          <h1 className="text-2xl font-semibold tracking-wide pb-4">
            {q || category || condition || brand
              ? `Showing results${q ? ` for ‚Äú${q}‚Äù` : ""}`
              : "Enter a search term to find products"}
          </h1>

          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {loading ? (
              Array.from({ length: PAGE_SIZE }).map((_, i) => (
                <SkeletonLoader key={i} />
              ))
            ) : products.length > 0 ? (
              products.map((product) => (
                <ProductCard key={product.id} product={product} />
              ))
            ) : (
              <p className="text-gray-500 col-span-full">No products found</p>
            )}
          </div>

          {!loading && products.length > 0 && (
            <div className="mt-8 flex justify-center">
              <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={onPageChange}
              />
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/filter/priceRange.jsx =====
import React, { useState } from "react";
import ReactSlider from "react-slider";
import "./PriceRange.css";

const PriceRange = () => {
  // Using one state array to store the two values [min, max]
  const [priceRange, setPriceRange] = useState([0, 1000]);

  return (
    <div className="price-range-container">
      <label className="block text-sm font-medium mb-1">Price Range</label>
      <ReactSlider
        className="horizontal-slider"
        thumbClassName="thumb"
        trackClassName="track"
        value={priceRange}
        min={0}
        max={1000}
        onChange={(newValues) => setPriceRange(newValues)}
        withTracks={true}
      />
      <div className="flex justify-between mt-2">
        <span className="text-sm">Min: {priceRange[0]}</span>
        <span className="text-sm">Max: {priceRange[1]}</span>
      </div>
    </div>
  );
};

export default PriceRange;


===== src/app/(pages)/help/[slug]/layout.js =====
import React from "react";

const layout = ({ children }) => {
  return <div>{children}</div>;
};

export default layout;


===== src/app/(pages)/help/[slug]/page.jsx =====
"use client";
import React, { useState, useEffect, useRef } from "react";
import Link from "next/link";
import Script from "next/script";

import { FaEdit } from "react-icons/fa";

import { FaSearch, FaBars } from "react-icons/fa";
import Footer from "@/components/common/footer/Footer";
import { useSelector } from "react-redux";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm"; // üëà import it

// üëâ Step 1: Utility function to strip HTML tags
const stripHtml = (html) => {
  if (!html) return "";
  return html.replace(/<[^>]*>?/gm, "");
};

// Dark Mode Toggle Hook
const useDarkMode = () => {
  const [enabled, setEnabled] = useState(false);
  useEffect(() => {
    const saved = localStorage.getItem("theme") === "dark";
    if (saved) {
      document.documentElement.classList.add("dark");
      setEnabled(true);
    }
  }, []);

  const toggle = () => {
    const isDark = !enabled;
    localStorage.setItem("theme", isDark ? "dark" : "light");
    document.documentElement.classList.toggle("dark", isDark);
    setEnabled(isDark);
  };
  return [enabled, toggle];
};

// Dark mode toggle button
const DarkModeToggle = () => {
  const [enabled, toggle] = useDarkMode();
  return (
    <button
      onClick={toggle}
      className="ml-4 px-3 py-2 border border-white text-white rounded-full hover:bg-white hover:text-black transition"
    >
      {enabled ? "üåô Dark" : "‚òÄÔ∏è Light"}
    </button>
  );
};

// A card skeleton for search results
const CardSkeleton = () => (
  <div className="animate-pulse p-4 bg-white dark:bg-gray-800 rounded shadow">
    <div className="h-6 bg-gray-300 dark:bg-gray-700 rounded w-5/6 mb-2"></div>
    <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-full mb-2"></div>
    <div className="h-3 bg-gray-300 dark:bg-gray-700 rounded w-4/6"></div>
  </div>
);

// Main Page Component with Search Features
export default function HelpCenterPage({ params }) {
  const { slug } = params;
  const { user, token } = useSelector((state) => state.auth);

  // Article Data States
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Static header, breadcrumbs, and sidebar information
  const staticHeader = {
    title: "Help Centre",
    backgroundImage:
      "https://images.pexels.com/photos/6214476/pexels-photo-6214476.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    searchPlaceholder: "Type your question",
  };

  const staticBreadcrumbs = [
    { label: "Help home", href: "/help" },
    { label: "Listings", href: "/help/listings" },
    { label: "Creating a Listing", href: "/help/creating-a-listing" },
  ];

  const staticSidebar = {
    helpTopics: [
      { name: "Shop Management", href: "/help/shop-management" },
      { name: "Orders & Shipping", href: "/help/orders-shipping" },
      { name: "Listings", href: "/help/listings" },
      { name: "Finances", href: "/help/finances" },
      { name: "Marketing & Promotions", href: "/help/marketing-promotions" },
      { name: "Start Selling on Etsy", href: "/help/start-selling" },
      { name: "Your Etsy Account", href: "/help/your-account" },
    ],
    articleNavigation: [
      { title: "Introduction", id: "introduction" },
      { title: "Postage Pricing", id: "postage-pricing" },
      { title: "Delivery Profile Highlight", id: "delivery-profile-highlight" },
      { title: "Sample Pricing Table", id: "sample-pricing-table" },
      { title: "Additional Resources", id: "additional-resources" },
    ],
  };

  // Fetch article data based on slug
  useEffect(() => {
    const requestOptions = {
      method: "GET",
      redirect: "follow",
    };

    fetch(`https://media.upfrica.com/api/helpblogs/${slug}`, requestOptions)
      .then((response) => response.json())
      .then((result) => {
        setData(result);
        setLoading(false);
      })
      .catch((err) => {
        console.error(err);
        setError(err);
        setLoading(false);
      });
  }, [slug]);

  // --- Search States and Debounce Logic ---
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceTimeout = useRef(null);
  const [isFocused, setIsFocused] = useState(false);

  useEffect(() => {
    // Clear any existing debounce timer
    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);

    // Clear results if query is empty
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    // Set debounce delay: 400ms
    debounceTimeout.current = setTimeout(() => {
      const encodedQuery = encodeURIComponent(searchQuery.trim());
      fetch(
        `https://media.upfrica.com/api/help-blogs/search/?q=${encodedQuery}`,
      )
        .then((response) => response.json())
        .then((data) => {
          setSearchResults(data);
          setSearchLoading(false);
        })
        .catch((error) => {
          console.error("Search fetch error:", error);
          setSearchLoading(false);
        });
    }, 400);

    return () => clearTimeout(debounceTimeout.current);
  }, [searchQuery]);

  if (loading) {
    return <SkeletonLoader />;
  }
  if (error) {
    return <div>Error loading data: {error?.message}</div>;
  }

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <Header
        data={staticHeader}
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        isFocused={isFocused}
        setIsFocused={setIsFocused}
        searchResults={searchResults}
        searchLoading={searchLoading}
      />
      <div className="absolute top-6 right-6 z-50">
        <DarkModeToggle />
      </div>

      <Breadcrumbs data={staticBreadcrumbs} />
      <div className="container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-8 ">
        <Sidebar data={staticSidebar} />
        <main className="lg:col-span-3 space-y-8 ">
          <ArticleContent data={data} />
        </main>
      </div>
      <VoteSection />
      <Footer />
      <Scripts />
    </div>
  );
}

/* --------------------------------------------------
   SkeletonLoader Component ‚Äì Mimics the page layout while data loads.
-------------------------------------------------- */
const SkeletonLoader = () => (
  <div className="min-h-screen bg-gray-100 animate-pulse ">
    {/* Header Skeleton */}
    <div className="h-24 bg-gray-300 relative">
      <div className="absolute inset-0 bg-gray-400 opacity-50"></div>
    </div>
    {/* Breadcrumbs Skeleton */}
    <div className="py-3 bg-white shadow-sm">
      <div className="container mx-auto px-4">
        <div className="h-4 w-1/2 bg-gray-300 rounded"></div>
      </div>
    </div>
    <div className="container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-8">
      {/* Sidebar Skeleton */}
      <aside className="space-y-8">
        <div className="bg-white shadow rounded p-4">
          <div className="h-6 w-1/3 bg-gray-300 mb-4"></div>
          <ul className="space-y-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <li key={i} className="h-4 bg-gray-300 rounded"></li>
            ))}
          </ul>
        </div>
        <div className="bg-white shadow rounded p-4">
          <div className="h-6 w-1/3 bg-gray-300 mb-4"></div>
          <ul className="space-y-2">
            {[1, 2, 3].map((i) => (
              <li key={i} className="h-4 bg-gray-300 rounded"></li>
            ))}
          </ul>
        </div>
      </aside>
      {/* Main Article Skeleton */}
      <main className="lg:col-span-3 space-y-8  dark:bg-gray-900 text-gray-900 dark:text-gray-100">
        <div className="space-y-4">
          <div className="h-8 w-3/4 bg-gray-300 rounded"></div>
          <div className="h-4 w-full bg-gray-300 rounded"></div>
          <div className="h-4 w-full bg-gray-300 rounded"></div>
        </div>
        {Array.from({ length: 3 }).map((_, index) => (
          <div key={index} className="space-y-4 border-t pt-4">
            <div className="h-6 w-1/2 bg-gray-300 rounded"></div>
            <div className="h-4 w-full bg-gray-300 rounded"></div>
            <div className="h-4 w-5/6 bg-gray-300 rounded"></div>
          </div>
        ))}
      </main>
    </div>
    <footer className="bg-gray-800 py-6 mt-12">
      <div className="container mx-auto text-center">
        <div className="h-4 w-1/3 bg-gray-400 rounded mx-auto"></div>
      </div>
    </footer>
  </div>
);

/* --------------------------------------------------
   Header Component ‚Äì Now includes integrated search functionality.
-------------------------------------------------- */
const Header = ({
  data,
  searchQuery,
  setSearchQuery,
  isFocused,
  setIsFocused,
  searchResults,
  searchLoading,
}) => {
  return (
    <header className="relative h-24">
      <div
        className="absolute inset-0 bg-cover bg-center"
        style={{ backgroundImage: `url("${data?.backgroundImage}")` }}
      ></div>
      <div className="absolute inset-0 bg-gradient-to-r from-black via-transparent to-black opacity-70"></div>
      <div className="absolute inset-0 flex items-center justify-between container mx-auto px-4">
        <Link href={"/help"} className="text-white text-xl font-bold">
          Help
        </Link>
        <div className="w-full max-w-md relative">
          <div className="relative">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="search"
              name="query"
              placeholder={data?.searchPlaceholder}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onFocus={() => setIsFocused(true)}
              onBlur={() => setTimeout(() => setIsFocused(false), 150)}
              className="w-full rounded-full border border-violet-700 py-2 pl-10 pr-10 focus:outline-none focus:ring-2 focus:ring-violet-700 text-gray-500"
            />
          </div>
          {/* Floating Search Results Panel */}
          {isFocused && searchQuery.trim() && (
            <div className="absolute z-20 left-0 right-0 mt-2 bg-white rounded shadow-lg p-4 max-h-96 overflow-y-auto">
              {searchLoading ? (
                <div className="grid grid-cols-1 gap-4">
                  {Array.from({ length: 6 }).map((_, i) => (
                    <CardSkeleton key={i} />
                  ))}
                </div>
              ) : (
                <>
                  {searchResults?.length > 0 ? (
                    <div className="grid grid-cols-1 gap-4">
                      {searchResults.map((post) => (
                        <Link key={post.id} href={`/help/${post.slug}/`}>
                          <div className="block p-4 bg-white rounded shadow hover:shadow-lg transition">
                            <h3 className="text-lg font-bold text-gray-900 mb-2">
                              {post.title}
                            </h3>
                            <p className="text-gray-700">
                              {post.summary?.length > 150
                                ? post.summary.substring(0, 150) + "..."
                                : post.summary}
                            </p>
                          </div>
                        </Link>
                      ))}
                    </div>
                  ) : (
                    <p className="p-4 text-center text-gray-400">
                      No results found.
                    </p>
                  )}
                </>
              )}
            </div>
          )}
        </div>
        <div>
          <Link href="/login">
            <button className="px-3 py-2 border border-white text-white rounded-full hover:bg-white hover:text-gray-900 transition">
              Sign in
            </button>
          </Link>
        </div>
      </div>
    </header>
  );
};

/* --------------------------------------------------
   Breadcrumbs Component ‚Äì Renders navigation links.
-------------------------------------------------- */
const Breadcrumbs = ({ data }) => (
  <nav className="bg-white py-3 shadow-sm">
    <div className="container mx-auto px-4">
      <ol className="flex space-x-2 text-gray-600 items-center">
        {data?.map((crumb, index) => (
          <React.Fragment key={index}>
            <li>
              <Link href={crumb.href} className="hover:text-violet-700">
                {crumb.label}
              </Link>
            </li>
            {index < data.length - 1 && <li>/</li>}
          </React.Fragment>
        ))}
      </ol>
    </div>
  </nav>
);

/* --------------------------------------------------
   Sidebar Component ‚Äì Renders the help topics and article navigation.
-------------------------------------------------- */
// Sidebar toggle button for mobile
const SidebarToggleButton = ({ onClick }) => (
  <button
    onClick={onClick}
    className="block lg:hidden mb-4 px-4 py-2 border border-gray-300 rounded-md bg-white dark:bg-zinc-800 dark:text-white"
  >
    <FaBars className="inline-block mr-2" /> Menu
  </button>
);

// Modified Sidebar to include collapsible logic
const Sidebar = ({ data }) => {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <aside className="space-y-8  dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <SidebarToggleButton onClick={() => setIsOpen(!isOpen)} />
      <div className={`${isOpen ? "block" : "hidden"} lg:block space-y-8 `}>
        <Card title="Help Topics">
          <ul className="list-disc pl-4 text-gray-700 dark:text-dark">
            {data?.helpTopics?.map((link) => (
              <li key={link.name}>
                <Link href={link.href} className="hover:underline">
                  {link.name}
                </Link>
              </li>
            ))}
          </ul>
        </Card>
        <Card title="Article Navigation">
          <ul className="list-disc pl-4 text-violet-700">
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/help/dummy/page.jsx =====
"use client";
import React from "react";
import { useState } from "react";
import Link from "next/link";
import Script from "next/script";
import { FaSearch } from "react-icons/fa";
import Footer from "@/components/common/footer/Footer";

// Dummy data object that would normally come from your backend API.
const pageData = {
  header: {
    title: "Help Centre",
    // You may later include a background image URL from the backend:
    backgroundImage:
      "https://images.pexels.com/photos/6214476/pexels-photo-6214476.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    searchPlaceholder: "Type your question",
  },
  breadcrumbs: [
    { label: "Help home", href: "/help" },
    { label: "Listings", href: "/help/listings" },
    { label: "Creating a Listing", href: "/help/creating-a-listing" },
  ],
  sidebar: {
    helpTopics: [
      { name: "Shop Management", href: "/help/shop-management" },
      { name: "Orders & Shipping", href: "/help/orders-shipping" },
      { name: "Listings", href: "/help/listings" },
      { name: "Finances", href: "/help/finances" },
      { name: "Marketing & Promotions", href: "/help/marketing-promotions" },
      { name: "Start Selling on Etsy", href: "/help/start-selling" },
      { name: "Your Etsy Account", href: "/help/your-account" },
    ],
    // Article navigation for jump links.
    articleNavigation: [
      { title: "How much should I charge for postage?", id: "postage" },
      { title: "What if I sell very bulky or heavy items?", id: "bulky" },
      { title: "How do I add postage rates?", id: "add-postage" },
      { title: "How do I create a delivery profile?", id: "delivery-profile" },
      { title: "How do I offer free delivery?", id: "free-delivery" },
      { title: "Multiple items & discounted rates", id: "multiple-items" },
      { title: "How do I add a delivery upgrade?", id: "delivery-upgrade" },
      {
        title: "How are buyers charged for delivery upgrades?",
        id: "upgrade-charge",
      },
    ],
  },
  article: {
    title: "How to Set Up Delivery Information for your Listings",
    intro:
      "Etsy offers many delivery tools to help you set postage rates in your shop.",
    bulletPoints: [
      "Use delivery profiles if you have multiple listings with the same delivery settings.",
      "Offer discounted postage when buyers purchase multiple items.",
      "Offer buyers the option to pay more for faster delivery.",
    ],
    highlight: {
      text: "Review your delivery options carefully. Accurate postage rates and delivery profiles can significantly improve your listing visibility and customer satisfaction.",
    },
    sections: [
      {
        id: "postage",
        title: "How much should I charge for postage?",
        paragraphs: [
          "Etsy has updated how postage prices are factored into search results for US domestic listings. Listings with postage prices lower than $6 will be prioritised.",
        ],
        bulletPoints: [
          "Postage prices below $6 are prioritised.",
          "Refer to postage price search visibility guidelines.",
        ],
        images: [], // Array of optional image URLs if provided.
      },
      {
        id: "bulky",
        title: "What if I sell very bulky or heavy items?",
        paragraphs: [
          "For heavy items like furniture, mention that postage prices may vary. Ask buyers to contact you for a quote and then create a custom listing.",
        ],
        links: [
          {
            href: "/help/custom-listing",
            text: "Learn how to create a custom listing.",
          },
        ],
        images: [],
      },
      {
        id: "add-postage",
        title: "How do I add postage rates?",
        paragraphs: [
          "If you prefer not to use calculated postage, add fixed postage rates when creating or editing your listings. Ensure you set a rate for every country you deliver to.",
        ],
        tips: "Follow your seller dashboard's instructions to add delivery details.",
        images: [],
      },
      {
        id: "delivery-profile",
        title: "How do I create a delivery profile?",
        paragraphs: [
          "A delivery profile lets you reuse the same delivery settings across multiple listings. Editing the profile will update every listing that uses it.",
          "Visit the Delivery profiles page to manage your profiles.",
        ],
        tips: "Use your shop manager to create and add delivery profiles.",
        images: [],
      },
      {
        id: "free-delivery",
        title: "How do I offer free delivery?",
        paragraphs: [
          "Free delivery is a strong incentive for buyers. If you use calculated postage, enable free delivery options in your delivery profile for domestic or international orders.",
        ],
        bulletPoints: [
          "For fixed-rate profiles, select the 'Free delivery' option.",
        ],
        links: [
          {
            href: "/help/free-delivery",
            text: "Learn more about offering free delivery.",
          },
        ],
        images: [],
      },
      {
        id: "multiple-items",
        title: "What if someone purchases multiple items from my shop?",
        paragraphs: [
          "You can offer discounted postage with two pricing tiers.",
        ],
        bulletPoints: [
          "One item price: Cost to deliver a single item.",
          "Additional item price: Cost for delivering an extra item.",
        ],
        table: {
          headers: ["Item", "One item", "Additional item"],
          rows: [
            ["Item A", "2.00 USD", "0.50 USD"],
            ["Item B", "1.00 USD", "0.75 USD"],
          ],
        },
        images: [],
      },
      {
        id: "delivery-upgrade",
        title: "How do I add a delivery upgrade?",
        paragraphs: [
          "Delivery upgrades let buyers opt for faster shipping. Enable them in your seller dashboard.",
        ],
        tips: "For calculated postage, upgrades depend on your chosen carriers.",
        images: [],
      },
      {
        id: "upgrade-charge",
        title: "How are buyers charged for delivery upgrades?",
        paragraphs: [
          "The upgrade cost is added to the base price of the item. If one item offers an upgrade, it will apply to every item in the order.",
        ],
        images: [],
      },
    ],
  },
  relatedArticles: [
    {
      name: "How to Set Up Calculated Postage",
      href: "/help/calculated-postage",
    },
    { name: "How to Deliver Your Items on Etsy", href: "/help/deliver-items" },
    { name: "How to Offer Free Delivery", href: "/help/free-delivery" },
    {
      name: "What is a Payment Account Reserve?",
      href: "/help/payment-account-reserve",
    },
    {
      name: "Customs Information for International Delivery",
      href: "/help/customs-information",
    },
  ],
};

export default function HelpCenterPage({ params }) {
  const { slug } = params;
  console.log("Slug:", slug);
  // In production, you might fetch this object from your backend API.
  const data = pageData;

  return (
    <div className="min-h-screen bg-gray-100">
      <Header data={data.header} />
      <Breadcrumbs data={data.breadcrumbs} />
      <div className="container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-8">
        <Sidebar data={data.sidebar} />
        <main className="lg:col-span-3 space-y-8">
          <ArticleContent data={data.article} />
          <RelatedArticles data={data.relatedArticles} />
        </main>
      </div>
      <VoteSection />
      <Footer />
      <Scripts />
    </div>
  );
}

/* ----------------------------------------------------------------------
   Header Component ‚Äì A reduced-height hero with three regions:
     Left: Displays "Help"
     Middle: Search bar
     Right: Sign-in button (rounded-full)
------------------------------------------------------------------------ */
const Header = ({ data }) => {
  return (
    <header className="relative h-24">
      <div
        className="absolute inset-0 bg-cover bg-center"
        style={{
          backgroundImage: `url("${data.backgroundImage}")`,
        }}
      ></div>
      <div className="absolute inset-0 bg-gradient-to-r from-black via-transparent to-black opacity-70"></div>
      <div className="absolute inset-0 flex items-center justify-between container mx-auto px-4">
        {/* Left */}
        <div className="text-white text-xl font-bold">Help</div>
        {/* Middle: Search Bar */}
        <div className="w-full max-w-md">
          <form action="/hc/search" method="get" className="relative">
            <input
              type="search"
              name="query"
              placeholder={data.searchPlaceholder}
              className="w-full rounded-full border border-violet-700 py-2 pl-4 pr-10 focus:outline-none focus:ring-2 focus:ring-violet-700"
            />
            <button
              type="submit"
              className="absolute right-0 top-0 h-full px-3 flex items-center justify-center"
              aria-label="Search"
            >
              <FaSearch className="text-gray-600 h-5 w-5" />
            </button>
          </form>
        </div>
        {/* Right: Sign In Button (rounded-full) */}
        <div>
          <Link href="https://www.etsy.com/sso-forced/zendesk?return_to=https://help.etsy.com">
            <button className="px-3 py-2 border border-white text-white rounded-full hover:bg-white hover:text-gray-900 transition">
              Sign in
            </button>
          </Link>
        </div>
      </div>
    </header>
  );
};

/* ----------------------------------------------------------------------
   Breadcrumbs Component ‚Äì Renders navigation links based on data.
------------------------------------------------------------------------ */
const Breadcrumbs = ({ data }) => {
  return (
    <nav className="bg-white py-3 shadow-sm">
      <div className="container mx-auto px-4">
        <ol className="flex space-x-2 text-gray-600 items-center">
          {data.map((crumb, index) => (
            <React.Fragment key={index}>
              <li>
                <Link href={crumb.href} className="hover:text-violet-700">
                  {crumb.label}
                </Link>
              </li>
              {index < data.length - 1 && <li>/</li>}
            </React.Fragment>
          ))}
        </ol>
      </div>
    </nav>
  );
};

/* ----------------------------------------------------------------------
   Sidebar Component ‚Äì Renders two sections from passed data:
     1. Help Topics
     2. Article Navigation (jump links)
------------------------------------------------------------------------ */
const Sidebar = ({ data }) => {
  return (
    <aside className="space-y-8">
      <Card title="Help Topics">
        <ul className="list-disc pl-4 text-gray-700">
          {data.helpTopics.map((link) => (
            <li key={link.name}>
              <Link href={link.href} className="hover:underline">
                {link.name}
              </Link>
            </li>
          ))}
        </ul>
      </Card>
      <Card title="Article Navigation">
        <ul className="list-disc pl-4 text-violet-700">
          {data.articleNavigation.map((section) => (
            <li key={section.id}>
              <Link href={`#${section.id}`} className="hover:underline">
                {section.title}
              </Link>
            </li>
          ))}
        </ul>
      </Card>
    </aside>
  );
};

/* ----------------------------------------------------------------------
   ArticleContent Component ‚Äì Renders the article content from the data object.
------------------------------------------------------------------------ */
const ArticleContent = ({ data }) => {
  return (
    <article className="space-y-8">
      <header>
        <h1
          id="page-title"
          className="text-3xl font-bold text-gray-900 mb-4"
          title={data.title}
        >
          {data.title}
        </h1>
      </header>
      <section>
        <p>{data.intro}</p>
        <ul className="list-disc pl-6">
          {data.bulletPoints.map((point, index) => (
            <li key={index}>{point}</li>
          ))}
        </ul>
      </section>
      <section>
        <div className="bg-yellow-100 border-l-4 border-yellow-500 p-4">
          <p className="font-semibold">Important:</p>
          <p>{data.highlight.text}</p>
        </div>
      </section>
      {data.sections.map((section) => (
        <section key={section.id} id={section.id}>
          <h2 className="text-2xl font-bold mt-8 mb-3">{section.title}</h2>
          {section.paragraphs.map((para, i) => (
            <p key={i}>{para}</p>
          ))}
          {section.bulletPoints && (
            <ul className="list-disc pl-6">
              {section.bulletPoints.map((bullet, i) => (
                <li key={i}>{bullet}</li>
              ))}
            </ul>
          )}
          {section.tips && (
            <p className="mt-2 italic text-gray-600">Tip: {section.tips}</p>
          )}
          {section.links && (
            <div className="mt-2 space-y-1">
              {section.links.map((link, i) => (
                <p key={i}>
                  <Link
                    href={link.href}
                    className="text-violet-700 hover:underline"
                  >
                    {link.text}
                  </Link>
                </p>
              ))}
            </div>
          )}
          {section.table && (
            <div className="overflow-x-auto my-4">
              <table className="min-w-full border border-gray-300">
                <thead>
                  <tr className="bg-gray-200">
                    {section.table.headers.map((header, i) => (
                      <th key={i} className="px-4 py-2 border border-gray-300">
                        {header}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {section.table.rows.map((row, i) => (
                    <tr key={i}>
                      {row.map((cell, j) => (
                        <td
                          key={j}
                          className="px-4 py-2 border border-gray-300"
                        >
                          {cell}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </section>
      ))}
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/help/page.jsx =====
"use client";
import React, { useEffect, useState, useRef } from "react";
import Footer from "@/components/common/footer/Footer";
import Head from "next/head";
import Link from "next/link";
// Import icons from Font Awesome (ensure this library is installed)
import {
  FaShoppingCart,
  FaCreditCard,
  FaClipboardList,
  FaList,
  FaSearch,
  FaTimes,
} from "react-icons/fa";

// A card skeleton matching the featured/search card style
const CardSkeleton = () => (
  <div className="animate-pulse p-4 bg-white rounded shadow">
    <div className="h-6 bg-gray-300 rounded w-5/6 mb-2"></div>
    <div className="h-4 bg-gray-300 rounded w-full mb-2"></div>
    <div className="h-3 bg-gray-300 rounded w-4/6"></div>
  </div>
);

export default function Shopping() {
  // For featured articles (when no search query)
  const [posts, setPosts] = useState(null);
  const [loading, setLoading] = useState(true);

  // Search states
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceTimeout = useRef(null);
  // Controls if the floating search panel is shown (when input focused)
  const [isFocused, setIsFocused] = useState(false);

  // Fetch featured articles on mount (only used when searchQuery is empty)
  useEffect(() => {
    fetch("https://media.upfrica.com/api/helpblogs/")
      .then((res) => res.json())
      .then((data) => {
        setPosts(data);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Fetch error:", error);
        setLoading(false);
      });
  }, []);

  // Debounced effect for search
  useEffect(() => {
    // Clear the previous debounce timeout if it exists
    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);

    // If there is no query, clear any search results
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    // Set a new debounce: 400ms delay
    debounceTimeout.current = setTimeout(() => {
      const encodedQuery = encodeURIComponent(searchQuery.trim());
      fetch(`https://media.upfrica.com/api/helpblogs/search/?q=${encodedQuery}`)
        .then((response) => response.json())
        .then((data) => {
          setSearchResults(data);
          setSearchLoading(false);
        })
        .catch((error) => {
          console.error("Search fetch error:", error);
          setSearchLoading(false);
        });
    }, 400);

    return () => clearTimeout(debounceTimeout.current);
  }, [searchQuery]);

  const stripHtml = (html) => {
    if (!html) return "";
    return html.replace(/<[^>]*>?/gm, "");
  };

  return (
    <>
      <Head>
        <title>Help Center - Shopping on Upfrica</title>
        <meta
          name="description"
          content="Explore help articles and support on shopping and gifting on Upfrica."
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className="min-h-screen bg-gray-50 text-gray-900 relative">
        {/* Header with background image and dark overlay */}
        <header
          style={{
            backgroundImage:
              'url("https://images.pexels.com/photos/6214476/pexels-photo-6214476.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2")',
            backgroundSize: "cover",
            backgroundPosition: "center",
          }}
          className="relative text-white pt-8 pb-4"
        >
          <div className="absolute inset-0 bg-black opacity-30"></div>
          <div className="relative container mx-auto px-4 flex flex-col sm:flex-row items-center justify-between">
            <a href="#content" className="sr-only">
              Skip to content
            </a>
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <img
                  src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp"
                  alt="Upfrica Logo"
                  className="h-10"
                />
              </Link>
            </div>
            <div className="hidden lg:block">
              <Link href="/login" className="inline-block">
                <button className="border border-white rounded-full px-3 py-1">
                  Sign in
                </button>
              </Link>
            </div>
          </div>
          {/* Hero Banner with search */}
          <section className="relative text-center mt-8 p-2 mb-8">
            <h1 className="text-4xl font-semibold text-white mb-4">
              How can we help?
            </h1>
            <div className="max-w-lg mx-auto relative">
              <div className="relative">
                <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="search"
                  placeholder="Type your question"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onFocus={() => setIsFocused(true)}
                  onBlur={() => {
                    // Delay closing so clicks on the panel are registered
                    setTimeout(() => setIsFocused(false), 150);
                  }}
                  className="w-full pl-10 pr-10 py-3 rounded-full border border-violet-700 focus:outline-none focus:ring-2 focus:ring-violet-700 text-gray-500"
                />
              </div>
              {/* Floating search results panel */}
              {isFocused && searchQuery.trim() && (
                <div className="absolute z-20 left-0 right-0 mt-2 bg-white rounded shadow-lg p-4 max-h-96 overflow-y-auto">
                  {searchLoading ? (
                    // Render a grid of skeleton loaders
                    <div className="grid grid-cols-1  gap-4">
                      {Array.from({ length: 6 }).map((_, i) => (
                        <CardSkeleton key={i} />
                      ))}
                    </div>
                  ) : (
                    <>
                      {searchResults && searchResults.length > 0 ? (
                        <div className="grid grid-cols-1  gap-4">
                          {searchResults.map((post) => (
                            <Link key={post.id} href={`/help/${post.slug}/`}>
                              <div className="block p-4 bg-white rounded shadow hover:shadow-lg transition">
                                <h3 className="text-lg font-bold text-gray-900 mb-2 text-left">
                                  {post.title}
                                </h3>
                                <p className="text-gray-700 text-left">
                                  {post.summary.length > 150
                                    ? post.summary.substring(0, 150) + "..."
                                    : post.summary}
                                </p>
                              </div>
                            </Link>
                          ))}
                        </div>
                      ) : (
                        <p className="p-4 text-center text-gray-400">
                          No results found.
                        </p>
                      )}
                    </>
                  )}
                </div>
              )}
            </div>
          </section>
        </header>

        {/* Navigation Tabs */}
        <nav className="bg-white border-b">
          <div className="container mx-auto px-4">
            <div className="flex justify-center space-x-4">
              <button className="flex items-center px-4 py-2 text-violet-700 font-bold border-b-2 border-violet-700 rounded-t-none">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.4 5.6a1 1 0 00.99 1.4h12.82a1 1 0 00.99-1.4L17 13M7 13l4-8"
                  />
                </svg>
                Shopping on Upfrica
              </button>
              <button className="flex items-center px-3 py-1 text-gray-600 hover:text-violet-700 rounded-t-none border-b">
                Selling with Upfrica
              </button>
            </div>
          </div>
        </nav>

        {/* Main Content */}
        <section className="mb-12 container mx-auto px-4 py-8">
          {/* If no search query, show featured articles */}
          {
            <>
              <h2 className="text-2xl font-semibold text-center mb-8">
                Featured articles
              </h2>
              {loading ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  {Array.from({ length: 6 }).map((_, i) => (
                    <CardSkeleton key={i} />
                  ))}
                </div>
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  {posts &&
                    posts.length > 0 &&
                    posts.map((post) => (
                      <Link key={post.id} href={`/help/${post.slug}/`}>
                        <div className="block p-4 bg-white rounded shadow hover:shadow-lg transition">
                          <h3 className="text-lg font-bold text-gray-900 mb-2">
                            {post.title}
                          </h3>
                          <p className="text-gray-700">
                            {stripHtml(
                              post.summary.length > 150
                                ? post.summary.substring(0, 150) + "..."
                                : post.summary,
                            )}
                          </p>
                        </div>
                      </Link>
                    ))}
                </div>
              )}
            </>
          }
        </section>

        {/* Additional Call-to-Actions */}
        <section className="bg-gray-100 py-8">
          <div className="container mx-auto px-4 text-center">
            <h2 className="text-2xl font-semibold mb-4">
              Didn't find what you needed? Try these.
            </h2>
            <div className="flex flex-col md:flex-row justify-center items-center space-y-4 md:space-y-0 md:space-x-4 mb-6">
              <a
                href="https://www.Upfrica.com/your/purchases?ref=enhc"
                target="_blank"
                rel="noopener noreferrer"
              >
                <button className="bg-violet-700 text-white px-4 py-2 rounded-full">
                  Help with an order
                </button>
              </a>
              <a
                id="contact-us-link"
                href="https://www.Upfrica.com/help/contact?ref=enhc"
                target="_blank"
                rel="noopener noreferrer"
              >
                <button className="bg-transparent border border-violet-700 text-violet-700 px-4 py-2 rounded-full">
                  Contact Upfrica Support
                </button>
              </a>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div>
                <a
                  href="https://www.Upfrica.com/legal?ref=enhc"
                  className="text-violet-600 hover:underline"
                >
                  Read our Policies
                </a>
                <p className="text-gray-600">
                  Get the ins and outs of buying and selling on Upfrica
                </p>
              </div>
              <div>
                <a
                  href="https://community.Upfrica.com/t5/Upfrica-Forums/ct-p/forums"
                  className="text-violet-600 hover:underline"
                >
                  Ask in the forums
                </a>
                <p className="text-gray-600">
                  Learn from our large and knowledgeable community
                </p>
              </div>
              <div>
                <a
                  href="https://www.Upfrica.com/blog?ref=hc_Upfrica_journal"
                  className="text-violet-600 hover:underline"
                >
                  Check out the Upfrica Journal
                </a>
                <p className="text-gray-600">
                  Explore ideas and inspiration for creative living
                </p>
              </div>
            </div>
          </div>
        </section>

        {/* Shop on Upfrica Categories */}
        <section className="mb-12 container mx-auto px-4 py-8">
          <h2 className="text-2xl font-semibold text-center mb-8">
            Shop on Upfrica
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div className="flex items-start p-4 bg-white shadow hover:shadow-lg transition">
              <FaShoppingCart className="w-12 h-12 mr-4" />
              <div>
                <h3 className="text-lg font-bold mb-2">
                  <a
                    href="https://help.Upfrica.com/hc/en-us/sections/360003399734-Buying-on-Upfrica?segment=shopping#360003399734"
                    className="hover:underline text-gray-900"
                  >
                    Buying on Upfrica
                  </a>
                </h3>
                <ul className="text-sm text-gray-700 space-y-1">
                  <li>
                    <a
                      href="https://help.Upfrica.com/hc/en-us/sections/360000067287-Shopping-Gifting?segment=shopping#360000067287"
                      className="hover:underline"
                    >
                      Shopping &amp; Gifting
                    </a>
                  </li>
                  <li>
                    <a
                      href="https://help.Upfrica.com/hc/en-us/sections/360000067207-Searching-for-Items?segment=shopping#360000067207"
                      className="hover:underline"
                    >
                      Searching for Items
                    </a>
                  </li>
                  <li>
                    <a
                      href="https://help.Upfrica.com/hc/en-us/sections/360000066488-Buying-Safely?segment=shopping#360000066488"
                      className="hover:underline"
                    >
                      Buying Safely
                    </a>
                  </li>
                </ul>
              </div>
            </div>
            <div className="flex items-start p-4 bg-white shadow hover:shadow-lg transition">
              <FaCreditCard className="w-12 h-12 mr-4" />
              <div>
                <h3 className="text-lg font-bold mb-2">
                  <a
                    href="https://help.Upfrica.com/hc/en-us/sections/360003399714-Cart-Payment?segment=shopping#360003399714"
                    className="hover:underline text-gray-900"
                  >
                    Cart &amp; Payment
                  </a>
                </h3>
                <ul className="text-sm text-gray-700 space-y-1">
                  <li>
                    <a
                      href="https://help.Upfrica.com/hc/en-us/sections/13078880245655-Using-Gift-Cards-Coupons?segment=shopping#13078880245655"
                      className="hover:underline"
                    >
                      Using Gift Cards &amp; Coupons
                    </a>
                  </li>
                  <li>
                    <a
                      href="https://help.Upfrica.com/hc/en-us/sections/13078841132439-Taxes-Customs-Fees?segment=shopping#13078841132439"
                      className="hover:underline"
                    >
                      Taxes &amp; Customs Fees
                    </a>
                  </li>
                  <li>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/help-draft/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { CiEdit } from "react-icons/ci";
import { MdDelete } from "react-icons/md";

const convertToDaysAgo = (isoDate) => {
  // Parse the ISO date string to a Date object
  const pastDate = new Date(isoDate);
  const currentDate = new Date();

  // Calculate the difference in milliseconds
  const diffMs = currentDate - pastDate;
  // Convert milliseconds to days
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

  // Return "today" if it occurred within the same day, else return days ago.
  if (diffDays === 0) {
    return "today";
  }

  return `${diffDays} day${diffDays === 1 ? "" : "s"} ago`;
};

const HelpBlogDrafts = () => {
  const [drafts, setDrafts] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch the help blog drafts on mount
  useEffect(() => {
    const fetchDrafts = async () => {
      try {
        const headers = new Headers();
        headers.append("Authorization", "Token aSJ36UapeFH5YARFamDTYhnJ");

        const requestOptions = {
          method: "GET",
          headers,
          redirect: "follow",
        };

        const response = await fetch(
          "https://media.upfrica.com/api/admin/helpblogs/drafts/",
          requestOptions,
        );
        const data = await response.json();
        // Assuming the drafts are in data.results; adjust if the API returns a different structure
        setDrafts(data?.results || data);
      } catch (error) {
        console.error("Error fetching drafts:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchDrafts();
  }, []);

  // Publish a draft using a PATCH call
  const publishDraft = async (id) => {
    try {
      const headers = new Headers();
      headers.append("Authorization", "Token aSJ36UapeFH5YARFamDTYhnJ");
      headers.append("Content-Type", "application/json");

      const raw = JSON.stringify({ status: "published" });

      const requestOptions = {
        method: "PATCH",
        headers,
        body: raw,
        redirect: "follow",
      };

      const url = `https://media.upfrica.com/api/admin/helpblogs/${id}/publish/`;
      const response = await fetch(url, requestOptions);
      if (!response.ok) {
        throw new Error(`Server responded with status ${response.status}`);
      }

      window.alert(`Draft with id ${id} published successfully!`);
      setDrafts((prevDrafts) => prevDrafts.filter((draft) => draft.id !== id));
    } catch (error) {
      console.error("Error publishing draft:", error);
      window.alert(`Error publishing draft: ${error.message}`);
    }
  };

  // Delete a draft using a DELETE call
  const deleteDraft = async (id) => {
    try {
      const headers = new Headers();
      headers.append("Authorization", "Token aSJ36UapeFH5YARFamDTYhnJ");

      const requestOptions = {
        method: "DELETE",
        headers,
        body: "",
        redirect: "follow",
      };

      const url = `https://media.upfrica.com/api/admin/helpblogs/${id}/`;
      const response = await fetch(url, requestOptions);
      if (!response.ok) {
        throw new Error(`Server responded with status ${response.status}`);
      }

      window.alert(`Draft with id ${id} deleted successfully!`);
      setDrafts((prevDrafts) => prevDrafts.filter((draft) => draft.id !== id));
    } catch (error) {
      console.error("Error deleting draft:", error);
      window.alert(`Error deleting draft: ${error.message}`);
    }
  };

  // Render animated skeleton loader rows while drafts are being fetched
  const renderSkeletonRows = () => {
    return Array.from({ length: 5 }, (_, index) => (
      <tr key={index} className="text-base tracking-wide animate-pulse">
        <td className="border border-gray-300 px-6 py-2 md:py-8 bg-gray-300">
          &nbsp;
        </td>
        <td className="border border-gray-300 px-4 bg-gray-300">
          <div className="flex flex-col gap-2">
            <div className="w-24 h-8 bg-gray-200 rounded-lg"></div>
            <div className="w-24 h-8 bg-gray-200 rounded-lg"></div>
          </div>
        </td>
        <td className="border border-gray-300 px-6 py-4 bg-gray-300">
          <div className="space-y-2">
            <div className="w-3/4 h-4 bg-gray-200 rounded"></div>
            <div className="w-1/2 h-4 bg-gray-200 rounded"></div>
            <div className="w-2/3 h-4 bg-gray-200 rounded"></div>
            <div className="w-1/3 h-4 bg-gray-200 rounded"></div>
          </div>
        </td>
      </tr>
    ));
  };

  return (
    <div className="overflow-x-auto container mx-auto p-4 lg:p-10 bg-white shadow-lg rounded-md">
      <header className="mb-6 flex justify-between items-center">
        <h1 className="text-2xl font-bold text-center">Help Blog Drafts</h1>
        <Link href="/" className="text-blue-500 hover:underline">
          Back to Home
        </Link>
      </header>
      <table className="min-w-full table-auto border-collapse border border-gray-300">
        <thead className="bg-gray-200 text-xl font-bold">
          <tr>
            <th className="border border-gray-300 px-6 py-3 lg:w-1/12 text-left text-gray-700">
              ID
            </th>
            <th className="border border-gray-300 px-6 py-3 lg:w-3/12 text-left text-gray-700">
              Actions
            </th>
            <th className="border border-gray-300 px-6 py-3 lg:w-8/12 text-left text-gray-700">
              Details
            </th>
          </tr>
        </thead>
        <tbody>
          {loading ? (
            renderSkeletonRows()
          ) : drafts.length === 0 ? (
            <tr>
              <td
                colSpan="3"
                className="border border-gray-300 px-6 py-4 text-center text-base"
              >
                No drafts available.
              </td>
            </tr>
          ) : (
            drafts.map((draft) => (
              <tr key={draft.id} className="text-base tracking-wide">
                <td className="border border-gray-300 px-6 py-2 md:py-8">
                  {draft.id}
                </td>
                <td className="border border-gray-300 px-4">
                  <div className="flex flex-col gap-2">
                    {/* Publish Button */}
                    <button
                      onClick={() => publishDraft(draft.id)}
                      className="px-4 py-2 bg-blue-500 text-white rounded shadow-md hover:bg-blue-600 transition-all duration-300"
                    >
                      Publish
                    </button>
                    {/* Delete Button */}
                    <button
                      onClick={() => deleteDraft(draft.id)}
                      className="px-4 py-2 bg-red-500 text-white rounded shadow-md hover:bg-red-600 transition-all duration-300"
                    >
                      Delete
                    </button>
                  </div>
                </td>
                <td className="border border-gray-300 px-6 py-4">
                  <div className="space-y-2">
                    <h2 className="text-xl font-semibold">{draft.title}</h2>
                    <p>{draft.summary}</p>
                    <p className="text-sm text-gray-600">
                      Status: {draft.status}
                    </p>
                    <p className="text-xs text-gray-500">
                      Created :{convertToDaysAgo(draft?.created_at)}
                    </p>
                  </div>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
};

export default HelpBlogDrafts;


===== src/app/(pages)/login/page.jsx =====
// app/login/page.tsx
"use client";

import React, { useEffect } from "react";
import LoginForm from "@/components/auth/LoginForm";
import Image from "next/image";
import logo from "@/public/images/logo.png";
import signinImage from "../../image/signin.svg";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import LocalStorageComponent from "@/components/LocalStorageComponent";

const LoginPage = () => {
  const { user, hydrated, refreshUser } = useAuth();
  const router = useRouter();

  const token =
    typeof window !== "undefined" ? localStorage.getItem("token") : null;

  // üß™ DEBUG: Show token on initial load
  useEffect(() => {
    if (token) {
      console.log("üß™ Token in localStorage:", token);
    }
  }, [token]);

  // ‚úÖ Automatically refresh user if token exists but no user is loaded yet
  useEffect(() => {
    if (token && !user && hydrated) {
      console.log("üîÑ Token found but no user. Attempting to refresh...");
      refreshUser();
    }
  }, [token, user, hydrated, refreshUser]);

  // ‚úÖ Redirect if already logged in and hydrated
  useEffect(() => {
    if (hydrated && user) {
      console.log("‚úÖ Authenticated, redirecting to /new-dashboard...");
      router.push("/new-dashboard"); // üß≠ Destination after login
    }
  }, [hydrated, user, router]);

  // ‚è≥ Optionally hide page while redirecting
  if (hydrated && user) return null;

  return (
    <div className="max-w-screen-2xl flex justify-center items-center mx-auto lg:p-10 min-h-screen">
      <div className="bg-white container grid lg:grid-cols-2 py-10 lg:px-20 shadow-xl border rounded-md">
        {/* Image Column */}
        <div className="col-span-1 order-2 lg:order-1 flex justify-center items-center p-2 lg:p-4">
          <LocalStorageComponent />
          <Image
            className="h-80 sm:h-full"
            src={signinImage}
            alt="Welcome to Upfrica Login"
            width={500}
            height={500}
            priority
          />

          {token && (
            <div className="text-xs text-green-600 mt-2">
              üîê Token exists in localStorage
            </div>
          )}
        </div>

        {/* Form Column */}
        <div className="col-span-1 order-1 lg:order-2 lg:p-4">
          <div className="text-center space-y-4">
            {/* Logo */}
            <div className="flex justify-center">
              <Image
                className="h-10 lg:h-14 mx-auto"
                src={logo}
                alt="Upfrica Logo"
                width={140}
                height={56}
                priority
              />
            </div>

            {/* Sign-up link */}
            <p className="text-base">
              Don‚Äôt have an account?{" "}
              <Link href="/register">
                <span className="text-purple-500 hover:underline">
                  Sign up here
                </span>
              </Link>
            </p>

            {/* Login Form */}
            <LoginForm />

            {/* Footer */}
            <p className="text-gray-500 text-sm mt-4">
              ¬© {new Date().getFullYear()} Upfrica. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;

===== src/app/(pages)/multi_page/page.jsx =====
import BulkEditMenu from "@/components/multi_page/BulkEditMenu";
import DraftTable from "@/components/multi_page/DraftTable";
import Header from "@/components/multi_page/Header";

export default function App() {
  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <main className="p-6 space-y-4">
        <BulkEditMenu />
        <DraftTable />
        <div className="flex justify-end gap-2 mt-4">
          <button className="bg-gray-300 px-4 py-2 rounded">
            Save for later
          </button>
          <button className="bg-blue-600 text-white px-4 py-2 rounded">
            Submit (1)
          </button>
        </div>
      </main>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/add-new-product/[id]/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default layout;


===== src/app/(pages)/new-dashboard/add-new-product/[id]/page.jsx =====
"use client";
import React, { useEffect, useState } from "react";
import { FaMinus, FaPencilAlt, FaPlus } from "react-icons/fa";
import { IoMdNotifications, IoMdPhotos } from "react-icons/io";
// import { IoMdNotifications } from "react-icons/io";
import { useFormik } from "formik";
import Categore from "@/components/input/Categore";
import Conditon from "@/components/input/Conditon";
import Brand from "@/components/input/Brand";
import Title from "@/components/input/Title";
import Description from "@/components/input/Description";
import Photo from "@/components/input/Photo";
import SubmitButton from "@/components/input/SubmitButton";
import useCategories from "@/components/api/data";

const NewProduct = ({ params }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [produt, setProduct] = useState();
  const [categorie, setCategorie] = useState([]);
  const [condition, setCondition] = useState([]);

  const { id } = params || {}; // Safely destructure id

  const { categories, conditions } = useCategories();
  // console.log("Categories from useCategories:", categories); // ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ö‡ßç‡¶õ‡ßá

  useEffect(() => {
    setCategorie(categories);
    setCondition(condition);
  }, [categories, conditions]);

  useEffect(() => {
    const fetchProduct = async () => {
      setLoading(true);
      try {
        const user = JSON.parse(localStorage.getItem("user"));
        const token = user?.token;

        if (!token) {
          console.error("User is not authenticated");
          setLoading(false);
          return;
        }

        const myHeaders = new Headers();
        // myHeaders.append("Authorization", `Bearer ${token}`);

        const response = await fetch(
          `https://media.uprica.com/api/products/${id}`,
          {
            method: "GET",
            headers: myHeaders,
          },
        );

        if (!response.ok) {
          throw new Error("Failed to fetch product");
        }

        const data = await response.json();
        console.log(data);
        setProduct(data);

        // Matching category with product's category_id
        const matchedCategory = categories.find(
          (category) => category.id === data.category_id,
        );
        const matchedCondition = conditions.find(
          (condition) => condition.id === data.condition_id,
        );

        // Formik ‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü category_name ‡¶è matchedCategory.name ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        formik.setValues({
          title: data?.title || "",
          description: data?.description?.body || "",
          product_quantity: data?.product_quantity || 1,
          price_cents: data?.price_cents || 1,
          sale_price_cents: data?.sale_price_cents || 0,
          postage_fee_cents: data?.postage_fee_cents || 0,
          secondary_postage_fee_cents: data?.secondary_postage_fee_cents || 0,
          price_currency: data?.price_currency || "GHS",
          status: data?.status || "",
          category_name: matchedCategory ? matchedCategory.name : "", // Set category name if matched
          condition_name: matchedCondition ? matchedCondition.name : "",
        });

        setLoading(false);
      } catch (error) {
        console.error("Error fetching product:", error);
        setLoading(false);
      }
    };

    if (id) {
      fetchProduct();
    }
  }, [id, categories]);

  const formik = useFormik({
    initialValues: {
      title: "",
      description: "",
      product_quantity: 1,
      price_cents: 1,
      sale_price_cents: 0,
      postage_fee_cents: 0,
      secondary_postage_fee_cents: 0,
      price_currency: "GHS",
      status: "",
      category_name: "",
      condition_name: "",
    },
    enableReinitialize: true,
    onSubmit: async (values) => {
      setLoading(true);
      try {
        const user = JSON.parse(localStorage.getItem("user"));
        const token = user?.token;

        if (!token) {
          console.error("User is not authenticated");
          setLoading(false);
          return;
        }

        const myHeaders = new Headers();
        myHeaders.append("Authorization", `Bearer ${token}`);
        myHeaders.append("Content-Type", "application/json");

        console.log(values);

        const response = await fetch(
          `https://upfrica-staging.herokuapp.com/api/v1/products/${id}`,
          {
            method: "PATCH",
            headers: myHeaders,
            body: JSON.stringify({
              product: {
                title: values?.title,
                description: values?.description,
                product_quantity: values?.product_quantity,
                price_cents: values?.price_cents,
                sale_price_cents: values?.sale_price_cents,
                postage_fee_cents: values?.postage_fee_cents,
                secondary_postage_fee_cents:
                  values?.secondary_postage_fee_cents,
                price_currency: values?.price_currency,
                status: values?.status,
                category_id:
                  categories.find((cat) => cat.name === values.category_name)
                    ?.id || null,
                condition_id:
                  conditions.find((cond) => cond.name === values.condition_name)
                    ?.id || null,
              },
            }),
          },
        );

        if (!response.ok) {
          throw new Error("Failed to update product");
        }

        const updatedProduct = await response.json();
        console.log("Product updated successfully:", updatedProduct);
        alert("Product updated successfully!");
      } catch (error) {
        console.error("Error updating product:", error);
        alert("Failed to update product");
      } finally {
        setLoading(false);
      }
    },
  });

  const toggleForm = (e) => {
    e.preventDefault();
    setIsOpen(!isOpen);
  };

  return (
    <div className="flex justify-center pt-5 md:pt-20 bg-slate-50 px-2 md:px-4">
      <form
        onSubmit={formik.handleSubmit}
        className="w-full lg:w-3/5 2xl:w-1/2 py-5"
      >
        <div className="text-center space-y-4 py-5">
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-wide">
            Add New Listing
          </h1>
          <p className="flex items-center justify-center space-x-2 text-[#0063d1]">
            <span className="text-base">
              *Your location: , Dhaka, Bangladesh{" "}
            </span>
            <span>
              <FaPencilAlt />
            </span>
          </p>
        </div>
        <div className="space-y-4">
          {/* Homepage Positions section  */}
          <div className="p-4 bg-white shadow-md rounded-xl">
            <h1 className="text-2xl font-bold mb-4">
              Homepage Positions (Admin)
            </h1>
            <hr className="py-2" />

            {/* Positions with checkbox */}
            <div className="mb-4 text-base font-bold">
              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 1</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 2</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 3</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 4</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 5</p>
              </div>
            </div>

            {/* Bulk */}
            <div className="mb-4">
              <p className="font-bold">Bulk?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="bulk"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="bulk"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>

            {/* Available Promo */}
            <div className="mb-4">
              <p className="font-bold">Available Promo?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="available_promo"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="available_promo"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>

            {/* Preorder Promo */}
            <div className="mb-4">
              <p className="font-bold">Preorder Promo?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="preorder_promo"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="preorder_promo"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>

            {/* Promoted */}
            <div className="mb-4">
              <p className="font-bold">Promoted?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="promoted"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="promoted"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>
          </div>

          {/* Admin Inputs section  */}

          <div className="p-4 bg-white shadow-md rounded-xl">
            {/* Header Section */}
            <div className="flex items-center justify-between text-base font-bold">
              {/* Centered Content */}
              <div className="flex items-center justify-center space-x-2 flex-grow">
                <span>
                  <IoMdNotifications />
                </span>
                <span>Admin Inputs</span>
              </div>

              {/* Arrow Button on Right */}
              <button onClick={toggleForm} className="ml-4 focus:outline-none">
                {isOpen ? <FaMinus /> : <FaPlus />}
              </button>
            </div>

            {/* Toggling Form */}
            {isOpen && (
              <div className="p-4">
                <h1 className="text-2xl font-bold mb-4">
                  Supplier Information
                </h1>

                <form className="space-y-4 text-base text-[#3c4858] ">
                  {/* Supplier Links */}
                  <div>
                    <label className="block  font-bold mb-2">
                      Supplier Link or GPS*
                    </label>
                    <input
                      id="supplierLink"
                      name="supplierLink"
                      type="text"
                      placeholder="Link"
                      onChange={formik.handleChange}
                      value={formik.values.supplierLink}
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    />
                  </div>

                  {/*Backup Supplier Links */}
                  <div>
                    <label className="block  font-bold mb-2">
                      Backup Supplier Link
                    </label>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/add-new-product/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import {
  FaMinus,
  FaPencilAlt,
  FaPlus,
  FaArrowLeft,
  FaListAlt,
} from "react-icons/fa";
import { IoMdNotifications } from "react-icons/io";
import { BASE_API_URL } from "@/app/constants";
import { AiOutlineCheckCircle, AiOutlineCloseCircle } from "react-icons/ai";
import { useFormik } from "formik";
import Title from "@/components/input/Title";
import Description from "@/components/input/Description";
import Categore from "@/components/input/Categore";
import Conditon from "@/components/input/Conditon";
import Photo from "@/components/input/Photo";
import Brand from "@/components/input/Brand";
import { useSelector } from "react-redux";
import PriceSection from "@/components/input/PriceSection";
import Promotions from "@/components/input/Promotions";
import DeliverySection from "@/components/input/DeliverySection";
import CancellationReturns from "@/components/input/CancellationReturns";
import ApprovalNotesSelect from "@/components/input/ApprovalNotesSelect";
import { useRouter } from "next/navigation";
import Link from "next/link";

const AddNewProducts = () => {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // Collapsible panels
  const [positionsOpen, setPositionsOpen] = useState(false);
  const [isOpen, setIsOpen] = useState(false);

  // Selected images from Photo component
  const [selectedImages, setSelectedImages] = useState([]);

  // Popup state
  const [popupVisible, setPopupVisible] = useState(false);
  const [popupMessage, setPopupMessage] = useState("");
  const [popupSuccess, setPopupSuccess] = useState(false);

  const togglePositions = (e) => {
    e.preventDefault();
    setPositionsOpen((open) => !open);
  };
  const toggleForm = (e) => {
    e.preventDefault();
    setIsOpen((open) => !open);
  };

  const formik = useFormik({
    initialValues: {
      title: "",
      description: "",
      product_quantity: 1,
      price_cents: "0",
      on_sales: "no",
      sale_price_cents: 0,
      sale_start_date: "",
      sale_end_date: "",
      postage_fee_cents: 0,
      secondary_postage_fee_cents: 0,
      price_currency: "GHS",
      status: "",
      multi_buy: false,
      multi_buy_tiers: [{}],
      supplierLink: "",
      backupSupplier: "",
      supplerName: "",
      supplerNumber: "",
      productPrice: "",
      vPrice: "",
      Vshipping: "",
      L: "",
      W: "",
      H: "",
      CBM: "",
      rate: "",
      cmb: "",
      shoppingCost: "",
      productCost: "",
      totalCost: "",
      cancellable: false,
      cancellationWindowHours: 2,
      sellerResponseSLA: "24h",
      denyIfShippedOrCustom: false,
      autoCancelUnpaidHours: 48,
      abuseFlagThreshold: 5,
      approval_notes: "",
    },
    onSubmit: async (values) => {
      const formData = new FormData();
      // Primary fields
      formData.append("title", values.title);
      formData.append("description", values.description);
      formData.append("product_quantity", values.product_quantity.toString());
      formData.append("price_cents", values.price_cents);
      formData.append("price_currency", values.price_currency);
      formData.append("user_id", user?.user?.id);
      formData.append("brand", values.brand);
      formData.append("category", values.category);
      formData.append("condition", values.condition);
      // Sale fields
      if (values.on_sales === "yes") {
        formData.append("on_sales", values.on_sales);
        formData.append("sale_price_cents", values.sale_price_cents.toString());
        formData.append("sale_price_currency", values.price_currency);
        formData.append("sale_start_date", values.sale_start_date);
        formData.append("sale_end_date", values.sale_end_date);
      }
      // Postage fees
      formData.append("postage_fee_cents", values.postage_fee_cents.toString());
      formData.append("postage_fee_cents_currency", values.price_currency);
      formData.append(
        "secondary_postage_fee_cents",
        values.secondary_postage_fee_cents.toString(),
      );
      formData.append(
        "secondary_postage_fee_cents_currency",
        values.price_currency,
      );
      // Multi-buy
      if (values.multi_buy === "yes") {
        formData.append("multi_buy", values.multi_buy);
        formData.append(
          "multi_buy_tiers",
          JSON.stringify(values.multi_buy_tiers),
        );
      }
      // Approval notes
      formData.append("approval_notes", values.approval_notes);
      // Cancellation policy
      let cancel = values.cancellable ? "yes" : "no";
      formData.append("cancellable", cancel);
      const cancellationPolicy = {
        cancellable: values.cancellable,
        cancellationWindowHours: values.cancellationWindowHours,
        sellerResponseSLA: values.sellerResponseSLA,
        denyIfShippedOrCustom: values.denyIfShippedOrCustom,
        autoCancelUnpaidHours: values.autoCancelUnpaidHours,
        abuseFlagThreshold: values.abuseFlagThreshold,
      };
      formData.append(
        "cancellation_policy",
        cancel === "no" ? "" : JSON.stringify(cancellationPolicy),
      );
      // Supplier fields
      formData.append("supplierLink", values.supplierLink);
      formData.append("backupSupplier", values.backupSupplier);
      formData.append("supplerName", values.supplerName);
      formData.append("supplerNumber", values.supplerNumber);
      formData.append("productPrice", values.productPrice);
      formData.append("vPrice", values.vPrice);
      formData.append("Vshipping", values.Vshipping);
      formData.append("L", values.L);
      formData.append("W", values.W);
      formData.append("H", values.H);
      formData.append("CBM", values.CBM);
      formData.append("rate", values.rate);
      formData.append("cmb", values.cmb);
      formData.append("shoppingCost", values.shoppingCost);
      formData.append("productCost", values.productCost);
      formData.append("totalCost", values.totalCost);
      // Images
      selectedImages.forEach((img, idx) =>
        formData.append(
          "images",
          img.file,
          img.file.name || `image_${idx}.png`,
        ),
      );

      // API request
      const headers = new Headers();
      headers.append("Authorization", `Token ${token}`);
      try {
        const response = await fetch(`${BASE_API_URL}/api/product/create/`, {
          method: "POST",
          headers,
          body: formData,
        });
        const result = await response.json();
        if (response.ok) {
          setPopupMessage("Product created successfully!");
          setPopupSuccess(true);
        } else {
          setPopupMessage(result.error || "Failed to create product.");
          setPopupSuccess(false);
        }
      } catch (err) {
        setPopupMessage("An error occurred while creating the product.");
        setPopupSuccess(false);
      } finally {
        setPopupVisible(true);
      }
    },
  });

  return (
    <div className="flex justify-center md:pt-20 bg-slate-50 px-2 md:px-4">
      <form onSubmit={formik.handleSubmit} className="w-full lg:max-w-5xl py-5">
        {/* Page Title */}
        <div className="text-center space-y-4 pb-10">
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-wide">
            Add New Listing
          </h1>
        </div>

        {/* Homepage Positions (Admin) */}
        <div className="p-4 bg-white shadow-md rounded-xl mb-4">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center space-x-2">
              <IoMdNotifications />
              <h1 className="text-base font-bold">
                Homepage Positions (Admin)
              </h1>
            </div>
            <button onClick={togglePositions} className="focus:outline-none">
              {positionsOpen ? <FaMinus /> : <FaPlus />}
            </button>
          </div>
          {positionsOpen && (
            <>
              <hr className="py-2" />
              {/* Positions */}
              <div className="mb-4 text-base font-bold">
                {[1, 2, 3, 4, 5].map((pos) => (
                  <div key={pos} className="flex items-center mb-2">
                    <input type="checkbox" className="mr-2 rounded" />
                    <p>Add to position {pos}</p>
                  </div>
                ))}
              </div>
              {/* Bulk? */}
              <div className="mb-4">
                <p className="font-bold">Bulk?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="bulk"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
              {/* Available Promo? */}
              <div className="mb-4">
                <p className="font-bold">Available Promo?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="available_promo"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
              {/* Preorder Promo? */}
              <div className="mb-4">
                <p className="font-bold">Preorder Promo?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="preorder_promo"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
              {/* Promoted? */}
              <div className="mb-4">
                <p className="font-bold">Promoted?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="promoted"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
            </>
          )}
        </div>

        {/* Admin Inputs (Supplier) */}
        <div className="p-4 bg-white shadow-md rounded-xl mb-4">
          <div className="flex items-center justify-between text-base font-bold">
            <div className="flex items-center space-x-2">
              <IoMdNotifications />
              <span>Admin Inputs</span>
            </div>
            <button onClick={toggleForm} className="focus:outline-none">
              {isOpen ? <FaMinus /> : <FaPlus />}
            </button>
          </div>
          {isOpen && (
            <div className="p-4 space-y-4 text-base text-[#3c4858]">
              <h1 className="text-2xl font-bold mb-4">Supplier Information</h1>
              {/* Supplier fields (link, backup, name, phone) */}
              {[
                {
                  id: "supplierLink",
                  label: "Supplier Link or GPS*",
                  placeholder: "Link",
                },
                {
                  id: "backupSupplier",
                  label: "Backup Supplier Link",
                  placeholder: "2nd Supplier link",
                },
                {
                  id: "supplerName",
                  label: "Supplier Name",
                  placeholder: "Supplier Name",
                },
                {
                  id: "supplerNumber",
                  label: "Supplier Phone Number",
                  placeholder: "Supplier phone number",
                },
              ].map(({ id, label, placeholder }) => (
                <div key={id}>
                  <label className="block font-bold mb-2">{label}</label>
                  <input
                    id={id}
                    name={id}
                    type="text"
                    placeholder={placeholder}
                    onChange={formik.handleChange}
                    value={formik.values[id]}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2"
                  />
                </div>
              ))}

              {/* Product Costing */}
              <div>
                <p className="font-bold">Product Costing (USD)</p>
                <div className="flex items-center">
                  Price $
                  <input
                    id="productPrice"
                    name="productPrice"
                    type="text"
                    onChange={formik.handleChange}
                    value={formik.values.productPrice}
                    className="flex-1 px-3 py-2 border-none focus:ring-0"
                  />
                </div>
                <hr className="my-2" />
              </div>

              {/* Additional Costing Fields */}
              <div className="grid grid-cols-3 md:grid-cols-5 lg:grid-cols-7 gap-3">
                {[
                  { id: "vPrice", label: "Vprice ($)" },
                  { id: "Vshipping", label: "Vshipping" },
                  { id: "L", label: "L" },
                  { id: "W", label: "W" },
                  { id: "H", label: "H" },
                  { id: "CBM", label: "1CBM" },
                  { id: "rate", label: "Rate ($ to GHS)" },
                ].map(({ id, label }) => (
                  <div key={id}>
                    <label htmlFor={id} className="block text-center">
                      {label}
                      <input
                        id={id}
                        name={id}
                        type="text"
                        onChange={formik.handleChange}
                        value={formik.values[id]}
                        className="w-full px-3 py-2 border rounded-md text-center"
                      />
                    </label>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/affiliate/page.jsx =====
// src/app/(pages)/new-dashboard/affiliate/page.jsx
"use client";

import { useEffect } from "react";
import RoleGuard from "@/components/auth/RoleGuard";
import AffiliateDashboardHome from "@/components/new-dashboard/AffiliateDashboardHome";
import { useRoleView } from "@/contexts/RoleViewContext";

export default function AffiliateDashboardPage() {
  const { setRoleView } = useRoleView();

  useEffect(() => {
    setRoleView("affiliate");
  }, []);

  return (
    <RoleGuard allowed={["affiliate"]}>
      <AffiliateDashboardHome />
    </RoleGuard>
  );
}


===== src/app/(pages)/new-dashboard/affiliate/referrals/page.jsx =====
// src/app/new-dashboard/affiliate/referrals/page.jsx
"use client";

import React from "react";

export default function AffiliateReferralsPage() {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold">My Referrals</h1>
      <p>This is your referral dashboard.</p>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/agent/page.jsx =====
//src/app/(pages)/new-dashboard/agent/page.jsx
// src/app/(pages)/new-dashboard/agent/page.jsx
"use client";

import RoleGuard from "@/components/auth/RoleGuard";
import AgentDashboardHome from "@/components/new-dashboard/AgentDashboardHome";

export default function AgentDashboardPage() {
  return (
    <RoleGuard allowed={["agent"]}>
      <AgentDashboardHome />
    </RoleGuard>
  );
}


===== src/app/(pages)/new-dashboard/all-orders/[id]/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import DeliveryTracker from "../components/DeliveryTracker";
import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

export default function OrderDetailsPage() {
  const { id } = useParams();
  const token = useSelector((state) => state.auth.token);
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showFullInfo, setShowFullInfo] = useState(false);

  // modal + form state
  const [showDispatchModal, setShowDispatchModal] = useState(false);
  const [form, setForm] = useState({
    shipping_carrier: "",
    tracking_number: "",
    tracking_link: "",
    additional_info: "",
    // default dispatch time is now
    date_dispatched: new Date().toISOString().slice(0, 16),
    // 0 = not dispatched, 1 = dispatched
    dispatch_status: 0,
  });

  // fetch order
  useEffect(() => {
    if (!token || !id) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(
          `${BASE_API_URL}/api/seller/order-items/${id}/`,
          { headers: { Authorization: `Token ${token}` } },
        );
        if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  // whenever order loads, seed the dispatch form
  useEffect(() => {
    if (!order) return;
    setForm({
      shipping_carrier: order.shipping_carrier || "",
      tracking_number: order.tracking_number || "",
      tracking_link: order.tracking_link || "",
      additional_info: order.additional_info || "",
      // if already dispatched, show that time; otherwise default to now
      date_dispatched: order.date_dispatched
        ? new Date(order.date_dispatched).toISOString().slice(0, 16)
        : new Date().toISOString().slice(0, 16),
      dispatch_status: order.dispatch_status || 0,
    });
  }, [order]);

  const openModal = () => setShowDispatchModal(true);
  const closeModal = () => setShowDispatchModal(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({
      ...f,
      [name]: name === "dispatch_status" ? parseInt(value, 10) : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    // build payload
    const payload = {
      dispatch_status: form.dispatch_status,
      date_dispatched: new Date(form.date_dispatched).toISOString(),
      shipping_carrier: form.shipping_carrier,
      tracking_number: form.tracking_number,
      tracking_link: form.tracking_link,
      additional_info: form.additional_info,
    };
    try {
      const res = await fetch(`${BASE_API_URL}/api/seller/order-items/${id}/`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Token ${token}`,
        },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error(`Update failed: ${res.status}`);
      const updated = await res.json();
      setOrder(updated);
      closeModal();
    } catch (err) {
      console.error(err);
      alert("Failed to update dispatch info.");
    }
  };

  if (loading) return <div className="text-center p-6">Loading...</div>;
  if (!order)
    return <div className="text-center text-red-600 p-6">Order not found.</div>;

  const item = order;
  const product = order.product;

  return (
    <div className="bg-white shadow rounded-xl p-4 max-w-3xl mx-auto ">
      {/* Top Status Header */}
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-0 bg-gray-50 p-4 rounded-md">
        <div>
          <p className="text-green-700 font-bold text-lg">
            ‚úÖ {item?.dispatch_status === 1 ? "Dispatched" : "Processing"}
          </p>
          <div className="text-sm mt-1 text-gray-700">
            <p>
              <strong>Order #</strong> {String(order.id).padStart(6, "0")}
            </p>
            <p>
              <strong>Order date #</strong>{" "}
              {new Date(order.order_date).toLocaleString()}
            </p>
          </div>
        </div>

        <div className="flex flex-col sm:items-end sm:text-right">
          {/* dispatch tick mark (readonly) */}

          <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
            <button
              onClick={openModal}
              className="w-full sm:w-auto h-8 upfrica-btn-primary-outline-sm text-green-700"
            >
              Mark as Dispatch
            </button>
            {/* <button className="w-full sm:w-auto h-8 upfrica-btn-primary-outline-sm text-green-700">
              Write a review
            </button> */}
          </div>
        </div>
      </div>

      {/* Dispatch Modal */}
      {showDispatchModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <form
            onSubmit={handleSubmit}
            className="relative bg-white rounded-lg p-6 w-full max-w-md space-y-4"
          >
            {/* close icon */}
            <button
              type="button"
              onClick={closeModal}
              className="absolute top-2 right-2 text-2xl font-bold text-gray-500 hover:text-gray-700"
            >
              &times;
            </button>

            <h2 className="text-xl font-semibold">Dispatch Info</h2>

            {/* dispatch status options */}
            <div className="flex items-center gap-6">
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  name="dispatch_status"
                  value={0}
                  checked={form.dispatch_status === 0}
                  onChange={handleChange}
                  className="form-radio"
                />
                <span className="ml-2 text-sm">Not Dispatched</span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  name="dispatch_status"
                  value={1}
                  checked={form.dispatch_status === 1}
                  onChange={handleChange}
                  className="form-radio"
                />
                <span className="ml-2 text-sm">Dispatched</span>
              </label>
            </div>

            <div>
              <label className="block text-sm">Carrier</label>
              <select
                name="shipping_carrier"
                value={form.shipping_carrier}
                onChange={handleChange}
                className="mt-1 block w-full border rounded px-2 py-1"
              >
                <option value="">Select Carrier</option>
                <option value="Local rider">Local rider</option>
                <option value="Customer collected">Customer collected</option>
                <option value="Bot">Bot</option>
                <option value="DHL">DHL</option>
                <option value="Post office">Post office</option>
                <option value="Public transport">Public transport</option>
                <option value="Uber">Uber</option>
                <option value="Other">Other</option>
              </select>
            </div>

            <div>
              <label className="block text-sm">Tracking Number</label>
              <input
                name="tracking_number"
                value={form.tracking_number}
                onChange={handleChange}
                className="mt-1 block w-full border rounded px-2 py-1"
              />
            </div>

            <div>
              <label className="block text-sm">Tracking Link</label>
              <input
                name="tracking_link"
                value={form.tracking_link}
                onChange={handleChange}
                className="mt-1 block w-full border rounded px-2 py-1"
              />
            </div>

            <div>
              <label className="block text-sm">Additional Info</label>
              <textarea
                name="additional_info"
                value={form.additional_info}
                onChange={handleChange}
                className="mt-1 block w-full border rounded px-2 py-1"
              />
            </div>

            <div>
              <label className="block text-sm">Date Dispatched</label>
              <input
                type="datetime-local"
                name="date_dispatched"
                value={form.date_dispatched}
                onChange={handleChange}
                className="mt-1 block w-full border rounded px-2 py-1"
              />
            </div>

            <div className="flex justify-end gap-2 mt-4">
              <button
                type="button"
                onClick={closeModal}
                className="px-4 py-2 border rounded"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 border border-violet-600 rounded text-violet-600"
              >
                Update
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Delivery Tracker */}
      <DeliveryTracker
        stage={item.dispatch_status === 1 ? 1 : 0}
        steps={[
          {
            label: "Ordered",
            date: new Date(order.order_date).toLocaleDateString(),
          },
          {
            label: "Dispatched",
            date: item.date_dispatched
              ? new Date(item.date_dispatched).toLocaleDateString()
              : "Soon",
          },
          {
            label: "Delivered",
            note: item.receive_status === 1 ? "Delivered" : "Not confirmed",
          },
        ]}
      />

      {/* Tracking */}
      {/* <div className="mt-4 text-sm space-y-1">
        <p><strong>Carrier:</strong> {order.shipping_carrier || "N/A"}</p>
        <p><strong>Tracking #:</strong> {order.tracking_number || "N/A"}</p>
        <p>
          <strong>Link:</strong>{" "}
          {order.tracking_link
            ? <a href={order.tracking_link} target="_blank" className="underline">View</a>
            : "N/A"}
        </p>
        <p><strong>Additional info:</strong> {order.additional_info || "N/A"}</p>
      </div> */}

      {/* Tracking */}
      <div className="mt-4 bg-gray-50 p-4 text-sm rounded-md">
        <h4 className="font-medium text-gray-700 mb-2">Tracking Info:</h4>
        <div className="space-y-2">
          {/* Row 1 */}
          <div className="flex space-x-6">
            <div>
              <strong>Carrier:</strong> {order.shipping_carrier || "N/A"}
            </div>
            <div>
              <strong>Tracking #:</strong> {order.tracking_number || "N/A"}
            </div>
          </div>
          {/* Row 2 */}
          <div className="flex space-x-6">
            <div>
              <strong>Link:</strong>{" "}
              {order.tracking_link ? (
                <a
                  href={order.tracking_link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="underline"
                >
                  View
                </a>
              ) : (
                "N/A"
              )}
            </div>
            <div>
              <strong>Additional info:</strong> {order.additional_info || "N/A"}
            </div>
          </div>
        </div>
      </div>

      {/* Product Info */}
      <div className="mt-6">
        <h3 className="font-semibold text-lg mb-2">Item info</h3>
        <div className="flex items-start gap-4">
          <img
            src={product?.product_images?.[0] || "/placeholder.png"}
            alt={product?.title}
            className="w-20 h-20 object-cover rounded-md"
          />
          <div>
            <p className="font-medium">{product.title}</p>
            <p className="text-sm">Seller item no.: {product.id}</p>
            <p className="text-sm">
              {item?.price_currency} {(item.price_cents / 100).toFixed(2)}
            </p>
            <p className="text-xs text-gray-500">
              Returns accepted until 12 May
            </p>
          </div>
        </div>
      </div>

      {/* Delivery & Payment */}
      <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-6 text-sm">
        <div>
          <h4 className="font-semibold mb-1">Delivery info</h4>
          <div className="flex items-center gap-2 text-gray-700">
            <AiOutlineHome />
            <span>
              {showFullInfo
                ? order.address.address_data.address_line_1
                : `${order.address.address_data.town}, ${order.address.address_data.country}`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlineUser />
            <span>
              {showFullInfo
                ? `${order.buyer.first_name} ${order.buyer.last_name}`
                : `${order.buyer.first_name} ${order.buyer.last_name[0]}.`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlinePhone />
            <span>
              {showFullInfo
                ? order.address.address_data.phone_number
                : "+233 *** ****"}
            </span>
          </div>
          <button
            onClick={() => setShowFullInfo(!showFullInfo)}
            className="text-purple-600 underline mt-2 text-sm"
          >
            {showFullInfo ? "Hide full address" : "View full address"}
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/all-orders/[id]/page1.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { MdCheck, MdChat } from "react-icons/md";
import {
  AiOutlineArrowLeft,
  AiOutlineHome,
  AiOutlineMail,
  AiOutlinePhone,
} from "react-icons/ai";

const STATUSES = ["Ordered", "Processing", "Shipped", "Received"];

function OrderDetailsSkeleton() {
  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8 animate-pulse">
      {/* header */}
      <div className="h-8 bg-gray-200 rounded w-1/4"></div>

      {/* two seller sections */}
      {Array.from({ length: 2 }).map((_, s) => (
        <section key={s} className="space-y-6 border-b border-gray-200 pb-6">
          {/* seller header */}
          <div className="h-6 bg-gray-200 rounded w-1/3"></div>

          {/* products */}
          {Array.from({ length: 2 }).map((_, i) => (
            <div
              key={i}
              className="flex items-center bg-gray-50 p-4 rounded-lg"
            >
              <div className="w-24 h-24 bg-gray-300 rounded"></div>
              <div className="ml-4 flex-1 space-y-2">
                <div className="h-4 bg-gray-300 rounded w-1/2"></div>
                <div className="h-4 bg-gray-300 rounded w-1/3"></div>
              </div>
              <div className="w-24 h-8 bg-gray-300 rounded-full"></div>
            </div>
          ))}

          {/* status bar */}
          <div className="relative">
            <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
            <div className="relative flex justify-between z-10">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-8 h-8 bg-gray-300 rounded-full"></div>
              ))}
            </div>
            <div className="relative flex justify-between mt-2 text-sm text-center">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-16 h-4 bg-gray-200 rounded"></div>
              ))}
            </div>
          </div>
        </section>
      ))}

      {/* address & contact */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <div className="w-6 h-6 bg-gray-300 rounded"></div>
          <div className="flex-1 space-y-2">
            <div className="h-4 bg-gray-300 rounded w-3/4"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-2/3"></div>
          </div>
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
      </div>
    </main>
  );
}

export default function OrderDetails({ params }) {
  const { id } = params;
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [statuses, setStatuses] = useState({});
  const [loadingReceive, setLoadingReceive] = useState({});

  // fetch order
  useEffect(() => {
    if (!token) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/buyer/orders/${id}/`,
          { headers: { Authorization: `Token ${token}` } },
        );
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  // init statuses
  useEffect(() => {
    if (!order) return;
    const init = {};
    order.order_items.forEach((item) => {
      const sid = item.product.user;
      if (!(sid in init)) {
        init[sid] = item.receive_status === 1 ? STATUSES.length - 1 : 0;
      }
    });
    setStatuses(init);
  }, [order]);

  // handle receive
  const handleReceive = async (sellerId) => {
    if (statuses[sellerId] === STATUSES.length - 1) return;
    if (
      !window.confirm("Confirm you have received all items from this seller.")
    ) {
      return;
    }
    setLoadingReceive((p) => ({ ...p, [sellerId]: true }));
    try {
      const items = order.order_items.filter(
        (i) => i.product.user === sellerId,
      );
      const headers = new Headers({
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      });
      const body = JSON.stringify({ receive_status: 1 });
      await Promise.all(
        items.map((it) =>
          fetch(`https://media.upfrica.com/api/seller/order-items/${it.id}/`, {
            method: "PATCH",
            headers,
            body,
          }).then((r) => {
            if (!r.ok) throw new Error(`Item ${it.id} failed`);
            return r.json();
          }),
        ),
      );
      setStatuses((p) => ({ ...p, [sellerId]: STATUSES.length - 1 }));
      alert("Items marked as received.");
    } catch (err) {
      console.error(err);
      alert("Failed to mark received: " + err.message);
    } finally {
      setLoadingReceive((p) => ({ ...p, [sellerId]: false }));
    }
  };

  if (loading) return <OrderDetailsSkeleton />;
  if (!order) {
    return (
      <div className="p-6 text-center text-red-600">Unable to load order.</div>
    );
  }

  // group by seller
  const bySeller = order.order_items.reduce((acc, item) => {
    const sid = item.product.user;
    (acc[sid] ||= []).push(item);
    return acc;
  }, {});

  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8">
      {/* back + header */}
      <div className="flex items-center space-x-3">
        <button
          onClick={() => router.push("/dashboard/all-orders")}
          className="p-1 rounded-full hover:bg-gray-100"
        >
          <AiOutlineArrowLeft size={20} />
        </button>
        <h1 className="text-2xl font-bold">
          Order #{String(order.id).padStart(6, "0")}
        </h1>
      </div>

      {Object.entries(bySeller).map(([sellerId, items]) => {
        const idx = statuses[sellerId] ?? 0;
        return (
          <section
            key={sellerId}
            className="space-y-6 border-b border-gray-200 pb-6"
          >
            {/* header */}
            <div className="flex justify-between items-center">
              <h2 className="text-lg font-medium">Seller #{sellerId}</h2>
              <button
                // onClick={() => router.push(`/chat/${sellerId}`)}
                className="flex items-center space-x-1 px-4 py-2 bg-violet-600 text-white rounded-full hover:bg-violet-700 transition"
              >
                <MdChat size={18} />
                <span>Contact Seller</span>
              </button>
            </div>

            {/* products */}
            <div className="space-y-4">
              {items.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center bg-gray-50 p-4 rounded-lg shadow-sm"
                >
                  <img
                    src={item.product.product_images[0]}
                    alt={item.product.title}
                    className="w-24 h-24 object-cover rounded"
                  />
                  <div className="ml-4 flex-1">
                    <h3 className="font-semibold text-lg">
                      {item.product.title}
                    </h3>
                    <p className="text-gray-700 mt-1">
                      ${(item.price_cents / 100).toFixed(2)} √ó {item.quantity}
                    </p>
                  </div>
                  <button
                    onClick={() => handleReceive(item.product.user)}
                    disabled={
                      statuses[item.product.user] === STATUSES.length - 1 ||
                      loadingReceive[item.product.user]
                    }
                    className={`px-4 py-2 rounded-full font-medium transition ${
                      statuses[item.product.user] === STATUSES.length - 1
                        ? "bg-gray-300 text-gray-600 cursor-default"
                        : "bg-violet-600 text-white hover:bg-violet-700"
                    }`}
                  >
                    {loadingReceive[item.product.user]
                      ? "Receiving‚Ä¶"
                      : statuses[item.product.user] === STATUSES.length - 1
                        ? "Received"
                        : "Mark Received"}
                  </button>
                </div>
              ))}
            </div>

            {/* status bar */}
            <div className="relative my-6">
              <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
              <div className="relative flex justify-between z-10">
                {STATUSES.map((_, i) => (
                  <div key={i} className="flex flex-col items-center">
                    <div
                      className={`w-8 h-8 flex items-center justify-center rounded-full ${
                        i <= idx
                          ? "bg-violet-600 text-white"
                          : "bg-gray-200 text-gray-400"
                      }`}
                    >
                      {i <= idx && <MdCheck />}
                    </div>
                  </div>
                ))}
              </div>
              <div className="relative flex justify-between mt-2 text-sm text-center">
                {STATUSES.map((label, i) => (
                  <span key={i} className="w-16">
                    {label}
                  </span>
                ))}
              </div>
            </div>
          </section>
        );
      })}

      {/* address & contact */}
      <section className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <AiOutlineHome size={24} className="text-violet-600 mt-1" />
          <div>
            <h4 className="font-semibold">Delivery Address</h4>
            <p className="text-gray-700">
              {order.address.address_data.address_line_1}
              {order.address.address_data.address_line_2 &&
                `, ${order.address.address_data.address_line_2}`}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.local_area},{" "}
              {order.address.address_data.town}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.country}
            </p>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <AiOutlineMail size={24} className="text-violet-600" />
            <span className="text-gray-700">{order.buyer.email}</span>
          </div>
          <div className="flex items-center space-x-3">
            <AiOutlinePhone size={24} className="text-violet-600" />
            <span className="text-gray-700">
              {order.address.address_data.phone_number}
            </span>
          </div>
        </div>
      </section>
    </main>
  );
}


===== src/app/(pages)/new-dashboard/all-orders/components/DeliveryTracker.js =====
"use client";

import React from "react";

export default function DeliveryTracker({ stage = 0, steps = [] }) {
  return (
    <div className="flex justify-between items-center bg-gray-50 rounded-md py-4 px-6">
      {steps.map((step, index) => {
        const isCompleted = index <= stage;
        const isLast = index === steps.length - 1;

        return (
          <div
            key={index}
            className="flex-1 flex flex-col items-center relative"
          >
            {/* Connector line */}
            {index > 0 && (
              <div className="absolute top-3 left-[-50%] w-full h-1 bg-gray-200 z-0">
                <div
                  className={`h-1 ${
                    isCompleted ? "bg-blue-600" : "bg-gray-300"
                  }`}
                  style={{
                    width: "100%",
                  }}
                />
              </div>
            )}

            {/* Circle */}
            <div
              className={`w-6 h-6 rounded-full flex items-center justify-center z-10 mb-1 ${
                isCompleted
                  ? "bg-blue-600 text-white"
                  : "bg-gray-300 text-white"
              }`}
            >
              ‚úì
            </div>

            {/* Label */}
            <div className="text-center text-sm font-semibold">
              {step.label}
            </div>

            {/* Date or note */}
            <div className="text-center text-xs text-gray-500 mt-1">
              {step.date || step.note}
            </div>
          </div>
        );
      })}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/all-orders/components/OrderCard.jsx =====
// "use client";

// import { useState, useRef, useEffect } from "react";
// import { useRouter } from "next/navigation"; // ‚úÖ Add this
// import {
//   AiOutlineHome,
//   AiOutlineUser,
//   AiOutlinePhone,
// } from "react-icons/ai";

// const OrderCard = ({
//   status = "Processing",
//   date = "1 Dec 2024",
//   total = "GHS 4000",
//   orderNumber = "12345678",
//   productTitle = "Fresh Graviola from Sri Lanka (50g)",
//   price = "GHS 200",
//   returnDate = "12 May",
//   imageUrl = "/placeholder.png",
//   product, // ‚úÖ receives full product object
//   order = {
//     buyer: {
//       first_name: "John",
//       last_name: "Doe",
//       email: "john@example.com",
//     },
//     address: {
//       address_data: {
//         address_line_1: "123 Main St",
//         address_line_2: "Apt 4B",
//         local_area: "Osu",
//         town: "Accra",
//         country: "Ghana",
//         phone_number: "+233 20 000 0000",
//       },
//     },
//   },
// }) => {
//   const router = useRouter(); // ‚úÖ Initialize router
//   const [dropdownOpen, setDropdownOpen] = useState(false);
//   const [showFullInfo, setShowFullInfo] = useState(false);
//   const dropdownRef = useRef();

//   useEffect(() => {
//     const handleClickOutside = (e) => {
//       if (!dropdownRef.current?.contains(e.target)) setDropdownOpen(false);
//     };
//     document.addEventListener("mousedown", handleClickOutside);
//     return () => document.removeEventListener("mousedown", handleClickOutside);
//   }, []);

//   const maskedPhone = order?.address?.address_data?.phone_number?.replace(
//     /(\+\d{3})\s\d{2}\s\d{3}/,
//     "$1 ***"
//   );

//   const sellerName =
//     typeof product?.shop?.name === "string" && product.shop.name
//       ? product.shop.name
//       : typeof product?.user?.username === "string"
//       ? product.user.username
//       : "Seller";

//   return (
//     <div className="bg-white rounded-xl shadow-upfrica mb-6 p-4">
//       {/* Header */}
//       <div className="flex flex-col md:flex-row justify-between bg-gray-100 rounded-lg p-4 gap-4 md:gap-0">
//         <div className="flex-1 min-w-0">
//           <div className="text-green-600 font-bold flex items-center mb-2">
//             ‚úÖ {status}
//           </div>
//           <div className="flex flex-wrap gap-6 text-sm text-black">
//             <div>
//               <span className="block font-bold text-green-600">Order #</span>
//               {orderNumber}
//             </div>
//             <div>
//               <span className="block font-bold text-green-600">Order date</span>
//               {date}
//             </div>
//             <div>
//               <span className="block font-bold text-green-600">Total</span>
//               {total}
//             </div>
//           </div>
//         </div>

//         {/* Buttons */}
//         <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
//         <button
//             className="h-8 text-white upfrica-btn-primary-sm"
//             onClick={() => router.push(`/new-dashboard/my-orders/${order.id}`)}
//           >
//             View details
//           </button>
//           <div className="relative w-full sm:w-auto" ref={dropdownRef}>
//             <button
//               className="h-8 upfrica-btn-primary-outline-sm w-full sm:w-auto"
//               onClick={() => setDropdownOpen(!dropdownOpen)}
//             >
//               More actions ‚ñº
//             </button>
//             {dropdownOpen && (
//               <div className="absolute right-0 mt-2 bg-white border rounded-md shadow-lg z-10 w-48">
//                 {[
//                   "Contact seller",
//                   "Return this item",
//                   "I didn‚Äôt receive it",
//                   "Sell this item",
//                   "Add note",
//                   "Hide Order",
//                   "Help & report",
//                 ].map((label, i) => (
//                   <button
//                     key={i}
//                     className="w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
//                   >
//                     {label}
//                   </button>
//                 ))}
//               </div>
//             )}
//           </div>
//         </div>
//       </div>

//       {/* Product Info + Delivery */}
//       <div className="mt-4">
//         {/* Top: Image + Info */}
//         <div className="flex gap-4 mb-4">
//           <div className="w-20 h-20 shrink-0">
//             <img src={imageUrl} alt={productTitle} className="w-20 h-20 object-cover rounded-md" />
//           </div>

//           <div className="flex-1 min-w-0">
//             <div className="font-semibold">{productTitle}</div>
//             <div className="text-sm text-gray-500">
//               Sold by:{" "}
//               <span className="underline text-black cursor-pointer">
//                 {sellerName} ‚Ä∫
//               </span>
//             </div>
//             <div className="text-sm">{price}</div>
//             <div className="text-sm">Returns accepted until {returnDate}</div>
//           </div>
//         </div>

//         {/* Bottom: Buttons + Address */}
//         <div>

//           <hr className="border-t border-gray-200 my-4" />

//           <div className="text-sm text-gray-700 space-y-2">
//             <span className="font-semibold text-gray-800">Delivery Info:</span>
//             <div className="grid grid-cols-1 items-center">
//               <div className="flex items-center space-x-2">
//                 <AiOutlineHome className="text-violet-600" size={18} />
//                 <span>
//                   {showFullInfo
//                     ? `${order?.address?.address_data?.address_line_1}${order?.address?.address_data?.address_line_2 ? ", " + order.address.address_data.address_line_2 : ""}, ${order.address.address_data.local_area}, ${order.address.address_data.town}, ${order.address.address_data.country}`
//                     : `${order?.address?.address_data?.town}, ${order?.address?.address_data?.country}`}
//                 </span>
//               </div>

//               <div className="flex items-center space-x-2">
//                 <AiOutlineUser className="text-violet-600" size={18} />
//                 <span>
//                   {showFullInfo
//                     ? `${order?.buyer?.first_name} ${order?.buyer?.last_name}`
//                     : `${order?.buyer?.first_name} ${order?.buyer?.last_name[0]}.`}
//                 </span>
//               </div>

//               <div className="flex items-center space-x-2">
//                 <AiOutlinePhone className="text-violet-600" size={18} />
//                 <span>{showFullInfo ? order.address.address_data.phone_number : maskedPhone}</span>
//               </div>
//             </div>

//             <button
//               onClick={() => setShowFullInfo(!showFullInfo)}
//               className="text-sm text-purple-600 mt-2 underline"
//             >
//               {showFullInfo ? "Hide full info ‚ñ≤" : "Show full info ‚ñº"}
//             </button>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default OrderCard;

"use client";

import React, { useState, useRef, useEffect } from "react";
import { useRouter } from "next/navigation";
import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

const OrderCard = ({
  status = "Processing",
  date = "1 Dec 2024",
  total = "GHS 4000",
  orderNumber = "12345678",
  productTitle = "Fresh Graviola from Sri Lanka (50g)",
  price = "GHS 200",
  returnDate = "12 May",
  imageUrl = "/placeholder.png",
  seller = "Seller",
  product,
  order = {
    id: 0,
    buyer: { first_name: "", last_name: "" },
    address: { address_data: {} },
  },
}) => {
  const router = useRouter();
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [showFullInfo, setShowFullInfo] = useState(false);
  const dropdownRef = useRef(null);

  // close dropdown when clicking outside
  useEffect(() => {
    const onClick = (e) => {
      if (!dropdownRef.current?.contains(e.target)) {
        setDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", onClick);
    return () => document.removeEventListener("mousedown", onClick);
  }, []);

  // pull address_data and buyer at top level, with safe defaults
  const { address_data: addr = {} } = order.address || {};
  const { first_name = "", last_name = "" } = order.buyer || {};

  // mask phone like "+233 ***"
  const rawPhone = addr.phone_number || "";
  const maskedPhone = rawPhone.replace(/(\+\d{3})\s*\d{2}\s*\d{3}/, "$1 ***");

  // fallback for seller name
  const sellerName =
    typeof product?.shop?.name === "string" && product.shop.name
      ? product.shop.name
      : typeof product?.user?.username === "string"
        ? product.user.username
        : seller;

  return (
    <div className="bg-white rounded-xl shadow-upfrica mb-6 p-4">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between bg-gray-100 rounded-lg p-4 gap-4">
        <div className="flex-1">
          <div className="text-green-600 font-bold flex items-center mb-2">
            ‚úÖ {status}
          </div>
          <div className="flex flex-wrap gap-6 text-sm text-black">
            <div>
              <span className="block font-bold text-green-600">Order #</span>
              {orderNumber}
            </div>
            <div>
              <span className="block font-bold text-green-600">Order date</span>
              {date}
            </div>
            <div>
              <span className="block font-bold text-green-600">Total</span>
              {total}
            </div>
          </div>
        </div>

        {/* Actions */}
        <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
          <button
            className="h-8 text-white upfrica-btn-primary-sm"
            onClick={() => router.push(`/new-dashboard/all-orders/${order.id}`)}
          >
            View details
          </button>
          <div className="relative w-full sm:w-auto" ref={dropdownRef}>
            <button
              className="h-8 upfrica-btn-primary-outline-sm w-full sm:w-auto"
              onClick={() => setDropdownOpen((o) => !o)}
            >
              More actions ‚ñº
            </button>
            {dropdownOpen && (
              <div className="absolute right-0 mt-2 bg-white border rounded-md shadow-lg z-10 w-48">
                {["Contact Buyer", "Hide Order", "Ask Admin Help"].map(
                  (label, i) => (
                    <button
                      key={i}
                      className="w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                    >
                      {label}
                    </button>
                  ),
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Product Info */}
      <div className="mt-4">
        <div className="flex gap-4 mb-4">
          <div className="w-20 h-20 shrink-0">
            <img
              src={imageUrl}
              alt={productTitle}
              className="w-20 h-20 object-cover rounded-md"
            />
          </div>
          <div className="flex-1">
            <div className="font-semibold">{productTitle}</div>
            <div className="text-sm text-gray-500">
              Sold by:{" "}
              <span className="underline text-black cursor-pointer">
                {sellerName} ‚Ä∫
              </span>
            </div>
            <div className="text-sm">{price}</div>
            <div className="text-sm">Returns accepted until {returnDate}</div>
          </div>
        </div>

        <hr className="border-t border-gray-200 my-4" />

        {/* Delivery Info */}
        <div className="text-sm text-gray-700 space-y-2">
          <span className="font-semibold text-gray-800">Delivery Info:</span>
          <div className="grid grid-cols-1 gap-2">
            <div className="flex items-center space-x-2">
              <AiOutlineHome size={18} className="text-violet-600" />
              <span>
                {showFullInfo
                  ? `${addr.address_line_1 || ""}${
                      addr.address_line_2 ? `, ${addr.address_line_2}` : ""
                    }, ${addr.local_area || ""}, ${addr.town || ""}, ${
                      addr.country || ""
                    }`
                  : `${addr.town || ""}, ${addr.country || ""}`}
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <AiOutlineUser size={18} className="text-violet-600" />
              <span>
                {showFullInfo
                  ? `${first_name} ${last_name}`
                  : `${first_name} ${last_name.charAt(0)}.`}
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <AiOutlinePhone size={18} className="text-violet-600" />
              <span>{showFullInfo ? rawPhone : maskedPhone}</span>
            </div>
          </div>
          <button
            onClick={() => setShowFullInfo((s) => !s)}
            className="text-sm text-purple-600 mt-2 underline"
          >
            {showFullInfo ? "Hide full info ‚ñ≤" : "Show full info ‚ñº"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default OrderCard;


===== src/app/(pages)/new-dashboard/all-orders/components/OrdersPage.jsx =====
"use client";
import React, { useEffect, useState, useRef } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import OrderCard from "./OrderCard";
import Pagination from "@/components/Pagination";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";

const PAGE_SIZE = 20;

export default function OrdersPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const pageParam = parseInt(searchParams.get("page") || "1", 10);
  const [orders, setOrders] = useState([]);
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceRef = useRef(null);

  useEffect(() => {
    if (!token) return;

    setLoading(true);
    fetch(`${BASE_API_URL}/api/buyer/orders/?page=${pageParam}`, {
      headers: {
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      },
    })
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setOrders(data.results);
        setCount(data.count);
      })
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [token, pageParam]);

  const totalPages = Math.ceil(count / PAGE_SIZE);

  const goToPage = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      router.push(`/dashboard/all-orders?page=${newPage}`);
    }
  };

  useEffect(() => {
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(() => {
      const lowerQuery = searchQuery.toLowerCase();
      const filtered = orders.flatMap((order) =>
        order.order_items
          .filter(
            (item) =>
              item.product.title.toLowerCase().includes(lowerQuery) ||
              String(order.id).includes(lowerQuery),
          )
          .map((item) => ({ ...item, order })),
      );
      setSearchResults(filtered);
      setSearchLoading(false);
    }, 300);

    return () => clearTimeout(debounceRef.current);
  }, [searchQuery, orders]);

  const displayItems = searchQuery
    ? searchResults
    : orders.flatMap((order) =>
        order.order_items.map((item) => ({ ...item, order })),
      );

  return (
    <div className="p-0 bg-gray-100 min-h-screen text-black font-sans">
      {/* Search Bar */}
      <div className="relative max-w-xl mx-auto mb-6">
        <AiOutlineSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-xl text-gray-700" />
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search orders by product name or order #..."
          className="w-full rounded-full border border-gray-300 px-10 py-2 focus:outline-none"
        />
        {searchQuery && (
          <AiOutlineClose
            className="absolute right-3 top-1/2 -translate-y-1/2 text-xl text-gray-600 cursor-pointer"
            onClick={() => setSearchQuery("")}
          />
        )}
      </div>

      <div className="flex gap-6 mb-4 font-semibold overflow-x-auto whitespace-nowrap px-2 scrollbar-hide">
        <div className="border-b-2 border-black pb-1">All Purchases</div>
        <div>Processing</div>
        <div>Unpaid</div>
        <div>Returns & Cancelled</div>
      </div>

      <h1 className="text-2xl font-bold mb-6">My Orders</h1>

      {loading ? (
        <div className="text-center text-gray-600">Loading your orders...</div>
      ) : error ? (
        <p className="text-red-600 text-center">
          Error loading orders: {error}
        </p>
      ) : (
        <div className="space-y-6">
          {displayItems.length === 0 ? (
            <p className="text-center text-gray-500">
              No matching orders found.
            </p>
          ) : (
            displayItems.map((item, index) => (
              <OrderCard
                key={`${item.order.id}-${item.id}-${index}`}
                order={item.order} // ‚úÖ Add this
                product={item.product} // ‚úÖ Pass product as well if needed
                status={item.receive_status === 1 ? "Received" : "Processing"}
                date={new Date(item.order.created_at).toLocaleDateString()}
                total={`GHS ${((item.price_cents * item.quantity) / 100).toFixed(2)}`}
                orderNumber={String(item.order.id).padStart(8, "0")}
                productTitle={item.product.title}
                seller={
                  item.product.user_display_name ||
                  `Seller ${item.product.user}`
                }
                price={`GHS ${(item.price_cents / 100).toFixed(2)}`}
                returnDate="12 May"
                imageUrl={
                  item.product.product_images?.[0] || "/placeholder.png"
                }
              />
            ))
          )}
        </div>
      )}

      {!searchQuery && totalPages > 1 && (
        <Pagination
          currentPage={pageParam}
          totalPages={totalPages}
          onPageChange={goToPage}
        />
      )}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/all-orders/components/SideBar.jsx =====
// 'use client';

// import React from 'react';

// export default function SideBar() {
//   return (
//     <aside className="w-[240px] p-2 text-black hidden md:block rounded-md overflow-y-auto max-h-[calc(100vh-25rem)]">
//       <h2 className="text-lg font-bold mb-4">Filters</h2>

//       <div className="mb-6 p-5 bg-white border rounded-t-[5px] drop-shadow">
//         <label className="block text-sm font-semibold mb-1">Category</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Categories</option>
//           <option>Electronics</option>
//           <option>Fashion</option>
//           <option>Home</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Condition</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Conditions</option>
//           <option>New</option>
//           <option>Used</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Sort By</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>Most Recent</option>
//           <option>Price: Low to High</option>
//           <option>Price: High to Low</option>
//         </select>
//       </div>

//       <div>
//         <label className="block text-sm font-semibold mb-1">Ratings</label>
//         <p className="text-yellow-600 font-bold">‚≠ê 4.5/5</p>
//       </div>
//     </aside>
//   );
// }


===== src/app/(pages)/new-dashboard/all-orders/layout.js =====
import Footer from "@/components/common/footer/Footer";
import React from "react";

const layout = ({ children }) => {
  return (
    <>
      <div className="min-h-screen bg-gray-100 text-gray-900">
        <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
          {/* <Sidebar /> */}
          <main className="flex-1 px-0 py-0">{children}</main>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default layout;


===== src/app/(pages)/new-dashboard/all-orders/page.jsx =====
import React from "react";
import OrdersPage from "./components/OrdersPage";

const page = () => {
  return (
    <div>
      <OrdersPage />
    </div>
  );
};

export default page;


===== src/app/(pages)/new-dashboard/all-orders/page2.jsx =====
// 'use client'

// import React, { useState, useEffect } from 'react'
// import { useSearchParams, useRouter } from 'next/navigation'
// import { useSelector } from 'react-redux'
// import { AiOutlineLeft, AiOutlineRight, AiOutlineArrowDown } from 'react-icons/ai'
// import { MdCheck, MdChat } from 'react-icons/md'

// const PAGE_SIZE = 20
// // Remove "Delivered", keep "Received" as final status
// const STATUSES = ['Ordered', 'Processing', 'Shipped', 'Received']

// function Pagination({ currentPage, totalPages, onPageChange }) {
//   const [isMobile, setIsMobile] = useState(false)

//   useEffect(() => {
//     const handleResize = () => setIsMobile(window.innerWidth <= 768)
//     handleResize()
//     window.addEventListener('resize', handleResize)
//     return () => window.removeEventListener('resize', handleResize)
//   }, [])

//   const handlePageClick = (page) => {
//     if (page >= 1 && page <= totalPages && page !== currentPage) {
//       onPageChange(page)
//     }
//   }

//   const getPageNumbers = () => {
//     if (isMobile) {
//       if (totalPages <= 2) return [1, ...(totalPages === 2 ? [2] : [])]
//       return [1, 2, '...']
//     }
//     if (totalPages <= 5) return Array.from({ length: totalPages }, (_, i) => i + 1)
//     if (currentPage <= 3) return [1, 2, 3, 4, '...', totalPages]
//     if (currentPage >= totalPages - 2)
//       return [1, '...', totalPages - 3, totalPages - 2, totalPages - 1, totalPages]
//     return [1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages]
//   }

//   return (
//     <div className="mt-8 flex justify-center overflow-x-auto">
//       <div className="inline-flex items-center space-x-2 whitespace-nowrap px-2">
//         <button
//           onClick={() => handlePageClick(currentPage - 1)}
//           disabled={currentPage === 1}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <AiOutlineLeft className="mr-1" />
//           <span>Prev</span>
//         </button>
//         {getPageNumbers().map((page, i) =>
//           typeof page === 'number' ? (
//             <button
//               key={i}
//               onClick={() => handlePageClick(page)}
//               className={`px-3 py-1 rounded border border-gray-300 hover:bg-gray-100 ${page === currentPage ? 'bg-violet-700 text-white font-semibold' : ''
//                 }`}
//             >
//               {page}
//             </button>
//           ) : (
//             <span key={i} className="px-3 py-1 text-gray-500">
//               ‚Ä¶
//             </span>
//           )
//         )}
//         <button
//           onClick={() => handlePageClick(currentPage + 1)}
//           disabled={currentPage === totalPages}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <span>Next</span>
//           <AiOutlineRight className="ml-1" />
//         </button>
//       </div>
//     </div>
//   )
// }

// function SkeletonOrderCard() {
//   return (
//     <div className="bg-white rounded-lg shadow p-6 space-y-6 animate-pulse border border-gray-700">
//       <div className="h-6 bg-gray-300 rounded w-1/3" />
//       <div className="h-4 bg-gray-300 rounded w-1/4" />
//       <div className="grid grid-cols-3 gap-4">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <div key={i} className="flex space-x-3 items-center">
//             <div className="w-16 h-16 bg-gray-300 rounded" />
//             <div className="flex-1 space-y-2">
//               <div className="h-4 bg-gray-300 rounded w-3/4" />
//               <div className="h-4 bg-gray-300 rounded w-1/2" />
//               <div className="h-3 bg-gray-300 rounded w-1/3" />
//             </div>
//           </div>
//         ))}
//       </div>
//       <div className="grid grid-cols-2 gap-6">
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-4 bg-gray-300 rounded w-1/3" />
//         </div>
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-6 bg-gray-300 rounded w-1/4" />
//         </div>
//       </div>
//       <div className="space-y-2">
//         <div className="h-4 bg-gray-300 rounded w-1/6" />
//         <div className="w-full bg-gray-200 h-1 rounded-full">
//           <div className="bg-gray-300 h-full" />
//         </div>
//         <div className="flex justify-between">
//           {Array.from({ length: 4 }).map((_, i) => (
//             <div key={i} className="h-4 w-12 bg-gray-300 rounded" />
//           ))}
//         </div>
//       </div>
//     </div>
//   )
// }

// export default function OrdersPage() {
//   const searchParams = useSearchParams()
//   const router = useRouter()
//   const token = useSelector((state) => state.auth.token)

//   const pageParam = parseInt(searchParams.get('page') || '1', 10)
//   const [orders, setOrders] = useState([])
//   const [count, setCount] = useState(0)
//   const [loading, setLoading] = useState(true)
//   const [error, setError] = useState(null)
//   // status index per orderId+sellerId
//   const [statusesByOrder, setStatusesByOrder] = useState({})
//   // loading state for the "receive" action per orderId+sellerId
//   const [loadingReceiveBy, setLoadingReceiveBy] = useState({})

//   useEffect(() => {
//     if (!token) return
//     setLoading(true)
//     fetch(`https://media.upfrica.com/api/buyer/orders/?page=${pageParam}`, {
//       headers: { Authorization: `Token ${token}` },
//     })
//       .then((res) => {
//         if (!res.ok) throw new Error(`HTTP ${res.status}`)
//         return res.json()
//       })
//       .then((data) => {
//         setOrders(data.results)
//         setCount(data.count)
//       })
//       .catch((err) => setError(err.message))
//       .finally(() => setLoading(false))
//   }, [token, pageParam])

//   // Initialize statuses, marking "Received" if receive_status===1
//   useEffect(() => {
//     const init = {}
//     orders.forEach((order) => {
//       const bySeller = {}
//       order.order_items.forEach((item) => {
//         const sid = item.product.user
//         // if any item for that seller is already received, mark as Received
//         const received = item.receive_status === 1
//         bySeller[sid] = received ? STATUSES.length - 1 : 0
//       })
//       init[order.id] = bySeller
//     })
//     setStatusesByOrder(init)
//   }, [orders])

//   const totalPages = Math.ceil(count / PAGE_SIZE)

//   const handlePageChange = (page) => {
//     router.push(`/orders?page=${page}`)
//   }

//   // Handle status clicks, including PATCH for Received
//   const handleStatusClick = async (orderId, sellerId, idx) => {
//     const currentIdx = statusesByOrder[orderId]?.[sellerId] ?? 0
//     const lastIdx = STATUSES.length - 1
//     // if already at final "Received", do nothing
//     if (currentIdx === lastIdx) return

//     const statusName = STATUSES[idx]

//     // Only for "Received" do we call the API
//     if (statusName === 'Received') {
//       if (
//         !window.confirm(
//           'By clicking OK, you confirm that you have received the product.'
//         )
//       ) {
//         return
//       }

//       const key = `${orderId}_${sellerId}`
//       setLoadingReceiveBy((p) => ({ ...p, [key]: true }))

//       try {
//         // gather all items for this seller
//         const items = orders
//           .find((o) => o.id === orderId)
//           .order_items.filter((it) => it.product.user === sellerId)

//         const myHeaders = new Headers()
//         myHeaders.append('Authorization', `Token ${token}`)
//         myHeaders.append('Content-Type', 'application/json')

//         const raw = JSON.stringify({ receive_status: 1 })

//         // send PATCH for each item
//         const requests = items.map((item) =>
//           fetch(
//             `https://media.upfrica.com/api/buyer/order-item/${item.id}/`,
//             {
//               method: 'PATCH',
//               headers: myHeaders,
//               body: raw,
//               redirect: 'follow',
//             }
//           )
//         )
//         const responses = await Promise.all(requests)
//         // check all succeeded
//         for (let res of responses) {
//           if (!res.ok) throw new Error(`HTTP ${res.status}`)
//           const data = await res.json()
//           if (data.receive_status !== 1) throw new Error('Bad response')
//         }

//         // success!
//         setStatusesByOrder((prev) => ({
//           ...prev,
//           [orderId]: {
//             ...prev[orderId],
//             [sellerId]: lastIdx,
//           },
//         }))
//         alert('Marked as received!')
//       } catch (err) {
//         console.error(err)
//         alert('Error marking as received: ' + err.message)
//       } finally {
//         setLoadingReceiveBy((p) => ({ ...p, [key]: false }))
//       }

//       return
//     }

//     // For other statuses, local update only
//     if (
//       !window.confirm(`Are you sure you want to mark this as "${statusName}"?`)
//     ) {
//       return
//     }
//     setStatusesByOrder((prev) => ({
//       ...prev,
//       [orderId]: {
//         ...prev[orderId],
//         [sellerId]: idx,
//       },
//     }))
//   }

//   if (loading) {
//     return (
//       <main className="max-w-6xl mx-auto px-4 py-8 space-y-6">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <SkeletonOrderCard key={i} />
//         ))}
//       </main>
//     )
//   }

//   if (error) {
//     return (
//       <p className="p-6 text-center text-red-600">
//         Error fetching orders: {error}
//       </p>
//     )
//   }

//   return (
//     <main className="space-y-8 max-w-6xl mx-auto px-4 py-8">
//       <h1 className="text-3xl font-bold">My Orders</h1>

//       <div className="space-y-6">
//         {orders.map((order) => {
//           const placedDate = new Date(order.created_at)
//           const formattedPlaced = placedDate.toLocaleDateString(undefined, {
//             year: 'numeric',
//             month: 'long',
//             day: 'numeric',
//           })
//           const itemsBySeller = order.order_items.reduce((acc, item) => {
//             const sid = item.product.user
//             if (!acc[sid]) acc[sid] = []
//             acc[sid].push(item)
//             return acc
//           }, {})

//           return (
//             <div
//               key={order.id}
//               className="bg-white rounded-lg shadow p-6 space-y-1 border border-gray-700"
//             >
//               <div className="flex justify-between items-start">
//                 <div>
//                   <h2 className="text-xl font-semibold">
//                     Order #{String(order.id).padStart(5, '0')}
//                   </h2>
//                   <p className="text-gray-600 text-sm">
//                     Placed{' '}
//                     <time dateTime={order.created_at}>{formattedPlaced}</time>
//                   </p>
//                 </div>
//                 <a
//                   href={`/dashboard/all-orders/${order.id}/`}
//                   className="text-indigo-600 hover:underline text-sm font-medium"
//                 >
//                   View details&nbsp;‚Üí
//                 </a>
//               </div>

//               {Object.entries(itemsBySeller).map(([sellerId, items]) => {
//                 const currentIdx =
//                   statusesByOrder[order.id]?.[sellerId] ?? 0
//                 const progressPercent = ((currentIdx + 1) / STATUSES.length) * 100
//                 const needsGuide = currentIdx < STATUSES.length - 1
//                 const key = `${order.id}_${sellerId}`
//                 const isLoadingReceive = loadingReceiveBy[key]
//                 const lastIdx = STATUSES.length - 1

//                 return (
//                   <div key={sellerId} className="space-y-4">
//                     <div className="flex justify-between items-center">
//                       <span className="text-sm font-medium text-gray-700">
//                         From seller #{sellerId}
//                       </span>
//                       <button
//                         onClick={() => router.push(`/chat/${sellerId}`)}
//                         className="flex flex-col items-center text-violet-700 hover:text-violet-700 text-sm font-medium"
//                       >
//                         <div className="p-2 pe-1 rounded-full bg-gray-200 hover:bg-gray-300">
//                           <MdChat size={18} />
//                         </div>
//                         Contact seller
//                       </button>
//                     </div>

//                     <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
//                       {items.map((item) => (
//                         <div
//                           key={item.id}
//                           className="flex space-x-3 items-center"
//                         >
//                           <img
//                             src={item.product.product_images[0]}
//                             alt={item.product.title}
//                             className="w-16 h-16 rounded object-cover"
//                           />
//                           <div>
//                             <h3 className="text-sm font-medium">
//                               {item.product.title}
//                             </h3>
//                             <p className="text-sm text-gray-500">
//                               ${(item.price_cents / 100).toFixed(2)}
//                             </p>
//                             <p className="text-xs text-gray-400">
//                               Qty: {item.quantity}
//                             </p>
//                           </div>
//                         </div>
//                       ))}
//                     </div>

//                     <div>
//                       <h4 className="text-sm font-medium mb-1">Status</h4>
//                       <div className="w-full bg-gray-200 h-1 rounded-full overflow-hidden">
//                         <div
//                           className="bg-indigo-600 h-full"
//                           style={{ width: `${progressPercent}%` }}
//                         />
//                       </div>
//                       <div className="flex justify-between text-xs mt-1">
//                         {STATUSES.map((status, idx) => (
//                           <div
//                             key={status}
//                             className="relative flex-1 flex justify-center"
//                           >
//                             {/* Arrow now points at "Received" */}
//                             {idx === lastIdx && needsGuide && (
//                               <div className="absolute -top-16 flex flex-col items-center bg-white">
//                                 <span className="text-xs text-gray-700 border border-gray-700 p-1 rounded">
//                                   Click here to receive
//                                 </span>
//                                 <AiOutlineArrowDown className="text-gray-700" />
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/all-products/page.jsx =====
"use client";
import ProductList from "@/components/e-commerce/products-list/ProductList";
import React from "react";

const page = () => {
  return (
    <div>
      <ProductList />
      {/* <p>porduct list</p> */}
    </div>
  );
};

export default page;


===== src/app/(pages)/new-dashboard/all-users/[id]/page.jsx =====
import React from "react";

function UserDetails() {
  return <div>UserDetails</div>;
}

export default UserDetails;


===== src/app/(pages)/new-dashboard/all-users/edit/[id]/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { FaSave } from "react-icons/fa";
import { FiArrowLeft } from "react-icons/fi";

export default function EditUserPage({ params }) {
  const { id } = params;
  const router = useRouter();
  const { token } = useSelector((state) => state.auth);

  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [alert, setAlert] = useState({ type: "", message: "" });

  // fetch existing user
  useEffect(() => {
    if (!token) return;
    setLoading(true);

    fetch(`https://media.upfrica.com/api/users/${id}/`, {
      headers: { Authorization: `Token ${token}` },
    })
      .then((res) => {
        if (!res.ok) throw new Error("Could not fetch user");
        return res.json();
      })
      .then((data) => {
        setUserData({
          first_name: data.first_name || "",
          last_name: data.last_name || "",
          email: data.email || "",
          username: data.username || "",
          country: data.country || "",
          confirmed: !!data.confirmed_at,
        });
      })
      .catch((err) => {
        console.error(err);
        setAlert({ type: "error", message: "Failed to load user." });
      })
      .finally(() => setLoading(false));
  }, [id, token]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setUserData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    // if (!window.confirm('Save changes to this user?')) return;

    setSaving(true);
    try {
      const res = await fetch(`https://media.upfrica.com/api/users/${id}/`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Token ${token}`,
        },
        body: JSON.stringify({
          first_name: userData.first_name,
          last_name: userData.last_name,
          email: userData.email,
          username: userData.username,
          country: userData.country,
          confirmed_at: userData.confirmed ? new Date().toISOString() : null,
        }),
      });
      if (!res.ok) throw new Error("Update failed");

      window.alert("User updated successfully.");
      router.back();
      // setAlert({ type: 'success', message: 'User saved.' });
    } catch (err) {
      console.error(err);
      window.alert("Could not save user.");
      setAlert({ type: "error", message: "Save failed." });
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Loading user‚Ä¶</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen px-4 py-6 bg-gray-50">
      <div className="bg-white shadow-md rounded-lg p-6 max-w-lg mx-auto">
        <button
          onClick={() => router.back()}
          className="flex items-center text-gray-600 mb-4"
        >
          <FiArrowLeft className="mr-2" /> Back
        </button>

        {alert.message && (
          <div
            className={`mb-4 px-4 py-3 border rounded ${
              alert.type === "success"
                ? "bg-green-100 border-green-400 text-green-700"
                : "bg-red-100 border-red-400 text-red-700"
            }`}
          >
            <span>{alert.message}</span>
            <button
              onClick={() => setAlert({ type: "", message: "" })}
              className="float-right font-bold"
            >
              √ó
            </button>
          </div>
        )}

        <h1 className="text-2xl font-semibold mb-4">Edit User</h1>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block mb-1">First Name</label>
            <input
              name="first_name"
              value={userData.first_name}
              onChange={handleChange}
              className="w-full px-3 py-2 border rounded"
            />
          </div>

          <div>
            <label className="block mb-1">Last Name</label>
            <input
              name="last_name"
              value={userData.last_name}
              onChange={handleChange}
              className="w-full px-3 py-2 border rounded"
            />
          </div>

          <div>
            <label className="block mb-1">Email</label>
            <input
              type="email"
              name="email"
              value={userData.email}
              onChange={handleChange}
              className="w-full px-3 py-2 border rounded"
            />
          </div>

          <div>
            <label className="block mb-1">Username</label>
            <input
              name="username"
              value={userData.username}
              onChange={handleChange}
              className="w-full px-3 py-2 border rounded"
            />
          </div>

          <div>
            <label className="block mb-1">Country</label>
            <input
              name="country"
              value={userData.country}
              onChange={handleChange}
              className="w-full px-3 py-2 border rounded"
            />
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              name="confirmed"
              checked={userData.confirmed}
              onChange={handleChange}
              id="confirmed"
            />
            <label htmlFor="confirmed" className="ml-2">
              Verified
            </label>
          </div>

          <button
            type="submit"
            disabled={saving}
            className={`w-full flex justify-center items-center py-2 rounded-full text-white ${
              saving
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-violet-600 hover:bg-violet-700"
            }`}
          >
            <FaSave className="mr-2" />
            {saving ? "Saving‚Ä¶" : "Save Changes"}
          </button>
        </form>
      </div>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/all-users/page.jsx =====
"use client";

import { useRouter } from "next/navigation";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { FaEye, FaEdit, FaTrash } from "react-icons/fa";
import { FiSearch } from "react-icons/fi";
import Pagination from "@/components/Pagination";

const DEFAULT_PAGE_SIZE = 20;
const SKELETON_ROWS = 10;
const DEBOUNCE_DELAY = 500;

export default function UserList() {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // pagination & search
  const [perPage, setPerPage] = useState(DEFAULT_PAGE_SIZE);
  const [searchInput, setSearchInput] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  // data & loading
  const [users, setUsers] = useState([]);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);

  // alerts & deleting state
  const [alert, setAlert] = useState({ type: "", message: "" });
  const [deletingId, setDeletingId] = useState(null);

  // debounce search input
  useEffect(() => {
    const handler = setTimeout(() => {
      setSearchQuery(searchInput.trim());
      setCurrentPage(1);
    }, DEBOUNCE_DELAY);
    return () => clearTimeout(handler);
  }, [searchInput]);

  // fetch users or search
  useEffect(() => {
    if (!token) return;
    setLoading(true);

    const headers = new Headers();
    headers.append("Authorization", `Token ${token}`);
    let url;

    if (searchQuery) {
      url = `https://media.upfrica.com/api/users/search?q=${encodeURIComponent(searchQuery)}&page=${currentPage}&page_size=${perPage}`;
    } else {
      url = `https://media.upfrica.com/api/user-list/?page=${currentPage}&page_size=${perPage}`;
    }

    fetch(url, {
      method: "GET",
      headers,
      redirect: "follow",
    })
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch users");
        return res.json();
      })
      .then((data) => {
        setUsers(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / perPage));
      })
      .catch((err) => {
        console.error(err);
        setAlert({ type: "error", message: "Could not load users." });
      })
      .finally(() => setLoading(false));
  }, [token, currentPage, perPage, searchQuery]);

  // navigation
  const handleView = (id) => router.push(`/new-dashboard/all-users/${id}`);
  const handleEdit = (id) => router.push(`/new-dashboard/all-users/edit/${id}`);

  // delete user
  const handleDelete = async (id) => {
    // 1) ask for confirmation
    if (!window.confirm("Are you sure you want to delete this user?")) return;

    setDeletingId(id);

    try {
      const res = await fetch(`https://media.upfrica.com/api/users/${id}/`, {
        method: "DELETE",
        headers: { Authorization: `Token ${token}` },
      });
      if (!res.ok) throw new Error("Delete failed");

      // 2) remove from state
      setUsers((prev) => prev.filter((u) => u.id !== id));

      // 3) show a browser alert
      window.alert("User deleted successfully.");

      // optional: also show your in-page alert banner
      // setAlert({ type: 'success', message: 'User deleted.' });
    } catch (err) {
      console.error(err);
      window.alert("Could not delete user."); // you can alert on error too
      // setAlert({ type: 'error', message: 'Could not delete user.' });
    } finally {
      setDeletingId(null);
    }
  };
  return (
    <div className="min-h-screen px-4 py-6 bg-gray-50">
      <div className="bg-white shadow-md rounded-lg p-6">
        {/* Header + Search */}
        <header className="flex items-center space-x-6 mb-6">
          <div>
            <h1 className="text-3xl font-semibold">Hi {user?.username}</h1>
            <p className="text-gray-600">Welcome to user management</p>
          </div>
          <div className="relative flex-1 max-w-full">
            <FiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search users‚Ä¶"
              className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
            />
          </div>
        </header>

        {/* Alert */}
        {alert.message && (
          <div
            className={`mb-4 px-4 py-3 border rounded ${
              alert.type === "success"
                ? "bg-green-100 border-green-400 text-green-700"
                : "bg-red-100 border-red-400 text-red-700"
            }`}
          >
            <span>{alert.message}</span>
            <button
              onClick={() => setAlert({ type: "", message: "" })}
              className="float-right font-bold"
            >
              √ó
            </button>
          </div>
        )}

        {/* Table + Pagination */}
        <div className="bg-white p-4 rounded-lg shadow-sm">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">All Users</h2>
            {totalPages > 1 && (
              <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={setCurrentPage}
              />
            )}
          </div>

          <table className="w-full table-fixed text-left">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="w-[15%] pb-2">Name</th>
                <th className="w-[30%] pb-2">Email</th>
                <th className="w-[15%] pb-2">Username</th>
                <th className="w-[10%] pb-2">Country</th>
                <th className="w-[10%] pb-2">Verified</th>
                <th className="w-[10%] pb-2">Created</th>
                <th className="w-[10%] pb-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                Array.from({ length: SKELETON_ROWS }).map((_, idx) => (
                  <tr key={idx} className="even:bg-gray-50 animate-pulse">
                    {[...Array(7)].map((__, i) => (
                      <td key={i} className="py-3">
                        <div className="h-4 bg-gray-200 rounded w-3/4 mx-auto" />
                      </td>
                    ))}
                  </tr>
                ))
              ) : users.length > 0 ? (
                users.map((u) => (
                  <tr key={u.id} className="even:bg-gray-50">
                    <td className="py-3">
                      {u.first_name} {u.last_name}
                    </td>
                    <td className="py-3">{u.email}</td>
                    <td className="py-3">{u.username}</td>
                    <td className="py-3">{u.country || "‚Äî"}</td>
                    <td className="py-3">
                      {u.confirmed_at ? (
                        <span className="text-green-600">Yes</span>
                      ) : (
                        <span className="text-red-600">No</span>
                      )}
                    </td>
                    <td className="py-3">
                      {new Date(u.created_at).toLocaleDateString()}
                    </td>
                    <td className="py-3 space-x-4 pl-3">
                      <button onClick={() => handleEdit(u.id)} title="Edit">
                        <FaEdit className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                      <button
                        onClick={() => handleDelete(u.id)}
                        disabled={deletingId === u.id}
                        title="Delete"
                        className={`transition duration-300 ${
                          deletingId === u.id
                            ? "opacity-50 cursor-not-allowed"
                            : ""
                        }`}
                      >
                        <FaTrash className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={7} className="py-4 text-center text-gray-500">
                    No users found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>

          {/* bottom pagination */}
          {totalPages > 1 && (
            <div className="mt-4 flex justify-center">
              <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={setCurrentPage}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/blog-categories/page.jsx =====
// 'use client'

// import React, { useEffect, useState } from 'react'
// import Head from 'next/head'
// import { FaEdit, FaTrash } from 'react-icons/fa'
// import { useSelector } from 'react-redux'

// export default function BlogCategoriesPage() {
//     const { token } = useSelector((state) => state.auth)

//     const [categories, setCategories] = useState([])
//     const [loading, setLoading] = useState(true)
//     const [error, setError] = useState(null)

//     const [showEditModal, setShowEditModal] = useState(false)
//     const [currentCat, setCurrentCat] = useState(null)
//     const [formData, setFormData] = useState({ name: '', slug: '', parent: null })

//     const [deleteLoadingId, setDeleteLoadingId] = useState(null)
//     const [updateLoading, setUpdateLoading] = useState(false)

//     const header = {
//         Authorization: `Token ${token}`,
//         'Content-Type': 'application/json',
//     }

//     // Fetch categories once (when token is available)
//     useEffect(() => {
//         if (!token) return
//         fetch('https://media.upfrica.com/api/blog-categories/', { headers: header })
//             .then((res) => {
//                 if (!res.ok) throw new Error(`Status ${res.status}`)
//                 return res.json()
//             })
//             .then((data) => {
//                 setCategories(data)
//                 setLoading(false)
//             })
//             .catch((err) => {
//                 console.error(err)
//                 setError('Failed to load categories.')
//                 setLoading(false)
//             })
//     }, [token])

//     // Open edit modal and pre-fill form
//     const openEdit = (cat) => {
//         setCurrentCat(cat)
//         setFormData({ name: cat.name, slug: cat.slug, parent: cat.parent })
//         setShowEditModal(true)
//     }

//     // Handle form field changes
//     const onChange = (e) => {
//         const { name, value } = e.target
//         setFormData((f) => ({
//             ...f,
//             [name]: name === 'parent' ? (value === '' ? null : Number(value)) : value,
//         }))
//     }

//     // Submit update
//     const submitUpdate = async (e) => {
//         e.preventDefault()
//         if (!confirm(`Update category ‚Äú${currentCat.name}‚Äù?`)) return

//         setUpdateLoading(true)
//         try {
//             const res = await fetch(
//                 `https://media.upfrica.com/api/admin/blog-categories/${currentCat.id}/`,
//                 {
//                     method: 'PUT',
//                     headers: header,
//                     body: JSON.stringify(formData),
//                 }
//             )
//             if (!res.ok) throw new Error(`Status ${res.status}`)
//             const updated = await res.json()

//             // replace in list
//             setCategories((cats) =>
//                 cats.map((c) => (c.id === updated.id ? updated : c))
//             )
//             setShowEditModal(false)
//         } catch (err) {
//             console.error(err)
//             alert('Failed to update.')
//         } finally {
//             setUpdateLoading(false)
//         }
//     }

//     // Delete category
//     const deleteCat = async (id) => {
//         if (!confirm('Are you sure you want to delete this category?')) return
//         setDeleteLoadingId(id)
//         try {
//             const res = await fetch(
//                 `https://media.upfrica.com/api/admin/blog-categories/${id}/`,
//                 {
//                     method: 'DELETE',
//                     headers: header,
//                 }
//             )
//             if (!res.ok) throw new Error(`Status ${res.status}`)
//             setCategories((cats) => cats.filter((c) => c.id !== id))
//         } catch (err) {
//             console.error(err)
//             alert('Failed to delete.')
//         } finally {
//             setDeleteLoadingId(null)
//         }
//     }

//     // Render flat list of categories
//     const renderList = () =>
//         categories.map((cat) => {
//             // find the name of the parent, if any
//             const parentName =
//                 cat.parent != null
//                     ? categories.find((p) => p.id === cat.parent)?.name || '‚Äî'
//                     : 'None'

//             return (
//                 <div
//                     key={cat.id}
//                     className="flex items-center justify-between bg-white p-4 rounded shadow mb-2"
//                 >
//                     <div>
//                         <strong>{cat.name}</strong>{' '}
//                         <span className="text-sm text-gray-500">({cat.slug})</span>
//                         <div className="text-xs text-gray-600">Parent: {parentName}</div>
//                     </div>
//                     <div className="flex space-x-2">
//                         <button
//                             onClick={() => openEdit(cat)}
//                             className="p-2 hover:bg-gray-100 rounded"
//                         >
//                             <FaEdit />
//                         </button>
//                         <button
//                             onClick={() => deleteCat(cat.id)}
//                             disabled={deleteLoadingId === cat.id}
//                             className="p-2 hover:bg-gray-100 rounded disabled:opacity-50"
//                         >
//                             {deleteLoadingId === cat.id ? '‚Ä¶' : <FaTrash />}
//                         </button>
//                     </div>
//                 </div>
//             )
//         })

//     return (
//         <>
//             <Head>
//                 <title>Blog Categories</title>
//             </Head>
//             <main className="min-h-screen bg-gray-50 p-6">
//                 <h1 className="text-2xl font-bold mb-4">Blog Categories</h1>

//                 {loading && <p>Loading‚Ä¶</p>}
//                 {error && <p className="text-red-500">{error}</p>}
//                 {!loading && !error && renderList()}

//                 {/* Edit Modal */}
//                 {showEditModal && (
//                     <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center">
//                         <div className="bg-white p-6 rounded shadow-lg w-full max-w-md">
//                             <h2 className="text-lg font-semibold mb-4">Edit Category</h2>
//                             <form onSubmit={submitUpdate} className="space-y-4">
//                                 <div>
//                                     <label className="block text-sm">Name</label>
//                                     <input
//                                         name="name"
//                                         value={formData.name}
//                                         onChange={onChange}
//                                         className="w-full border px-3 py-2 rounded"
//                                         required
//                                     />
//                                 </div>
//                                 <div>
//                                     <label className="block text-sm">Slug</label>
//                                     <input
//                                         name="slug"
//                                         value={formData.slug}
//                                         onChange={onChange}
//                                         className="w-full border px-3 py-2 rounded"
//                                         required
//                                     />
//                                 </div>
//                                 <div>
//                                     <label className="block text-sm">Parent (optional)</label>
//                                     <select
//                                         name="parent"
//                                         value={formData.parent ?? ''}
//                                         onChange={onChange}
//                                         className="w-full border px-3 py-2 rounded"
//                                     >
//                                         <option value="">None</option>
//                                         {categories
//                                             .filter((c) => c.id !== currentCat.id)
//                                             .map((c) => (
//                                                 <option key={c.id} value={c.id}>
//                                                     {c.name}
//                                                 </option>
//                                             ))}
//                                     </select>
//                                 </div>
//                                 <div className="flex justify-end space-x-2">
//                                     <button
//                                         type="button"
//                                         onClick={() => setShowEditModal(false)}
//                                         className="px-4 py-2 rounded border"
//                                     >
//                                         Cancel
//                                     </button>
//                                     <button
//                                         type="submit"
//                                         disabled={updateLoading}
//                                         className="px-4 py-2 rounded bg-violet-600 text-white disabled:opacity-50"
//                                     >
//                                         {updateLoading ? '‚Ä¶' : 'Save'}
//                                     </button>
//                                 </div>
//                             </form>
//                         </div>
//                     </div>
//                 )}
//             </main>
//         </>
//     )
// }

"use client";

import React, { useEffect, useState } from "react";
import Head from "next/head";
import { FaEdit, FaTrash, FaTimes, FaPlus, FaSearch } from "react-icons/fa";
import { useSelector } from "react-redux";
import LoaderButton from "@/components/LoaderButton";
import { FaP } from "react-icons/fa6";
import LoadingSkeleton from "../help-blogs/edit/[slug]/LoadingSkeleton";

export default function BlogCategoriesPage() {
  const { token } = useSelector((state) => state.auth);

  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");

  // Edit modal state
  const [showEditModal, setShowEditModal] = useState(false);
  const [currentCat, setCurrentCat] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    slug: "",
    parent: null,
  });
  const [updateLoading, setUpdateLoading] = useState(false);

  // Create modal state
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [createForm, setCreateForm] = useState({
    name: "",
    slug: "",
    parent: null,
  });
  const [createLoading, setCreateLoading] = useState(false);

  const [deleteLoadingId, setDeleteLoadingId] = useState(null);

  const headers = {
    Authorization: `Token ${token}`,
    "Content-Type": "application/json",
  };

  // Fetch categories
  useEffect(() => {
    if (!token) return;
    fetch("https://media.upfrica.com/api/blog-categories/", { headers })
      .then((res) => {
        if (!res.ok) throw new Error(`Status ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setCategories(data);
        setLoading(false);
      })
      .catch(() => {
        setError("Failed to load categories.");
        setLoading(false);
      });
  }, [token]);

  // Auto-generate slug (spaces ‚Üí hyphens; append ‚Äú-1‚Äù if name exists)
  const generateSlug = (name, excludeId = null) => {
    const base = name.trim().replace(/\s+/g, "-");
    const exists = categories.some(
      (c) => c.name === name && c.id !== excludeId,
    );
    return exists ? `${base}-1` : base;
  };

  // ‚îÄ‚îÄ CREATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  const openCreate = () => {
    setCreateForm({ name: "", slug: "", parent: null });
    setShowCreateModal(true);
  };

  const handleCreateChange = (e) => {
    const { name, value } = e.target;
    if (name === "name") {
      const slug = generateSlug(value);
      setCreateForm((f) => ({ ...f, name: value, slug }));
    } else {
      setCreateForm((f) => ({
        ...f,
        parent: value === "" ? null : Number(value),
      }));
    }
  };

  const submitCreate = async (e) => {
    e.preventDefault();
    setCreateLoading(true);
    try {
      const res = await fetch(
        "https://media.upfrica.com/api/blog-categories/",
        {
          method: "POST",
          headers,
          body: JSON.stringify({
            name: createForm.name,
            slug: createForm.slug,
            parent: createForm.parent,
          }),
        },
      );
      if (!res.ok) throw new Error(`Status ${res.status}`);
      const created = await res.json();
      setCategories((cats) => [...cats, created]);
      setShowCreateModal(false);
    } catch {
      alert("Failed to create category.");
    } finally {
      setCreateLoading(false);
    }
  };

  // ‚îÄ‚îÄ EDIT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  const openEdit = (cat) => {
    setCurrentCat(cat);
    setFormData({ name: cat.name, slug: cat.slug, parent: cat.parent });
    setShowEditModal(true);
  };

  const handleEditChange = (e) => {
    const { name, value } = e.target;
    if (name === "name") {
      const slug = generateSlug(value, currentCat.id);
      setFormData((f) => ({ ...f, name: value, slug }));
    } else {
      setFormData((f) => ({
        ...f,
        parent: value === "" ? null : Number(value),
      }));
    }
  };

  const submitUpdate = async (e) => {
    e.preventDefault();
    if (!confirm(`Update category ‚Äú${currentCat.name}‚Äù?`)) return;
    setUpdateLoading(true);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/blog-categories/${currentCat.id}/`,
        {
          method: "PUT",
          headers,
          body: JSON.stringify(formData),
        },
      );
      if (!res.ok) throw new Error(`Status ${res.status}`);
      const updated = await res.json();
      setCategories((cats) =>
        cats.map((c) => (c.id === updated.id ? updated : c)),
      );
      setShowEditModal(false);
    } catch {
      alert("Failed to update.");
    } finally {
      setUpdateLoading(false);
    }
  };

  // ‚îÄ‚îÄ DELETE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/buyer/page.jsx =====
// src/app/(pages)/new-dashboard/buyer/page.jsx
"use client";

import RoleGuard from "@/components/auth/RoleGuard";
import BuyerDashboardHome from "@/components/new-dashboard/BuyerDashboardHome";

export default function BuyerDashboardPage() {
  return (
    <RoleGuard allowed={["buyer"]}>
      <BuyerDashboardHome />
    </RoleGuard>
  );
}


===== src/app/(pages)/new-dashboard/cancelled-orders/page.jsx =====
// app/cancelled-orders/page.tsx or pages/cancelled-orders.tsx

import React from "react";
import { MdRemoveShoppingCart } from "react-icons/md";

function CancelledOrders() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 px-4 text-center">
      <MdRemoveShoppingCart className="text-7xl text-gray-500 mb-6" />
      <h1 className="text-xl md:text-2xl font-bold text-gray-800">
        No Cancelled Orders !
      </h1>
      <p className="text-gray-600 mt-3 max-w-md">
        You currently have no cancelled orders from buyers. When a buyer cancels
        an order, it will appear here for your review and further action if
        needed.
      </p>
    </div>
  );
}

export default CancelledOrders;


===== src/app/(pages)/new-dashboard/checkout/page.jsx =====
import CheckoutPage from "@/components/e-commerce/checkout/CheckoutPage";
import React from "react";

const page = () => {
  return (
    <div>
      <CheckoutPage />
    </div>
  );
};

export default page;


===== src/app/(pages)/new-dashboard/draft/page.jsx =====
"use client";

import { useRouter } from "next/navigation";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { FaEye, FaEdit, FaTrash } from "react-icons/fa";
import { FiSearch } from "react-icons/fi";
import Pagination from "@/components/Pagination";

const DEFAULT_PAGE_SIZE = 10;
const SKELETON_ROWS = 10;
const DEBOUNCE_DELAY = 500;

export default function DraftProducts() {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // pagination & search
  const [perPage, setPerPage] = useState(DEFAULT_PAGE_SIZE);
  const [searchInput, setSearchInput] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  // data & loading
  const [products, setProducts] = useState([]);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);

  // alerts
  const [alert, setAlert] = useState({ type: "", message: "" });
  const [deletingId, setDeletingId] = useState(null);

  // Debounce the input before committing to searchQuery
  useEffect(() => {
    const handler = setTimeout(() => {
      setSearchQuery(searchInput.trim());
      setCurrentPage(1);
    }, DEBOUNCE_DELAY);
    return () => clearTimeout(handler);
  }, [searchInput]);

  // Fetch (or search) whenever token, page, perPage or searchQuery changes
  useEffect(() => {
    if (!token) return;

    setLoading(true);

    const myHeaders = new Headers();
    myHeaders.append("Authorization", `Token ${token}`);

    const requestOptions = {
      method: "GET",
      headers: myHeaders,
      redirect: "follow",
    };

    const base = "https://media.upfrica.com/api/seller/draft-products";
    const params = new URLSearchParams({
      page: String(currentPage),
      page_size: String(perPage),
    });

    let url;
    if (searchQuery) {
      params.append("q", searchQuery);
      url = `https://media.upfrica.com/api/seller/search/?${params.toString()}&type=stockout`;
    } else {
      url = `${base}/?${params.toString()}`;
    }

    fetch(url, requestOptions)
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch products");
        return res.json();
      })
      .then((data) => {
        setProducts(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / perPage));
      })
      .catch((err) => {
        console.error(err);
        setAlert({ type: "error", message: "Could not load products." });
      })
      .finally(() => setLoading(false));
  }, [token, currentPage, perPage, searchQuery]);

  // navigation & delete handlers
  const handleView = (slug) =>
    router.push(`/${user?.country?.toLocaleDateString() || "gh"}/${slug}`);

  const handleEdit = (slug) => router.push(`/products/edit/${slug}`);

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this product?"))
      return;

    setDeletingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/seller/draft-products/${id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error("Failed to delete product");
      setProducts((prev) => prev.filter((p) => p.id !== id));
      setAlert({ type: "success", message: "Product deleted successfully." });
    } catch (err) {
      console.error(err);
      setAlert({ type: "error", message: "Could not delete product." });
    } finally {
      setDeletingId(null);
    }
  };

  return (
    <div className="min-h-screen px-4 py-6 bg-gray-50">
      <div className="bg-white shadow-md rounded-lg p-6">
        {/* Header + Search */}
        <header className="flex items-center space-x-6 mb-6">
          <div>
            <h1 className="text-3xl font-semibold">Hi {user?.username}</h1>
            <p className="text-gray-600">Welcome to seller dashboard</p>
          </div>
          <div className="relative flex-1 max-w-full">
            <FiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search products‚Ä¶"
              className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
            />
          </div>
        </header>

        {/* Alert */}
        {alert.message && (
          <div
            className={`mb-4 px-4 py-3 border rounded ${
              alert.type === "success"
                ? "bg-green-100 border-green-400 text-green-700"
                : "bg-red-100 border-red-400 text-red-700"
            }`}
          >
            <span>{alert.message}</span>
            <button
              onClick={() => setAlert({ type: "", message: "" })}
              className="float-right font-bold"
            >
              √ó
            </button>
          </div>
        )}

        {/* Table */}
        <div className="bg-white p-4 rounded-lg shadow-sm">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">All Products</h2>
            {totalPages > 1 && (
              <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={setCurrentPage}
              />
            )}
          </div>

          <table className="w-full table-fixed text-left">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="w-[35%] pb-2">Product Info</th>
                <th className="w-[10%] pb-2">Date Added</th>
                <th className="w-[10%] pb-2">Price</th>
                <th className="w-[10%] pb-2">Status</th>
                <th className="w-[10%] pb-2">Viewed</th>
                <th className="w-[10%] pb-2">Sold</th>
                <th className="w-[15%] pb-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                Array.from({ length: SKELETON_ROWS }).map((_, idx) => (
                  <tr key={idx} className="even:bg-gray-50 animate-pulse">
                    <td className="py-3">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-gray-200 rounded" />
                        <div className="flex-1 max-w-[40%]">
                          <div className="h-4 bg-gray-200 mb-2 rounded w-3/4" />
                          <div className="h-3 bg-gray-200 rounded w-1/2" />
                        </div>
                      </div>
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-24 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-16 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                    </td>
                  </tr>
                ))
              ) : products.length > 0 ? (
                products.map((p) => (
                  <tr key={p.id} className="even:bg-gray-50">
                    <td className="py-3">
                      <div className="flex items-center space-x-3">
                        {p.product_images?.[0] && (
                          <img
                            src={p.product_images[0]}
                            alt={p.title}
                            className="w-20 h-20 object-cover rounded"
                          />
                        )}
                        <div className="flex-1">
                          <div>{p.title}</div>
                          <div className="text-gray-500 text-sm">
                            SKU: {p.u_pid}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3">
                      {new Date(p.created_at).toLocaleDateString()}
                    </td>
                    <td className="py-3">
                      {(p.price_cents / 100).toFixed(2)} {p.price_currency}
                    </td>
                    <td className="py-3">
                      <span
                        className={
                          p.status === 1 ? "text-green-600" : "text-red-600"
                        }
                      >
                        {p.status === 0 ? "Draft" : "In Stock"}
                      </span>
                    </td>
                    <td className="py-3">{p.impressions_count ?? 0}</td>
                    <td className="py-3">{p.likes ?? 0}</td>
                    <td className="py-3 space-x-4">
                      {/* <button
                                                    onClick={() => handleView(p.slug)}
                                                    title="View"
                                                >
                                                    <FaEye className="h-4 w-4 text-[#2B3F6C]" />
                                                </button> */}
                      <button onClick={() => handleEdit(p.slug)} title="Edit">
                        <FaEdit className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                      <button
                        onClick={() => handleDelete(p.id)}
                        disabled={deletingId === p.id}
                        title="Delete"
                        className={`transition duration-300 ${
                          deletingId === p.id
                            ? "opacity-50 cursor-not-allowed"
                            : ""
                        }`}
                      >
                        <FaTrash className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={7} className="py-4 text-center text-gray-500">
                    No products found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/draft-products/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { FaLocationPin } from "react-icons/fa6";
import { MdDelete } from "react-icons/md";
import { CiEdit } from "react-icons/ci";
import { useSelector } from "react-redux";

export default function DraftProductsPage() {
  const { token } = useSelector((state) => state.auth);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [modal, setModal] = useState({
    open: false,
    type: null, // "status" or "delete"
    product: null,
    newStatus: null, // 0 or 1
  });

  // Fetch draft products
  useEffect(() => {
    if (!token) return;
    (async () => {
      try {
        const res = await fetch(
          "https://media.upfrica.com/api/products/draft/",
          { headers: { Authorization: `Token ${token}` } },
        );
        const json = await res.json();
        setProducts(json.results || []);
      } catch (err) {
        console.error("Fetch error:", err);
      } finally {
        setLoading(false);
      }
    })();
  }, [token]);

  // Update status (0 = Draft, 1 = Published)
  async function updateStatus(product, statusValue) {
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/products/draft/${product.id}/`,
        {
          method: "POST",
          headers: {
            Authorization: `Token ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ status: statusValue }),
        },
      );
      if (!res.ok) throw new Error(res.statusText);

      // If publishing, remove from draft list
      if (statusValue === 1) {
        setProducts((list) => list.filter((p) => p.id !== product.id));
      } else {
        // Otherwise update status in place
        setProducts((list) =>
          list.map((p) =>
            p.id === product.id ? { ...p, status: statusValue } : p,
          ),
        );
      }
    } catch (err) {
      alert("Error updating status: " + err.message);
    } finally {
      setModal({ open: false, type: null, product: null, newStatus: null });
    }
  }

  // Delete product
  async function deleteProduct(product) {
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/products/${product.id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error(res.statusText);
      setProducts((list) => list.filter((p) => p.id !== product.id));
    } catch (err) {
      alert("Error deleting product: " + err.message);
    } finally {
      setModal({ open: false, type: null, product: null, newStatus: null });
    }
  }

  // if (loading) return <p className="p-4">Loading drafts‚Ä¶</p>;
  // ‚îÄ‚îÄ Skeleton component ‚îÄ‚îÄ
  const SkeletonDraftCard = () => (
    <div className="flex items-center p-4 animate-pulse">
      <div className="w-24 h-24 bg-gray-300 rounded" />
      <div className="flex-1 px-4 space-y-2">
        <div className="h-6 bg-gray-300 rounded w-1/3" />
        <div className="h-5 bg-gray-300 rounded w-1/4" />
        <div className="h-4 bg-gray-300 rounded w-1/2" />
      </div>
      <div className="flex items-center space-x-4">
        <div className="w-12 h-6 bg-gray-300 rounded-full" />
        <div className="w-6 h-6 bg-gray-300 rounded" />
        <div className="w-6 h-6 bg-gray-300 rounded" />
      </div>
    </div>
  );

  return (
    // <div className="p-6 bg-gray-50 min-h-screen">
    //     <h1 className="text-2xl font-bold mb-6">Draft Products</h1>
    //     <div className="bg-white rounded-lg shadow divide-y">
    //         {products.map((p, idx) => (
    //             <div key={p.id} className="flex items-center p-4">
    //                 {/* Image */}
    //                 <img
    //                     src={p.product_images[0]}
    //                     alt={p.title}
    //                     className="w-24 h-24 object-cover rounded"
    //                 />

    //                 {/* Details */}
    //                 <div className="flex-1 px-4">
    //                     <h2 className="text-lg font-semibold">{p.title}</h2>
    //                     <p className="text-gray-700 mt-1">
    //                         {(p.price_cents / 100).toFixed(2)} {p.price_currency}
    //                     </p>
    //                     <p className="text-gray-500 text-sm mt-2 flex items-center">
    //                         <FaLocationPin className="mr-1" />
    //                         {p.user?.town || "‚Äî"}, {p.user?.country || "‚Äî"}
    //                     </p>
    //                 </div>

    //                 {/* Actions */}
    //                 <div className="flex items-center space-x-4">
    //                     <button
    //                         onClick={() =>
    //                             setModal({
    //                                 open: true,
    //                                 type: "status",
    //                                 product: p,
    //                                 newStatus: p.status === 0 ? 1 : 0,
    //                             })
    //                         }
    //                         className={`px-3 py-1 rounded-full text-sm font-medium ${p.status === 0
    //                             ? "bg-yellow-100 text-yellow-800"
    //                             : "bg-green-100 text-green-800"
    //                             }`}
    //                     >
    //                         {p.status === 0 ? "Draft" : "Published"}
    //                     </button>

    //                     <Link href={`/products/edit/${p.slug}`}>
    //                         <CiEdit className="h-6 w-6 text-blue-600 hover:text-blue-800" />
    //                     </Link>

    //                     <MdDelete
    //                         onClick={() =>
    //                             setModal({ open: true, type: "delete", product: p })
    //                         }
    //                         className="h-6 w-6 text-red-600 hover:text-red-800 cursor-pointer"
    //                     />
    //                 </div>
    //             </div>
    //         ))}
    //     </div>

    //     {/* Confirm Modal */}
    //     {modal.open && modal.product && (
    //         <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-40 z-50">
    //             <div className="bg-white rounded-lg p-6 w-11/12 max-w-md">
    //                 {modal.type === "status" && (
    //                     <>
    //                         <h3 className="text-xl font-semibold mb-4">
    //                             Change Status?
    //                         </h3>
    //                         <p className="mb-6">
    //                             Mark <strong>{modal.product.title}</strong> as{" "}
    //                             <strong>
    //                                 {modal.newStatus === 1 ? "Published" : "Draft"}
    //                             </strong>
    //                             ?
    //                         </p>
    //                         <div className="flex justify-end space-x-4">
    //                             <button
    //                                 onClick={() =>
    //                                     setModal({ open: false, type: null, product: null })
    //                                 }
    //                                 className="px-4 py-2 rounded border"
    //                             >
    //                                 Cancel
    //                             </button>
    //                             <button
    //                                 onClick={() =>
    //                                     updateStatus(modal.product, modal.newStatus)
    //                                 }
    //                                 className="px-4 py-2 rounded bg-blue-600 text-white"
    //                             >
    //                                 Confirm
    //                             </button>
    //                         </div>
    //                     </>
    //                 )}
    //                 {modal.type === "delete" && (
    //                     <>
    //                         <h3 className="text-xl font-semibold mb-4">
    //                             Delete Product?
    //                         </h3>
    //                         <p className="mb-6">
    //                             This will permanently remove{" "}
    //                             <strong>{modal.product.title}</strong>.
    //                         </p>
    //                         <div className="flex justify-end space-x-4">
    //                             <button
    //                                 onClick={() =>
    //                                     setModal({ open: false, type: null, product: null })
    //                                 }
    //                                 className="px-4 py-2 rounded border"
    //                             >
    //                                 Cancel
    //                             </button>
    //                             <button
    //                                 onClick={() => deleteProduct(modal.product)}
    //                                 className="px-4 py-2 rounded bg-red-600 text-white"
    //                             >
    //                                 Delete
    //                             </button>
    //                         </div>
    //                     </>
    //                 )}
    //             </div>
    //         </div>
    //     )}
    // </div>
    <div className="p-6 bg-gray-50 min-h-screen">
      <h1 className="text-2xl font-bold mb-6">Draft Products</h1>

      <div className="bg-white rounded-lg shadow divide-y">
        {loading
          ? // show 5 skeleton rows while loading
            Array.from({ length: 5 }).map((_, i) => (
              <SkeletonDraftCard key={i} />
            ))
          : // once loaded, show real products
            products.map((p) => (
              <div key={p.id} className="flex items-center p-4">
                {/* Image */}
                <img
                  src={p.product_images[0]}
                  alt={p.title}
                  className="w-24 h-24 object-cover rounded"
                />

                {/* Details */}
                <div className="flex-1 px-4">
                  <h2 className="text-lg font-semibold">{p.title}</h2>
                  <p className="text-gray-700 mt-1">
                    {(p.price_cents / 100).toFixed(2)} {p.price_currency}
                  </p>
                  <p className="text-gray-500 text-sm mt-2 flex items-center">
                    <FaLocationPin className="mr-1" />
                    {p.user?.town || "‚Äî"}, {p.user?.country || "‚Äî"}
                  </p>
                </div>

                {/* Actions */}
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() =>
                      setModal({
                        open: true,
                        type: "status",
                        product: p,
                        newStatus: p.status === 0 ? 1 : 0,
                      })
                    }
                    className={`px-3 py-1 rounded-full text-sm font-medium ${
                      p.status === 0
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-green-100 text-green-800"
                    }`}
                  >
                    {p.status === 0 ? "Draft" : "Published"}
                  </button>

                  <Link href={`/products/edit/${p.slug}`}>
                    <CiEdit className="h-6 w-6 text-blue-600 hover:text-blue-800" />
                  </Link>

                  <MdDelete
                    onClick={() =>
                      setModal({ open: true, type: "delete", product: p })
                    }
                    className="h-6 w-6 text-red-600 hover:text-red-800 cursor-pointer"
                  />
                </div>
              </div>
            ))}
      </div>

      {/* Confirm Modal */}
      {modal.open && modal.product && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-40 z-50">
          <div className="bg-white rounded-lg p-6 w-11/12 max-w-md">
            {modal.type === "status" && (
              <>
                <h3 className="text-xl font-semibold mb-4">Change Status?</h3>
                <p className="mb-6">
                  Mark <strong>{modal.product.title}</strong> as{" "}
                  <strong>
                    {modal.newStatus === 1 ? "Published" : "Draft"}
                  </strong>
                  ?
                </p>
                <div className="flex justify-end space-x-4">
                  <button
                    onClick={() =>
                      setModal({ open: false, type: null, product: null })
                    }
                    className="px-4 py-2 rounded border"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => updateStatus(modal.product, modal.newStatus)}
                    className="px-4 py-2 rounded bg-blue-600 text-white"
                  >
                    Confirm
                  </button>
                </div>
              </>
            )}
            {modal.type === "delete" && (
              <>
                <h3 className="text-xl font-semibold mb-4">Delete Product?</h3>
                <p className="mb-6">
                  This will permanently remove{" "}
                  <strong>{modal.product.title}</strong>.
                </p>
                <div className="flex justify-end space-x-4">
                  <button
                    onClick={() =>
                      setModal({ open: false, type: null, product: null })
                    }
                    className="px-4 py-2 rounded border"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => deleteProduct(modal.product)}
                    className="px-4 py-2 rounded bg-red-600 text-white"
                  >
                    Delete
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/edit-product/[slug]/page.jsx =====
"use client";
import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useFormik } from "formik";
import { FaMinus, FaPlus, FaTimes, FaArrowLeft, FaEye } from "react-icons/fa";
import { IoMdNotifications } from "react-icons/io";
import { useRouter } from "next/navigation";

import LoaderButton from "@/components/LoaderButton";
import Title from "@/components/input/Title";
import Description from "@/components/input/Description";
import Categore from "@/components/input/Categore";
import Conditon from "@/components/input/Conditon";
import Brand from "@/components/input/Brand";
import PriceSection from "@/components/input/PriceSection";
import Promotions from "@/components/input/Promotions";
import DeliverySection from "@/components/input/DeliverySection";
import CancellationReturns from "@/components/input/CancellationReturns";
import ApprovalNotesSelect from "@/components/input/ApprovalNotesSelect";
import PhotoUploader from "@/components/input/Photo";

// Skeleton loader for the edit form
function SkeletonLoader() {
  return (
    <div className="animate-pulse max-w-5xl mx-auto p-4 space-y-6">
      <div className="h-10 bg-gray-300 rounded w-1/3 mx-auto" />
      <div className="space-y-4">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="h-8 bg-gray-300 rounded" />
        ))}
      </div>
      <div className="space-y-4">
        {[...Array(3)].map((_, i) => (
          <div key={i} className="h-40 bg-gray-300 rounded" />
        ))}
      </div>
      <div className="h-12 bg-gray-300 rounded" />
    </div>
  );
}

// Modal popup for success/error
function NotificationModal({ open, onClose, title, message, slug }) {
  const router = useRouter();
  if (!open) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-lg max-w-md w-full relative p-6">
        {/* Close button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-800"
        >
          <FaTimes size={18} />
        </button>
        <h2 className="text-xl font-semibold mb-2">{title}</h2>
        <p className="mb-6">{message}</p>
        <div className="flex justify-end space-x-3">
          <button
            onClick={() => router.back()}
            className="px-4 py-2 border rounded hover:bg-gray-100 flex items-center"
          >
            <FaArrowLeft className="mr-2" />
            Go Back
          </button>

          <button
            onClick={() => router.push(`/${slug}`)}
            className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 flex items-center"
          >
            <FaEye className="mr-2" />
            Preview
          </button>
        </div>
      </div>
    </div>
  );
}

export default function EditProductPage({ params }) {
  const { slug } = params;
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [positionsOpen, setPositionsOpen] = useState(false);
  const [supplierOpen, setSupplierOpen] = useState(false);
  const [selectedImages, setSelectedImages] = useState([]);
  const [multiBuyTiers, setMultiBuyTiers] = useState([]);
  const [modal, setModal] = useState({
    open: false,
    title: "",
    message: "",
  });

  // Fetch existing product
  useEffect(() => {
    async function fetchProduct() {
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/products/${slug}/`,
        );
        const data = await res.json();
        // let tiers = [];
        // if (data.secondary_data?.multi_buy_tiers) {
        //     try {
        //         tiers = JSON.parse(data.secondary_data.multi_buy_tiers) || [{}];
        //     } catch { tiers = []; }
        // }
        // if (!tiers.length) tiers = [{ min_quantity: '', price_each: '' }];
        // setProduct(data);
        // setMultiBuyTiers(tiers);

        let tiers = [];

        if (data.secondary_data?.multi_buy_tiers) {
          const rawTiers = data.secondary_data.multi_buy_tiers;

          if (typeof rawTiers === "string") {
            try {
              tiers = JSON.parse(rawTiers) || [{}];
            } catch {
              tiers = [];
            }
          } else if (Array.isArray(rawTiers)) {
            tiers = rawTiers;
          }
        }

        if (!tiers.length) {
          tiers = [{ min_quantity: "", price_each: "" }];
        }

        setProduct(data);
        setMultiBuyTiers(tiers);

        setSelectedImages(
          (data.product_images || []).map((url) => ({ data_url: url })),
        );
      } catch (err) {
        console.error(err);
        setModal({
          open: true,
          title: "Error Loading",
          message: "Could not load product data. Please try again.",
        });
      } finally {
        setLoading(false);
      }
    }
    fetchProduct();
  }, [slug]);

  // Formik setup
  const formik = useFormik({
    enableReinitialize: true,
    initialValues: {
      title: product?.title || "",
      description: product?.description || "",
      product_quantity: product?.product_quantity || 1,
      price_cents: product?.price_cents?.toString() || "0",
      price_currency: product?.price_currency || "GHS",
      status: product?.status || "",
      on_sales: product?.on_sales === "yes" ? "yes" : "no",
      sale_price_cents: product?.sale_price_cents || 0,
      sale_start_date: product?.sale_start_date || "",
      sale_end_date: product?.sale_end_date || "",
      postage_fee_cents: product?.postage_fee_cents || 0,
      secondary_postage_fee_cents: product?.secondary_postage_fee_cents || 0,
      multi_buy: product?.secondary_data?.multi_buy === "yes" ? "yes" : "no",
      multi_buy_tiers: multiBuyTiers,
      cancellable: product?.secondary_data?.cancellable || false,
      cancellationWindowHours:
        product?.cancellation_policy?.cancellationWindowHours || 2,
      sellerResponseSLA:
        product?.cancellation_policy?.sellerResponseSLA || "24h",
      denyIfShippedOrCustom:
        product?.cancellation_policy?.denyIfShippedOrCustom || false,
      autoCancelUnpaidHours:
        product?.cancellation_policy?.autoCancelUnpaidHours || 48,
      abuseFlagThreshold: product?.cancellation_policy?.abuseFlagThreshold || 5,
      approval_notes: product?.secondary_data?.approval_notes || "",
      brand: product?.brand?.id || "",
      category: product?.category?.id || "",
      condition: product?.condition?.id || "",
    },
    onSubmit: async (values) => {
      const formData = new FormData();
      // Append all fields...
      formData.append("title", values.title);
      formData.append("description", values.description);
      formData.append("product_quantity", values.product_quantity.toString());
      formData.append("price_cents", values.price_cents);
      formData.append("price_currency", values.price_currency);
      formData.append("status", values.status);
      formData.append("user_id", user?.user?.id);
      formData.append("brand", values.brand);
      formData.append("category", values.category);
      formData.append("condition", values.condition);
      formData.append("on_sales", values.on_sales);
      if (values.on_sales === "yes") {
        formData.append("sale_price_cents", values.sale_price_cents.toString());
        formData.append("sale_price_currency", values.price_currency);
        formData.append("sale_start_date", values.sale_start_date);
        formData.append("sale_end_date", values.sale_end_date);
      }
      formData.append("postage_fee_cents", values.postage_fee_cents.toString());
      formData.append(
        "secondary_postage_fee_cents",
        values.secondary_postage_fee_cents.toString(),
      );
      formData.append("multi_buy", values.multi_buy);
      if (values.multi_buy === "yes") {
        formData.append(
          "multi_buy_tiers",
          JSON.stringify(values.multi_buy_tiers),
        );
      } else {
        formData.append("multi_buy_tiers", "");
      }
      formData.append("cancellable", values.cancellable ? "yes" : "no");
      if (values.cancellable) {
        formData.append(
          "cancellation_policy",
          JSON.stringify({
            cancellable: values.cancellable,
            cancellationWindowHours: values.cancellationWindowHours,
            sellerResponseSLA: values.sellerResponseSLA,
            denyIfShippedOrCustom: values.denyIfShippedOrCustom,
            autoCancelUnpaidHours: values.autoCancelUnpaidHours,
            abuseFlagThreshold: values.abuseFlagThreshold,
          }),
        );
      }
      formData.append("approval_notes", values.approval_notes);
      const existingUrls = selectedImages
        .filter((img) => !img.file)
        .map((img) => img.data_url);
      if (existingUrls.length) {
        formData.append("existing_image_urls", JSON.stringify(existingUrls));
      }
      selectedImages
        .filter((img) => img.file)
        .forEach((img) => formData.append("images", img.file, img.file.name));

      // selectedImages.forEach((img, idx) => {
      // const identifier = img.data_url || (img.file && img.file.name) || 'unknown';
      // console.log(`Image position ${idx + 1}:`, identifier);
      // })

      selectedImages.forEach((img, idx) => {
        if (img.file) {
          // Local file: just the filename
          console.log(`Image position ${idx + 1}: ${img.file.name}`);
        } else {
          // Already-uploaded image: log its URL
          console.log(`Image position ${idx + 1}: ${img.data_url}`);
        }
      });
      const imageOrder = selectedImages.map((img) =>
        img.file ? img.file.name : img.data_url,
      );
      // ‚Ä¶and log it
      console.log("Image order array:", imageOrder);

      // Now append that array (stringified) to your form data
      // return;
      formData.append("image_positions", JSON.stringify(imageOrder));

      try {
        const res = await fetch(
          `https://media.upfrica.com/api/product/${product.id}/`,
          {
            method: "PATCH",
            headers: { Authorization: `Token ${token}` },
            body: formData,
          },
        );
        if (!res.ok) throw new Error("Network response was not ok");
        const result = await res.json();
        setModal({
          open: true,
          title: "Update Successful",
          message: "Your product was updated successfully.",
        });
      } catch (err) {
        console.error(err);
        setModal({
          open: true,
          title: "Update Failed",
          message:
            "There was an error updating your product. Please try again.",
        });
      }
    },
  });

  if (loading) {
    return <SkeletonLoader />;
  }

  return (
    <>
      <NotificationModal
        open={modal.open}
        title={modal.title}
        message={modal.message}
        slug={slug}
        onClose={() => setModal((m) => ({ ...m, open: false }))}
      />

      <div className="flex justify-center md:pt-20 bg-slate-50 px-2 md:px-4">
        <form
          onSubmit={formik.handleSubmit}
          className="w-full lg:max-w-5xl py-5 space-y-6"
        >
          {/* Header */}
          <div className="text-center pb-8">
            <h1 className="text-3xl font-bold">
              Edit Listing: {product.title}
            </h1>
          </div>

          {/* Homepage Positions */}
          <div className="p-4 bg-white shadow-md rounded-xl">
            <div className="flex justify-between items-center mb-2">
              <h2 className="font-bold">Homepage Positions</h2>
              <button
                onClick={(e) => {
                  e.preventDefault();
                  setPositionsOpen(!positionsOpen);
                }}
              >
                {positionsOpen ? <FaMinus /> : <FaPlus />}
              </button>
            </div>
            {positionsOpen && (
              <div className="space-y-2">
                {[1, 2, 3, 4, 5].map((pos) => (
                  <label key={pos} className="flex items-center">
                    <input type="checkbox" className="mr-2 rounded" />
                    Position {pos}
                  </label>
                ))}
              </div>
            )}
          </div>

          {/* Supplier & Costing */}
          <div className="p-4 bg-white shadow-md rounded-xl">
            <div className="flex justify-between items-center mb-2">
              <div className="flex items-center space-x-2">
                <IoMdNotifications />
                <span className="font-bold">Supplier & Costing</span>
              </div>
              <button
                onClick={(e) => {
                  e.preventDefault();
                  setSupplierOpen(!supplierOpen);
                }}
              >
                {supplierOpen ? <FaMinus /> : <FaPlus />}
              </button>
            </div>
            {supplierOpen && (
              <div className="pt-4 space-y-4 text-base text-gray-700">
                {/* supplier fields here */}
              </div>
            )}
          </div>

          {/* Main Sections */}
          <div className="bg-white shadow-md rounded-md p-4 space-y-6">
            <PhotoUploader
              initialImages={product.product_images}
              onImagesSelect={setSelectedImages}
            />
            <Title formik={formik} />
            <Description formik={formik} />
            <Categore formik={formik} />
            <Conditon formik={formik} />
            <Brand formik={formik} />
          </div>

          <PriceSection formik={formik} />
          <DeliverySection formik={formik} />
          <Promotions formik={formik} />
          <CancellationReturns formik={formik} />
          <ApprovalNotesSelect formik={formik} />

          {/* Actions */}
          <div className="flex justify-between p-4 bg-white shadow-md rounded-md">
            <button
              type="submit"
              disabled={formik.isSubmitting}
              className="bg-purple-500 text-white px-6 py-2 rounded-md"
            >
              {formik.isSubmitting ? "Saving‚Ä¶" : "Save Changes"}
            </button>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/edit-product/specifics/[id]/page.jsx =====
"use client";

import React, { useState } from "react";
import { FaTrashAlt } from "react-icons/fa";

const ProductSpecificsForm = ({ params }) => {
  const { id } = params;

  const [specifics, setSpecifics] = useState([
    {
      label: "",
      value: "",
      active: true,
    },
  ]);
  const [loading, setLoading] = useState(false);

  const handleSpecificChange = (idx, updated) => {
    const copy = [...specifics];
    copy[idx] = updated;
    setSpecifics(copy);
  };

  const handleRemoveSpecific = (idx) => {
    const copy = [...specifics];
    copy.splice(idx, 1);
    setSpecifics(copy);
  };

  const addSpecific = () => {
    setSpecifics([...specifics, { label: "", value: "", active: true }]);
  };

  const handleSubmit = async () => {
    setLoading(true);
    try {
      // Prepare array of { label, value } for bulk endpoint
      const payload = specifics.map((s) => ({
        label: s.label,
        value: s.value,
      }));

      const resp = await fetch(
        `https://media.upfrica.com/api/products/${id}/properties/bulk/`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Token aSJ36UapeFH5YARFamDTYhnJ",
          },
          body: JSON.stringify(payload),
        },
      );

      if (!resp.ok) {
        const text = await resp.text();
        throw new Error(`Error ${resp.status}: ${text}`);
      }

      alert("Specifics created successfully");
    } catch (err) {
      console.error(err);
      alert("Failed to save specifics‚Äîcheck console for details.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 pb-24 relative">
      <div className="my-8">
        <strong className="text-lg text-gray-800 block">
          Product #{id} Specifics
        </strong>
      </div>

      <h3 className="text-xl font-bold text-gray-800 mb-4">Specifics</h3>

      {specifics.map((s, i) => (
        <div
          key={i}
          className="border border-gray-300 rounded-lg mb-6 shadow-sm bg-white p-4"
        >
          <div className="flex flex-wrap md:flex-nowrap md:items-center gap-4">
            <div className="flex-1">
              <label className="text-sm font-medium text-gray-700 block mb-1">
                Label
              </label>
              <input
                type="text"
                value={s.label}
                onChange={(e) =>
                  handleSpecificChange(i, {
                    ...s,
                    label: e.target.value,
                  })
                }
                className="w-full border rounded px-3 py-2 text-sm"
                placeholder="e.g. Color"
              />
            </div>

            <div className="flex-1">
              <label className="text-sm font-medium text-gray-700 block mb-1">
                Value
              </label>
              <input
                type="text"
                value={s.value}
                onChange={(e) =>
                  handleSpecificChange(i, {
                    ...s,
                    value: e.target.value,
                  })
                }
                className="w-full border rounded px-3 py-2 text-sm"
                placeholder="e.g. Red"
              />
            </div>

            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={s.active}
                onChange={(e) =>
                  handleSpecificChange(i, {
                    ...s,
                    active: e.target.checked,
                  })
                }
              />
              <span className="text-sm">Active</span>
            </div>

            <button
              onClick={() => handleRemoveSpecific(i)}
              className="text-red-600 hover:text-red-800 ml-auto text-sm flex items-center gap-1"
            >
              <FaTrashAlt /> Delete
            </button>
          </div>
        </div>
      ))}

      <div className="flex items-center gap-4">
        <button
          onClick={addSpecific}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm"
        >
          + Add Specific
        </button>

        <button
          onClick={handleSubmit}
          disabled={loading}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm"
        >
          {loading ? "Saving‚Ä¶" : "Submit"}
        </button>
      </div>
    </div>
  );
};

export default ProductSpecificsForm;


===== src/app/(pages)/new-dashboard/edit-product/variants/[id]/page.jsx =====
// "use client";
// import React, { useState } from "react";
// import { FaTrashAlt } from "react-icons/fa";

// const ProductVariantForm = ({ params }) => {
//     const { id } = params;
//     console.log("Product ID:", id);
//     const [variants, setVariants] = useState([
//         {
//             label: "Package",
//             active: true,
//             useImageVariant: false,
//             options: [
//                 {
//                     value: "With Battery",
//                     additionalPrice: "0.00",
//                     active: true,
//                     images: [],
//                 },
//                 {
//                     value: "With Battery & Solar Panels",
//                     additionalPrice: "599.00",
//                     active: true,
//                     images: [],
//                 },
//             ],
//         },
//     ]);

//     const handleVariantChange = (index, updatedVariant) => {
//         const newVariants = [...variants];
//         newVariants[index] = updatedVariant;
//         setVariants(newVariants);
//     };

//     const handleRemoveVariant = (index) => {
//         const newVariants = [...variants];
//         newVariants.splice(index, 1);
//         setVariants(newVariants);
//     };

//     const addVariant = () => {
//         setVariants([
//             ...variants,
//             {
//                 label: "",
//                 active: true,
//                 useImageVariant: false,
//                 options: [],
//             },
//         ]);
//     };

//     const addOption = (variantIndex) => {
//         const newVariants = [...variants];
//         newVariants[variantIndex].options.push({
//             value: "",
//             additionalPrice: "0.00",
//             active: true,
//             images: [],
//         });
//         setVariants(newVariants);
//     };

//     const handleOptionChange = (variantIndex, optionIndex, updatedOption) => {
//         const newVariants = [...variants];
//         newVariants[variantIndex].options[optionIndex] = updatedOption;
//         setVariants(newVariants);
//     };

//     const handleRemoveOption = (variantIndex, optionIndex) => {
//         const newVariants = [...variants];
//         newVariants[variantIndex].options.splice(optionIndex, 1);
//         setVariants(newVariants);
//     };

//     const handleSubmit = () => {
//         console.log("Submitted Variants:", variants);
//     };

//     return (
//         <div className="container mx-auto px-4 pb-24 relative">
//             {/* Product Info */}
//             <div className="my-8">
//                 <div>
//                     <strong className="text-lg text-gray-800 block">
//                         Sliding Gate Opener Electric/Battery and Solar | Sliding Gate Opener Kit 12v DC 1200kg Heavy Duty Security Gate Operator set
//                     </strong>
//                 </div>
//                 <div className="mt-2 flex flex-wrap items-center gap-3">
//                     <span className="text-base font-semibold text-gray-700">Current price:</span>
//                     <span className="font-bold text-green-700 text-lg">$7,900.00</span>
//                     <span className="line-through text-gray-500">$8,600.00</span>
//                     <span className="text-sm font-semibold text-red-500">8% off</span>
//                 </div>
//             </div>

//             <hr className="my-6" />

//             <h3 className="text-xl font-bold text-gray-800 mb-4">Product Variants</h3>

//             {variants.map((variant, i) => (
//                 <div key={i} className="border border-gray-300 rounded-lg mb-8 shadow-sm bg-white">
//                     <div className="bg-gray-100 px-4 py-3 flex flex-wrap md:flex-nowrap md:items-center gap-4">
//                         <div className="flex-1">
//                             <label className="text-sm font-medium text-gray-700 block mb-1">
//                                 Attribute Name (e.g. Colour, Size)
//                             </label>
//                             <input
//                                 type="text"
//                                 value={variant.label}
//                                 onChange={(e) =>
//                                     handleVariantChange(i, {
//                                         ...variant,
//                                         label: e.target.value,
//                                     })
//                                 }
//                                 className="w-full border rounded px-3 py-2 text-sm"
//                                 placeholder="e.g. Color"
//                             />
//                         </div>
//                         <div className="flex items-center gap-2">
//                             <input
//                                 type="checkbox"
//                                 checked={variant.active}
//                                 onChange={(e) =>
//                                     handleVariantChange(i, {
//                                         ...variant,
//                                         active: e.target.checked,
//                                     })
//                                 }
//                             />
//                             <span className="text-sm">Active</span>
//                         </div>
//                         <div className="flex items-center gap-2">
//                             <input
//                                 type="checkbox"
//                                 checked={variant.useImageVariant}
//                                 onChange={(e) =>
//                                     handleVariantChange(i, {
//                                         ...variant,
//                                         useImageVariant: e.target.checked,
//                                     })
//                                 }
//                             />
//                             <span className="text-sm">Use image variant</span>
//                         </div>
//                         <button
//                             onClick={() => handleRemoveVariant(i)}
//                             className="text-red-600 hover:text-red-800 ml-auto text-sm flex items-center gap-1"
//                         >
//                             <FaTrashAlt /> Delete
//                         </button>
//                     </div>

//                     {/* Variant Options */}
//                     <div className="p-4">
//                         {variant.options.map((opt, j) => (
//                             <div
//                                 key={j}
//                                 className="mb-4 border border-gray-200 rounded-md p-4 bg-gray-50"
//                             >
//                                 <div className="grid grid-cols-1 md:grid-cols-12 gap-4 mb-3">
//                                     <div className="md:col-span-3">
//                                         <label className="block text-sm font-medium text-gray-700 mb-1">
//                                             Option Value
//                                         </label>
//                                         <input
//                                             type="text"
//                                             value={opt.value}
//                                             onChange={(e) =>
//                                                 handleOptionChange(i, j, {
//                                                     ...opt,
//                                                     value: e.target.value,
//                                                 })
//                                             }
//                                             className="w-full border rounded px-3 py-2 text-sm"
//                                             placeholder="e.g. Red"
//                                         />
//                                     </div>
//                                     <div className="md:col-span-3">
//                                         <label className="block text-sm font-medium text-gray-700 mb-1">
//                                             Additional Price (cents)
//                                         </label>
//                                         <input
//                                             type="text"
//                                             value={opt.additionalPrice}
//                                             onChange={(e) =>
//                                                 handleOptionChange(i, j, {
//                                                     ...opt,
//                                                     additionalPrice: e.target.value,
//                                                 })
//                                             }
//                                             className="w-full border rounded px-3 py-2 text-sm"
//                                         />
//                                     </div>
//                                     <div className="md:col-span-2 flex items-center gap-2">
//                                         <input
//                                             type="checkbox"
//                                             checked={opt.active}
//                                             onChange={(e) =>
//                                                 handleOptionChange(i, j, {
//                                                     ...opt,
//                                                     active: e.target.checked,
//                                                 })
//                                             }
//                                         />
//                                         <span className="text-sm">Active</span>
//                                     </div>
//                                     <div className="md:col-span-2 flex items-center">
//                                         <button
//                                             onClick={() => handleRemoveOption(i, j)}
//                                             className="text-red-600 hover:underline text-sm flex items-center gap-1"
//                                         >
//                                             <FaTrashAlt /> Remove Option
//                                         </button>
//                                     </div>
//                                 </div>
//                                 <div>
//                                     <label className="block text-sm font-medium text-gray-700 mb-1">
//                                         Upload Images
//                                     </label>
//                                     <input
//                                         type="file"
//                                         multiple
//                                         onChange={(e) =>
//                                             handleOptionChange(i, j, {
//                                                 ...opt,
//                                                 images: Array.from(e.target.files),
//                                             })
//                                         }
//                                         className="w-full text-sm text-gray-600"
//                                     />
//                                 </div>
//                             </div>
//                         ))}

//                         <button
//                             type="button"
//                             onClick={() => addOption(i)}
//                             className="text-blue-600 text-sm hover:underline mt-2"
//                         >
//                             + Add Option
//                         </button>
//                     </div>
//                 </div>
//             ))}

//             {/* Add Variant Button */}
//             <button
//                 onClick={addVariant}
//                 className="mt-4 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm"
//             >
//                 + Add Variant
//             </button>

//             {/* Sticky Footer with Submit / Back */}
//             <div className="fixed bottom-0 left-0 right-0 bg-white shadow-md py-3 border-t flex justify-center gap-4 z-50">
//                 <button
//                     name="button"
//                     type="submit"
//                     onClick={handleSubmit}
//                     className="btn btn-sm bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded"
//                 >
//                     Submit
//                 </button>
//                 <button
//                     type="button"
//                     onClick={() => window.history.back()}
//                     className="btn btn-sm bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded"
//                 >
//                     Back
//                 </button>
//             </div>
//         </div>
//     );
// };

// export default ProductVariantForm;

"use client";

import React, { useState } from "react";
import { FaTrashAlt } from "react-icons/fa";

const ProductVariantForm = ({ params }) => {
  const { id } = params; // product ID from the route
  const [variants, setVariants] = useState([
    {
      label: "",
      active: true,
      useImageVariant: false,
      options: [
        {
          value: "",
          additionalPrice: "",
          active: true,
          images: [],
        },
      ],
    },
  ]);
  const [loading, setLoading] = useState(false);

  const handleVariantChange = (idx, updated) => {
    const copy = [...variants];
    copy[idx] = updated;
    setVariants(copy);
  };

  const handleRemoveVariant = (idx) => {
    const copy = [...variants];
    copy.splice(idx, 1);
    setVariants(copy);
  };

  const addVariant = () => {
    setVariants([
      ...variants,
      { label: "", active: true, useImageVariant: false, options: [] },
    ]);
  };

  const addOption = (vIdx) => {
    const copy = [...variants];
    copy[vIdx].options.push({
      value: "",
      additionalPrice: "0.00",
      active: true,
      images: [],
    });
    setVariants(copy);
  };

  const handleOptionChange = (vIdx, oIdx, updated) => {
    const copy = [...variants];
    copy[vIdx].options[oIdx] = updated;
    setVariants(copy);
  };

  const handleRemoveOption = (vIdx, oIdx) => {
    const copy = [...variants];
    copy[vIdx].options.splice(oIdx, 1);
    setVariants(copy);
  };

  const handleSubmit = async () => {
    setLoading(true);
    try {
      // We'll collect all variants returned by the server
      let allReturned = [];

      for (let i = 0; i < variants.length; i++) {
        const v = variants[i];
        // build the exact payload keys your API expects
        const payload = {
          label: v.label,
          use_image_variant: v.useImageVariant,
          active: v.active,
          ordering: i, // or any ordering you like
          default_value: v.options[0]?.value || "", // pick first option as default
          variant: v.options.map((opt) => ({
            value: opt.value,
            additional_price_cents: Math.round(
              parseFloat(opt.additionalPrice || "0"),
            ),
            additional_price_currency: "GHS",
            active: opt.active,
          })),
        };

        console.log("Payload for variant", i, ":", payload);

        const resp = await fetch(
          `https://media.upfrica.com/api/products/${id}/variants/`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
          },
        );

        if (!resp.ok) {
          alert("Failed to save variants‚Äîcheck console for details.");
          const text = await resp.text();
          throw new Error(`Error ${resp.status}: ${text}`);
        }
        if (resp.status === 201) {
          alert("Variant created successfully");
        }

        const data = await resp.json();
        // our endpoint returns the *full* list of variants each time
        allReturned = data;
      }

      // replace local state with server's truth
      // setVariants(
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/help-blogs/[slug]/layout.js =====
import React from "react";

const layout = ({ children }) => {
  return <div>{children}</div>;
};

export default layout;


===== src/app/(pages)/new-dashboard/help-blogs/[slug]/page.jsx =====
"use client";
import React, { useState, useEffect, useRef } from "react";
import Link from "next/link";
import Script from "next/script";

import { FaEdit } from "react-icons/fa";

import { FaSearch, FaBars } from "react-icons/fa";
import Footer from "@/components/common/footer/Footer";
import { useSelector } from "react-redux";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm"; // üëà import it

// üëâ Step 1: Utility function to strip HTML tags
const stripHtml = (html) => {
  if (!html) return "";
  return html.replace(/<[^>]*>?/gm, "");
};

// Dark Mode Toggle Hook
const useDarkMode = () => {
  const [enabled, setEnabled] = useState(false);
  useEffect(() => {
    const saved = localStorage.getItem("theme") === "dark";
    if (saved) {
      document.documentElement.classList.add("dark");
      setEnabled(true);
    }
  }, []);

  const toggle = () => {
    const isDark = !enabled;
    localStorage.setItem("theme", isDark ? "dark" : "light");
    document.documentElement.classList.toggle("dark", isDark);
    setEnabled(isDark);
  };
  return [enabled, toggle];
};

// Dark mode toggle button
const DarkModeToggle = () => {
  const [enabled, toggle] = useDarkMode();
  return (
    <button
      onClick={toggle}
      className="ml-4 px-3 py-2 border border-white text-white rounded-full hover:bg-white hover:text-black transition"
    >
      {enabled ? "üåô Dark" : "‚òÄÔ∏è Light"}
    </button>
  );
};

// A card skeleton for search results
const CardSkeleton = () => (
  <div className="animate-pulse p-4 bg-white dark:bg-gray-800 rounded shadow">
    <div className="h-6 bg-gray-300 dark:bg-gray-700 rounded w-5/6 mb-2"></div>
    <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-full mb-2"></div>
    <div className="h-3 bg-gray-300 dark:bg-gray-700 rounded w-4/6"></div>
  </div>
);

// Main Page Component with Search Features
export default function HelpCenterPage({ params }) {
  const { slug } = params;
  const { user, token } = useSelector((state) => state.auth);

  // Article Data States
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Static header, breadcrumbs, and sidebar information
  const staticHeader = {
    title: "Help Centre",
    backgroundImage:
      "https://images.pexels.com/photos/6214476/pexels-photo-6214476.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    searchPlaceholder: "Type your question",
  };

  const staticBreadcrumbs = [
    { label: "Help home", href: "/help" },
    { label: "Listings", href: "/help/listings" },
    { label: "Creating a Listing", href: "/help/creating-a-listing" },
  ];

  const staticSidebar = {
    helpTopics: [
      { name: "Shop Management", href: "/help/shop-management" },
      { name: "Orders & Shipping", href: "/help/orders-shipping" },
      { name: "Listings", href: "/help/listings" },
      { name: "Finances", href: "/help/finances" },
      { name: "Marketing & Promotions", href: "/help/marketing-promotions" },
      { name: "Start Selling on Etsy", href: "/help/start-selling" },
      { name: "Your Etsy Account", href: "/help/your-account" },
    ],
    articleNavigation: [
      { title: "Introduction", id: "introduction" },
      { title: "Postage Pricing", id: "postage-pricing" },
      { title: "Delivery Profile Highlight", id: "delivery-profile-highlight" },
      { title: "Sample Pricing Table", id: "sample-pricing-table" },
      { title: "Additional Resources", id: "additional-resources" },
    ],
  };

  // Fetch article data based on slug
  useEffect(() => {
    const requestOptions = {
      method: "GET",
      redirect: "follow",
    };

    fetch(`https://media.upfrica.com/api/helpblogs/${slug}`, requestOptions)
      .then((response) => response.json())
      .then((result) => {
        setData(result);
        setLoading(false);
      })
      .catch((err) => {
        console.error(err);
        setError(err);
        setLoading(false);
      });
  }, [slug]);

  // --- Search States and Debounce Logic ---
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceTimeout = useRef(null);
  const [isFocused, setIsFocused] = useState(false);

  useEffect(() => {
    // Clear any existing debounce timer
    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);

    // Clear results if query is empty
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    // Set debounce delay: 400ms
    debounceTimeout.current = setTimeout(() => {
      const encodedQuery = encodeURIComponent(searchQuery.trim());
      fetch(
        `https://media.upfrica.com/api/help-blogs/search/?q=${encodedQuery}`,
      )
        .then((response) => response.json())
        .then((data) => {
          setSearchResults(data);
          setSearchLoading(false);
        })
        .catch((error) => {
          console.error("Search fetch error:", error);
          setSearchLoading(false);
        });
    }, 400);

    return () => clearTimeout(debounceTimeout.current);
  }, [searchQuery]);

  if (loading) {
    return <SkeletonLoader />;
  }
  if (error) {
    return <div>Error loading data: {error?.message}</div>;
  }

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <Header
        data={staticHeader}
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        isFocused={isFocused}
        setIsFocused={setIsFocused}
        searchResults={searchResults}
        searchLoading={searchLoading}
      />
      <div className="absolute top-6 right-6 z-50">
        <DarkModeToggle />
      </div>

      <Breadcrumbs data={staticBreadcrumbs} />
      <div className="container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-8 ">
        <Sidebar data={staticSidebar} />
        <main className="lg:col-span-3 space-y-8 ">
          <ArticleContent data={data} />
        </main>
      </div>
      <VoteSection />
      <Footer />
      <Scripts />
    </div>
  );
}

/* --------------------------------------------------
   SkeletonLoader Component ‚Äì Mimics the page layout while data loads.
-------------------------------------------------- */
const SkeletonLoader = () => (
  <div className="min-h-screen bg-gray-100 animate-pulse ">
    {/* Header Skeleton */}
    <div className="h-24 bg-gray-300 relative">
      <div className="absolute inset-0 bg-gray-400 opacity-50"></div>
    </div>
    {/* Breadcrumbs Skeleton */}
    <div className="py-3 bg-white shadow-sm">
      <div className="container mx-auto px-4">
        <div className="h-4 w-1/2 bg-gray-300 rounded"></div>
      </div>
    </div>
    <div className="container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-8">
      {/* Sidebar Skeleton */}
      <aside className="space-y-8">
        <div className="bg-white shadow rounded p-4">
          <div className="h-6 w-1/3 bg-gray-300 mb-4"></div>
          <ul className="space-y-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <li key={i} className="h-4 bg-gray-300 rounded"></li>
            ))}
          </ul>
        </div>
        <div className="bg-white shadow rounded p-4">
          <div className="h-6 w-1/3 bg-gray-300 mb-4"></div>
          <ul className="space-y-2">
            {[1, 2, 3].map((i) => (
              <li key={i} className="h-4 bg-gray-300 rounded"></li>
            ))}
          </ul>
        </div>
      </aside>
      {/* Main Article Skeleton */}
      <main className="lg:col-span-3 space-y-8  dark:bg-gray-900 text-gray-900 dark:text-gray-100">
        <div className="space-y-4">
          <div className="h-8 w-3/4 bg-gray-300 rounded"></div>
          <div className="h-4 w-full bg-gray-300 rounded"></div>
          <div className="h-4 w-full bg-gray-300 rounded"></div>
        </div>
        {Array.from({ length: 3 }).map((_, index) => (
          <div key={index} className="space-y-4 border-t pt-4">
            <div className="h-6 w-1/2 bg-gray-300 rounded"></div>
            <div className="h-4 w-full bg-gray-300 rounded"></div>
            <div className="h-4 w-5/6 bg-gray-300 rounded"></div>
          </div>
        ))}
      </main>
    </div>
    <footer className="bg-gray-800 py-6 mt-12">
      <div className="container mx-auto text-center">
        <div className="h-4 w-1/3 bg-gray-400 rounded mx-auto"></div>
      </div>
    </footer>
  </div>
);

/* --------------------------------------------------
   Header Component ‚Äì Now includes integrated search functionality.
-------------------------------------------------- */
const Header = ({
  data,
  searchQuery,
  setSearchQuery,
  isFocused,
  setIsFocused,
  searchResults,
  searchLoading,
}) => {
  return (
    <header className="relative h-24">
      <div
        className="absolute inset-0 bg-cover bg-center"
        style={{ backgroundImage: `url("${data?.backgroundImage}")` }}
      ></div>
      <div className="absolute inset-0 bg-gradient-to-r from-black via-transparent to-black opacity-70"></div>
      <div className="absolute inset-0 flex items-center justify-between container mx-auto px-4">
        <Link href={"/help"} className="text-white text-xl font-bold">
          Help
        </Link>
        <div className="w-full max-w-md relative">
          <div className="relative">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="search"
              name="query"
              placeholder={data?.searchPlaceholder}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onFocus={() => setIsFocused(true)}
              onBlur={() => setTimeout(() => setIsFocused(false), 150)}
              className="w-full rounded-full border border-violet-700 py-2 pl-10 pr-10 focus:outline-none focus:ring-2 focus:ring-violet-700 text-gray-500"
            />
          </div>
          {/* Floating Search Results Panel */}
          {isFocused && searchQuery.trim() && (
            <div className="absolute z-20 left-0 right-0 mt-2 bg-white rounded shadow-lg p-4 max-h-96 overflow-y-auto">
              {searchLoading ? (
                <div className="grid grid-cols-1 gap-4">
                  {Array.from({ length: 6 }).map((_, i) => (
                    <CardSkeleton key={i} />
                  ))}
                </div>
              ) : (
                <>
                  {searchResults?.length > 0 ? (
                    <div className="grid grid-cols-1 gap-4">
                      {searchResults.map((post) => (
                        <Link key={post.id} href={`/help/${post.slug}/`}>
                          <div className="block p-4 bg-white rounded shadow hover:shadow-lg transition">
                            <h3 className="text-lg font-bold text-gray-900 mb-2">
                              {post.title}
                            </h3>
                            <p className="text-gray-700">
                              {post.summary?.length > 150
                                ? post.summary.substring(0, 150) + "..."
                                : post.summary}
                            </p>
                          </div>
                        </Link>
                      ))}
                    </div>
                  ) : (
                    <p className="p-4 text-center text-gray-400">
                      No results found.
                    </p>
                  )}
                </>
              )}
            </div>
          )}
        </div>
        <div>
          <Link href="/login">
            <button className="px-3 py-2 border border-white text-white rounded-full hover:bg-white hover:text-gray-900 transition">
              Sign in
            </button>
          </Link>
        </div>
      </div>
    </header>
  );
};

/* --------------------------------------------------
   Breadcrumbs Component ‚Äì Renders navigation links.
-------------------------------------------------- */
const Breadcrumbs = ({ data }) => (
  <nav className="bg-white py-3 shadow-sm">
    <div className="container mx-auto px-4">
      <ol className="flex space-x-2 text-gray-600 items-center">
        {data?.map((crumb, index) => (
          <React.Fragment key={index}>
            <li>
              <Link href={crumb.href} className="hover:text-violet-700">
                {crumb.label}
              </Link>
            </li>
            {index < data.length - 1 && <li>/</li>}
          </React.Fragment>
        ))}
      </ol>
    </div>
  </nav>
);

/* --------------------------------------------------
   Sidebar Component ‚Äì Renders the help topics and article navigation.
-------------------------------------------------- */
// Sidebar toggle button for mobile
const SidebarToggleButton = ({ onClick }) => (
  <button
    onClick={onClick}
    className="block lg:hidden mb-4 px-4 py-2 border border-gray-300 rounded-md bg-white dark:bg-zinc-800 dark:text-white"
  >
    <FaBars className="inline-block mr-2" /> Menu
  </button>
);

// Modified Sidebar to include collapsible logic
const Sidebar = ({ data }) => {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <aside className="space-y-8  dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <SidebarToggleButton onClick={() => setIsOpen(!isOpen)} />
      <div className={`${isOpen ? "block" : "hidden"} lg:block space-y-8 `}>
        <Card title="Help Topics">
          <ul className="list-disc pl-4 text-gray-700 dark:text-dark">
            {data?.helpTopics?.map((link) => (
              <li key={link.name}>
                <Link href={link.href} className="hover:underline">
                  {link.name}
                </Link>
              </li>
            ))}
          </ul>
        </Card>
        <Card title="Article Navigation">
          <ul className="list-disc pl-4 text-violet-700">
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/help-blogs/create-help-blog/page.jsx =====
// 'use client';
// import React from 'react';
// import { Editor } from '@tinymce/tinymce-react';
// import { useRef } from 'react';
// import { Formik, FieldArray } from 'formik';
// import Link from 'next/link';
// import Script from 'next/script';
// import Footer from '@/components/common/footer/Footer';
// import { useSelector } from 'react-redux';
// import { useRouter } from 'next/navigation';

// // Initial form values for creating a Help Blog Post.
// // In production, you might start with empty values or fetch defaults from your backend.
// const initialFormValues = {
//   title: "",
//   summary: "",
//   tags: [], // e.g. ["shipping", "delivery"]
//   sections: [
//     {
//       sectionTitle: "",
//       sectionType: "", // Options: "paragraph", "bullet", "highlight", "table", "image", "links"
//       // For paragraph or highlight types:
//       sectionContent: "",
//       // For bullet list type:
//       bulletItems: [],
//       // For table type:
//       tableHeaders: [],
//       tableRows: [], // Each row is an array of cell strings.
//       // For image type:
//       files: [], // File objects uploaded by the user.
//       // For links type:
//       links: [] // Each link is an object: { text: "", url: "" }
//     }
//   ]
// };

// // Simple Formik validation
// const validate = (values) => {
//   const errors = {};
//   if (!values.title) errors.title = "Title is required.";
//   if (!values.summary) errors.summary = "Summary is required.";
//   // You can extend further validations as needed.
//   return errors;
// };

// export default function CreateHelpBlogPage() {
//   const summaryEditorRef = useRef(null);
//   const { token, user } = useSelector((state) => state.auth);

//   const router = useRouter();
//   return (
//     <>
//       <div className="min-h-screen bg-gray-50 p-4 container mx-auto lg:p-20">
//         <h1 className="text-3xl font-bold text-violet-700 mb-6 text-center">
//           Create Help Blog Post
//         </h1>
//         <Formik
//           initialValues={initialFormValues}
//           validate={validate}
//           onSubmit={(values) => {
//             const myHeaders = new Headers();
//             myHeaders.append("Authorization", `Token ${token}`);
//             myHeaders.append("Content-Type", "application/json");
//             fetch("https://media.upfrica.com/api/admin/helpblogs/", {
//               method: "POST",
//               headers: myHeaders,
//               body: JSON.stringify(values),
//               redirect: "follow",
//             })
//               .then((response) => response.json())
//               .then((result) => {
//                 console.log(result);
//                 alert("Help blog post created successfully!");
//                 // Redirect to the newly created blog post page
//                 // window.location.href = `/new-dashboard/help-blogs/${result.id}`;
//                 router.back()
//               })
//               .catch((error) => {
//                 console.error("Error:", error);
//                 alert("Failed to create help blog post.");
//               });

//           }}
//           enableReinitialize
//         >
//           {({
//             values,
//             errors,
//             touched,
//             handleChange,
//             handleBlur,
//             handleSubmit,
//             setFieldValue,
//             isSubmitting,
//           }) => (
//             <form onSubmit={handleSubmit} className="space-y-6">
//               {/* Post Title */}
//               <div>
//                 <label className="block text-gray-700 font-bold mb-1">
//                   Title <span className="text-red-500">*</span>
//                 </label>
//                 <input
//                   type="text"
//                   name="title"
//                   placeholder="Enter post title"
//                   value={values.title}
//                   onChange={handleChange}
//                   onBlur={handleBlur}
//                   className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
//                 />
//                 {touched.title && errors.title && (
//                   <div className="text-red-600 text-sm">{errors.title}</div>
//                 )}
//               </div>

//               {/* Summary (TinyMCE) */}
//               <div>
//                 <label className="block text-gray-700 font-bold mb-1">
//                   Summary <span className="text-red-500">*</span>
//                 </label>
//                 <Editor
//                   apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
//                   onInit={(evt, editor) => (summaryEditorRef.current = editor)}
//                   value={values.summary || ''}
//                   onEditorChange={(content) => {
//                     setFieldValue('summary', content);
//                   }}
//                   init={{
//                     height: 250,
//                     menubar: false,
//                     plugins: [
//                       'advlist autolink lists link charmap preview anchor',
//                       'searchreplace visualblocks code fullscreen',
//                       'insertdatetime media table help wordcount',
//                     ].join(' '),
//                     toolbar:
//                       'undo redo | formatselect | ' +
//                       'bold italic underline forecolor | ' +
//                       'alignleft aligncenter alignright alignjustify | ' +
//                       'bullist numlist outdent indent | removeformat | help',
//                     content_style:
//                       'body {font - family:Helvetica,Arial,sans-serif; font-size:14px }',
//                   }}
//                 />
//                 {touched.summary && errors.summary && (
//                   <div className="text-red-600 text-sm">{errors.summary}</div>
//                 )}
//               </div>

//               {/* Tags */}
//               <div>
//                 <label className="block text-gray-700 font-bold mb-1">
//                   Tags
//                 </label>
//                 <FieldArray name="tags">
//                   {({ push, remove }) => (
//                     <div className="space-y-2">
//                       {values.tags.map((tag, index) => (
//                         <div key={index} className="flex items-center gap-2">
//                           <input
//                             type="text"
//                             name={`tags[${index}]`}
//                             placeholder="Enter tag"
//                             value={tag}
//                             onChange={handleChange}
//                             onBlur={handleBlur}
//                             className="flex-1 border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
//                           />
//                           <button
//                             type="button"
//                             onClick={() => remove(index)}
//                             className="text-red-500 font-bold"
//                           >
//                             X
//                           </button>
//                         </div>
//                       ))}
//                       <button
//                         type="button"
//                         onClick={() => push("")}
//                         className="text-violet-700 underline"
//                       >
//                         + Add Tag
//                       </button>
//                     </div>
//                   )}
//                 </FieldArray>
//               </div>

//               {/* Sections */}
//               <div>
//                 <label className="block text-gray-700 font-bold mb-1">
//                   Sections
//                 </label>
//                 <FieldArray name="sections">
//                   {({ push, remove }) => (
//                     <div className="space-y-6">
//                       {values.sections.map((section, secIndex) => (
//                         <div
//                           key={secIndex}
//                           className="border border-gray-300 rounded-md p-4 bg-gray-100"
//                         >
//                           <div className="flex justify-between items-center">
//                             <h2 className="text-xl font-semibold text-gray-800">
//                               Section {secIndex + 1}
//                             </h2>
//                             {values.sections.length > 1 && (
//                               <button
//                                 type="button"
//                                 onClick={() => remove(secIndex)}
//                                 className="text-red-500 font-bold"
//                               >
//                                 Remove Section
//                               </button>
//                             )}
//                           </div>

//                           {/* Section Title */}
//                           <div className="mt-2">
//                             <label className="block text-gray-700 font-bold mb-1">
//                               Section Title
//                             </label>
//                             <input
//                               type="text"
//                               name={`sections[${secIndex}].sectionTitle`}
//                               placeholder="Enter section title"
//                               value={section.sectionTitle}
//                               onChange={handleChange}
//                               onBlur={handleBlur}
//                               className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
//                             />
//                           </div>

//                           {/* Section Type */}
//                           <div className="mt-2">
//                             <label className="block text-gray-700 font-bold mb-1">
//                               Section Type
//                             </label>
//                             <select
//                               name={`sections[${secIndex}].sectionType`}
//                               value={section.sectionType}
//                               onChange={handleChange}
//                               className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
//                             >
//                               <option value="">Select Section Type</option>
//                               <option value="paragraph">Paragraph</option>
//                               <option value="bullet">Bullet List</option>
//                               <option value="highlight">Highlight</option>
//                               <option value="table">Table</option>
//                               <option value="image">Image</option>
//                               <option value="links">Links</option>
//                             </select>
//                           </div>

//                           {/* Conditionally render fields based on Section Type */}
//                           {["paragraph", "highlight"].includes(section.sectionType) && (
//                             <div className="mt-2">
//                               <label className="block text-gray-700 font-bold mb-1">
//                                 Content
//                               </label>
//                               <textarea
//                                 name={`sections[${secIndex}].sectionContent`}
//                                 value={section.sectionContent}
//                                 onChange={handleChange}
//                                 onBlur={handleBlur}
//                                 placeholder="Enter content"
//                                 rows="4"
//                                 className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
//                               />
//                             </div>
//                           )}

//                           {section.sectionType === "bullet" && (
//                             <div className="mt-2">
//                               <label className="block text-gray-700 font-bold mb-1">
//                                 Bullet Items
//                               </label>
//                               <FieldArray name={`sections[${secIndex}].bulletItems`}>
//                                 {({ push, remove }) => (
//                                   <div className="space-y-2">
//                                     {(section.bulletItems || []).map((item, index) => (
//                                       <div key={index} className="flex items-center gap-2">
//                                         <input
//                                           type="text"
//                                           name={`sections[${secIndex}].bulletItems[${index}]`}
//                                           value={item}
//                                           onChange={handleChange}
//                                           onBlur={handleBlur}
//                                           placeholder="Bullet item"
//                                           className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
//                                         />
//                                         <button
//                                           type="button"
//                                           onClick={() => remove(index)}
//                                           className="text-red-500 font-bold"
//                                         >
//                                           X
//                                         </button>
//                                       </div>
//                                     ))}
//                                     <button
//                                       type="button"
//                                       onClick={() => push("")}
//                                       className="text-violet-700 underline"
//                                     >
//                                       + Add Bullet
//                                     </button>
//                                   </div>
//                                 )}
//                               </FieldArray>
//                             </div>
//                           )}

//                           {section.sectionType === "table" && (
//                             <div className="mt-2 space-y-4">
//                               {/* Table Headers */}
//                               <div>
//                                 <label className="block text-gray-700 font-bold mb-1">
//                                   Table Headers
//                                 </label>
//                                 <FieldArray name={`sections[${secIndex}].tableHeaders`}>
//                                   {({ push, remove }) => (
//                                     <div className="space-y-2">
//                                       {(section.tableHeaders || []).map((header, index) => (
//                                         <div key={index} className="flex items-center gap-2">
//                                           <input
//                                             type="text"
//                                             name={`sections[${secIndex}].tableHeaders[${index}]`}
//                                             value={header}
//                                             onChange={handleChange}
//                                             onBlur={handleBlur}
//                                             placeholder="Header"
//                                             className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
//                                           />
//                                           <button
//                                             type="button"
//                                             onClick={() => remove(index)}
//                                             className="text-red-500"
//                                           >
//                                             X
//                                           </button>
//                                         </div>
//                                       ))}
//                                       <button
//                                         type="button"
//                                         onClick={() => push("")}
//                                         className="text-violet-700 underline"
//                                       >
//                                         + Add Header
//                                       </button>
//                                     </div>
//                                   )}
//                                 </FieldArray>
//                               </div>
//                               {/* Table Rows */}
//                               <div>
//                                 <label className="block text-gray-700 font-bold mb-1">
//                                   Table Rows
//                                 </label>
//                                 <FieldArray name={`sections[${secIndex}].tableRows`}>
//                                   {({ push, remove }) => (
//                                     <div className="space-y-4">
//                                       {(section.tableRows || []).map((row, rowIndex) => (
//                                         <div key={rowIndex} className="space-y-2 border p-2 rounded">
//                                           <label className="block font-bold text-gray-700">
//                                             Row {rowIndex + 1}
//                                           </label>
//                                           <FieldArray name={`sections[${secIndex}].tableRows[${rowIndex}]`}>
//                                             {({ push, remove }) => (
//                                               <div className="space-y-2">
//                                                 {row.map((cell, cellIndex) => (
//                                                   <div key={cellIndex} className="flex items-center gap-2">
//                                                     <input
//                                                       type="text"
//                                                       name={`sections[${secIndex}].tableRows[${rowIndex}][${cellIndex}]`}
//                                                       value={cell}
//                                                       onChange={handleChange}
//                                                       onBlur={handleBlur}
//                                                       placeholder="Cell"
//                                                       className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
//                                                     />
//                                                     <button
//                                                       type="button"
//                                                       onClick={() => remove(cellIndex)}
//                                                       className="text-red-500"
//                                                     >
//                                                       X
//                                                     </button>
//                                                   </div>
//                                                 ))}
//                                                 <button
//                                                   type="button"
//                                                   onClick={() => push("")}
//                                                   className="text-violet-700 underline"
//                                                 >
//                                                   + Add Cell
//                                                 </button>
//                                               </div>
//                                             )}
//                                           </FieldArray>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/help-blogs/draft-blogs/page.jsx =====
"use client";

import React, { useState, useEffect, useRef } from "react";
import Head from "next/head";
import { FaSearch, FaCheck } from "react-icons/fa";
import { MdDelete } from "react-icons/md";
import { useSelector } from "react-redux";

// Skeleton card for loading state
const CardSkeleton = () => (
  <div className="animate-pulse p-4 bg-white rounded shadow w-full">
    <div className="h-6 bg-gray-300 rounded w-5/6 mb-2"></div>
    <div className="h-4 bg-gray-300 rounded w-full mb-2"></div>
    <div className="h-3 bg-gray-300 rounded w-4/6"></div>
  </div>
);

// Simple spinner for button loading
const Loader = () => (
  <svg
    className="animate-spin h-5 w-5 text-gray-700"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
    />
  </svg>
);

// Format ‚Äúdays ago‚Äù
const convertToDaysAgo = (isoDate) => {
  const past = new Date(isoDate);
  const now = new Date();
  const diffMs = now - past;
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  return diffDays === 0
    ? "today"
    : `${diffDays} day${diffDays === 1 ? "" : "s"} ago`;
};

// Strip HTML tags for search matching
const stripHtml = (html) => html?.replace(/<[^>]*>?/gm, "") || "";

export default function HelpBlogDrafts() {
  const { token } = useSelector((state) => state.auth);
  const [drafts, setDrafts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [publishLoadingId, setPublishLoadingId] = useState(null);
  const [deleteLoadingId, setDeleteLoadingId] = useState(null);

  // Search state
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredDrafts, setFilteredDrafts] = useState([]);
  const debounceRef = useRef(null);

  // Fetch drafts on mount
  useEffect(() => {
    fetch("https://media.upfrica.com/api/admin/help-blogs/drafts/", {
      method: "GET",
      headers: { Authorization: `Token ${token}` },
    })
      .then((res) => res.json())
      .then((data) => setDrafts(Array.isArray(data) ? data : []))
      .catch(console.error)
      .finally(() => setLoading(false));
  }, [token]);

  // Debounced client-side filter
  useEffect(() => {
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(() => {
      const q = searchQuery.trim().toLowerCase();
      if (!q) {
        setFilteredDrafts(drafts);
      } else {
        setFilteredDrafts(
          drafts.filter(
            (d) =>
              d.title.toLowerCase().includes(q) ||
              stripHtml(d.summary).toLowerCase().includes(q),
          ),
        );
      }
    }, 200);
    return () => clearTimeout(debounceRef.current);
  }, [searchQuery, drafts]);

  // Publish with confirmation
  const publishDraft = async (id) => {
    if (!confirm("Publish this draft?")) return;
    setPublishLoadingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/admin/helpblogs/${id}/publish/`,
        {
          method: "PATCH",
          headers: {
            Authorization: `Token ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ status: "published" }),
        },
      );
      if (!res.ok) throw new Error(`Status ${res.status}`);
      setDrafts((prev) => prev.filter((d) => d.id !== id));
      alert("Draft published!");
    } catch (err) {
      console.error(err);
      alert("Failed to publish.");
    } finally {
      setPublishLoadingId(null);
    }
  };

  // Delete with confirmation
  const deleteDraft = async (id) => {
    if (!confirm("Delete this draft permanently?")) return;
    setDeleteLoadingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/admin/helpblogs/${id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error(`Status ${res.status}`);
      setDrafts((prev) => prev.filter((d) => d.id !== id));
      alert("Draft deleted!");
    } catch (err) {
      console.error(err);
      alert("Failed to delete.");
    } finally {
      setDeleteLoadingId(null);
    }
  };

  return (
    <>
      <Head>
        <title>Help Blog Drafts</title>
        <meta
          name="description"
          content="View and manage your draft help blogs."
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <main className="min-h-screen w-full bg-gray-100 text-gray-900 p-4">
        {/* Header + Search */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0 w-full mb-6">
          <h1 className="text-2xl font-bold">Help Blog Drafts</h1>
          <div className="relative w-full sm:w-1/3">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="search"
              placeholder="Search drafts‚Ä¶"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-violet-600"
            />
          </div>
        </div>

        {/* Draft List */}
        <div className="w-full space-y-4">
          {loading ? (
            Array.from({ length: 6 }).map((_, i) => <CardSkeleton key={i} />)
          ) : filteredDrafts.length > 0 ? (
            filteredDrafts.map((d) => (
              <div
                key={d.id}
                className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 bg-white rounded shadow hover:shadow-lg transition w-full"
              >
                {/* Info */}
                <div className="flex-1 space-y-1">
                  <h2 className="text-lg font-semibold">{d.title}</h2>
                  <div
                    className="prose prose-sm max-w-none"
                    dangerouslySetInnerHTML={{ __html: d.summary }}
                  />
                  <div className="text-xs text-gray-500 flex space-x-4">
                    <span>Created: {convertToDaysAgo(d.created_at)}</span>
                    <span>Status: {d.status}</span>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex space-x-2 mt-4 sm:mt-0">
                  <button
                    onClick={() => publishDraft(d.id)}
                    disabled={publishLoadingId === d.id}
                    className="p-2 hover:bg-gray-200 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {publishLoadingId === d.id ? <Loader /> : <FaCheck />}
                  </button>
                  <button
                    onClick={() => deleteDraft(d.id)}
                    disabled={deleteLoadingId === d.id}
                    className="p-2 hover:bg-gray-200 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {deleteLoadingId === d.id ? <Loader /> : <MdDelete />}
                  </button>
                </div>
              </div>
            ))
          ) : (
            <p className="text-center text-gray-500 w-full">
              No drafts available.
            </p>
          )}
        </div>
      </main>
    </>
  );
}


===== src/app/(pages)/new-dashboard/help-blogs/edit/[slug]/LoadingSkeleton.jsx =====
"use client";

import React from "react";

const LoadingSkeleton = () => {
  return (
    <div className="min-h-screen bg-gray-50 container mx-auto p-20">
      <div className="animate-pulse">
        {/* Header Skeleton */}
        <div className="h-8 bg-gray-300 rounded w-1/3 mx-auto mb-6"></div>

        <div className="space-y-6">
          {/* Title Field Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-2"></div>
            <div className="h-10 bg-gray-300 rounded"></div>
          </div>

          {/* Summary Field Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-2"></div>
            <div className="h-20 bg-gray-300 rounded"></div>
          </div>

          {/* Tags Field Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-2"></div>
            <div className="flex space-x-2">
              <div className="h-10 bg-gray-300 rounded w-1/3"></div>
              <div className="h-10 bg-gray-300 rounded w-1/3"></div>
              <div className="h-10 bg-gray-300 rounded w-1/3"></div>
            </div>
          </div>

          {/* Sections Skeleton */}
          <div>
            <div className="h-6 bg-gray-300 rounded w-1/4 mb-4"></div>
            {[1, 2].map((item) => (
              <div
                key={item}
                className="border border-gray-300 rounded-md p-4 bg-gray-100 mb-4"
              >
                <div className="flex justify-between items-center mb-4">
                  <div className="h-5 bg-gray-300 rounded w-1/4"></div>
                  <div className="h-5 bg-gray-300 rounded w-8"></div>
                </div>
                <div className="mb-2">
                  <div className="h-4 bg-gray-300 rounded w-1/2 mb-1"></div>
                  <div className="h-10 bg-gray-300 rounded"></div>
                </div>
                <div>
                  <div className="h-4 bg-gray-300 rounded w-1/3 mb-1"></div>
                  <div className="h-10 bg-gray-300 rounded"></div>
                </div>
              </div>
            ))}
          </div>

          {/* Submit Button Skeleton */}
          <div className="flex justify-center">
            <div className="h-12 w-40 bg-gray-300 rounded"></div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoadingSkeleton;


===== src/app/(pages)/new-dashboard/help-blogs/edit/[slug]/page.jsx =====
"use client";

import dynamic from "next/dynamic";
import React, { useState, useEffect } from "react";
import { Formik, FieldArray } from "formik";
import Link from "next/link";
import Script from "next/script";
import Footer from "@/components/common/footer/Footer";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import LoadingSkeleton from "./LoadingSkeleton";
import { Editor } from "@tinymce/tinymce-react"; // ‚¨ÖÔ∏è ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ Import ‡¶¶‡¶ø‡¶§‡ßá ‡¶≠‡ßÅ‡¶≤‡ßã ‡¶®‡¶æ
import { useRef } from "react"; // ‚¨ÖÔ∏è ‡¶è‡¶ü‡¶æ‡¶ì ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá

const UpdateHelpBlogPage = ({ params }) => {
  const { slug } = params;
  const { token } = useSelector((state) => state.auth);
  const router = useRouter();

  // State for the fetched blog and initial form values.
  const [blogData, setBlogData] = useState(null);
  const [initialValues, setInitialValues] = useState({
    title: "",
    summary: "",
    tags: [],
    sections: [],
  });
  const [loading, setLoading] = useState(true);

  const summaryEditorRef = useRef(null); // ‚¨ÖÔ∏è component ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá

  useEffect(() => {
    async function fetchBlog() {
      try {
        const requestOptions = {
          method: "GET",
          redirect: "follow",
        };
        const response = await fetch(
          `https://media.upfrica.com/api/helpblogs/${slug}`,
          requestOptions,
        );
        const data = await response.json();
        setBlogData(data);
        // Set initial form values using the fetched blog data.
        setInitialValues({
          title: data.title || "",
          summary: data.summary || "",
          tags: data.tags || [],
          sections:
            data.sections && data.sections.length > 0
              ? data.sections
              : [
                  {
                    sectionType: "",
                    sectionTitle: "",
                    sectionContent: "",
                    bulletItems: [],
                    tableHeaders: [],
                    tableRows: [],
                    files: [],
                    links: [],
                  },
                ],
        });
      } catch (error) {
        console.error("Error fetching blog:", error);
      } finally {
        setLoading(false);
      }
    }
    fetchBlog();
  }, [slug]);

  const validate = (values) => {
    const errors = {};
    if (!values.title) errors.title = "Title is required.";
    if (!values.summary) errors.summary = "Summary is required.";
    return errors;
  };

  if (loading) {
    return <LoadingSkeleton />;
  }

  return (
    <>
      <div className="min-h-screen bg-gray-50 container mx-auto p-20">
        <h1 className="text-3xl font-bold text-violet-700 mb-6 text-center">
          Update Help Blog Post
        </h1>
        <Formik
          initialValues={initialValues}
          enableReinitialize
          validate={validate}
          onSubmit={(values, { setSubmitting }) => {
            const myHeaders = new Headers();
            myHeaders.append("Authorization", `Token ${token}`);
            myHeaders.append("Content-Type", "application/json");

            fetch(`https://media.upfrica.com/api/helpblogs/${blogData?.id}/`, {
              method: "PUT", // Use PATCH if your API requires it.
              headers: myHeaders,
              body: JSON.stringify(values),
              redirect: "follow",
            })
              .then((response) => response.json())
              .then((result) => {
                // console.log('result',result, )
                alert("Help blog post updated successfully!");
                // router.push(`/all-blogs/`);
                router.back();
              })
              .catch((error) => {
                console.error("Error updating blog:", error);
                alert("Failed to update help blog post.");
              })
              .finally(() => {
                setSubmitting(false);
              });
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            setFieldValue,
            isSubmitting,
          }) => (
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Title Field */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Title <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="Enter post title"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm">{errors.title}</div>
                )}
              </div>

              {/* Summary Field */}
              {/* <div>
                                <label className="block text-gray-700 font-bold mb-1">
                                    Summary <span className="text-red-500">*</span>
                                </label>
                                <textarea
                                    name="summary"
                                    placeholder="Enter a short summary"
                                    rows="3"
                                    value={values.summary}
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    className="w-full border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                                />
                                {touched.summary && errors.summary && (
                                    <div className="text-red-600 text-sm">{errors.summary}</div>
                                )}
                            </div> */}

              {/* Summary Field */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Summary <span className="text-red-500">*</span>
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) => (summaryEditorRef.current = editor)}
                  value={values.summary || ""}
                  onEditorChange={(content) => {
                    setFieldValue("summary", content);
                  }}
                  init={{
                    height: 250,
                    menubar: false,
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline forecolor | " +
                      "alignleft aligncenter alignright alignjustify | " +
                      "bullist numlist outdent indent | removeformat | help",
                    content_style:
                      "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
                  }}
                />
                {touched.summary && errors.summary && (
                  <div className="text-red-600 text-sm">{errors.summary}</div>
                )}
              </div>

              {/* Tags Field */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Tags
                </label>
                <FieldArray name="tags">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.tags &&
                        values.tags.map((tag, index) => (
                          <div key={index} className="flex items-center gap-2">
                            <input
                              type="text"
                              name={`tags[${index}]`}
                              placeholder="Enter tag"
                              value={tag}
                              onChange={handleChange}
                              onBlur={handleBlur}
                              className="flex-1 border border-violet-700 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-violet-700"
                            />
                            <button
                              type="button"
                              onClick={() => remove(index)}
                              className="text-red-500 font-bold"
                            >
                              X
                            </button>
                          </div>
                        ))}
                      <button
                        type="button"
                        onClick={() => push("")}
                        className="text-violet-700 underline"
                      >
                        + Add Tag
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Sections */}
              <div>
                <label className="block text-gray-700 font-bold mb-1">
                  Sections
                </label>
                <FieldArray name="sections">
                  {({ push, remove }) => (
                    <div className="space-y-6">
                      {values.sections &&
                        values.sections.map((section, secIndex) => (
                          <div
                            key={secIndex}
                            className="border border-gray-300 rounded-md p-4 bg-gray-100"
                          >
                            <div className="flex justify-between items-center">
                              <h2 className="text-xl font-semibold text-gray-800">
                                Section {secIndex + 1}
                              </h2>
                              {values.sections.length > 1 && (
                                <button
                                  type="button"
                                  onClick={() => remove(secIndex)}
                                  className="text-red-500 font-bold"
                                >
                                  Remove Section
                                </button>
                              )}
                            </div>

                            {/* Section Type */}
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Section Type
                              </label>
                              <select
                                name={`sections[${secIndex}].sectionType`}
                                value={section.sectionType}
                                onChange={handleChange}
                                className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                              >
                                <option value="">Select Section Type</option>
                                <option value="paragraph">Paragraph</option>
                                <option value="bullet">Bullet List</option>
                                <option value="highlight">Highlight</option>
                                <option value="table">Table</option>
                                <option value="image">Image</option>
                                <option value="links">Links</option>
                              </select>
                            </div>

                            {/* Section Title */}
                            <div className="mt-2">
                              <label className="block text-gray-700 font-bold mb-1">
                                Section Title
                              </label>
                              <input
                                type="text"
                                name={`sections[${secIndex}].sectionTitle`}
                                placeholder="Enter section title"
                                value={section.sectionTitle}
                                onChange={handleChange}
                                onBlur={handleBlur}
                                className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                              />
                            </div>

                            {/* Render section content based on section type */}
                            {/* {["paragraph", "highlight"].includes(
                                                            section.sectionType
                                                        ) && (
                                                                <div className="mt-2">
                                                                    <label className="block text-gray-700 font-bold mb-1">
                                                                        Content
                                                                    </label>
                                                                    <textarea
                                                                        name={`sections[${secIndex}].sectionContent`}
                                                                        placeholder="Enter content"
                                                                        rows="4"
                                                                        value={section.sectionContent}
                                                                        onChange={handleChange}
                                                                        onBlur={handleBlur}
                                                                        className="w-full border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                                                                    />
                                                                </div>
                                                            )} */}

                            {["paragraph", "highlight"].includes(
                              section.sectionType,
                            ) && (
                              <div className="mt-2">
                                <label className="block text-gray-700 font-bold mb-1">
                                  Content
                                </label>
                                <Editor
                                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut" // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ TinyMCE API Key
                                  value={section.sectionContent || ""}
                                  init={{
                                    height: 250,
                                    menubar: false,
                                    plugins: [
                                      "advlist autolink lists link charmap preview anchor",
                                      "searchreplace visualblocks code fullscreen",
                                      "insertdatetime media table paste help wordcount",
                                    ],
                                    toolbar:
                                      "undo redo | formatselect | bold italic underline forecolor | " +
                                      "alignleft aligncenter alignright alignjustify | " +
                                      "bullist numlist outdent indent | removeformat | help",
                                    content_style:
                                      "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
                                  }}
                                  onEditorChange={(content) => {
                                    setFieldValue(
                                      `sections[${secIndex}].sectionContent`,
                                      content,
                                    );
                                  }}
                                />
                              </div>
                            )}

                            {section.sectionType === "bullet" && (
                              <div className="mt-2">
                                <label className="block text-gray-700 font-bold mb-1">
                                  Bullet Items
                                </label>
                                <FieldArray
                                  name={`sections[${secIndex}].bulletItems`}
                                >
                                  {({ push, remove }) => (
                                    <div className="space-y-2">
                                      {section.bulletItems &&
                                        section.bulletItems.map(
                                          (item, index) => (
                                            <div
                                              key={index}
                                              className="flex items-center gap-2"
                                            >
                                              <input
                                                type="text"
                                                name={`sections[${secIndex}].bulletItems[${index}]`}
                                                placeholder="Bullet item"
                                                value={item}
                                                onChange={handleChange}
                                                onBlur={handleBlur}
                                                className="flex-1 border border-violet-700 rounded px-4 py-2 focus:ring-2 focus:ring-violet-700"
                                              />
                                              <button
                                                type="button"
                                                onClick={() => remove(index)}
                                                className="text-red-500 font-bold"
                                              >
                                                X
                                              </button>
                                            </div>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/help-blogs/page.jsx =====
"use client";

import React, { useEffect, useState, useRef } from "react";
import Head from "next/head";
import Link from "next/link";
import { FaSearch, FaEdit, FaTrash } from "react-icons/fa";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";

// Skeleton for loading state
const CardSkeleton = () => (
  <div className="animate-pulse p-4 bg-white rounded shadow">
    <div className="h-6 bg-gray-300 rounded w-5/6 mb-2"></div>
    <div className="h-4 bg-gray-300 rounded w-full mb-2"></div>
    <div className="h-3 bg-gray-300 rounded w-4/6"></div>
  </div>
);

// utility to format ‚Äúdays ago‚Äù
const convertToDaysAgo = (isoDate) => {
  const past = new Date(isoDate);
  const now = new Date();
  const diffMs = now - past;
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  if (diffDays === 0) return "today";
  return `${diffDays} day${diffDays === 1 ? "" : "s"} ago`;
};

// simple spinner
const Loader = () => (
  <svg
    className="animate-spin h-5 w-5 text-gray-700"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
    />
  </svg>
);

export default function HelpBlogs() {
  const token = useSelector((state) => state.auth.token);
  const [posts, setPosts] = useState(null);
  const [loading, setLoading] = useState(true);

  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [isFocused, setIsFocused] = useState(false);

  const [deleteLoadingId, setDeleteLoadingId] = useState(null);

  const debounceTimeout = useRef(null);
  const router = useRouter();

  // fetch all posts
  useEffect(() => {
    fetch("https://media.upfrica.com/api/helpblogs/")
      .then((res) => res.json())
      .then((data) => {
        setPosts(data);
        setLoading(false);
      })
      .catch(() => setLoading(false));
  }, []);

  // search logic with debounce
  useEffect(() => {
    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);

    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    debounceTimeout.current = setTimeout(() => {
      fetch(
        `https://media.upfrica.com/api/helpblogs/search/?q=${encodeURIComponent(
          searchQuery.trim(),
        )}`,
      )
        .then((res) => res.json())
        .then((data) => {
          setSearchResults(data);
          setSearchLoading(false);
        })
        .catch(() => setSearchLoading(false));
    }, 400);

    return () => clearTimeout(debounceTimeout.current);
  }, [searchQuery]);

  const stripHtml = (html) => html?.replace(/<[^>]*>?/gm, "") || "";

  const editBlog = (slug) => {
    router.push(`/new-dashboard/help-blogs/edit/${slug}`);
  };

  const deleteBlog = async (id) => {
    if (!confirm("Are you sure you want to delete this blog?")) return;

    setDeleteLoadingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/admin/helpblogs/${id}/`,
        {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            // add Authorization header if needed:
            Authorization: `Token ${token}`,
          },
        },
      );
      if (!res.ok) throw new Error(`Status ${res.status}`);

      // remove from both main list & search results
      setPosts((prev) => prev.filter((p) => p.id !== id));
      setSearchResults((prev) => prev.filter((p) => p.id !== id));

      alert("Blog deleted successfully!");
    } catch (err) {
      console.error("Delete error:", err);
      alert("Failed to delete blog.");
    } finally {
      setDeleteLoadingId(null);
    }
  };

  return (
    <>
      <Head>
        <title>Help Blogs</title>
        <meta name="description" content="Search and browse help articles." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <main className="min-h-screen bg-gray-50 text-gray-900 p-4">
        {/* Search Box */}
        <div className="max-w-md mx-auto relative mb-8">
          <FaSearch className="absolute left-3 top-1/2 text-gray-400 transform -translate-y-1/2" />
          <input
            type="search"
            placeholder="Search help articles..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setTimeout(() => setIsFocused(false), 150)}
            className="w-full pl-10 pr-4 py-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-violet-600"
          />

          {isFocused && searchQuery.trim() && (
            <div className="absolute z-10 left-0 right-0 mt-2 bg-white rounded shadow-lg p-4 max-h-80 overflow-y-auto">
              {searchLoading ? (
                <div className="space-y-4">
                  {[...Array(4)].map((_, i) => (
                    <CardSkeleton key={i} />
                  ))}
                </div>
              ) : searchResults.length > 0 ? (
                <ul className="space-y-4">
                  {searchResults.map((post) => (
                    <li
                      key={post.id}
                      className="flex items-start justify-between"
                    >
                      <Link
                        href={`/new-dashboardhelp-blogs/${post.slug}`}
                        className="flex-1"
                      >
                        <div className="p-3 hover:bg-gray-100 rounded">
                          <h3 className="font-semibold">{post.title}</h3>
                          <p className="text-sm text-gray-600">
                            {stripHtml(post.summary).slice(0, 100)}‚Ä¶
                          </p>
                          <p className="text-xs text-gray-500 mt-1">
                            Created: {convertToDaysAgo(post.created_at)}
                          </p>
                        </div>
                      </Link>
                      <div className="flex flex-row space-x-2 ml-4">
                        <button
                          onClick={() => editBlog(post.slug)}
                          className="p-2 hover:bg-gray-100 rounded"
                        >
                          <FaEdit />
                        </button>
                        <button
                          onClick={() => deleteBlog(post.id)}
                          disabled={deleteLoadingId === post.id}
                          className="p-2 hover:bg-gray-100 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          {deleteLoadingId === post.id ? (
                            <Loader />
                          ) : (
                            <FaTrash />
                          )}
                        </button>
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-center text-gray-500">No results found.</p>
              )}
            </div>
          )}
        </div>

        {/* Main List of Blogs */}
        {loading ? (
          <div className="space-y-4">
            {[...Array(6)].map((_, i) => (
              <CardSkeleton key={i} />
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {posts?.map((post) => (
              <div
                key={post.id}
                className="flex items-start justify-between p-4 bg-white rounded shadow hover:shadow-lg"
              >
                <Link
                  href={`/new-dashboard/help-blogs/${post.slug}`}
                  className="flex-1"
                >
                  <h3 className="text-lg font-bold mb-1">{post.title}</h3>
                  <p className="text-gray-700 text-sm">
                    {stripHtml(post.summary).slice(0, 150)}‚Ä¶
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    Created: {convertToDaysAgo(post.created_at)}
                  </p>
                </Link>
                <div className="flex flex-row space-x-2 ml-4 items-center self-center">
                  <button
                    onClick={() => editBlog(post.slug)}
                    className="p-2 hover:bg-gray-100 rounded"
                  >
                    <FaEdit />
                  </button>
                  <button
                    onClick={() => deleteBlog(post.id)}
                    disabled={deleteLoadingId === post.id}
                    className="p-2 hover:bg-gray-100 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {deleteLoadingId === post.id ? <Loader /> : <FaTrash />}
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </main>
    </>
  );
}


===== src/app/(pages)/new-dashboard/jobs/create-job/page.jsx =====
"use client";

import React, { useState, useRef } from "react";
import { Formik, FieldArray } from "formik";
import { useSelector } from "react-redux";
import { Editor } from "@tinymce/tinymce-react";
import Footer from "@/components/common/footer/Footer";

const initialValues = {
  title: "",
  department: "",
  employment_type: "",
  location: "",
  deadline: "",
  description: "",
  role_details: "",
  qualifications: [""],
  contact_email: "",
  is_active: true,
};

const validate = (values) => {
  const errors = {};
  if (!values.title) errors.title = "Title is required";
  if (!values.department) errors.department = "Department is required";
  if (!values.employment_type)
    errors.employment_type = "Employment type is required";
  if (!values.location) errors.location = "Location is required";
  if (!values.description) errors.description = "Description is required";
  return errors;
};

export default function CreateJobPage() {
  const { token } = useSelector((state) => state.auth);
  const [submitError, setSubmitError] = useState("");
  const descriptionEditorRef = useRef(null);
  const roleEditorRef = useRef(null);

  const LoadingDots = ({ color = "white" }) => (
    <div className="flex space-x-2 justify-center py-3">
      <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce`} />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-150`}
      />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`}
      />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`}
      />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`}
      />
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 py-16 px-4">
      <div className="max-w-4xl mx-auto bg-white shadow-md rounded-md p-8">
        <h1 className="text-3xl font-bold mb-8 text-center text-gray-800">
          Create Job Post
        </h1>
        <Formik
          initialValues={initialValues}
          validate={validate}
          onSubmit={async (values, { setSubmitting, resetForm }) => {
            setSubmitError("");
            try {
              const res = await fetch("https://media.upfrica.com/api/jobs/", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Token ${token}`,
                },
                body: JSON.stringify(values),
              });
              const data = await res.json();
              if (res.ok) {
                alert("Job created successfully!");
                resetForm();
              } else {
                setSubmitError(
                  typeof data === "object" ? JSON.stringify(data) : data,
                );
              }
            } catch (err) {
              setSubmitError(err.message);
            } finally {
              setSubmitting(false);
            }
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            isSubmitting,
            setFieldValue,
          }) => (
            <form onSubmit={handleSubmit} className="space-y-6">
              {submitError && (
                <div className="text-red-600 text-center">{submitError}</div>
              )}

              {/* Title */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Title<span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="e.g. Customer Experience Manager"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.title}
                  </div>
                )}
              </div>

              {/* Department */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Department<span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="department"
                  placeholder="e.g. Customer Support"
                  value={values.department}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.department && errors.department && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.department}
                  </div>
                )}
              </div>

              {/* Employment Type */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Employment Type<span className="text-red-500">*</span>
                </label>
                <select
                  name="employment_type"
                  value={values.employment_type}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                >
                  <option value="">Select type</option>
                  <option value="full_time">Full Time</option>
                  <option value="part_time">Part Time</option>
                  <option value="contract">Contract</option>
                  <option value="agent">Agent</option>
                </select>
                {touched.employment_type && errors.employment_type && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.employment_type}
                  </div>
                )}
              </div>

              {/* Location */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Location<span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="location"
                  placeholder="e.g. Remote or Multiple Locations"
                  value={values.location}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.location && errors.location && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.location}
                  </div>
                )}
              </div>

              {/* Deadline */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Application Deadline
                </label>
                <input
                  type="text"
                  name="deadline"
                  placeholder="e.g. 2025-06-30 or Open Until Filled"
                  value={values.deadline}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Description (TinyMCE) */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Description<span className="text-red-500">*</span>
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) =>
                    (descriptionEditorRef.current = editor)
                  }
                  value={values.description}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Short summary, e.g. Lead our customer support team to excellence",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("description", content)
                  }
                />
                {touched.description && errors.description && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.description}
                  </div>
                )}
              </div>

              {/* Role Responsibilities (TinyMCE) */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Role Responsibilities
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) => (roleEditorRef.current = editor)}
                  value={values.role_details}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Detailed responsibilities, e.g. Resolve escalations and coach teammates",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("role_details", content)
                  }
                />
              </div>

              {/* Qualifications */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Qualifications
                </label>
                <FieldArray name="qualifications">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.qualifications.map((q, i) => (
                        <div key={i} className="flex gap-2 items-center">
                          <input
                            type="text"
                            name={`qualifications[${i}]`}
                            placeholder="e.g. 5+ years in customer service"
                            value={q}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            className="flex-1 px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                          />
                          {values.qualifications.length > 1 && (
                            <button
                              type="button"
                              onClick={() => remove(i)}
                              className="text-red-500 font-bold"
                            >
                              √ó
                            </button>
                          )}
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={() => push("")}
                        className="text-violet-700 hover:underline text-sm"
                      >
                        + Add Qualification
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Contact Email */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Contact Email
                </label>
                <input
                  type="email"
                  name="contact_email"
                  placeholder="e.g. careers@upfrica.com"
                  value={values.contact_email}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Active Toggle */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  name="is_active"
                  checked={values.is_active}
                  onChange={(e) => setFieldValue("is_active", e.target.checked)}
                  className="h-4 w-4 text-violet-700 border-gray-300 rounded"
                />
                <label className="ml-2 text-gray-700">Active</label>
              </div>

              {/* Submit Button */}
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full py-3 bg-violet-700 text-white font-semibold rounded-md hover:bg-violet-800 transition"
              >
                {isSubmitting ? <LoadingDots color="white" /> : "Create Job"}
              </button>
            </form>
          )}
        </Formik>
      </div>
      <Footer />
    </div>
  );
}


===== src/app/(pages)/new-dashboard/jobs/edit-job/[id]/page.jsx =====
"use client";

import React, { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import { Formik, FieldArray } from "formik";
import { useSelector } from "react-redux";
import { Editor } from "@tinymce/tinymce-react";
import Footer from "@/components/common/footer/Footer";

const validate = (values) => {
  const errors = {};
  if (!values.title) errors.title = "Title is required";
  if (!values.department) errors.department = "Department is required";
  if (!values.employment_type)
    errors.employment_type = "Employment type is required";
  if (!values.location) errors.location = "Location is required";
  if (!values.description) errors.description = "Description is required";
  return errors;
};

export default function EditJobPage({ params }) {
  const router = useRouter();
  const { id } = params;
  const { token } = useSelector((state) => state.auth);

  const [job, setJob] = useState(null);
  const [loading, setLoading] = useState(true);
  const [submitError, setSubmitError] = useState("");
  const descriptionEditorRef = useRef(null);
  const roleEditorRef = useRef(null);

  useEffect(() => {
    if (!id) return;
    setLoading(true);
    fetch(`https://media.upfrica.com/api/jobs/${id}/`, {
      method: "GET",
    })
      .then((res) => res.json())
      .then((data) => {
        setJob(data);
      })
      .catch((err) => {
        console.error("Fetch job error:", err);
      })
      .finally(() => {
        setLoading(false);
      });
  }, [id]);

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col space-y-6 p-8 max-w-4xl mx-auto animate-pulse">
        <div className="h-8 bg-gray-300 rounded w-3/4 mx-auto" />
        <div className="h-6 bg-gray-300 rounded w-full" />
        <div className="h-10 bg-gray-300 rounded w-full" />
        <div className="h-10 bg-gray-300 rounded w-full" />
        <div className="h-10 bg-gray-300 rounded w-full" />
        <div className="h-40 bg-gray-300 rounded w-full" />
        <div className="h-40 bg-gray-300 rounded w-full" />
        <div className="h-24 bg-gray-300 rounded w-full" />
        <div className="h-10 bg-gray-300 rounded w-1/3" />
      </div>
    );
  }

  if (!job) {
    return (
      <div className="min-h-screen flex items-center justify-center text-red-600">
        Job not found.
      </div>
    );
  }

  const LoadingDots = ({ color = "white" }) => (
    <div className="flex space-x-2 justify-center py-3">
      <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce`} />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-150`}
      />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`}
      />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`}
      />
      <div
        className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`}
      />
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 py-16 px-4">
      <div className="max-w-4xl mx-auto bg-white shadow-md rounded-md p-8 mb-6">
        <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">
          Edit Job Post
        </h1>

        <Formik
          initialValues={{
            title: job.title || "",
            department: job.department || "",
            employment_type: job.employment_type || "",
            location: job.location || "",
            deadline: job.deadline || "",
            description: job.description || "",
            role_details: job.role_details || "",
            qualifications: job.qualifications.length
              ? job.qualifications
              : [""],
            contact_email: job.contact_email || "",
            is_active: job.is_active,
          }}
          validate={validate}
          onSubmit={async (values, { setSubmitting }) => {
            setSubmitError("");
            try {
              const res = await fetch(
                `https://media.upfrica.com/api/jobs/${id}/`,
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Token ${token}`,
                  },
                  body: JSON.stringify(values),
                },
              );
              const data = await res.json();
              if (res.ok) {
                alert("Job updated successfully!");
                router.back(); // redirect back to listing
              } else {
                setSubmitError(
                  typeof data === "object" ? JSON.stringify(data) : data,
                );
              }
            } catch (err) {
              setSubmitError(err.message);
            } finally {
              setSubmitting(false);
            }
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            isSubmitting,
            setFieldValue,
          }) => (
            <form onSubmit={handleSubmit} className="space-y-6">
              {submitError && (
                <div className="text-red-600 text-center">{submitError}</div>
              )}

              {/* Title */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Title <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="title"
                  placeholder="e.g. Customer Experience Manager"
                  value={values.title}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.title && errors.title && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.title}
                  </div>
                )}
              </div>

              {/* Department */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Department <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="department"
                  placeholder="e.g. Customer Support"
                  value={values.department}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.department && errors.department && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.department}
                  </div>
                )}
              </div>

              {/* Employment Type */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Employment Type <span className="text-red-500">*</span>
                </label>
                <select
                  name="employment_type"
                  value={values.employment_type}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                >
                  <option value="">Select type</option>
                  <option value="full_time">Full Time</option>
                  <option value="part_time">Part Time</option>
                  <option value="contract">Contract</option>
                  <option value="agent">Agent</option>
                </select>
                {touched.employment_type && errors.employment_type && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.employment_type}
                  </div>
                )}
              </div>

              {/* Location */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Location <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="location"
                  placeholder="e.g. Remote or Multiple Locations"
                  value={values.location}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
                {touched.location && errors.location && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.location}
                  </div>
                )}
              </div>

              {/* Deadline */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Application Deadline
                </label>
                <input
                  type="text"
                  name="deadline"
                  placeholder="e.g. 2025-06-30 or Open Until Filled"
                  value={values.deadline}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Description */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Description <span className="text-red-500">*</span>
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) =>
                    (descriptionEditorRef.current = editor)
                  }
                  value={values.description}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Short summary, e.g. Lead our customer support team to excellence",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("description", content)
                  }
                />
                {touched.description && errors.description && (
                  <div className="text-red-600 text-sm mt-1">
                    {errors.description}
                  </div>
                )}
              </div>

              {/* Role Responsibilities */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Role Responsibilities
                </label>
                <Editor
                  apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
                  onInit={(evt, editor) => (roleEditorRef.current = editor)}
                  value={values.role_details}
                  init={{
                    height: 200,
                    menubar: false,
                    placeholder:
                      "Detailed responsibilities, e.g. Resolve escalations and coach teammates",
                    plugins: [
                      "advlist autolink lists link charmap preview anchor",
                      "searchreplace visualblocks code fullscreen",
                      "insertdatetime media table help wordcount",
                    ].join(" "),
                    toolbar:
                      "undo redo | formatselect | bold italic underline | " +
                      "alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                  }}
                  onEditorChange={(content) =>
                    setFieldValue("role_details", content)
                  }
                />
              </div>

              {/* Qualifications */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Qualifications
                </label>
                <FieldArray name="qualifications">
                  {({ push, remove }) => (
                    <div className="space-y-2">
                      {values.qualifications.map((q, i) => (
                        <div key={i} className="flex gap-2 items-center">
                          <input
                            type="text"
                            name={`qualifications[${i}]`}
                            placeholder="e.g. 5+ years in customer service"
                            value={q}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            className="flex-1 px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                          />
                          {values.qualifications.length > 1 && (
                            <button
                              type="button"
                              onClick={() => remove(i)}
                              className="text-red-500 font-bold"
                            >
                              √ó
                            </button>
                          )}
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={() => push("")}
                        className="text-violet-700 hover:underline text-sm"
                      >
                        + Add Qualification
                      </button>
                    </div>
                  )}
                </FieldArray>
              </div>

              {/* Contact Email */}
              <div>
                <label className="block text-gray-700 font-medium mb-1">
                  Contact Email
                </label>
                <input
                  type="email"
                  name="contact_email"
                  placeholder="e.g. careers@upfrica.com"
                  value={values.contact_email}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-violet-700"
                />
              </div>

              {/* Active Toggle */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  name="is_active"
                  checked={values.is_active}
                  onChange={(e) => setFieldValue("is_active", e.target.checked)}
                  className="h-4 w-4 text-violet-700 border-gray-300 rounded"
                />
                <label className="ml-2 text-gray-700">Active</label>
              </div>

              {/* Submit Button */}
              <button
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/jobs/page.jsx =====
"use client";

import React, { useEffect, useState, useRef } from "react";
import Head from "next/head";
import Link from "next/link";
import { FaSearch, FaEdit, FaTrash } from "react-icons/fa";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import Footer from "@/components/common/footer/Footer";

// Skeleton for loading state
const CardSkeleton = () => (
  <div className="animate-pulse p-4 bg-white rounded shadow">
    <div className="h-6 bg-gray-300 rounded w-5/6 mb-2"></div>
    <div className="h-4 bg-gray-300 rounded w-full mb-2"></div>
    <div className="h-3 bg-gray-300 rounded w-4/6"></div>
  </div>
);

// strip HTML tags for summaries
const stripHtml = (html) => html?.replace(/<[^>]*>?/gm, "") || "";

// simple spinner
const Loader = () => (
  <svg
    className="animate-spin h-5 w-5 text-gray-700"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
    />
  </svg>
);

export default function JobListings() {
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);

  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [isFocused, setIsFocused] = useState(false);

  const [deleteLoadingId, setDeleteLoadingId] = useState(null);

  const debounceTimeout = useRef(null);
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // Fetch all jobs on mount
  useEffect(() => {
    setLoading(true);
    fetch("https://media.upfrica.com/api/jobs/", {
      credentials: "include",
    })
      .then((res) => res.json())
      .then((data) => setJobs(data))
      .catch((err) => console.error("Failed to fetch jobs:", err))
      .finally(() => setLoading(false));
  }, []);

  // Debounced search
  useEffect(() => {
    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);

    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    debounceTimeout.current = setTimeout(() => {
      fetch(
        `https://media.upfrica.com/api/jobs/search/?q=${encodeURIComponent(
          searchQuery.trim(),
        )}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
        },
      )
        .then((res) => res.json())
        .then((data) => setSearchResults(data))
        .catch((err) => console.error("Search failed:", err))
        .finally(() => setSearchLoading(false));
    }, 400);

    return () => clearTimeout(debounceTimeout.current);
  }, [searchQuery]);

  const editJob = (id) => {
    router.push(`/new-dashboard/jobs/edit-job/${id}`);
  };

  const deleteJob = async (id) => {
    if (!confirm("Are you sure you want to delete this job?")) return;
    setDeleteLoadingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/admin/jobs/${id}/`,
        {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
        },
      );
      if (!res.ok) throw new Error(`Status ${res.status}`);
      // remove from both main list & search results
      setJobs((prev) => prev.filter((job) => job.id !== id));
      setSearchResults((prev) => prev.filter((job) => job.id !== id));
      alert("Job deleted successfully!");
    } catch (err) {
      console.error("Delete job error:", err);
      alert("Failed to delete job.");
    } finally {
      setDeleteLoadingId(null);
    }
  };

  return (
    <>
      <Head>
        <title>Job Listings</title>
        <meta name="description" content="Browse and search job openings." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <main className="min-h-screen bg-gray-50 text-gray-900 p-4">
        {/* Search Box */}
        <div className="max-w-md mx-auto relative mb-8">
          <FaSearch className="absolute left-3 top-1/2 text-gray-400 transform -translate-y-1/2" />
          <input
            type="search"
            placeholder="Search jobs..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setTimeout(() => setIsFocused(false), 150)}
            className="w-full pl-10 pr-4 py-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-violet-600"
          />

          {isFocused && searchQuery.trim() && (
            <div className="absolute z-10 left-0 right-0 mt-2 bg-white rounded shadow-lg p-4 max-h-80 overflow-y-auto">
              {searchLoading ? (
                <div className="space-y-4">
                  {[...Array(4)].map((_, i) => (
                    <CardSkeleton key={i} />
                  ))}
                </div>
              ) : searchResults.length > 0 ? (
                <ul className="space-y-4">
                  {searchResults.map((job) => (
                    <li
                      key={job.id}
                      className="flex items-start justify-between"
                    >
                      <Link
                        href={`/careers/job/${job.id}`}
                        className="flex-1 p-3 hover:bg-gray-100 rounded"
                      >
                        <h3 className="font-semibold">{job.title}</h3>
                        <p className="text-sm text-gray-600">
                          {stripHtml(job.description).slice(0, 100)}‚Ä¶
                        </p>
                        <p className="text-xs text-gray-500 mt-1">
                          Deadline: {job.deadline}
                        </p>
                      </Link>

                      <div className="flex space-x-2 ml-4">
                        {user?.admin && (
                          <>
                            <button
                              onClick={() => editJob(job.id)}
                              className="p-2 hover:bg-gray-100 rounded"
                            >
                              <FaEdit />
                            </button>
                            <button
                              onClick={() => deleteJob(job.id)}
                              disabled={deleteLoadingId === job.id}
                              className="p-2 hover:bg-gray-100 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                              {deleteLoadingId === job.id ? (
                                <Loader />
                              ) : (
                                <FaTrash />
                              )}
                            </button>
                          </>
                        )}
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-center text-gray-500">No results found.</p>
              )}
            </div>
          )}
        </div>

        {/* Main List of Jobs */}
        {loading ? (
          <div className="space-y-4">
            {[...Array(6)].map((_, i) => (
              <CardSkeleton key={i} />
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {jobs.map((job) => (
              <div
                key={job.id}
                className="flex items-start justify-between p-4 bg-white rounded shadow hover:shadow-lg"
              >
                <Link href={`/careers/job/${job.id}`} className="flex-1">
                  <h3 className="text-lg font-bold mb-1">{job.title}</h3>
                  <p className="text-gray-700 text-sm">
                    {stripHtml(job.description).slice(0, 150)}‚Ä¶
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    Deadline: {job.deadline}
                  </p>
                </Link>

                {user?.admin && (
                  <div className="flex space-x-2 ml-4 items-center">
                    <button
                      onClick={() => editJob(job.id)}
                      className="p-2 hover:bg-gray-100 rounded"
                    >
                      <FaEdit />
                    </button>
                    <button
                      onClick={() => deleteJob(job.id)}
                      disabled={deleteLoadingId === job.id}
                      className="p-2 hover:bg-gray-100 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {deleteLoadingId === job.id ? <Loader /> : <FaTrash />}
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </main>

      <Footer />
    </>
  );
}


===== src/app/(pages)/new-dashboard/layout-theme.jsx =====
"use client";

import React, { useEffect } from "react";
import clsx from "clsx";
import { useRouter } from "next/navigation";
import HeaderControls from "@/components/HeaderControls";
import DynamicSidebar from "@/components/new-dashboard/DynamicSidebar";
import { useAuth } from "@/contexts/AuthContext";

const Layout = ({ children }) => {
  const { user, hydrated, requiresOnboarding } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!hydrated) return;

    if (!user) {
      router.push("/login");
      return;
    }

    if (requiresOnboarding) {
      router.push("/onboarding/account-type");
    }
  }, [hydrated, user, requiresOnboarding, router]);

  if (!hydrated || !user) {
    return (
      <div className="min-h-screen flex items-center justify-center text-gray-500">
        Loading dashboard...
      </div>
    );
  }

  return (
    <div className="flex relative w-full bg-upfricaGray2 text-gray-900">
      {/* Sidebar */}
      <div>
        <DynamicSidebar />
      </div>

      {/* Main Content */}
      <div className={clsx("flex-1 transition-all duration-300 lg:px-4 py-5")}>
        <HeaderControls />
        {children}
      </div>
    </div>
  );
};

export default Layout;


===== src/app/(pages)/new-dashboard/layout.js =====
//app/(pages)/new-dashboard/layout.js
"use client";

import React, { useState, useEffect, useRef, useMemo } from "react";
import TopBar from "@/components/new-dashboard/TopBar";
import Footer from "@/components/new-dashboard/Footer";
import { useAuth } from "@/contexts/AuthContext";
import { RoleViewProvider } from "@/contexts/RoleViewContext";
import DynamicSidebarLayout from "@/components/new-dashboard/DynamicSidebarLayout";
import { useOnboardingGate } from "@/hooks/useOnboardingGate";
import { deriveRawRoles } from "@/app/utils/roles";

export default function LayoutWrapper({ children }) {
  return (
    <EnsureHydrated>
      <Layout>{children}</Layout>
    </EnsureHydrated>
  );
}

function EnsureHydrated({ children }) {
  const { hydrated, user } = useAuth();
  useOnboardingGate();

  // <- üîë derive defensively from the actual /me payload
  const roles = useMemo(() => deriveRawRoles(user), [user]);

  if (!hydrated) {
    return (
      <div className="flex items-center justify-center h-screen">
        <span className="text-gray-600 dark:text-gray-300">Loading...</span>
      </div>
    );
  }

  return <RoleViewProvider roles={roles}>{children}</RoleViewProvider>;
}

function Layout({ children }) {
  const [sidebarVisible, setSidebarVisible] = useState(true);
  const [mobileOpen, setMobileOpen] = useState(false);
  const sidebarRef = useRef(null);

  useEffect(() => {
    const onDown = (e) => {
      if (mobileOpen && sidebarRef.current && !sidebarRef.current.contains(e.target)) {
        setMobileOpen(false);
      }
    };
    document.addEventListener("mousedown", onDown);
    return () => document.removeEventListener("mousedown", onDown);
  }, [mobileOpen]);

  return (
    <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-[#0a0f0f] transition-colors duration-300">
      <TopBar
        toggleMobileSidebar={() => setMobileOpen((p) => !p)}
        toggleDesktopSidebar={() => setSidebarVisible((p) => !p)}
        sidebarVisible={sidebarVisible}
      />
      <div className="flex flex-1 min-h-0 overflow-hidden relative">
        {mobileOpen && <div className="fixed inset-0 bg-black bg-opacity-40 z-30 md:hidden" />}
        <DynamicSidebarLayout
          sidebarVisible={sidebarVisible}
          mobileOpen={mobileOpen}
          toggleMobile={setMobileOpen}
          sidebarRef={sidebarRef}
        />
        <main className="flex-1 flex flex-col min-h-[calc(100vh-64px)] w-full overflow-hidden">
          <div className="w-full max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-12 py-6 flex-1 overflow-y-auto bg-gray-50 dark:bg-[#0a0f0f] text-black dark:text-white transition-colors duration-300">
            {children}
          </div>
          <Footer />
        </main>
      </div>
    </div>
  );
}

===== src/app/(pages)/new-dashboard/my-orders/[id]/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import DeliveryTracker from "../components/DeliveryTracker";
import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

export default function OrderDetailsPage() {
  const { id } = useParams();
  const token = useSelector((state) => state.auth.token);

  const [order, setOrder] = useState(null);
  const [items, setItems] = useState([]);
  const [loadingOrder, setLoadingOrder] = useState(true);
  const [showFullInfo, setShowFullInfo] = useState(false);

  useEffect(() => {
    if (!token || !id) return;
    (async () => {
      setLoadingOrder(true);
      try {
        const res = await fetch(`${BASE_API_URL}/api/buyer/orders/${id}/`, {
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error(`Failed to fetch order: ${res.status}`);
        const data = await res.json();
        setOrder(data);
        setItems(
          data.order_items.map((it) => ({
            ...it,
            loading: false,
          })),
        );
      } catch (err) {
        console.error(err);
      } finally {
        setLoadingOrder(false);
      }
    })();
  }, [id, token]);

  const handleMarkReceived = async (itemId) => {
    setItems((prev) =>
      prev.map((it) => (it.id === itemId ? { ...it, loading: true } : it)),
    );
    try {
      const res = await fetch(
        `${BASE_API_URL}/api/buyer/order-item/${itemId}/`,
        {
          method: "PATCH",
          headers: {
            Authorization: `Token ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ receive_status: 1 }),
        },
      );
      if (!res.ok) throw new Error(`Status update failed: ${res.status}`);
      setItems((prev) =>
        prev.map((it) =>
          it.id === itemId ? { ...it, receive_status: 1, loading: false } : it,
        ),
      );
    } catch (err) {
      console.error(err);
      setItems((prev) =>
        prev.map((it) => (it.id === itemId ? { ...it, loading: false } : it)),
      );
    }
  };

  const orderTotal = items.reduce(
    (sum, it) => sum + (it.price_cents * it.quantity) / 100,
    0,
  );

  if (loadingOrder) return <div className="text-center p-6">Loading...</div>;
  if (!order)
    return <div className="text-center text-red-600 p-6">Order not found.</div>;

  return (
    <div className="bg-white shadow rounded-xl p-4 max-w-3xl mx-auto mt-6">
      {/* Order Header */}
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4 bg-gray-50 p-4 rounded-md">
        <div>
          <p className="font-bold text-lg">
            Order #{String(order.id).padStart(6, "0")}
          </p>
          <p className="text-sm text-gray-700">
            Placed on {new Date(order.created_at).toLocaleString()}
          </p>
        </div>
        <div className="text-sm text-gray-700">
          <p>{items.length} item(s)</p>
          <p className="font-semibold">Total: GHS {orderTotal.toFixed(2)}</p>
        </div>
      </div>

      {/* Order Items */}
      {items.map((item) => {
        const product = item.product;
        const received = item.receive_status === 1;

        return (
          <div key={item.id} className="mt-6 border rounded-md p-4">
            {/* Status & Item ID */}
            <div className="flex justify-between items-center mb-2">
              <div>
                <p
                  className={`font-bold ${
                    received ? "text-green-700" : "text-orange-500"
                  }`}
                >
                  {received ? "‚úÖ Received" : "üïí Processing"}
                </p>
                <p className="text-xs text-gray-500">Item ID: {item.id}</p>
              </div>
              <div className="flex flex-col sm:flex-row gap-2">
                <button
                  onClick={() => {
                    if (
                      window.confirm(
                        "Are you sure you want to mark this item as received?",
                      )
                    ) {
                      handleMarkReceived(item.id);
                    }
                  }}
                  disabled={received || item.loading}
                  className="upfrica-btn-primary-outline-sm text-green-700 h-8 flex justify-center items-center"
                >
                  {item.loading ? (
                    <div className="flex space-x-2 justify-center items-center h-6">
                      <div className="h-2 w-2 bg-violet-700 rounded-full animate-bounce [animation-delay:-0.3s]" />
                      <div className="h-2 w-2 bg-violet-700 rounded-full animate-bounce [animation-delay:-0.15s]" />
                      <div className="h-2 w-2 bg-violet-700 rounded-full animate-bounce" />
                    </div>
                  ) : (
                    "Mark as received"
                  )}
                </button>

                <button
                  onClick={() => console.log("Review item", item.id)}
                  className="upfrica-btn-primary-outline-sm text-green-700 h-8"
                >
                  Write a review
                </button>
              </div>
            </div>

            {/* Delivery Tracker */}
            <DeliveryTracker
              stage={received ? 2 : 1}
              steps={[
                {
                  label: "Ordered",
                  date: new Date(order.created_at).toLocaleDateString(),
                },
                { label: "Dispatched", date: "Soon" },
                {
                  label: "Delivered",
                  note: received ? "Delivered" : "Not confirmed",
                },
              ]}
            />

            {/* Tracking */}
            <div className="mt-2 text-sm">
              <strong>Tracking:</strong> {order.tracking_number || "N/A"}
            </div>

            {/* Product Info */}
            <div className="mt-4 flex items-start gap-4">
              <img
                src={product.product_images?.[0] || "/placeholder.png"}
                alt={product.title}
                className="w-20 h-20 object-cover rounded-md"
              />
              <div className="flex-1">
                <p className="font-medium">{product.title}</p>
                <p className="text-sm">Seller Item No.: {product.id}</p>
                <p className="text-sm">
                  GHS {(item.price_cents / 100).toFixed(2)} √ó {item.quantity}
                </p>
              </div>
            </div>
          </div>
        );
      })}

      {/* Delivery & Payment Summary */}
      <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-6 text-sm">
        {/* Delivery Info */}
        <div>
          <h4 className="font-semibold mb-1">Delivery info</h4>
          <div className="flex items-center gap-2 text-gray-700">
            <AiOutlineHome />
            <span>
              {showFullInfo
                ? order.address.address_data.address_line_1
                : `${order.address.address_data.town}, ${order.address.address_data.country}`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlineUser />
            <span>
              {showFullInfo
                ? `${order.buyer.first_name} ${order.buyer.last_name}`
                : `${order.buyer.first_name} ${order.buyer.last_name[0]}.`}
            </span>
          </div>
          <div className="flex items-center gap-2 text-gray-700 mt-1">
            <AiOutlinePhone />
            <span>
              {showFullInfo
                ? order.address.address_data.phone_number
                : "+233 *** ****"}
            </span>
          </div>
          <button
            onClick={() => setShowFullInfo((f) => !f)}
            className="text-purple-600 underline mt-2 text-sm"
          >
            {showFullInfo ? "Hide full address" : "View full address"}
          </button>
        </div>

        {/* Payment Summary */}
        <div>
          <h4 className="font-semibold mb-1">Payment method</h4>
          <p>{order.payment_method || "N/A"}</p>
          <p>
            Items ({items.length}) &nbsp;&nbsp;&nbsp;&nbsp; GHS{" "}
            {orderTotal.toFixed(2)}
          </p>
          <p>Discount &nbsp;&nbsp;&nbsp;&nbsp; -GHS 0.00</p>
          <p>Postage &nbsp;&nbsp;&nbsp;&nbsp; GHS 0.00</p>
          <p className="font-semibold">
            Total &nbsp;&nbsp;&nbsp;&nbsp; GHS {orderTotal.toFixed(2)}
          </p>
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/my-orders/[id]/page1.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { MdCheck, MdChat } from "react-icons/md";
import {
  AiOutlineArrowLeft,
  AiOutlineHome,
  AiOutlineMail,
  AiOutlinePhone,
} from "react-icons/ai";

const STATUSES = ["Ordered", "Processing", "Shipped", "Received"];

function OrderDetailsSkeleton() {
  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8 animate-pulse">
      {/* header */}
      <div className="h-8 bg-gray-200 rounded w-1/4"></div>

      {/* two seller sections */}
      {Array.from({ length: 2 }).map((_, s) => (
        <section key={s} className="space-y-6 border-b border-gray-200 pb-6">
          {/* seller header */}
          <div className="h-6 bg-gray-200 rounded w-1/3"></div>

          {/* products */}
          {Array.from({ length: 2 }).map((_, i) => (
            <div
              key={i}
              className="flex items-center bg-gray-50 p-4 rounded-lg"
            >
              <div className="w-24 h-24 bg-gray-300 rounded"></div>
              <div className="ml-4 flex-1 space-y-2">
                <div className="h-4 bg-gray-300 rounded w-1/2"></div>
                <div className="h-4 bg-gray-300 rounded w-1/3"></div>
              </div>
              <div className="w-24 h-8 bg-gray-300 rounded-full"></div>
            </div>
          ))}

          {/* status bar */}
          <div className="relative">
            <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
            <div className="relative flex justify-between z-10">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-8 h-8 bg-gray-300 rounded-full"></div>
              ))}
            </div>
            <div className="relative flex justify-between mt-2 text-sm text-center">
              {STATUSES.map((_, i) => (
                <div key={i} className="w-16 h-4 bg-gray-200 rounded"></div>
              ))}
            </div>
          </div>
        </section>
      ))}

      {/* address & contact */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <div className="w-6 h-6 bg-gray-300 rounded"></div>
          <div className="flex-1 space-y-2">
            <div className="h-4 bg-gray-300 rounded w-3/4"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-2/3"></div>
          </div>
          <div className="flex items-center space-x-3">
            <div className="w-6 h-6 bg-gray-300 rounded"></div>
            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
          </div>
        </div>
      </div>
    </main>
  );
}

export default function OrderDetails({ params }) {
  const { id } = params;
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [statuses, setStatuses] = useState({});
  const [loadingReceive, setLoadingReceive] = useState({});

  // fetch order
  useEffect(() => {
    if (!token) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/buyer/orders/${id}/`,
          { headers: { Authorization: `Token ${token}` } },
        );
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  // init statuses
  useEffect(() => {
    if (!order) return;
    const init = {};
    order.order_items.forEach((item) => {
      const sid = item.product.user;
      if (!(sid in init)) {
        init[sid] = item.receive_status === 1 ? STATUSES.length - 1 : 0;
      }
    });
    setStatuses(init);
  }, [order]);

  // handle receive
  const handleReceive = async (sellerId) => {
    if (statuses[sellerId] === STATUSES.length - 1) return;
    if (
      !window.confirm("Confirm you have received all items from this seller.")
    ) {
      return;
    }
    setLoadingReceive((p) => ({ ...p, [sellerId]: true }));
    try {
      const items = order.order_items.filter(
        (i) => i.product.user === sellerId,
      );
      const headers = new Headers({
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      });
      const body = JSON.stringify({ receive_status: 1 });
      await Promise.all(
        items.map((it) =>
          fetch(`https://media.upfrica.com/api/buyer/order-item/${it.id}/`, {
            method: "PATCH",
            headers,
            body,
          }).then((r) => {
            if (!r.ok) throw new Error(`Item ${it.id} failed`);
            return r.json();
          }),
        ),
      );
      setStatuses((p) => ({ ...p, [sellerId]: STATUSES.length - 1 }));
      alert("Items marked as received.");
    } catch (err) {
      console.error(err);
      alert("Failed to mark received: " + err.message);
    } finally {
      setLoadingReceive((p) => ({ ...p, [sellerId]: false }));
    }
  };

  if (loading) return <OrderDetailsSkeleton />;
  if (!order) {
    return (
      <div className="p-6 text-center text-red-600">Unable to load order.</div>
    );
  }

  // group by seller
  const bySeller = order.order_items.reduce((acc, item) => {
    const sid = item.product.user;
    (acc[sid] ||= []).push(item);
    return acc;
  }, {});

  return (
    <main className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow space-y-8">
      {/* back + header */}
      <div className="flex items-center space-x-3">
        <button
          onClick={() => router.push("/dashboard/all-orders")}
          className="p-1 rounded-full hover:bg-gray-100"
        >
          <AiOutlineArrowLeft size={20} />
        </button>
        <h1 className="text-2xl font-bold">
          Order #{String(order.id).padStart(6, "0")}
        </h1>
      </div>

      {Object.entries(bySeller).map(([sellerId, items]) => {
        const idx = statuses[sellerId] ?? 0;
        return (
          <section
            key={sellerId}
            className="space-y-6 border-b border-gray-200 pb-6"
          >
            {/* header */}
            <div className="flex justify-between items-center">
              <h2 className="text-lg font-medium">Seller #{sellerId}</h2>
              <button
                // onClick={() => router.push(`/chat/${sellerId}`)}
                className="flex items-center space-x-1 px-4 py-2 bg-violet-600 text-white rounded-full hover:bg-violet-700 transition"
              >
                <MdChat size={18} />
                <span>Contact Seller</span>
              </button>
            </div>

            {/* products */}
            <div className="space-y-4">
              {items.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center bg-gray-50 p-4 rounded-lg shadow-sm"
                >
                  <img
                    src={item.product.product_images[0]}
                    alt={item.product.title}
                    className="w-24 h-24 object-cover rounded"
                  />
                  <div className="ml-4 flex-1">
                    <h3 className="font-semibold text-lg">
                      {item.product.title}
                    </h3>
                    <p className="text-gray-700 mt-1">
                      ${(item.price_cents / 100).toFixed(2)} √ó {item.quantity}
                    </p>
                  </div>
                  <button
                    onClick={() => handleReceive(item.product.user)}
                    disabled={
                      statuses[item.product.user] === STATUSES.length - 1 ||
                      loadingReceive[item.product.user]
                    }
                    className={`px-4 py-2 rounded-full font-medium transition ${
                      statuses[item.product.user] === STATUSES.length - 1
                        ? "bg-gray-300 text-gray-600 cursor-default"
                        : "bg-violet-600 text-white hover:bg-violet-700"
                    }`}
                  >
                    {loadingReceive[item.product.user]
                      ? "Receiving‚Ä¶"
                      : statuses[item.product.user] === STATUSES.length - 1
                        ? "Received"
                        : "Mark Received"}
                  </button>
                </div>
              ))}
            </div>

            {/* status bar */}
            <div className="relative my-6">
              <div className="absolute top-4 left-0 right-0 h-1 bg-gray-200 rounded"></div>
              <div className="relative flex justify-between z-10">
                {STATUSES.map((_, i) => (
                  <div key={i} className="flex flex-col items-center">
                    <div
                      className={`w-8 h-8 flex items-center justify-center rounded-full ${
                        i <= idx
                          ? "bg-violet-600 text-white"
                          : "bg-gray-200 text-gray-400"
                      }`}
                    >
                      {i <= idx && <MdCheck />}
                    </div>
                  </div>
                ))}
              </div>
              <div className="relative flex justify-between mt-2 text-sm text-center">
                {STATUSES.map((label, i) => (
                  <span key={i} className="w-16">
                    {label}
                  </span>
                ))}
              </div>
            </div>
          </section>
        );
      })}

      {/* address & contact */}
      <section className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 border-t border-gray-200">
        <div className="flex items-start space-x-3">
          <AiOutlineHome size={24} className="text-violet-600 mt-1" />
          <div>
            <h4 className="font-semibold">Delivery Address</h4>
            <p className="text-gray-700">
              {order.address.address_data.address_line_1}
              {order.address.address_data.address_line_2 &&
                `, ${order.address.address_data.address_line_2}`}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.local_area},{" "}
              {order.address.address_data.town}
            </p>
            <p className="text-gray-700">
              {order.address.address_data.country}
            </p>
          </div>
        </div>
        <div className="space-y-3">
          <div className="flex items-center space-x-3">
            <AiOutlineMail size={24} className="text-violet-600" />
            <span className="text-gray-700">{order.buyer.email}</span>
          </div>
          <div className="flex items-center space-x-3">
            <AiOutlinePhone size={24} className="text-violet-600" />
            <span className="text-gray-700">
              {order.address.address_data.phone_number}
            </span>
          </div>
        </div>
      </section>
    </main>
  );
}


===== src/app/(pages)/new-dashboard/my-orders/components/DeliveryTracker.js =====
"use client";

import React from "react";

export default function DeliveryTracker({ stage = 0, steps = [] }) {
  return (
    <div className="flex justify-between items-center bg-gray-50 rounded-md py-4 px-6">
      {steps.map((step, index) => {
        const isCompleted = index <= stage;
        const isLast = index === steps.length - 1;

        return (
          <div
            key={index}
            className="flex-1 flex flex-col items-center relative"
          >
            {/* Connector line */}
            {index > 0 && (
              <div className="absolute top-3 left-[-50%] w-full h-1 bg-gray-200 z-0">
                <div
                  className={`h-1 ${
                    isCompleted ? "bg-blue-600" : "bg-gray-300"
                  }`}
                  style={{
                    width: "100%",
                  }}
                />
              </div>
            )}

            {/* Circle */}
            <div
              className={`w-6 h-6 rounded-full flex items-center justify-center z-10 mb-1 ${
                isCompleted
                  ? "bg-blue-600 text-white"
                  : "bg-gray-300 text-white"
              }`}
            >
              ‚úì
            </div>

            {/* Label */}
            <div className="text-center text-sm font-semibold">
              {step.label}
            </div>

            {/* Date or note */}
            <div className="text-center text-xs text-gray-500 mt-1">
              {step.date || step.note}
            </div>
          </div>
        );
      })}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/my-orders/components/OrderCard.jsx =====
// "use client";

// import React, { useState, useRef, useEffect } from "react";
// import { useRouter } from "next/navigation";
// import {
//   AiOutlineHome,
//   AiOutlineUser,
//   AiOutlinePhone,
// } from "react-icons/ai";

// export default function OrderCard({
//   order,
//   items = [], // array of order_items to render
// }) {
//   const router = useRouter();
//   const [dropdownOpen, setDropdownOpen] = useState(false);
//   const [itemDropdown, setItemDropdown] = useState(null);
//   const [showFullInfo, setShowFullInfo] = useState(false);
//   const dropdownRef = useRef();

//   useEffect(() => {
//     const handler = (e) => {
//       if (!dropdownRef.current?.contains(e.target)) {
//         setDropdownOpen(false);
//       }
//     };
//     document.addEventListener("mousedown", handler);
//     return () => document.removeEventListener("mousedown", handler);
//   }, []);

//   const phone = order.address.address_data.phone_number;
//   const maskedPhone = phone.replace(/(\+\d{3})\s\d{2}\s\d{3}/, "$1 ***");

//   return (
//     <div className=" md:w-full bg-white rounded-xl shadow-upfrica mb-6 p-4">
//       {/* ‚Äî Order Header ‚Äî */}
//       <div className="flex flex-col md:flex-row justify-between bg-gray-100 rounded-lg p-4 gap-4">
//         <div className="flex-1 min-w-0">
//           <div className="text-green-600 font-bold flex items-center mb-2 text-sm sm:text-base">
//             ‚úÖ{" "}
//             {order.order_items.every(i => i.receive_status === 1)
//               ? "Received"
//               : "Processing"}
//           </div>
//           <div className="flex flex-wrap gap-4 text-xs sm:text-sm text-black">
//             <div>
//               <span className="block font-bold text-green-600">Order #</span>
//               {String(order.id).padStart(8, "0")}
//             </div>
//             <div>
//               <span className="block font-bold text-green-600">Date</span>
//               {new Date(order.created_at).toLocaleDateString()}
//             </div>
//             <div>
//               <span className="block font-bold text-green-600">Total</span>
//               GHS {(order.total_fee_cents / 100).toFixed(2)}
//             </div>
//           </div>
//         </div>

//         <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
//           <button
//             className="w-1/2 sm:w-auto h-8 text-white upfrica-btn-primary-sm text-sm"
//             onClick={() => router.push(`/new-dashboard/my-orders/${order.id}`)}
//           >
//             View details
//           </button>
//         </div>
//       </div>

//       {/* ‚Äî Items List ‚Äî */}
//       <div className="mt-4 space-y-4">
//         {items.map((item) => {
//           const status = item.receive_status === 1 ? "Received" : "Processing";
//           return (
//             <div
//               key={item.id}
//               className="flex flex-col sm:flex-row items-start sm:items-center gap-4 bg-gray-50 rounded-lg p-3 relative"
//             >
//               <img
//                 src={item.product.product_images?.[0] || "/placeholder.png"}
//                 alt={item.product.title}
//                 className="w-16 h-16 sm:w-20 sm:h-20 object-cover rounded-md flex-shrink-0"
//               />

//               <div className="flex-1 min-w-0 space-y-1">
//                 <h3 className="font-semibold truncate text-sm sm:text-base">
//                   {item.product.title}
//                 </h3>
//                 <p className="text-xs sm:text-sm text-gray-600">
//                   <strong>Status:</strong> {status}
//                 </p>
//                 <p className="text-xs sm:text-sm text-gray-600">
//                   <strong>Item ID:</strong> {item.id}
//                 </p>
//                 <p className="text-xs sm:text-sm text-gray-600">
//                   <strong>Price:</strong> GHS{" "}
//                   {(item.price_cents / 100).toFixed(2)}
//                 </p>
//               </div>

//               {/* per‚Äêitem More Actions dropdown */}
//               <div className="relative self-start sm:self-auto">
//                 <button
//                   className="text-sm upfrica-btn-primary-outline-sm px-2 py-1"
//                   onClick={() =>
//                     setItemDropdown(open =>
//                       open === item.id ? null : item.id
//                     )
//                   }
//                 >
//                   More Actions ‚ñº
//                 </button>
//                 {itemDropdown === item.id && (
//                   <div className="absolute right-0 mt-1 bg-white border rounded-md shadow-lg z-10 w-40">
//                     {[
//                       "Contact seller",
//                       "Return this item",
//                       "I didn‚Äôt receive it",
//                       "Sell this item",
//                       "Add note",
//                       "Hide Order",
//                       "Help & report",
//                     ].map((label, i) => (
//                       <button
//                         key={i}
//                         className="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
//                       >
//                         {label}
//                       </button>
//                     ))}
//                   </div>
//                 )}
//               </div>

//             </div>
//           );
//         })}
//       </div>

//       {/* ‚Äî Delivery Info ‚Äî */}
//       <hr className="border-t border-gray-200 my-4" />
//       <div className="text-sm text-gray-700 space-y-2">
//         <span className="font-semibold text-gray-800">Delivery Info:</span>
//         <div className="space-y-2">
//           <div className="flex items-center space-x-2">
//             <AiOutlineHome size={18} />
//             <span className="text-xs sm:text-sm">
//               {showFullInfo
//                 ? `${order.address.address_data.address_line_1}${order.address.address_data.address_line_2
//                   ? ", " + order.address.address_data.address_line_2
//                   : ""
//                 }, ${order.address.address_data.local_area}, ${order.address.address_data.town
//                 }, ${order.address.address_data.country}`
//                 : `${order.address.address_data.town}, ${order.address.address_data.country}`}
//             </span>
//           </div>
//           <div className="flex items-center space-x-2">
//             <AiOutlineUser size={18} />
//             <span className="text-xs sm:text-sm">
//               {showFullInfo
//                 ? `${order.buyer.first_name} ${order.buyer.last_name}`
//                 : `${order.buyer.first_name} ${order.buyer.last_name[0]}.`}
//             </span>
//           </div>
//           <div className="flex items-center space-x-2">
//             <AiOutlinePhone size={18} />
//             <span className="text-xs sm:text-sm">
//               {showFullInfo ? phone : maskedPhone}
//             </span>
//           </div>
//         </div>
//         <button
//           onClick={() => setShowFullInfo(v => !v)}
//           className="text-sm text-purple-600 mt-2 underline"
//         >
//           {showFullInfo ? "Hide full info ‚ñ≤" : "Show full info ‚ñº"}
//         </button>
//       </div>
//     </div>
//   );
// }

// "use client";

// import React, { useState, useRef, useEffect } from "react";
// import { useRouter } from "next/navigation";
// import {
//   AiOutlineHome,
//   AiOutlineUser,
//   AiOutlinePhone,
//   AiOutlineShoppingCart,
//   AiOutlineEdit,
//   AiOutlineShop,
// } from "react-icons/ai";
// import DirectBuyPopup from "@/components/DirectBuyPopup";

// export default function OrderCard({
//   order,
//   items = [], // array of order_items to render
// }) {
//   const router = useRouter();
//   const [dropdownOpen, setDropdownOpen] = useState(false);
//   const [itemDropdown, setItemDropdown] = useState(null);
//   const [showFullInfo, setShowFullInfo] = useState(false);
//   // ‡¶¨‡¶¶‡¶≤‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®:
//   const [popupItem, setPopupItem] = useState(null);   // ‡¶Ø‡ßá‡¶á ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßã
//   const [showBuyPopup, setShowBuyPopup] = useState(false);  // ‡¶Æ‡¶°‡¶æ‡¶≤ ‡¶ñ‡ßã‡¶≤‡¶æ/‡¶¨‡¶®‡ßç‡¶ß

//   const dropdownRef = useRef();

//   useEffect(() => {
//     const handler = (e) => {
//       if (!dropdownRef.current?.contains(e.target)) {
//         setDropdownOpen(false);
//       }
//     };
//     document.addEventListener("mousedown", handler);
//     return () => document.removeEventListener("mousedown", handler);
//   }, []);

//   const phone = order.address.address_data.phone_number;
//   const maskedPhone = phone.replace(/(\+\d{3})\s\d{2}\s\d{3}/, "$1 ***");

//   // --- New handlers for our buttons ---
//   const handleBuyAgain = (item) => {
//     // ‡ßß) ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶ø ‡¶ï‡ßã‡¶® ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
//     setPopupItem(item.product);
//     // ‡ß®) ‡¶Æ‡¶°‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶≤‡¶§‡ßá ‡¶¨‡¶≤‡¶ø
//     setShowBuyPopup(true);

//     // navigate to product page so user can re-order
//     // router.push(`/product/${item.product.id}`);
//   };

//   const handleWriteReview = (item) => {
//     console.log("revews",item);

//     // navigate to review form
//     // router.push(`/product/${item.product.id}/review`);
//   };

//   const handleViewSellerItems = (item) => {
//     // navigate to seller's storefront
//     router.push(`/seller/${item.product.seller.id}/items`);
//   };

//   return (
//     <div className="md:w-full bg-white rounded-xl shadow-upfrica mb-6 p-4">
//       {/* ‚Äî Order Header ‚Äî */}
//       <div className="flex flex-col md:flex-row justify-between bg-gray-100 rounded-lg p-4 gap-4">
//         <div className="flex-1 min-w-0">
//           <div className="text-green-600 font-bold flex items-center mb-2 text-sm sm:text-base">
//             ‚úÖ{" "}
//             {order.order_items.every(i => i.receive_status === 1)
//               ? "Received"
//               : "Processing"}
//           </div>
//           <div className="flex flex-wrap gap-4 text-xs sm:text-sm text-black">
//             <div>
//               <span className="block font-bold text-green-600">Order #</span>
//               {String(order.id).padStart(8, "0")}
//             </div>
//             <div>
//               <span className="block font-bold text-green-600">Date</span>
//               {new Date(order.created_at).toLocaleDateString()}
//             </div>
//             <div>
//               <span className="block font-bold text-green-600">Total</span>
//               GHS {(order.total_fee_cents / 100).toFixed(2)}
//             </div>
//           </div>
//         </div>
//         <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
//           <button
//             className="w-1/2 sm:w-auto h-8 text-white upfrica-btn-primary-sm text-sm"
//             onClick={() => router.push(`/new-dashboard/my-orders/${order.id}`)}
//           >
//             View details
//           </button>
//         </div>
//       </div>

//       {/* ‚Äî Items List ‚Äî */}
//       <div className="mt-4 space-y-4">
//         {items.map((item) => {
//           const status = item.receive_status === 1 ? "Received" : "Processing";
//           return (
//             <div
//               key={item.id}
//               className="bg-gray-50"
//             >
//               <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 bg-gray-50 rounded-lg p-3 relative"
//               >
//                 <img
//                   src={item.product.product_images?.[0] || "/placeholder.png"}
//                   alt={item.product.title}
//                   className="w-16 h-16 sm:w-20 sm:h-20 object-cover rounded-md flex-shrink-0"
//                 />

//                 <div className="flex-1 min-w-0 space-y-1">
//                   <h3 className="font-semibold truncate text-sm sm:text-base">
//                     {item.product.title}
//                   </h3>
//                   <p className="text-xs sm:text-sm text-gray-600">
//                     <strong>Status:</strong> {status}
//                   </p>
//                   <p className="text-xs sm:text-sm text-gray-600">
//                     <strong>Item ID:</strong> {item.id}
//                   </p>
//                   <p className="text-xs sm:text-sm text-gray-600">
//                     <strong>Price:</strong> GHS{" "}
//                     {(item.price_cents / 100).toFixed(2)}
//                   </p>
//                 </div>

//                 {/* per-item More Actions dropdown */}
//                 <div className="relative self-start sm:self-auto">
//                   <button
//                     className="text-sm upfrica-btn-primary-outline-sm px-2 py-1"
//                     onClick={() =>
//                       setItemDropdown(open =>
//                         open === item.id ? null : item.id
//                       )
//                     }
//                   >
//                     More Actions ‚ñº
//                   </button>
//                   {itemDropdown === item.id && (
//                     <div className="absolute right-0 mt-1 bg-white border rounded-md shadow-lg z-10 w-40">
//                       {[
//                         "Contact seller",
//                         "Return this item",
//                         "I didn‚Äôt receive it",
//                         "Sell this item",
//                         "Add note",
//                         "Hide Order",
//                         "Help & report",
//                       ].map((label, i) => (
//                         <button
//                           key={i}
//                           className="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
//                         >
//                           {label}
//                         </button>
//                       ))}
//                     </div>
//                   )}
//                 </div>
//               </div>

//               {/* ‚Äî New per-item buttons ‚Äî */}
//               <div className=" p-2 flex gap-2">
//                 <button
//                   onClick={() => handleBuyAgain(item)}
//                   className="flex items-center text-sm upfrica-btn-primary-outline-sm px-2 py-1"
//                 >
//                   <AiOutlineShoppingCart className="mr-1" size={16} />
//                   Buy it again
//                 </button>
//                 <button
//                   onClick={() => handleWriteReview(item)}
//                   className="flex items-center text-sm upfrica-btn-primary-outline-sm px-2 py-1"
//                 >
//                   <AiOutlineEdit className="mr-1" size={16} />
//                   Write a review
//                 </button>
//                 <button
//                   onClick={() => handleViewSellerItems(item)}
//                   className="flex items-center text-sm upfrica-btn-primary-outline-sm px-2 py-1"
//                 >
//                   <AiOutlineShop className="mr-1" size={16} />
//                   Seller‚Äôs items
//                 </button>
//               </div>
//             </div>
//           );
//         })}
//       </div>

//       {/* ‚Äî Delivery Info ‚Äî */}
//       <hr className="border-t border-gray-200 my-4" />
//       <div className="text-sm text-gray-700 space-y-2">
//         <span className="font-semibold text-gray-800">Delivery Info:</span>
//         <div className="space-y-2">
//           <div className="flex items-center space-x-2">
//             <AiOutlineHome size={18} />
//             <span className="text-xs sm:text-sm">
//               {showFullInfo
//                 ? `${order.address.address_data.address_line_1}${order.address.address_data.address_line_2
//                   ? ", " + order.address.address_data.address_line_2
//                   : ""
//                 }, ${order.address.address_data.local_area}, ${order.address.address_data.town
//                 }, ${order.address.address_data.country}`
//                 : `${order.address.address_data.town}, ${order.address.address_data.country}`}
//             </span>
//           </div>
//           <div className="flex items-center space-x-2">
//             <AiOutlineUser size={18} />
//             <span className="text-xs sm:text-sm">
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/my-orders/components/OrdersPage.jsx =====
// "use client";

// import React, { useEffect, useState, useRef } from "react";
// import { useSearchParams, useRouter } from "next/navigation";
// import { useSelector } from "react-redux";
// import OrderCard from "./OrderCard";
// import Pagination from "@/components/Pagination";
// import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";

// const PAGE_SIZE = 20;

// export default function OrdersPage() {
//   const searchParams = useSearchParams();
//   const router = useRouter();
//   const token = useSelector((state) => state.auth.token);

//   const pageParam = parseInt(searchParams.get("page") || "1", 10);
//   const [orders, setOrders] = useState([]);
//   const [count, setCount] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);

//   // search state
//   const [searchQuery, setSearchQuery] = useState("");
//   const [searchResults, setSearchResults] = useState([]);
//   const [searchLoading, setSearchLoading] = useState(false);
//   const debounceRef = useRef(null);

//   // 1Ô∏è‚É£ Fetch paginated orders
//   useEffect(() => {
//     if (!token) return;
//     setLoading(true);
//     fetch(`https://media.upfrica.com/api/buyer/orders/?page=${pageParam}`, {
//       headers: {
//         Authorization: `Token ${token}`,
//         "Content-Type": "application/json",
//       },
//     })
//       .then((res) => {
//         if (!res.ok) throw new Error(`HTTP ${res.status}`);
//         return res.json();
//       })
//       .then((data) => {
//         setOrders(data.results);
//         setCount(data.count);
//       })
//       .catch((err) => setError(err.message))
//       .finally(() => setLoading(false));
//   }, [token, pageParam]);

//   const totalPages = Math.ceil(count / PAGE_SIZE);
//   const goToPage = (newPage) => {
//     if (newPage >= 1 && newPage <= totalPages) {
//       router.push(`/new-dashboard/my-orders?page=${newPage}`);
//     }
//   };

//   // 2Ô∏è‚É£ Debounced client-side search over orders & items
//   useEffect(() => {
//     if (!searchQuery.trim()) {
//       setSearchResults([]);
//       setSearchLoading(false);
//       return;
//     }
//     setSearchLoading(true);
//     clearTimeout(debounceRef.current);
//     debounceRef.current = setTimeout(() => {
//       const q = searchQuery.toLowerCase();
//       const hits = orders.flatMap((order) =>
//         order.order_items
//           .filter(
//             (item) =>
//               item.product.title.toLowerCase().includes(q) ||
//               String(order.id).includes(q)
//           )
//           .map((item) => ({ ...item, order }))
//       );
//       setSearchResults(hits);
//       setSearchLoading(false);
//     }, 300);
//     return () => clearTimeout(debounceRef.current);
//   }, [searchQuery, orders]);

//   // 3Ô∏è‚É£ Which orders to display?
//   const displayOrders = searchQuery
//     ? Array.from(new Set(searchResults.map((i) => i.order.id))).map(
//       (id) => searchResults.find((i) => i.order.id === id).order
//     )
//     : orders;

//   return (
//     <div className="bg-gray-100 min-h-screen text-black font-sans px-4 sm:px-6 lg:px-8 py-6">
//       {/* ‚îÄ‚îÄ Search Bar ‚îÄ‚îÄ */}
//       <div className="relative w-full sm:max-w-xl mx-auto mb-4">
//         <AiOutlineSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-lg sm:text-xl text-gray-700" />
//         <input
//           type="text"
//           value={searchQuery}
//           onChange={(e) => setSearchQuery(e.target.value)}
//           placeholder="Search orders by product name or order #..."
//           className="w-full rounded-full border border-gray-300 px-10 py-2 text-sm sm:text-base focus:outline-none"
//         />
//         {searchQuery && (
//           <AiOutlineClose
//             onClick={() => setSearchQuery("")}
//             className="absolute right-3 top-1/2 transform -translate-y-1/2 text-lg sm:text-xl text-gray-600 cursor-pointer"
//           />
//         )}
//       </div>

//       <h1 className="text-xl sm:text-2xl font-bold mb-6 text-center sm:text-left">
//         My Orders
//       </h1>

//       {loading ? (
//         <div className="text-center text-gray-600 text-sm sm:text-base py-10">
//           Loading your orders...
//         </div>
//       ) : error ? (
//         <p className="text-red-600 text-center text-sm sm:text-base py-10">
//           Error loading orders: {error}
//         </p>
//       ) : (
//         <>
//           {displayOrders.length === 0 ? (
//             <p className="text-center text-gray-500 text-sm sm:text-base py-10">
//               {searchQuery
//                 ? searchLoading
//                   ? "Searching‚Ä¶"
//                   : "No matching orders found."
//                 : "You have no orders yet."}
//             </p>
//           ) : (
//             <div className="space-y-6">
//               {displayOrders.map((order) => (
//                 <OrderCard
//                   key={order.id}
//                   order={order}
//                   items={
//                     searchQuery
//                       ? searchResults.filter((i) => i.order.id === order.id)
//                       : order.order_items
//                   }
//                 />
//               ))}
//             </div>
//           )}

//           {/* ‚îÄ‚îÄ Pagination ‚îÄ‚îÄ */}
//           {!searchQuery && totalPages > 1 && (
//             <div className="mt-6 flex justify-center">
//               <Pagination
//                 currentPage={pageParam}
//                 totalPages={totalPages}
//                 onPageChange={goToPage}
//               />
//             </div>
//           )}
//         </>
//       )}
//     </div>
//   );
// }

"use client";

import React, { useEffect, useState, useRef } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import OrderCard from "./OrderCard";
import Pagination from "@/components/Pagination";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";

const PAGE_SIZE = 20;

export default function OrdersPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const pageParam = parseInt(searchParams.get("page") || "1", 10);

  const [orders, setOrders] = useState([]);
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // ‚îÄ‚îÄ search state
  const [searchQuery, setSearchQuery] = useState("");
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceRef = useRef(null);

  // ‚îÄ‚îÄ 1Ô∏è‚É£ Fetch paginated orders (only when not searching)
  useEffect(() => {
    if (!token || searchQuery.trim()) return;

    setLoading(true);
    setError(null);

    fetch(`${BASE_API_URL}/api/buyer/orders/?page=${pageParam}`, {
      headers: {
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      },
    })
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setOrders(data.results);
        setCount(data.count);
      })
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [token, pageParam, searchQuery]);

  // ‚îÄ‚îÄ 2Ô∏è‚É£ Debounced server-side search
  useEffect(() => {
    // if search cleared, reset searchLoading & error
    if (!searchQuery.trim()) {
      setSearchLoading(false);
      setError(null);
      return;
    }

    setSearchLoading(true);
    setError(null);

    // clear previous timer
    if (debounceRef.current) {
      clearTimeout(debounceRef.current);
    }

    debounceRef.current = setTimeout(() => {
      fetch(
        `${BASE_API_URL}/api/buyer/orders/search/?q=${encodeURIComponent(
          searchQuery,
        )}&page=${pageParam}`,
        {
          headers: {
            Authorization: `Token ${token}`,
            "Content-Type": "application/json",
          },
        },
      )
        .then((res) => {
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          return res.json();
        })
        .then((data) => {
          setOrders(data.results);
          setCount(data.count);
        })
        .catch((err) => setError(err.message))
        .finally(() => setSearchLoading(false));
    }, 300);

    // cleanup on unmount or next effect run
    return () => {
      if (debounceRef.current) clearTimeout(debounceRef.current);
    };
  }, [searchQuery, token, pageParam]);

  const totalPages = Math.ceil(count / PAGE_SIZE);
  const goToPage = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      router.push(`/new-dashboard/my-orders?page=${newPage}`);
    }
  };

  // ‚îÄ‚îÄ Skeleton card for loading state
  // const SkeletonCard = () => (
  //   <div className="border rounded-lg bg-white p-4 animate-pulse flex space-x-4">
  //     <div className="w-16 h-16 bg-gray-300 rounded-md" />
  //     <div className="flex-1 space-y-2 py-1">
  //       <div className="h-4 bg-gray-300 rounded w-1/3" />
  //       <div className="h-3 bg-gray-300 rounded w-2/3" />
  //       <div className="h-3 bg-gray-300 rounded w-1/2" />
  //     </div>
  //   </div>
  // );

  // ‚îÄ‚îÄ Skeleton mimicking OrderCard
  const SkeletonCard = () => (
    <div className="md:w-full bg-white rounded-xl shadow-upfrica mb-6 p-4 animate-pulse">
      {/* ‚Äî Header skeleton ‚Äî */}
      <div className="flex flex-col md:flex-row justify-between bg-gray-100 rounded-lg p-4 gap-4">
        <div className="flex-1 min-w-0 space-y-2">
          <div className="h-4 bg-gray-300 rounded w-1/4" />
          <div className="flex flex-wrap gap-4">
            <div className="space-y-1">
              <div className="h-3 bg-gray-300 rounded w-12" />
              <div className="h-4 bg-gray-300 rounded w-16" />
            </div>
            <div className="space-y-1">
              <div className="h-3 bg-gray-300 rounded w-12" />
              <div className="h-4 bg-gray-300 rounded w-16" />
            </div>
            <div className="space-y-1">
              <div className="h-3 bg-gray-300 rounded w-12" />
              <div className="h-4 bg-gray-300 rounded w-16" />
            </div>
          </div>
        </div>
        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <div className="h-8 bg-gray-300 rounded w-24" />
        </div>
      </div>

      {/* ‚Äî Items list skeleton ‚Äî */}
      <div className="mt-4 space-y-4">
        {[...Array(2)].map((_, idx) => (
          <div
            key={idx}
            className="bg-gray-50 rounded-lg p-3 animate-pulse flex flex-col sm:flex-row items-start sm:items-center gap-4"
          >
            <div className="w-16 h-16 sm:w-20 sm:h-20 bg-gray-300 rounded-md" />
            <div className="flex-1 min-w-0 space-y-2">
              <div className="h-4 bg-gray-300 rounded w-3/4" />
              <div className="h-3 bg-gray-300 rounded w-1/3" />
              <div className="h-3 bg-gray-300 rounded w-1/2" />
            </div>
          </div>
        ))}
      </div>

      {/* ‚Äî Delivery info skeleton ‚Äî */}
      <div className="mt-4 space-y-2">
        <div className="h-4 bg-gray-300 rounded w-1/3" />
        <div className="h-3 bg-gray-300 rounded w-2/3" />
        <div className="h-3 bg-gray-300 rounded w-1/2" />
      </div>
    </div>
  );

  return (
    <div className="bg-gray-100 min-h-screen text-black font-sans px-4 sm:px-6 lg:px-8 py-6">
      {/* ‚îÄ‚îÄ Search Bar ‚îÄ‚îÄ */}
      <div className="relative w-full sm:max-w-xl mx-auto mb-4">
        <AiOutlineSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-lg sm:text-xl text-gray-700" />
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search orders by product name or order #..."
          className="w-full rounded-full border border-gray-300 px-10 py-2 text-sm sm:text-base focus:outline-none"
        />
        {searchQuery && (
          <AiOutlineClose
            onClick={() => {
              setSearchQuery("");
              router.push(`/new-dashboard/my-orders?page=1`);
            }}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-lg sm:text-xl text-gray-600 cursor-pointer"
          />
        )}
      </div>

      <h1 className="text-xl sm:text-2xl font-bold mb-6 text-center sm:text-left">
        My Orders
      </h1>

      {/* product card  */}
      {/* ‚îÄ‚îÄ Loading / Error / Empty / Data States ‚îÄ‚îÄ */}
      {loading || searchLoading ? (
        <div className="space-y-6">
          {Array.from({ length: PAGE_SIZE }).map((_, i) => (
            <SkeletonCard key={i} />
          ))}
        </div>
      ) : error ? (
        <p className="text-red-600 text-center text-sm sm:text-base py-10">
          Error: {error}
        </p>
      ) : orders.length === 0 ? (
        <p className="text-center text-gray-500 text-sm sm:text-base py-10">
          {searchQuery
            ? "No orders matched your search."
            : "You have no orders yet."}
        </p>
      ) : (
        <>
          <div className="space-y-6">
            {orders.map((order) => (
              <OrderCard
                key={order.id}
                order={order}
                items={order.order_items}
              />
            ))}
          </div>

          {/* ‚îÄ‚îÄ Pagination ‚îÄ‚îÄ */}
          {totalPages > 1 && (
            <div className="mt-6 flex justify-center">
              <Pagination
                currentPage={pageParam}
                totalPages={totalPages}
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/my-orders/components/SideBar.jsx =====
// 'use client';

// import React from 'react';

// export default function SideBar() {
//   return (
//     <aside className="w-[240px] p-2 text-black hidden md:block rounded-md overflow-y-auto max-h-[calc(100vh-25rem)]">
//       <h2 className="text-lg font-bold mb-4">Filters</h2>

//       <div className="mb-6 p-5 bg-white border rounded-t-[5px] drop-shadow">
//         <label className="block text-sm font-semibold mb-1">Category</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Categories</option>
//           <option>Electronics</option>
//           <option>Fashion</option>
//           <option>Home</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Condition</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Conditions</option>
//           <option>New</option>
//           <option>Used</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Sort By</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>Most Recent</option>
//           <option>Price: Low to High</option>
//           <option>Price: High to Low</option>
//         </select>
//       </div>

//       <div>
//         <label className="block text-sm font-semibold mb-1">Ratings</label>
//         <p className="text-yellow-600 font-bold">‚≠ê 4.5/5</p>
//       </div>
//     </aside>
//   );
// }


===== src/app/(pages)/new-dashboard/my-orders/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";

import React from "react";

const layout = ({ children }) => {
  return (
    <>
      {/* <Header /> */}
      <div className="min-h-screen bg-gray-100 text-gray-900">
        <div className="flex flex-col md:flex-row bg-gray-100 mx-auto max-w-6xl gap-2 px-2 py-10 pb-32">
          {/* <Sidebar /> */}
          <main className="flex-1 px-0 py-0">{children}</main>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default layout;


===== src/app/(pages)/new-dashboard/my-orders/page.jsx =====
import React from "react";
import OrdersPage from "./components/OrdersPage";

const page = () => {
  return (
    <div>
      <OrdersPage />
    </div>
  );
};

export default page;


===== src/app/(pages)/new-dashboard/my-orders/page2.jsx =====
// 'use client'

// import React, { useState, useEffect } from 'react'
// import { useSearchParams, useRouter } from 'next/navigation'
// import { useSelector } from 'react-redux'
// import { AiOutlineLeft, AiOutlineRight, AiOutlineArrowDown } from 'react-icons/ai'
// import { MdCheck, MdChat } from 'react-icons/md'

// const PAGE_SIZE = 20
// // Remove "Delivered", keep "Received" as final status
// const STATUSES = ['Ordered', 'Processing', 'Shipped', 'Received']

// function Pagination({ currentPage, totalPages, onPageChange }) {
//   const [isMobile, setIsMobile] = useState(false)

//   useEffect(() => {
//     const handleResize = () => setIsMobile(window.innerWidth <= 768)
//     handleResize()
//     window.addEventListener('resize', handleResize)
//     return () => window.removeEventListener('resize', handleResize)
//   }, [])

//   const handlePageClick = (page) => {
//     if (page >= 1 && page <= totalPages && page !== currentPage) {
//       onPageChange(page)
//     }
//   }

//   const getPageNumbers = () => {
//     if (isMobile) {
//       if (totalPages <= 2) return [1, ...(totalPages === 2 ? [2] : [])]
//       return [1, 2, '...']
//     }
//     if (totalPages <= 5) return Array.from({ length: totalPages }, (_, i) => i + 1)
//     if (currentPage <= 3) return [1, 2, 3, 4, '...', totalPages]
//     if (currentPage >= totalPages - 2)
//       return [1, '...', totalPages - 3, totalPages - 2, totalPages - 1, totalPages]
//     return [1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages]
//   }

//   return (
//     <div className="mt-8 flex justify-center overflow-x-auto">
//       <div className="inline-flex items-center space-x-2 whitespace-nowrap px-2">
//         <button
//           onClick={() => handlePageClick(currentPage - 1)}
//           disabled={currentPage === 1}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <AiOutlineLeft className="mr-1" />
//           <span>Prev</span>
//         </button>
//         {getPageNumbers().map((page, i) =>
//           typeof page === 'number' ? (
//             <button
//               key={i}
//               onClick={() => handlePageClick(page)}
//               className={`px-3 py-1 rounded border border-gray-300 hover:bg-gray-100 ${page === currentPage ? 'bg-violet-700 text-white font-semibold' : ''
//                 }`}
//             >
//               {page}
//             </button>
//           ) : (
//             <span key={i} className="px-3 py-1 text-gray-500">
//               ‚Ä¶
//             </span>
//           )
//         )}
//         <button
//           onClick={() => handlePageClick(currentPage + 1)}
//           disabled={currentPage === totalPages}
//           className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//         >
//           <span>Next</span>
//           <AiOutlineRight className="ml-1" />
//         </button>
//       </div>
//     </div>
//   )
// }

// function SkeletonOrderCard() {
//   return (
//     <div className="bg-white rounded-lg shadow p-6 space-y-6 animate-pulse border border-gray-700">
//       <div className="h-6 bg-gray-300 rounded w-1/3" />
//       <div className="h-4 bg-gray-300 rounded w-1/4" />
//       <div className="grid grid-cols-3 gap-4">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <div key={i} className="flex space-x-3 items-center">
//             <div className="w-16 h-16 bg-gray-300 rounded" />
//             <div className="flex-1 space-y-2">
//               <div className="h-4 bg-gray-300 rounded w-3/4" />
//               <div className="h-4 bg-gray-300 rounded w-1/2" />
//               <div className="h-3 bg-gray-300 rounded w-1/3" />
//             </div>
//           </div>
//         ))}
//       </div>
//       <div className="grid grid-cols-2 gap-6">
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-4 bg-gray-300 rounded w-1/3" />
//         </div>
//         <div className="space-y-2">
//           <div className="h-4 bg-gray-300 rounded w-1/2" />
//           <div className="h-4 bg-gray-300 rounded w-2/3" />
//           <div className="h-6 bg-gray-300 rounded w-1/4" />
//         </div>
//       </div>
//       <div className="space-y-2">
//         <div className="h-4 bg-gray-300 rounded w-1/6" />
//         <div className="w-full bg-gray-200 h-1 rounded-full">
//           <div className="bg-gray-300 h-full" />
//         </div>
//         <div className="flex justify-between">
//           {Array.from({ length: 4 }).map((_, i) => (
//             <div key={i} className="h-4 w-12 bg-gray-300 rounded" />
//           ))}
//         </div>
//       </div>
//     </div>
//   )
// }

// export default function OrdersPage() {
//   const searchParams = useSearchParams()
//   const router = useRouter()
//   const token = useSelector((state) => state.auth.token)

//   const pageParam = parseInt(searchParams.get('page') || '1', 10)
//   const [orders, setOrders] = useState([])
//   const [count, setCount] = useState(0)
//   const [loading, setLoading] = useState(true)
//   const [error, setError] = useState(null)
//   // status index per orderId+sellerId
//   const [statusesByOrder, setStatusesByOrder] = useState({})
//   // loading state for the "receive" action per orderId+sellerId
//   const [loadingReceiveBy, setLoadingReceiveBy] = useState({})

//   useEffect(() => {
//     if (!token) return
//     setLoading(true)
//     fetch(`https://media.upfrica.com/api/buyer/orders/?page=${pageParam}`, {
//       headers: { Authorization: `Token ${token}` },
//     })
//       .then((res) => {
//         if (!res.ok) throw new Error(`HTTP ${res.status}`)
//         return res.json()
//       })
//       .then((data) => {
//         setOrders(data.results)
//         setCount(data.count)
//       })
//       .catch((err) => setError(err.message))
//       .finally(() => setLoading(false))
//   }, [token, pageParam])

//   // Initialize statuses, marking "Received" if receive_status===1
//   useEffect(() => {
//     const init = {}
//     orders.forEach((order) => {
//       const bySeller = {}
//       order.order_items.forEach((item) => {
//         const sid = item.product.user
//         // if any item for that seller is already received, mark as Received
//         const received = item.receive_status === 1
//         bySeller[sid] = received ? STATUSES.length - 1 : 0
//       })
//       init[order.id] = bySeller
//     })
//     setStatusesByOrder(init)
//   }, [orders])

//   const totalPages = Math.ceil(count / PAGE_SIZE)

//   const handlePageChange = (page) => {
//     router.push(`/orders?page=${page}`)
//   }

//   // Handle status clicks, including PATCH for Received
//   const handleStatusClick = async (orderId, sellerId, idx) => {
//     const currentIdx = statusesByOrder[orderId]?.[sellerId] ?? 0
//     const lastIdx = STATUSES.length - 1
//     // if already at final "Received", do nothing
//     if (currentIdx === lastIdx) return

//     const statusName = STATUSES[idx]

//     // Only for "Received" do we call the API
//     if (statusName === 'Received') {
//       if (
//         !window.confirm(
//           'By clicking OK, you confirm that you have received the product.'
//         )
//       ) {
//         return
//       }

//       const key = `${orderId}_${sellerId}`
//       setLoadingReceiveBy((p) => ({ ...p, [key]: true }))

//       try {
//         // gather all items for this seller
//         const items = orders
//           .find((o) => o.id === orderId)
//           .order_items.filter((it) => it.product.user === sellerId)

//         const myHeaders = new Headers()
//         myHeaders.append('Authorization', `Token ${token}`)
//         myHeaders.append('Content-Type', 'application/json')

//         const raw = JSON.stringify({ receive_status: 1 })

//         // send PATCH for each item
//         const requests = items.map((item) =>
//           fetch(
//             `https://media.upfrica.com/api/buyer/order-item/${item.id}/`,
//             {
//               method: 'PATCH',
//               headers: myHeaders,
//               body: raw,
//               redirect: 'follow',
//             }
//           )
//         )
//         const responses = await Promise.all(requests)
//         // check all succeeded
//         for (let res of responses) {
//           if (!res.ok) throw new Error(`HTTP ${res.status}`)
//           const data = await res.json()
//           if (data.receive_status !== 1) throw new Error('Bad response')
//         }

//         // success!
//         setStatusesByOrder((prev) => ({
//           ...prev,
//           [orderId]: {
//             ...prev[orderId],
//             [sellerId]: lastIdx,
//           },
//         }))
//         alert('Marked as received!')
//       } catch (err) {
//         console.error(err)
//         alert('Error marking as received: ' + err.message)
//       } finally {
//         setLoadingReceiveBy((p) => ({ ...p, [key]: false }))
//       }

//       return
//     }

//     // For other statuses, local update only
//     if (
//       !window.confirm(`Are you sure you want to mark this as "${statusName}"?`)
//     ) {
//       return
//     }
//     setStatusesByOrder((prev) => ({
//       ...prev,
//       [orderId]: {
//         ...prev[orderId],
//         [sellerId]: idx,
//       },
//     }))
//   }

//   if (loading) {
//     return (
//       <main className="max-w-6xl mx-auto px-4 py-8 space-y-6">
//         {Array.from({ length: 3 }).map((_, i) => (
//           <SkeletonOrderCard key={i} />
//         ))}
//       </main>
//     )
//   }

//   if (error) {
//     return (
//       <p className="p-6 text-center text-red-600">
//         Error fetching orders: {error}
//       </p>
//     )
//   }

//   return (
//     <main className="space-y-8 max-w-6xl mx-auto px-4 py-8">
//       <h1 className="text-3xl font-bold">My Orders</h1>

//       <div className="space-y-6">
//         {orders.map((order) => {
//           const placedDate = new Date(order.created_at)
//           const formattedPlaced = placedDate.toLocaleDateString(undefined, {
//             year: 'numeric',
//             month: 'long',
//             day: 'numeric',
//           })
//           const itemsBySeller = order.order_items.reduce((acc, item) => {
//             const sid = item.product.user
//             if (!acc[sid]) acc[sid] = []
//             acc[sid].push(item)
//             return acc
//           }, {})

//           return (
//             <div
//               key={order.id}
//               className="bg-white rounded-lg shadow p-6 space-y-1 border border-gray-700"
//             >
//               <div className="flex justify-between items-start">
//                 <div>
//                   <h2 className="text-xl font-semibold">
//                     Order #{String(order.id).padStart(5, '0')}
//                   </h2>
//                   <p className="text-gray-600 text-sm">
//                     Placed{' '}
//                     <time dateTime={order.created_at}>{formattedPlaced}</time>
//                   </p>
//                 </div>
//                 <a
//                   href={`/dashboard/all-orders/${order.id}/`}
//                   className="text-indigo-600 hover:underline text-sm font-medium"
//                 >
//                   View details&nbsp;‚Üí
//                 </a>
//               </div>

//               {Object.entries(itemsBySeller).map(([sellerId, items]) => {
//                 const currentIdx =
//                   statusesByOrder[order.id]?.[sellerId] ?? 0
//                 const progressPercent = ((currentIdx + 1) / STATUSES.length) * 100
//                 const needsGuide = currentIdx < STATUSES.length - 1
//                 const key = `${order.id}_${sellerId}`
//                 const isLoadingReceive = loadingReceiveBy[key]
//                 const lastIdx = STATUSES.length - 1

//                 return (
//                   <div key={sellerId} className="space-y-4">
//                     <div className="flex justify-between items-center">
//                       <span className="text-sm font-medium text-gray-700">
//                         From seller #{sellerId}
//                       </span>
//                       <button
//                         onClick={() => router.push(`/chat/${sellerId}`)}
//                         className="flex flex-col items-center text-violet-700 hover:text-violet-700 text-sm font-medium"
//                       >
//                         <div className="p-2 pe-1 rounded-full bg-gray-200 hover:bg-gray-300">
//                           <MdChat size={18} />
//                         </div>
//                         Contact seller
//                       </button>
//                     </div>

//                     <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
//                       {items.map((item) => (
//                         <div
//                           key={item.id}
//                           className="flex space-x-3 items-center"
//                         >
//                           <img
//                             src={item.product.product_images[0]}
//                             alt={item.product.title}
//                             className="w-16 h-16 rounded object-cover"
//                           />
//                           <div>
//                             <h3 className="text-sm font-medium">
//                               {item.product.title}
//                             </h3>
//                             <p className="text-sm text-gray-500">
//                               ${(item.price_cents / 100).toFixed(2)}
//                             </p>
//                             <p className="text-xs text-gray-400">
//                               Qty: {item.quantity}
//                             </p>
//                           </div>
//                         </div>
//                       ))}
//                     </div>

//                     <div>
//                       <h4 className="text-sm font-medium mb-1">Status</h4>
//                       <div className="w-full bg-gray-200 h-1 rounded-full overflow-hidden">
//                         <div
//                           className="bg-indigo-600 h-full"
//                           style={{ width: `${progressPercent}%` }}
//                         />
//                       </div>
//                       <div className="flex justify-between text-xs mt-1">
//                         {STATUSES.map((status, idx) => (
//                           <div
//                             key={status}
//                             className="relative flex-1 flex justify-center"
//                           >
//                             {/* Arrow now points at "Received" */}
//                             {idx === lastIdx && needsGuide && (
//                               <div className="absolute -top-16 flex flex-col items-center bg-white">
//                                 <span className="text-xs text-gray-700 border border-gray-700 p-1 rounded">
//                                   Click here to receive
//                                 </span>
//                                 <AiOutlineArrowDown className="text-gray-700" />
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/order-edit/[id]/page.jsx =====
import React from "react";

function OrderEditPage() {
  return <div>OrderEditPage</div>;
}

export default OrderEditPage;


===== src/app/(pages)/new-dashboard/order-edit/page.jsx =====
import React from "react";

function OrderEditPage() {
  return <div>OrderEditPage</div>;
}

export default OrderEditPage;


===== src/app/(pages)/new-dashboard/orders/[id]/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import OrderDeliveryTracker from "../components/DeliveryTracker";
import SellerOrderBlock from "../components/SellerOrderBlock";
import BuyerInfoBlock from "../components/BuyerInfoBlock";

export default function OrderDetailsPage() {
  const { id } = useParams();
  const token = useSelector((state) => state.auth.token);
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showFullInfo, setShowFullInfo] = useState(false);
  const [receivedStatus, setReceivedStatus] = useState([]);



  useEffect(() => {
    if (!token || !id) return;
    (async () => {
      setLoading(true);
      try {
        const res = await fetch(`${BASE_API_URL}/api/buyer/orders/${id}/`, {
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error(`Failed to fetch order: ${res.status}`);
        const data = await res.json();
        setOrder(data);

        const grouped = groupItems(data.order_items || []);
        setReceivedStatus(grouped.map(() => false));
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, token]);

  if (loading)
    return (
      <div className="text-center p-6 text-gray-600 dark:text-gray-300">
        Loading...
      </div>
    );
if (!order)
  return <div className="text-center text-red-600 p-6">Order not found.</div>;

const createdDate = new Date(order.created_at);
const groupedItems = groupItems(order.order_items || []);
const totalAmount = order.order_items?.reduce(
  (sum, item) => sum + ((item.price_cents || 0) * item.quantity) / 100,
  0,
);

const myReviews = order.reviews || []; // ‚úÖ FIXED: moved here

  const handleConfirmAt = (index) => {
    setReceivedStatus((prev) => {
      const updated = [...prev];
      updated[index] = true;
      return updated;
    });
  };

  const handleUndoAt = (index) => {
    setReceivedStatus((prev) => {
      const updated = [...prev];
      updated[index] = false;
      return updated;
    });
  };

  const allConfirmed = receivedStatus.every((r) => r === true);
  const anyDispatched = receivedStatus.some((r) => r === true);
  const orderStage = allConfirmed ? 2 : anyDispatched ? 1 : 0;

  const steps = [
    { label: "Ordered", date: createdDate.toLocaleDateString() },
    { label: "Dispatched", note: "Soon" },
    {
      label: "Delivered",
      note: allConfirmed ? "Confirmed" : "Pending confirmation",
    },
  ];

  return (
    <div className="max-w-4xl mx-auto p-0">
      {/* Order Summary Header */}
      <div className="flex justify-between items-start mb-2">
        <div>
          <h2 className="text-green-600 font-bold text-lg">‚úÖ Processing</h2>
          <p className="text-sm text-gray-700 dark:text-gray-300">
            <strong>Order #</strong> {order.order_number || id}
            <br />
            <strong>Date</strong> {createdDate.toLocaleString()}
          </p>
        </div>

        <div className="text-right flex flex-col items-end">
          {!allConfirmed && (
            <button className="upfrica-btn-outline-sm text-green-600">
              Mark as received
            </button>
          )}
          <button
            className={`mt-2 upfrica-btn-outline-sm ${
              allConfirmed
                ? "text-purple-600"
                : "text-gray-400 cursor-not-allowed"
            }`}
            disabled={!allConfirmed}
          >
            Write a review
          </button>
        </div>
      </div>

      {/* Delivery Tracker */}
      <OrderDeliveryTracker stage={orderStage} steps={steps} />

      {/* Tracking Summary */}
      <p className="mt-3 text-sm text-gray-700 dark:text-gray-300">
        <strong>Tracking:</strong>{" "}
        {groupedItems.length > 1
          ? "Multiple tracking numbers ‚Äî see below"
          : "N/A"}
      </p>

      {/* Buyer Info */}
      <div className="mt-6">
        <BuyerInfoBlock
          order={order}
          showFullInfo={showFullInfo}
          setShowFullInfo={setShowFullInfo}
        />
      </div>

{/* Seller Order Blocks */}
<div className="mt-6">
  {groupedItems.map(([sellerName, items], index) => (
    <SellerOrderBlock
      key={index}
      sellerName={sellerName}
      items={items}
      estimatedDelivery={items[0]?.estimated_delivery || "N/A"}
      trackingNumber={items[0]?.tracking_number || "N/A"}
      onConfirm={() => handleConfirmAt(index)}
      onUndo={() => handleUndoAt(index)}
      myReviews={myReviews} // ‚úÖ FIXED: pass down reviews
    />
  ))}
</div>

      {/* Total */}
      <div className="text-right mt-8 font-semibold text-lg text-gray-800 dark:text-gray-100">
        Total: GHS {totalAmount.toFixed(2)}
      </div>
    </div>
  );
}

// Utility to group items by seller
function groupItems(items) {
  const grouped = items.reduce((acc, item) => {
    const sellerName =
      item.product?.seller_info?.username ||
      item.product?.user?.username ||
      "Unknown Seller";
    if (!acc[sellerName]) acc[sellerName] = [];
    acc[sellerName].push(item);
    return acc;
  }, {});
  return Object.entries(grouped);
}


===== src/app/(pages)/new-dashboard/orders/components/BuyerInfoBlock.jsx =====
"use client";

import { AiOutlineHome, AiOutlineUser, AiOutlinePhone } from "react-icons/ai";

export default function BuyerInfoBlock({
  order,
  showFullInfo,
  setShowFullInfo,
}) {
  if (!order || typeof order !== "object") {
    return (
      <div className="text-sm text-red-500 dark:text-red-400 italic">
        No delivery information available.
      </div>
    );
  }

  const addressData = order.address?.address_data || {};
  const buyer = order.buyer || {};

  return (
    <div className="text-sm">
      <h3 className="font-semibold mb-1  dark:text-gray-300">Delivery info</h3>

      <div className="flex items-center gap-2">
        <AiOutlineHome />
        <span>
          {showFullInfo
            ? addressData.address_line_1 || "No address provided"
            : `${addressData.town || "Unknown"}, ${addressData.country || ""}`}
        </span>
      </div>

      <div className="flex items-center gap-2 mt-1">
        <AiOutlineUser />
        <span>
          {showFullInfo
            ? `${buyer.first_name || ""} ${buyer.last_name || ""}`
            : `${buyer.first_name || ""} ${buyer.last_name?.[0] || ""}.`}
        </span>
      </div>

      <div className="flex items-center gap-2 mt-1">
        <AiOutlinePhone />
        <span>
          {showFullInfo
            ? addressData.phone_number || "Hidden"
            : "+233 *** ****"}
        </span>
      </div>

      <button
        onClick={() => setShowFullInfo(!showFullInfo)}
        className="text-purple-600 dark:text-purple-400 mt-2 underline text-sm"
      >
        {showFullInfo ? "Hide full address" : "View full address"}
      </button>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/orders/components/DeliveryTracker.js =====
"use client";

import React from "react";

export default function DeliveryTracker({ stage = 0, steps = [] }) {
  if (!steps.length) {
    return (
      <div className="text-sm text-center text-gray-500 dark:text-gray-400 p-4">
        No delivery steps available.
      </div>
    );
  }

  return (
    <div className="flex justify-between items-start bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md py-4 px-2 overflow-x-auto transition-all duration-300">
      {steps.map((step, index) => {
        const isCompleted = index < stage;
        const isCurrent = index === stage;
        const isUpcoming = index > stage;

        return (
          <div
            key={index}
            className="relative flex-1 flex flex-col items-center min-w-[80px]"
          >
            {/* Connector line from previous step */}
            {index > 0 && (
              <div className="absolute top-3 left-[-50%] w-full h-1 bg-gray-200 dark:bg-gray-700 z-0">
                <div
                  className={`h-1 transition-colors duration-300 ${
                    isCompleted || isCurrent
                      ? "bg-blue-600"
                      : "bg-gray-300 dark:bg-gray-600"
                  }`}
                  style={{ width: "100%" }}
                />
              </div>
            )}

            {/* Step Circle */}
            <div
              className={`w-7 h-7 rounded-full z-10 mb-1 flex items-center justify-center font-bold text-sm transition-colors duration-300 ${
                isCompleted
                  ? "bg-blue-600 text-white"
                  : isCurrent
                    ? "bg-white border-2 border-blue-600 text-blue-600 dark:bg-gray-800"
                    : "bg-gray-300 dark:bg-gray-600 text-white"
              }`}
            >
              {isCompleted ? "‚úì" : index + 1}
            </div>

            {/* Step Label */}
            <div className="text-center text-sm font-semibold text-gray-800 dark:text-white">
              {step.label}
            </div>

            {/* Optional note/date */}
            <div className="text-center text-xs text-gray-500 dark:text-gray-400 mt-1">
              {step.date || step.note}
            </div>
          </div>
        );
      })}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/orders/components/MarkAsReceivedBottomSheet.jsx =====
"use client";

import { useEffect, useState } from "react";
import { createPortal } from "react-dom";
import { motion, AnimatePresence } from "framer-motion";
import { AiOutlineClose } from "react-icons/ai";

export default function MarkAsReceivedBottomSheet({
  isOpen,
  onClose,
  productId,
  productSlug,
  countryCode = "gh", // ‚úÖ fallback
  orderItemId,
  pointsEarned = 10,
  onConfirm,
}) {
  const [confirmed, setConfirmed] = useState(false);

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
      setConfirmed(false);
    }
  }, [isOpen]);

  const handleConfirm = () => {
    setConfirmed(true);
    onConfirm?.();
  };

const handleReviewClick = () => {
  const reviewUrl = `/${countryCode}/${productSlug}/write-review?order_item_id=${orderItemId}&product_id=${productId}`;
  window.location.href = reviewUrl;
};

  return createPortal(
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-end justify-center bg-black/50">
          <motion.div
            initial={{ y: "100%" }}
            animate={{ y: 0 }}
            exit={{ y: "100%" }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
            className="w-full max-w-xl bg-white dark:bg-gray-900 rounded-t-2xl p-6"
          >
            {/* Header */}
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800 dark:text-white">
                ‚úÖ Item Received
              </h3>
              <button
                onClick={onClose}
                className="text-gray-500 dark:text-gray-300 hover:text-black dark:hover:text-white"
              >
                <AiOutlineClose size={20} />
              </button>
            </div>

            {/* Message */}
            <div className="text-center text-gray-800 dark:text-gray-200 mb-4">
              <p>Thanks for confirming delivery!</p>
              <p className="mt-1 font-semibold text-green-600 dark:text-green-400">
                üéâ You‚Äôve earned {pointsEarned} points
              </p>
            </div>

            {/* Actions */}
            <div className="flex flex-col gap-3 mt-6">
              {!confirmed ? (
                <button
                  onClick={handleConfirm}
                  className="h-10 rounded-lg bg-green-700 hover:bg-green-800 text-white font-semibold"
                >
                  ‚úÖ Confirm Delivery
                </button>
              ) : (
                <div className="flex items-center justify-center gap-2 text-green-700 font-semibold">
                  ‚úîÔ∏è Delivery Confirmed
                </div>
              )}

              <button
                disabled={!confirmed}
                onClick={handleReviewClick}
                className={`h-10 rounded-lg font-semibold ${
                  confirmed
                    ? "bg-purple-600 hover:bg-purple-700 text-white"
                    : "bg-purple-200 text-gray-300 cursor-not-allowed"
                }`}
              >
                ‚úçÔ∏è Write a Review
              </button>

              <button
                onClick={onClose}
                className="h-10 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300"
              >
                Close
              </button>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>,
    document.body,
  );
}

===== src/app/(pages)/new-dashboard/orders/components/OrderCard.jsx =====
"use client";

import { useState, useRef, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";

const OrderCard = ({
  order,
  items = [],
  reviewedItemIds = [],
  reviewedReviews = [], // ‚úÖ accept reviewed reviews as prop
}) => {
  const router = useRouter();
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const dropdownRef = useRef();

  const status = order?.status_label || "Processing";
  const date =
    order?.created_at_formatted ||
    new Date(order?.created_at).toLocaleDateString();
  const itemTotalCents = items.reduce(
    (sum, item) => sum + (item?.price_cents || 0),
    0
  );
  const totalCents = order?.total_price_cents ?? itemTotalCents;
  const total = `GHS ${(totalCents / 100).toFixed(2)}`;
  const orderNumber =
    order?.order_number || order?.id?.toString().padStart(7, "0");

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (!dropdownRef.current?.contains(e.target)) {
        setDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  return (
    <div className="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl shadow-upfrica mb-6 p-4">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 gap-4 md:gap-0">
        <div className="flex-1 min-w-0">
          <div className="text-green-600 font-bold flex items-center mb-2">
            ‚úÖ {status}
          </div>
          <div className="flex flex-wrap gap-6 text-sm text-black dark:text-white">
            <div>
              <span className="block font-bold text-green-600">Order #</span>
              {orderNumber}
            </div>
            <div>
              <span className="block font-bold text-green-600">Order date</span>
              {date}
            </div>
            <div>
              <span className="block font-bold text-green-600">Total</span>
              {total}
            </div>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
          <button
            className="h-9 text-white upfrica-btn-primary-sm"
            onClick={() => router.push(`/new-dashboard/orders/${order?.id}`)}
          >
            View details
          </button>
          <div className="relative w-full sm:w-auto" ref={dropdownRef}>
            <button
              className="h-9 upfrica-btn-primary-outline-sm w-full sm:w-auto"
              onClick={() => setDropdownOpen(!dropdownOpen)}
            >
              More actions ‚ñº
            </button>
            {dropdownOpen && (
              <div className="absolute right-0 mt-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md shadow-lg z-10 w-48">
                {[
                  "Contact seller",
                  "Return this item",
                  "I didn‚Äôt receive it",
                  "Sell this item",
                  "Invoice",
                  "Add note",
                  "Hide Order",
                  "Help & report",
                ].map((label, i) => (
                  <button
                    key={i}
                    className="w-full text-left px-4 py-2 text-sm text-black dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700"
                  >
                    {label}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Order Items */}
      <div className="mt-5 space-y-4">
        {items.map((item, index) => {
          const product = item?.product || {};
          const productUrl =
            product?.frontend_url ||
            (product?.slug && product?.seller_country
              ? `/${product?.seller_country.toLowerCase()}/${product?.slug}`
              : "#");

          const imageSrc =
            product?.product_images?.[0]?.url ||
            product?.image_objects?.[0]?.image_url ||
            product?.thumbnail ||
            "/placeholder.png";

          const productTitle = product?.title || "Untitled Product";
          const sellerUsername =
            product?.seller_username ||
            product?.seller_info?.username ||
            product?.shop?.name ||
            "Seller";

          const price = `GHS ${(item?.price_cents || 0) / 100}`;

          const review = reviewedReviews.find(
            (r) => r.order_item_id === item.id
          );
          const reviewed = !!review;

          return (
            <div key={index} className="flex gap-4">
              <Link
                href={productUrl}
                className="w-20 h-20 relative flex-shrink-0 rounded-md overflow-hidden"
              >
                <Image
                  src={imageSrc}
                  alt={productTitle}
                  width={80}
                  height={80}
                  className="rounded-lg object-cover"
                />
              </Link>

              <div className="flex-1 min-w-0">
                <Link href={productUrl}>
                  <div className="font-semibold text-black dark:text-white hover:underline">
                    {productTitle}
                  </div>
                </Link>

                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Sold by:{" "}
                  <Link
                    href={`/shop/${sellerUsername}`}
                    className="underline text-black dark:text-white"
                  >
                    {sellerUsername} ‚Ä∫
                  </Link>
                </p>

                <div className="text-sm text-black dark:text-white">{price}</div>

                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Returns accepted until 12 May
                </div>

                <div className="mt-1">
                  <Link
                    href={productUrl}
                    className="inline-block mt-1 text-sm font-medium text-purple-600 hover:underline"
                  >
                    üõí Buy again
                  </Link>
                </div>

                {/* ‚úÖ Review CTA */}
                <div className="mt-1">
                  {reviewed ? (
                    review.status === 1 ? (
                      <div className="text-xs text-green-500 mt-1">
                        ‚úÖ Reviewed {review.rating ? `‚Ä¢ ${review.rating}‚òÖ` : ""}
                        {review.can_edit && (
                          <Link
                            href={`/edit-review/${review.id}`}
                            className="ml-2 text-blue-500 hover:underline"
                          >
                            ‚úèÔ∏è Edit
                          </Link>
                        )}
                      </div>
                    ) : (
                      <div className="text-xs text-yellow-600 mt-1">
                        üïì Review pending approval
                      </div>
                    )
                  ) : (
                    <Link
                      href={`/${order.order_country_code || "gh"}/${
                        product.slug
                      }/write-review?order_item_id=${item.id}&product_id=${
                        product.id
                      }&utm_source=orders_page&utm_medium=review_cta`}
                      className="text-xs text-purple-500 hover:underline mt-1 block"
                    >
                      ‚úçÔ∏è Write a review & earn points
                    </Link>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default OrderCard;

===== src/app/(pages)/new-dashboard/orders/components/OrderItemCard.jsx =====
"use client";

import React from "react";
import Image from "next/image";
import Link from "next/link";

export default function OrderItemCard({ item }) {
  const product = item.product;
  const price = (item.price_cents || 0) / 100;

  const imageSrc =
    product?.product_images?.[0]?.url ||
    product?.image_objects?.[0]?.image_url ||
    product?.thumbnail ||
    "/placeholder.png";

  return (
    <div className="flex items-start gap-4 py-3 border-b border-gray-200 dark:border-gray-700">
      <Image
        src={imageSrc}
        alt={product.title}
        width={70}
        height={70}
        className="rounded-md object-cover border border-gray-300 dark:border-gray-600"
      />

      <div className="flex-1">
        <p className="font-medium text-gray-800 dark:text-gray-100">
          {product.title}
        </p>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          Qty: {item.quantity} ‚Ä¢ GHS {price.toFixed(2)}
        </p>
        <p className="text-xs text-gray-500 dark:text-gray-400">
          Returns accepted until {item.return_deadline || "N/A"}
        </p>

        <div className="mt-2">
          <Link
            href={`/products/${product.slug}`}
            className="upfrica-btn-primary-outline-sm text-purple-600 dark:text-purple-400"
          >
            Buy again
          </Link>
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/orders/components/OrdersPage.jsx =====
"use client";

import React, { useEffect, useState, useRef, useMemo } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { useSelector } from "react-redux";
import { BASE_API_URL } from "@/app/constants";
import OrderCard from "./OrderCard";
import Pagination from "@/components/Pagination";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";

const PAGE_SIZE = 50;

function getDateDaysAgo(days) {
  const d = new Date();
  d.setDate(d.getDate() - days);
  return d.toISOString().split("T")[0];
}

const DATE_OPTIONS = [
  { label: "All Time", value: "" },
  { label: "Last 30 Days", value: getDateDaysAgo(30) },
  { label: "Past 3 Months", value: getDateDaysAgo(90) },
  { label: "This Year", value: `${new Date().getFullYear()}-01-01` },
];

export default function OrdersPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const token = useSelector((state) => state.auth.token);

  const [reviewedReviews, setReviewedReviews] = useState([]);
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [dateFilter, setDateFilter] = useState("");
  const [orderCount, setOrderCount] = useState(0);
  const [itemCount, setItemCount] = useState(0);
  const [reviewedItemIds, setReviewedItemIds] = useState([]);
  const [orders, setOrders] = useState([]);

  const debounceRef = useRef(null);
  const pageParam = parseInt(searchParams.get("page") || "1", 10);

  useEffect(() => {
    if (!token) router.push("/login");
  }, [token]);

  // Fetch reviewed items
  useEffect(() => {
    if (!token) return;
    const fetchReviews = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/reviews/my-reviews/`, {
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch reviews");
        const data = await res.json();
        setReviewedReviews(data.results || []);
        setReviewedItemIds(data.results.map((review) => review.order_item_id));
      } catch (err) {
        console.error("‚ùå Error fetching reviews:", err);
      }
    };
    fetchReviews();
  }, [token]);

  useEffect(() => {
    if (!token) return;
    const fetchOrderSummary = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/buyer/order-summary/`, {
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch order summary");
        const data = await res.json();
        setOrderCount(data.order_count || 0);
        setItemCount(data.item_count || 0);
      } catch (err) {
        console.error("‚ùå Error fetching order summary:", err);
      }
    };
    fetchOrderSummary();
  }, [token]);

  const fetchOrders = (query = "", page = 1, createdAfter = "") => {
    setLoading(true);
    let url = `${BASE_API_URL}/api/buyer/orders/?page=${page}&page_size=${PAGE_SIZE}`;
    if (query.trim()) url += `&query=${encodeURIComponent(query)}`;
    if (createdAfter) url += `&created_after=${createdAfter}`;

    fetch(url, {
      headers: {
        Authorization: `Token ${token}`,
        "Content-Type": "application/json",
      },
    })
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setOrders(data.results || []);
        setCount(data.count || 25);
      })
      .catch((err) => setError(err.message))
      .finally(() => setTimeout(() => setLoading(false), 200));
  };

  useEffect(() => {
    if (!token) return;
    fetchOrders(searchQuery, pageParam, dateFilter);
  }, [token, pageParam, dateFilter]);

  useEffect(() => {
    if (!token) return;
    if (!searchQuery.trim()) {
      fetchOrders("", 1, dateFilter);
      return;
    }
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(() => {
      fetchOrders(searchQuery, 1, dateFilter);
    }, 300);
    return () => clearTimeout(debounceRef.current);
  }, [searchQuery]);

  const groupedSortedOrders = useMemo(() => {
    const flattenedItems = orders
      .map((order) => ({
        ...order,
        __numeric_order_number: parseInt((order.order_number || order.id || "0").replace(/^0+/, ""), 10),
      }))
      .sort((a, b) => b.__numeric_order_number - a.__numeric_order_number)
      .flatMap((order) => order.order_items.map((item) => ({ ...item, order })));

    return Object.values(
      flattenedItems.reduce((acc, item) => {
        const orderId = item.order.id;
        if (!acc[orderId]) acc[orderId] = { order: item.order, items: [] };
        acc[orderId].items.push(item);
        return acc;
      }, {})
    ).sort((a, b) => {
      const numA = parseInt((a.order.order_number || a.order.id || "0").replace(/^0+/, ""), 10);
      const numB = parseInt((b.order.order_number || b.order.id || "0").replace(/^0+/, ""), 10);
      return numB - numA;
    });
  }, [orders]);

  const totalPages = Math.ceil(count / PAGE_SIZE);

  const goToPage = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      router.push(`/dashboard/all-orders?page=${newPage}`);
    }
  };

  const itemCountLive = groupedSortedOrders.reduce((sum, group) => sum + group.items.length, 0);

  return (
    <div className="w-full max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-12 py-6 flex-1 overflow-y-auto dark:bg-[#0a0f0f] text-black dark:text-white transition-colors duration-300">
      <div className="flex flex-col md:flex-row justify-between items-center gap-4 mb-6">
        <div className="relative w-full md:w-2/3">
          <AiOutlineSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-xl text-gray-600 dark:text-gray-300" />
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search orders by product name or order #..."
            className="w-full rounded-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-10 py-2 text-sm placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-purple-500"
          />
          {searchQuery && (
            <AiOutlineClose
              className="absolute right-3 top-1/2 -translate-y-1/2 text-xl text-gray-500 dark:text-gray-300 cursor-pointer"
              onClick={() => setSearchQuery("")}
            />
          )}
        </div>

        <div className="w-full md:w-auto">
          <select
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
            className="w-full md:w-auto px-4 py-2 border rounded-md bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-1 focus:ring-purple-500"
          >
            {DATE_OPTIONS.map((option) => (
              <option key={option.label} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>
        
      </div>

      <h1 className="text-2xl font-semibold mb-1 text-gray-800 dark:text-white">
        My Orders ({orderCount})
      </h1>
      <p className="text-sm text-gray-500 dark:text-gray-400">
        {itemCountLive} item{itemCountLive !== 1 ? "s" : ""} across {orderCount} order{orderCount !== 1 ? "s" : ""}
      </p>

      {loading ? (
        <p className="text-center text-gray-600 dark:text-gray-300">Loading your orders...</p>
      ) : error ? (
        <p className="text-red-600 dark:text-red-400 text-center">Error loading orders: {error}</p>
      ) : groupedSortedOrders.length === 0 ? (
        <p className="text-center text-gray-500 dark:text-gray-400">No orders found.</p>
      ) : (
        <div className="space-y-6">
          {groupedSortedOrders.map((group) => (
            <div key={group.order.id} className="hover:ring-1 hover:ring-purple-500 rounded-xl transition-all">
              <OrderCard
                order={group.order}
                items={group.items}
                reviewedItemIds={reviewedItemIds}
                reviewedReviews={reviewedReviews}
              />
            </div>
          ))}
        </div>
      )}

      {!searchQuery && totalPages > 1 && (
        <Pagination
          currentPage={pageParam}
          totalPages={totalPages}
          onPageChange={goToPage}
        />
      )}
    </div>
  );
}

===== src/app/(pages)/new-dashboard/orders/components/SellerOrderBlock.jsx =====
"use client";

import { useState } from "react";
import Link from "next/link";
import OrderItemCard from "./OrderItemCard";
import MarkAsReceivedBottomSheet from "./MarkAsReceivedBottomSheet";
import ConfirmModal from "@/components/common/ConfirmModal";

export default function SellerOrderBlock({
  sellerName,
  items,
  estimatedDelivery,
  trackingNumber,
  onConfirm, // ‚úÖ when "Mark as Received" is confirmed
  onUndo,    // ‚úÖ notify parent when "Undo" happens
}) {
  const subtotal = items.reduce(
    (sum, item) => sum + ((item.price_cents || 0) * item.quantity) / 100,
    0
  );

  const [received, setReceived] = useState(false);
  const [showSheet, setShowSheet] = useState(false);
  const [showUndoConfirm, setShowUndoConfirm] = useState(false);

  const handleUndo = () => setShowUndoConfirm(true);

  const confirmUndo = () => {
    setReceived(false);
    setShowUndoConfirm(false);
    onUndo?.();
  };

  return (
    <div className="bg-gray-100 dark:bg-gray-800 p-4 rounded-md mt-4 border border-gray-200 dark:border-gray-700 shadow-sm">
      {/* Seller Name */}
      <h4 className="text-purple-700 dark:text-purple-400 font-semibold mb-2">
        Sold by: {sellerName || "Unknown Seller"}
      </h4>

      {/* Status + Estimated */}
      <div className="flex items-center gap-2 mb-3 flex-wrap">
        <span className="px-2 py-1 text-xs rounded-full bg-green-600 text-white dark:bg-green-500">
          üü¢ Status: {received ? "Delivered" : "Dispatched"}
        </span>
        <span className="text-xs text-gray-600 dark:text-gray-300 flex items-center gap-1">
          ‚è± Estimated: {estimatedDelivery || "N/A"}
        </span>
      </div>

      {/* Products */}
      {items.map((item) => (
        <div key={item.id} className="mb-4">
          <OrderItemCard item={item} received={received} />

          {/* Review status or CTA */}
{item.reviewed ? (
  item.review?.status === 1 ? (
    <div className="text-xs text-green-500 mt-1">
      ‚úÖ Reviewed
      {item.review.rating && (
        <span> ‚Ä¢ {item.review.rating}‚òÖ</span>
      )}
      {item.review.can_edit && (
        <Link
          href={`/edit-review/${item.review.id}`}
          className="ml-2 text-blue-500 hover:underline"
        >
          ‚úèÔ∏è Edit
        </Link>
      )}
    </div>
  ) : (
    <div className="text-xs text-yellow-600 mt-1">
      üïì Review pending approval
    </div>
  )
) : received ? (
  <div className="mt-1">
    <Link
      href={`/write-review/${item.product?.slug || item.product_id}`}
      className="text-sm text-purple-500 hover:underline"
    >
      ‚úçÔ∏è Write a review & earn points
    </Link>
  </div>
) : null}
        </div>
      ))}

      {/* Tracking Info */}
      <div className="text-sm mt-3 text-gray-700 dark:text-gray-300">
        üöö Estimated Delivery: <strong>{estimatedDelivery || "N/A"}</strong>
        <br />
        üîç Tracking #: <strong>{trackingNumber || "N/A"}</strong>
      </div>

      {/* Subtotal */}
      <div className="text-right font-semibold mt-2 text-sm text-gray-800 dark:text-gray-200">
        Subtotal: GHS {subtotal.toFixed(2)}
      </div>

      {/* Mark as Received or Undo */}
      <div className="mt-4 text-right">
        {received ? (
          <div className="flex items-center justify-end gap-2 text-green-700 dark:text-green-400">
            ‚úÖ <span>Item Received</span>
            <button
              onClick={handleUndo}
              className="text-sm text-blue-600 underline hover:text-blue-800"
            >
              Undo
            </button>
          </div>
        ) : (
          <button
            onClick={() => setShowSheet(true)}
            className="h-8 upfrica-btn-primary-outline-sm text-green-700 dark:text-green-400"
          >
            Mark as Received
          </button>
        )}
      </div>

      {/* Bottom Sheet Confirmation */}
      <MarkAsReceivedBottomSheet
        isOpen={showSheet}
        onClose={() => setShowSheet(false)}
        productId={items[0]?.product?.id}
        productSlug={items[0]?.product?.slug}
        countryCode={items[0]?.country_code || "gh"}
        orderItemId={items[0]?.id}
        pointsEarned={10}
        onConfirm={() => {
          setReceived(true);
          onConfirm?.();
        }}
      />

      {/* Undo Confirmation Modal */}
      <ConfirmModal
        isOpen={showUndoConfirm}
        title="Undo Item Received?"
        message="Are you sure you want to undo delivery confirmation?"
        onConfirm={confirmUndo}
        onClose={() => setShowUndoConfirm(false)}
      />
    </div>
  );
}


===== src/app/(pages)/new-dashboard/orders/components/SideBar.jsx =====
// 'use client';

// import React from 'react';

// export default function SideBar() {
//   return (
//     <aside className="w-[240px] p-2 text-black hidden md:block rounded-md overflow-y-auto max-h-[calc(100vh-25rem)]">
//       <h2 className="text-lg font-bold mb-4">Filters</h2>

//       <div className="mb-6 p-5 bg-white border rounded-t-[5px] drop-shadow">
//         <label className="block text-sm font-semibold mb-1">Category</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Categories</option>
//           <option>Electronics</option>
//           <option>Fashion</option>
//           <option>Home</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Condition</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>All Conditions</option>
//           <option>New</option>
//           <option>Used</option>
//         </select>
//       </div>

//       <div className="mb-6">
//         <label className="block text-sm font-semibold mb-1">Sort By</label>
//         <select className="w-full border rounded px-2 py-1">
//           <option>Most Recent</option>
//           <option>Price: Low to High</option>
//           <option>Price: High to Low</option>
//         </select>
//       </div>

//       <div>
//         <label className="block text-sm font-semibold mb-1">Ratings</label>
//         <p className="text-yellow-600 font-bold">‚≠ê 4.5/5</p>
//       </div>
//     </aside>
//   );
// }


===== src/app/(pages)/new-dashboard/orders/page.jsx =====
"use client";

import OrdersPage from "./components/OrdersPage";

export default function Page() {
  return <OrdersPage />;
}


===== src/app/(pages)/new-dashboard/out-of-stock/page.jsx =====
"use client";

import { useRouter } from "next/navigation";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { FaEye, FaEdit, FaTrash } from "react-icons/fa";
import { FiSearch } from "react-icons/fi";
import Pagination from "@/components/Pagination";

const DEFAULT_PAGE_SIZE = 10;
const SKELETON_ROWS = 10;
const DEBOUNCE_DELAY = 500;

export default function StockoutProducts() {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // pagination & search
  const [perPage, setPerPage] = useState(DEFAULT_PAGE_SIZE);
  const [searchInput, setSearchInput] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  // data & loading
  const [products, setProducts] = useState([]);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);

  // alerts
  const [alert, setAlert] = useState({ type: "", message: "" });
  const [deletingId, setDeletingId] = useState(null);

  // Debounce the input before committing to searchQuery
  useEffect(() => {
    const handler = setTimeout(() => {
      setSearchQuery(searchInput.trim());
      setCurrentPage(1);
    }, DEBOUNCE_DELAY);
    return () => clearTimeout(handler);
  }, [searchInput]);

  // Fetch (or search) whenever token, page, perPage or searchQuery changes
  useEffect(() => {
    if (!token) return;

    setLoading(true);

    const myHeaders = new Headers();
    myHeaders.append("Authorization", `Token ${token}`);

    const requestOptions = {
      method: "GET",
      headers: myHeaders,
      redirect: "follow",
    };

    const base = "https://media.upfrica.com/api/seller/stock-out-products";
    const params = new URLSearchParams({
      page: String(currentPage),
      page_size: String(perPage),
    });

    let url;
    if (searchQuery) {
      params.append("q", searchQuery);
      url = `https://media.upfrica.com/api/seller/search/?${params.toString()}&type=stockout`;
    } else {
      url = `${base}/?${params.toString()}`;
    }

    fetch(url, requestOptions)
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch products");
        return res.json();
      })
      .then((data) => {
        setProducts(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / perPage));
      })
      .catch((err) => {
        console.error(err);
        setAlert({ type: "error", message: "Could not load products." });
      })
      .finally(() => setLoading(false));
  }, [token, currentPage, perPage, searchQuery]);

  // navigation & delete handlers
  const handleView = (slug) =>
    router.push(`/${user?.country?.toLocaleDateString() || "gh"}/${slug}`);

  const handleEdit = (slug) => router.push(`/products/edit/${slug}`);

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this product?"))
      return;

    setDeletingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/seller/draft-products/${id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error("Failed to delete product");
      setProducts((prev) => prev.filter((p) => p.id !== id));
      setAlert({ type: "success", message: "Product deleted successfully." });
    } catch (err) {
      console.error(err);
      setAlert({ type: "error", message: "Could not delete product." });
    } finally {
      setDeletingId(null);
    }
  };

  return (
    <div className="min-h-screen px-4 py-6 bg-gray-50">
      <div className="bg-white shadow-md rounded-lg p-6">
        {/* Header + Search */}
        <header className="flex items-center space-x-6 mb-6">
          <div>
            <h1 className="text-3xl font-semibold">Hi {user?.username}</h1>
            <p className="text-gray-600">Welcome to seller dashboard</p>
          </div>
          <div className="relative flex-1 max-w-full">
            <FiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search products‚Ä¶"
              className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
            />
          </div>
        </header>

        {/* Alert */}
        {alert.message && (
          <div
            className={`mb-4 px-4 py-3 border rounded ${
              alert.type === "success"
                ? "bg-green-100 border-green-400 text-green-700"
                : "bg-red-100 border-red-400 text-red-700"
            }`}
          >
            <span>{alert.message}</span>
            <button
              onClick={() => setAlert({ type: "", message: "" })}
              className="float-right font-bold"
            >
              √ó
            </button>
          </div>
        )}

        {/* Table */}
        <div className="bg-white p-4 rounded-lg shadow-sm">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">All Products</h2>
            {totalPages > 1 && (
              <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={setCurrentPage}
              />
            )}
          </div>

          <table className="w-full table-fixed text-left">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="w-[35%] pb-2">Product Info</th>
                <th className="w-[10%] pb-2">Date Added</th>
                <th className="w-[10%] pb-2">Price</th>
                <th className="w-[10%] pb-2">Status</th>
                <th className="w-[10%] pb-2">Viewed</th>
                <th className="w-[10%] pb-2">Sold</th>
                <th className="w-[15%] pb-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                Array.from({ length: SKELETON_ROWS }).map((_, idx) => (
                  <tr key={idx} className="even:bg-gray-50 animate-pulse">
                    <td className="py-3">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-gray-200 rounded" />
                        <div className="flex-1 max-w-[40%]">
                          <div className="h-4 bg-gray-200 mb-2 rounded w-3/4" />
                          <div className="h-3 bg-gray-200 rounded w-1/2" />
                        </div>
                      </div>
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-24 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-16 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                    </td>
                  </tr>
                ))
              ) : products.length > 0 ? (
                products.map((p) => (
                  <tr key={p.id} className="even:bg-gray-50">
                    <td className="py-3">
                      <div className="flex items-center space-x-3">
                        {p.product_images?.[0] && (
                          <img
                            src={p.product_images[0]}
                            alt={p.title}
                            className="w-20 h-20 object-cover rounded"
                          />
                        )}
                        <div className="flex-1">
                          <div>{p.title}</div>
                          <div className="text-gray-500 text-sm">
                            SKU: {p.u_pid}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3">
                      {new Date(p.created_at).toLocaleDateString()}
                    </td>
                    <td className="py-3">
                      {(p.price_cents / 100).toFixed(2)} {p.price_currency}
                    </td>
                    <td className="py-3">
                      <span
                        className={
                          p.status === 0 ? "text-red-600" : "text-red-600"
                        }
                      >
                        {p.product_quantity === 0 ? "Out of Stock" : "In Stock"}
                      </span>
                    </td>
                    <td className="py-3">{p.impressions_count ?? 0}</td>
                    <td className="py-3">{p.likes ?? 0}</td>
                    <td className="py-3 space-x-4">
                      {/* <button
                                                    onClick={() => handleView(p.slug)}
                                                    title="View"
                                                >
                                                    <FaEye className="h-4 w-4 text-[#2B3F6C]" />
                                                </button> */}
                      <button onClick={() => handleEdit(p.slug)} title="Edit">
                        <FaEdit className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                      <button
                        onClick={() => handleDelete(p.id)}
                        disabled={deletingId === p.id}
                        title="Delete"
                        className={`transition duration-300 ${
                          deletingId === p.id
                            ? "opacity-50 cursor-not-allowed"
                            : ""
                        }`}
                      >
                        <FaTrash className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={7} className="py-4 text-center text-gray-500">
                    No products found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/overview/page.jsx =====
// import RecentOrders from '@/components/overview/RecentOrders';
// import SalesCardGroup from '@/components/overview/SalesCardGroup';
// import SellerOrdersData from '@/components/overview/SellerOrdersData';
// import React from 'react';

// const page = () => {
//     return (
//         <div className='my-4 space-y-4'>
//             <SalesCardGroup />
//             <SellerOrdersData />
//             <RecentOrders />

//         </div>
//     );
// };

// export default page;

// app/page.jsx  (or pages/dashboard.js if you‚Äôre using the Pages Router)
"use client";

import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import SalesCardGroup from "@/components/overview/SalesCardGroup";
import SellerOrdersData from "@/components/overview/SellerOrdersData";
import RecentOrders from "@/components/overview/RecentOrders";

const DashboardPage = () => {
  const { token } = useSelector((state) => state.auth);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const res = await fetch(
          "https://media.upfrica.com/api/seller/dashboard-summary/",
          {
            method: "GET",
            headers: {
              Authorization: `Token ${token}`,
              "Content-Type": "application/json",
            },
          },
        );
        const json = await res.json();
        setStats(json.stats);
      } catch (err) {
        console.error("Failed to load dashboard:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchStats();
  }, []);

  return (
    <div className="my-4 space-y-4">
      <SalesCardGroup stats={stats?.sales} loading={loading} />
      <SellerOrdersData orders={stats?.orders} loading={loading} />
      <RecentOrders /> {/* leave as-is or wire up similarly */}
    </div>
  );
};

export default DashboardPage;


===== src/app/(pages)/new-dashboard/page-theme.jsx =====
"use client";

import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import SalesCardGroup from "@/components/overview/SalesCardGroup";
import SellerOrdersData from "@/components/overview/SellerOrdersData";
import RecentOrders from "@/components/overview/RecentOrders";
import { BASE_API_URL } from "@/app/constants";

const DashboardPage = () => {
  const { token } = useSelector((state) => state.auth);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const res = await fetch(
          `${BASE_API_URL}/api/seller/dashboard-summary/`,
          {
            method: "GET",
            headers: {
              Authorization: `Token ${token?.replace(/^"|"$/g, "")}`,
              "Content-Type": "application/json",
            },
          },
        );
        const json = await res.json();
        setStats(json.stats);
      } catch (err) {
        console.error("Failed to load dashboard:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchStats();
  }, []);

  return (
    <div className="my-4 space-y-4">
      <SalesCardGroup stats={stats?.sales} loading={loading} />
      <SellerOrdersData orders={stats?.orders} loading={loading} />
      <RecentOrders /> {/* leave as-is or wire up similarly */}
    </div>
  );
};

export default DashboardPage;


===== src/app/(pages)/new-dashboard/page.jsx =====
// app/(pages)/new-dashboard/Page.jsx
"use client";

import { useMemo } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useRoleView } from "@/contexts/RoleViewContext";

import SellerDashboardHome from "@/components/new-dashboard/SellerDashboardHome";
import BuyerDashboardHome from "@/components/new-dashboard/BuyerDashboardHome";
import AgentDashboardHome from "@/components/new-dashboard/AgentDashboardHome";
import AffiliateDashboardHome from "@/components/new-dashboard/AffiliateDashboardHome";
import CompleteSetupBanner from "@/components/new-dashboard/CompleteSetupBanner";

function normalizeRole(v) {
  if (!v) return "";
  const s = String(v).toLowerCase();
  if (s === "seller" || s === "seller_private" || s === "seller_business") return "seller";
  if (s === "buyer") return "buyer";
  if (s === "agent") return "agent";
  if (s === "affiliate") return "affiliate";
  return "";
}

export default function Page() {
  const { hydrated, user } = useAuth();
  const { roleView } = useRoleView() || {};

  const effectiveRole = useMemo(() => {
    // 1) context value
    const n = normalizeRole(roleView);
    if (n) return n;

    // 2) last chosen role
    if (typeof window !== "undefined") {
      const fromLS = normalizeRole(localStorage.getItem("roleView"));
      if (fromLS) return fromLS;
    }

    // 3) infer from user account_type
    const roles = Array.isArray(user?.account_type) ? user.account_type : [];
    if (roles.includes("seller_private") || roles.includes("seller_business")) return "seller";
    if (roles.includes("agent")) return "agent";
    if (roles.includes("affiliate")) return "affiliate";
    if (roles.includes("buyer")) return "buyer";

    // 4) default
    return "buyer";
  }, [roleView, user?.account_type]);

  if (!hydrated || !user) {
    return (
      <div className="w-full p-6 text-center text-gray-600 dark:text-gray-300">
        ‚è≥ Loading dashboard...
      </div>
    );
  }

  return (
    <div className="p-6 text-white">
      <CompleteSetupBanner />



      {effectiveRole === "seller" && <SellerDashboardHome />}
      {effectiveRole === "buyer" && <BuyerDashboardHome />}
      {effectiveRole === "agent" && <AgentDashboardHome />}
      {effectiveRole === "affiliate" && <AffiliateDashboardHome />}
    </div>
  );
}

===== src/app/(pages)/new-dashboard/payment-success/page.jsx =====

//src/app(pages)/new-dashboard/payment-success



"use client";
import Link from "next/link";
import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import { CheckCircle, Truck, ArrowRight } from "lucide-react";

export default function PaymentSuccess({ searchParams }) {
  const orderId = searchParams.order_id;
  const token = useSelector((state) => state.auth.token);
  const router = useRouter();

  const [order, setOrder] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showDrawer, setShowDrawer] = useState(false);

  useEffect(() => {
    if (!orderId) {
      setLoading(false);
      return;
    }

    async function loadOrder() {
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/buyer/orders/${orderId}/`,
          {
            headers: {
              Authorization: `Token ${token}`,
              "Content-Type": "application/json",
            },
            cache: "no-store",
          }
        );
        if (!res.ok) throw new Error(res.statusText);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        setError(err.message || "Unknown error");
      } finally {
        setLoading(false);
      }
    }

    loadOrder();
  }, [orderId, token]);

  useEffect(() => {
    if (!loading && order && !error) {
      setShowDrawer(true);
    }
  }, [loading, order, error]);

  if (loading) {
    return (
      <div className="container mx-auto py-16 text-center">
        <p className="text-lg text-gray-600">Loading your order‚Ä¶</p>
      </div>
    );
  }

  if (!orderId) {
    return (
      <div className="container mx-auto py-16 text-center">
        <h1 className="text-2xl font-semibold text-red-600">
          No order ID provided
        </h1>
        <p className="mt-4 text-gray-700">
          Please check your payment confirmation link.
        </p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto py-16 text-center">
        <h1 className="text-2xl font-semibold text-red-600">
          Something went wrong
        </h1>
        <p className="mt-4 text-gray-700">{error}</p>
      </div>
    );
  }

  return (
    <>
      {showDrawer && <OrderSuccessUI order={order} onClose={() => router.push("/")} />}
    </>
  );
}

function OrderSuccessUI({ order, onClose }) {
  return (
    <div className="min-h-screen bg-white px-4 py-6 sm:px-6 md:px-8 max-w-lg mx-auto">
      <div className="flex items-center gap-3 text-green-600 mb-4">
        <CheckCircle className="w-6 h-6" />
        <h1 className="text-xl font-semibold">Order confirmed, thank you!</h1>
      </div>

      <p className="text-gray-700 text-sm mb-4">
        A confirmation email has been sent to <span className="font-medium">{order.buyer_email || order.buyer}</span>.
      </p>

      <div className="bg-gray-100 rounded-lg p-4 mb-6">
        <div className="flex items-center gap-2 text-gray-800">
          <Truck className="w-5 h-5 text-blue-500" />
          <p className="text-sm font-medium">
            Estimated Delivery: <span className="text-black">{order.estimated_delivery || "‚Äî"}</span>
          </p>
        </div>
      </div>

      <div className="mb-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-2">Order Summary</h2>
        <div className="border rounded-lg p-4 text-sm text-gray-800">
          <div className="mb-2">
            <p className="font-medium">Order ID: #{order.id}</p>
            <p className="text-gray-500">Buyer ID: {order.buyer}</p>
          </div>
          <div className="flex justify-between mt-2 border-t pt-2">
            <span>Total Paid:</span>
            <span className="font-semibold text-black">
              ¬£{(order.total_fee_cents / 100).toFixed(2)} {order.total_fee_currency?.toUpperCase()}
            </span>
          </div>
        </div>
      </div>

      <div className="mb-6">
        <h2 className="text-sm font-medium text-gray-700">Shipping Address:</h2>
        <p className="text-gray-900 text-sm">{order.shipping_address || order.address}</p>
      </div>

      <div className="mb-6">
        <h2 className="text-sm font-medium text-gray-700">Items Purchased:</h2>
        <div className="space-y-4 mt-2">
          {order.order_items.map((item) => (
            <div key={item.id} className="flex items-center gap-4">
              <img
                src={item.product.product_images[0]}
                alt={item.product.title}
                className="w-16 h-16 object-cover rounded border"
              />
              <div>
                <p className="font-medium text-gray-900">{item.product.title}</p>
                <p className="text-gray-700">Qty: {item.quantity}</p>
                <p className="text-gray-700">
                  ¬£{(item.price_cents / 100).toFixed(2)} {item.product.price_currency?.toUpperCase()}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="flex flex-col gap-3">
        <button
          onClick={() => window.location.href = `/dashboard/all-orders/${order.id}`}
          className="bg-[#A435F0] text-white py-3 px-4 rounded-md text-center font-medium hover:bg-purple-700"
        >
          üì¶ Track Your Order
        </button>

        <button
          onClick={onClose}
          className="text-sm text-blue-600 hover:underline text-center flex items-center justify-center gap-1"
        >
          Continue shopping <ArrowRight className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
}

===== src/app/(pages)/new-dashboard/payments/page.jsx =====
import React from "react";
import { FaCcVisa, FaCcMastercard, FaCcAmex, FaCcPaypal } from "react-icons/fa";

export default function Page() {
  return (
    <div style={styles.container}>
      <div style={styles.content}>
        <p style={styles.message}>üöß No payment system implemented yet</p>
        <div style={styles.iconRow}>
          <FaCcVisa size={48} style={styles.icon} />
          <FaCcMastercard size={48} style={styles.icon} />
          <FaCcAmex size={48} style={styles.icon} />
          <FaCcPaypal size={48} style={styles.icon} />
        </div>
      </div>
    </div>
  );
}

const styles = {
  container: {
    height: "100vh", // full viewport height
    display: "flex",
    justifyContent: "center", // horizontal center
    alignItems: "center", // vertical center
    backgroundColor: "#f5f5f5",
  },
  content: {
    textAlign: "center",
  },
  message: {
    marginBottom: "1rem",
    fontSize: "1.25rem",
    color: "#333",
  },
  iconRow: {
    display: "flex",
    gap: "1.5rem",
    justifyContent: "center",
  },
  icon: {
    color: "#bbb", // light gray to show ‚Äúdisabled‚Äù state
  },
};


===== src/app/(pages)/new-dashboard/pending-orders/page.jsx =====
"use client";

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import { FiSearch } from "react-icons/fi";
import {
  MdRemoveRedEye,
  MdDelete,
  MdCheckCircle,
  MdOutlineRemoveRedEye,
} from "react-icons/md";
import { FaEdit } from "react-icons/fa";
import Pagination from "@/components/Pagination";

const PAGE_SIZE = 20;

export default function PendingOrders() {
  const { token, user } = useSelector((state) => state.auth);
  const router = useRouter();

  const [orderItems, setOrderItems] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);
  const [deletingId, setDeletingId] = useState(null);

  useEffect(() => {
    if (!token) return;

    const fetchOrderItems = async () => {
      setLoading(true);
      try {
        // build query params
        const params = new URLSearchParams();
        params.append("page", currentPage);
        // if there‚Äôs a search term, hit the search endpoint
        const isSearch = Boolean(searchTerm.trim());
        if (isSearch) {
          params.append("q", searchTerm.trim());
        }

        const url = isSearch
          ? `https://media.upfrica.com/api/seller/orders/search/?${params.toString()}`
          : `https://media.upfrica.com/api/seller/pending-order-items/?${params.toString()}`;

        const res = await fetch(url, {
          method: "GET",
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch");
        const data = await res.json();

        setOrderItems(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchOrderItems();
  }, [token, currentPage, searchTerm]);

  const handleView = (slug) => {
    router.push(`/${user?.country?.toLocaleDateString() || "gh"}/${slug}`);
  };
  const handleEdit = (id) => router.push(`/new-dashboard/all-orders/${id}`);
  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this item?")) return;
    setDeletingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/seller/order-items/${id}/`,
        { method: "DELETE", headers: { Authorization: `Token ${token}` } },
      );
      if (!res.ok) throw new Error("Delete failed");
      setOrderItems((prev) => prev.filter((item) => item.id !== id));
    } catch (err) {
      console.error(err);
    } finally {
      setDeletingId(null);
    }
  };

  return (
    <div className="w-full mx-auto p-6">
      <h1 className="text-2xl font-semibold mb-4">Pending Orders</h1>

      {/* Search + Pagination */}
      <div className="flex items-center justify-between mb-4">
        <div className="relative w-1/2">
          <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setCurrentPage(1);
            }}
            placeholder="Search orders with product or order ID ..."
            className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none font-medium"
          />
        </div>
        {totalPages > 1 && (
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        )}
      </div>

      {loading ? (
        <div className="space-y-6">
          {[...Array(3)].map((_, i) => (
            <div
              key={i}
              className="animate-pulse bg-gray-50 p-4 rounded-lg h-24"
            />
          ))}
        </div>
      ) : (
        <div className="space-y-6">
          {orderItems.map((item) => {
            const { product } = item;
            const statusText =
              item.dispatch_status === 0 ? "Pending" : "Dispatched";
            const statusColor = item.dispatch_status === 0 ? "yellow" : "green";

            return (
              <div key={item.id} className="space-y-0 ">
                <div
                  className="
                  flex items-center justify-between 
                  bg-gray-50 p-4 
                  rounded-t-lg 
                  shadow-[0_-4px_6px_rgba(0,0,0,0.1)]
                "
                >
                  <div className="flex space-x-6 text-sm text-gray-700 ">
                    <div>
                      <span className="font-medium">
                        Order #{item.order_id}
                      </span>
                    </div>
                    <div>
                      <span className="font-medium">Date</span>{" "}
                      {new Date(item.order_date).toLocaleDateString()}
                    </div>
                    <div>
                      <span className="font-medium">Total</span> GHS{" "}
                      {(item.price_cents / 100).toFixed(2)}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <MdCheckCircle
                      className={`w-6 h-6 text-${statusColor}-500`}
                    />
                    <span className={`text-${statusColor}-800 font-semibold`}>
                      {statusText}
                    </span>
                  </div>
                </div>

                {/* Product Detail ‚Äî bottom corners rounded, bottom‚Äêonly shadow */}
                <div
                  className="
    bg-white px-4 py-3 
    rounded-b-lg 
    shadow-[0_4px_6px_rgba(0,0,0,0.1)]
  "
                >
                  <div className="flex items-start">
                    {product.product_images[0] ? (
                      <img
                        src={product.product_images[0]}
                        alt={product.title}
                        className="w-20 h-20 object-cover rounded-lg mr-4"
                      />
                    ) : (
                      <div className="w-20 h-20 bg-gray-100 rounded-lg mr-4" />
                    )}
                    <div className="flex-1">
                      <h2 className="font-semibold text-lg">{product.title}</h2>
                      <div className="mt-2 space-y-1 text-sm text-gray-600">
                        <div>
                          <span className="font-medium text-gray-800">
                            Status:
                          </span>{" "}
                          {statusText}
                        </div>
                        <div>
                          <span className="font-medium text-gray-800">
                            Item ID:
                          </span>{" "}
                          {item.id}
                        </div>
                        <div>
                          <span className="font-medium text-gray-800">
                            Price:
                          </span>{" "}
                          GHS {(item.price_cents / 100).toFixed(2)}
                        </div>
                      </div>
                    </div>

                    <div className="py-3 flex space-x-2">
                      <button
                        onClick={() => handleEdit(item.id)}
                        className="p-2 bg-gray-100 hover:bg-blue-200 rounded-full text-gray-700 hover:text-blue-700"
                        aria-label="Edit"
                      >
                        <FaEdit size={20} />
                      </button>
                      <button
                        onClick={() => handleDelete(item.id)}
                        disabled={deletingId === item.id}
                        className={`
          p-2 rounded-full font-bold
          ${
            deletingId === item.id
              ? "bg-gray-100 text-gray-400 cursor-not-allowed"
              : "bg-gray-100 hover:bg-red-200 hover:text-red-700"
          }
        `}
                        aria-label="Delete"
                      >
                        <MdDelete size={20} />
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {totalPages > 1 && (
        <div className="flex justify-center mt-4">
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        </div>
      )}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/pending-reviews/page.jsx =====
// 'use client';

// import { useState, useEffect } from 'react';
// import { useSelector } from 'react-redux';
// import {
//   FiSearch,
//   FiStar,
//   FiMessageSquare,
//   FiHelpCircle,
//   FiCalendar,
// } from 'react-icons/fi';
// import Pagination from '@/components/Pagination';
// import LoaderButton from '@/components/LoaderButton';

// const PAGE_SIZE = 20;

// export default function PendingReviewsPage() {
//   const { token } = useSelector((state) => state.auth);
//   const [reviews, setReviews] = useState([]);
//   const [searchTerm, setSearchTerm] = useState('');
//   const [currentPage, setCurrentPage] = useState(1);
//   const [totalPages, setTotalPages] = useState(1);
//   const [loading, setLoading] = useState(false);
//   const [approvingId, setApprovingId] = useState(null);

//   // Fetch pending reviews
//   useEffect(() => {
//     if (!token) return;
//     const fetchReviews = async () => {
//       setLoading(true);
//       try {
//         const res = await fetch(
//           `https://media.upfrica.com/api/products-reviews/pending/?page=${currentPage}`,
//           {
//             method: 'GET',
//             headers: { Authorization: `Token ${token}` },
//           }
//         );
//         if (!res.ok) throw new Error('Failed to load reviews');
//         const data = await res.json();
//         setReviews(data.results || []);
//         setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
//       } catch (err) {
//         console.error(err);
//       } finally {
//         setLoading(false);
//       }
//     };
//     fetchReviews();
//   }, [token, currentPage]);

//   // Approve a review
//   const handleApprove = async (id) => {
//     if (!window.confirm('Approve this review?')) return;
//     setApprovingId(id);
//     try {
//       const res = await fetch(
//         `https://media.upfrica.com/api/reviews/${id}/approve/`,
//         {
//           method: 'POST',
//           headers: {
//             Authorization: `Token ${token}`,
//             'Content-Type': 'application/json',
//           },
//           body: JSON.stringify(id),
//         }
//       );
//       if (!res.ok) throw new Error('Approval failed');
//       setReviews((prev) => prev.filter((r) => r.id !== id));
//     } catch (err) {
//       console.error(err);
//       alert('Could not approve review.');
//     } finally {
//       setApprovingId(null);
//     }
//   };

//   // Filter by review or product title
//   const filtered = reviews.filter((r) => {
//     const rt = r.title?.toLowerCase() || '';
//     const pt = r.product.title.toLowerCase();
//     return (
//       rt.includes(searchTerm.toLowerCase()) ||
//       pt.includes(searchTerm.toLowerCase())
//     );
//   });

//   return (
//     <div className="w-full max-w-5xl mx-auto p-6">
//       <h1 className="text-2xl font-semibold mb-6">Pending Reviews</h1>

//       {/* Full-width Search */}
//       <div className="mb-6">
//         <div className="relative">
//           <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
//           <input
//             type="text"
//             value={searchTerm}
//             onChange={(e) => {
//               setSearchTerm(e.target.value);
//               setCurrentPage(1);
//             }}
//             placeholder="Search reviews or products..."
//             className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none font-medium"
//           />
//         </div>
//       </div>

//       {loading ? (
//         <div className="space-y-6">
//           {[...Array(3)].map((_, i) => (
//             <div
//               key={i}
//               className="animate-pulse bg-gray-100 h-32 rounded-lg"
//             />
//           ))}
//         </div>
//       ) : (
//         <div className="space-y-6">
//           {filtered.length === 0 && (
//             <p className="text-center text-gray-500">No reviews found.</p>
//           )}

//           {filtered.map((r) => (
//             <div
//               key={r.id}
//               className="bg-white shadow rounded-lg p-4 flex items-center space-x-4"
//             >
//               {/* Image */}
//               <div className="w-24 h-24 flex-shrink-0 rounded overflow-hidden bg-gray-200">
//                 {r.product.product_images[0] && (
//                   <img
//                     src={r.product.product_images[0]}
//                     alt={r.product.title}
//                     className="w-full h-full object-cover"
//                   />
//                 )}
//               </div>

//               {/* Info Grid */}
//               <div className="flex-1 grid grid-cols-2 gap-4 text-sm text-gray-700">
//                 {/* Product Title */}
//                 <div>
//                   <span className="font-medium text-gray-800">Product:</span>{' '}
//                   {r.product.title || 'N/A'}
//                 </div>

//                 {/* Review Title */}
//                 <div>
//                   <span className="font-medium text-gray-800">Review:</span>{' '}
//                   {r.title || 'N/A'}
//                 </div>

//                 {/* Rating */}
//                 <div className="flex items-center">
//                   <FiStar className="mr-1 text-yellow-500" />
//                   <span>
//                     {r.rating != null ? `${r.rating}/5` : 'N/A'}
//                   </span>
//                 </div>

//                 {/* Date */}
//                 <div className="flex items-center">
//                   <FiCalendar className="mr-1 text-gray-500" />
//                   <span>
//                     {r.created_at
//                       ? new Date(r.created_at).toLocaleDateString()
//                       : 'N/A'}
//                   </span>
//                 </div>

//                 {/* Comment (span both columns) */}
//                 <div className="col-span-2 flex items-start">
//                   <FiMessageSquare className="mt-1 mr-1 text-gray-500" />
//                   <p className="flex-1">
//                     {r.comment ? r.comment : 'N/A'}
//                   </p>
//                 </div>

//                 {/* Questions (span both columns) */}
//                 <div className="col-span-2">
//                   <div className="flex items-center mb-1">
//                     <FiHelpCircle className="mr-1 text-gray-500" />
//                     <span className="font-medium text-gray-800">
//                       Questions:
//                     </span>
//                   </div>
//                   {r.questions && Object.keys(r.questions).length > 0 ? (
//                     <ul className="list-disc list-inside text-gray-700">
//                       {Object.entries(r.questions).map(([k, v]) => (
//                         <li key={k}>
//                           <span className="capitalize">{k.replace(/_/g, ' ')}:</span>{' '}
//                           {v || 'N/A'}
//                         </li>
//                       ))}
//                     </ul>
//                   ) : (
//                     <p className="text-gray-700">N/A</p>
//                   )}
//                 </div>
//               </div>

//               {/* Approve Button */}
//               <LoaderButton
//                 loading={approvingId === r.id}
//                 onClick={() => handleApprove(r.id)}
//                 className={`px-4 py-2 rounded-full font-semibold whitespace-nowrap ${approvingId === r.id
//                     ? 'bg-green-300 text-white'
//                     : 'bg-green-500 hover:bg-green-600 text-white'
//                   }`}
//               >
//                 Approve
//               </LoaderButton>
//             </div>
//           ))}
//         </div>
//       )}

//       {/* Pagination */}
//       {totalPages > 1 && (
//         <div className="flex justify-center mt-8">
//           <Pagination
//             currentPage={currentPage}
//             totalPages={totalPages}
//             onPageChange={setCurrentPage}
//           />
//         </div>
//       )}
//     </div>
//   );
// }
"use client";

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import {
  FiSearch,
  FiStar,
  FiMessageSquare,
  FiHelpCircle,
  FiCalendar,
  FiTrash,
  FiCheck,
} from "react-icons/fi";
import Pagination from "@/components/Pagination";
import LoaderButton from "@/components/LoaderButton";

const PAGE_SIZE = 20;

export default function PendingReviewsPage() {
  const { token } = useSelector((state) => state.auth);
  const [reviews, setReviews] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);
  const [approvingId, setApprovingId] = useState(null);
  const [deletingId, setDeletingId] = useState(null);

  // Fetch pending reviews
  useEffect(() => {
    if (!token) return;
    const fetchReviews = async () => {
      setLoading(true);
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/products-reviews/pending/?page=${currentPage}`,
          {
            method: "GET",
            headers: { Authorization: `Token ${token}` },
          },
        );
        if (!res.ok) throw new Error("Failed to load reviews");
        const data = await res.json();
        setReviews(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchReviews();
  }, [token, currentPage]);

  // Approve a review
  const handleApprove = async (id) => {
    if (!window.confirm("Approve this review?")) return;
    setApprovingId(id);
    try {
      await fetch(`https://media.upfrica.com/api/reviews/${id}/approve/`, {
        method: "POST",
        headers: {
          Authorization: `Token ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(id),
      });
      setReviews((prev) => prev.filter((r) => r.id !== id));
    } catch (err) {
      console.error(err);
      alert("Could not approve review.");
    } finally {
      setApprovingId(null);
    }
  };

  // Delete a review
  const handleDelete = async (r) => {
    if (!window.confirm("Delete this review?")) return;
    setDeletingId(r.id);
    try {
      await fetch(
        `https://media.upfrica.com/api/products/${r.product.slug}/reviews/${r.id}/`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Token ${token}`,
          },
        },
      );
      setReviews((prev) => prev.filter((rev) => rev.id !== r.id));
    } catch (err) {
      console.error(err);
      alert("Could not delete review.");
    } finally {
      setDeletingId(null);
    }
  };

  // Filter by review or product title
  const filtered = reviews.filter((r) => {
    const rt = r.title?.toLowerCase() || "";
    const pt = r.product.title.toLowerCase();
    return (
      rt.includes(searchTerm.toLowerCase()) ||
      pt.includes(searchTerm.toLowerCase())
    );
  });

  return (
    <div className="w-full max-w-5xl mx-auto p-6">
      <h1 className="text-2xl font-semibold mb-6">Pending Reviews</h1>

      {/* Full-width Search */}
      <div className="mb-6">
        <div className="relative">
          <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setCurrentPage(1);
            }}
            placeholder="Search reviews or products..."
            className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none font-medium"
          />
        </div>
      </div>

      {loading ? (
        <div className="space-y-4">
          {[...Array(3)].map((_, i) => (
            <div
              key={i}
              className="animate-pulse bg-gray-100 h-32 rounded-lg"
            />
          ))}
        </div>
      ) : (
        <div className="space-y-6">
          {filtered.map((r) => (
            <div
              key={r.id}
              className="bg-white shadow rounded-lg p-4 space-y-4"
            >
              {/* First row: image + review title */}
              <div className="flex items-center space-x-4">
                <div className="w-20 h-20 flex-shrink-0 rounded overflow-hidden bg-gray-200">
                  {r.product.product_images[0] && (
                    <img
                      src={r.product.product_images[0]}
                      alt={r.product.title}
                      className="w-full h-full object-cover"
                    />
                  )}
                </div>
                <h2 className="text-base  text-gray-800 truncate">
                  Title: {r.product.title || "N/A"}
                </h2>
              </div>

              {/* Second row: all other info */}
              <div className="grid grid-cols-2 gap-4 text-sm text-gray-700">
                <div>
                  <span className="font-semibold text-gray-800">Review:</span>{" "}
                  {r.title || "N/A"}
                </div>
                <div className="flex items-center">
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/product-add/page.jsx =====
import React from "react";

const page = () => {
  return (
    <div>
      <h1>product-add</h1>
    </div>
  );
};

export default page;


===== src/app/(pages)/new-dashboard/product-details/page.jsx =====
import ProductDetail from "@/components/e-commerce/product-detail/ProductDetail";
import React from "react";

const page = () => {
  return (
    <div>
      <ProductDetail />
    </div>
  );
};

export default page;


===== src/app/(pages)/new-dashboard/products/page.jsx =====
//src/app/(pages)/new-dasboard/products/page.jsx

"use client";

import RoleGuard from "@/components/auth/RoleGuard";
import ProductSummaryPills from "@/components/new-dashboard/products/ProductSummaryPills";
import ProductListResponsive from "@/components/new-dashboard/products/ProductListResponsive";

export default function ProductsPage() {
  return (
    <RoleGuard allowed={["seller"]} requirePlan>
      <div className="space-y-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
        <ProductSummaryPills />
        <ProductListResponsive />
      </div>
    </RoleGuard>
  );
}

===== src/app/(pages)/new-dashboard/products/page1.jsx =====
//src/app/(pages)/new-dasboard/products/page.jsx

"use client";
import React from "react";
import ProductSummaryPills from "@/components/new-dashboard/products/ProductSummaryPills"; // overview cards
import ProductListTable from "@/components/new-dashboard/products/ProductListTable"; // product table

export default function ProductDashboard() {
  return (
    <div className="space-y-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
      <ProductSummaryPills />
      <ProductListTable />
    </div>
  );
}


===== src/app/(pages)/new-dashboard/profile-settings/address-book/page.jsx =====
"use client";

import React, { useEffect, useState } from "react";
import { FiSearch } from "react-icons/fi";
import { FaEdit, FaTrash } from "react-icons/fa";
import { useSelector } from "react-redux";
import Pagination from "@/components/Pagination";

const DEFAULT_PAGE_SIZE = 20;
const SKELETON_ROWS = 8;
const DEBOUNCE_DELAY = 500;

export default function AddressBookPage() {
  const { user, token } = useSelector((state) => state.auth);

  // --- data + loading ---
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // --- search + pagination ---
  const [searchInput, setSearchInput] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [perPage] = useState(DEFAULT_PAGE_SIZE);

  // --- edit modal state ---
  const [editingId, setEditingId] = useState(null);
  const [editFormData, setEditFormData] = useState({});
  const [editLoading, setEditLoading] = useState(false);
  const [editError, setEditError] = useState("");

  // debounce search input
  useEffect(() => {
    const h = setTimeout(() => {
      setSearchQuery(searchInput.trim());
      setCurrentPage(1);
    }, DEBOUNCE_DELAY);
    return () => clearTimeout(h);
  }, [searchInput]);

  // fetch addresses
  useEffect(() => {
    if (!token) return;
    setLoading(true);
    fetch("https://media.upfrica.com/api/addresses/", {
      method: "GET",
      headers: { Authorization: `Token ${token}` },
    })
      .then((res) => {
        if (!res.ok) throw new Error(`Error ${res.status}`);
        return res.json();
      })
      .then((data) => setAddresses(data))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [token]);

  // client‚Äêside filter + pagination calc
  const filtered = addresses.filter((addr) => {
    const q = searchQuery.toLowerCase();
    return (
      addr.full_name?.toLowerCase().includes(q) ||
      addr.address_data?.street?.toLowerCase().includes(q) ||
      addr.address_data?.city?.toLowerCase().includes(q)
    );
  });
  const totalPages = Math.max(1, Math.ceil(filtered.length / perPage));
  const paginated = filtered.slice(
    (currentPage - 1) * perPage,
    currentPage * perPage,
  );

  // open edit modal
  const startEdit = (addr) => {
    const ad = addr.address_data ?? {};
    setEditFormData({
      full_name: addr.full_name ?? "",
      default: addr.default ?? false,
      street: ad.street ?? ad.address_line_1 ?? "",
      city: ad.city ?? ad.town ?? "",
      state: ad.state ?? ad.local_area ?? "",
      country: ad.country ?? "",
      zip_code: ad.zip_code ?? ad.postcode ?? "",
      phone_number: ad.phone_number ?? "",
    });
    setEditError("");
    setEditingId(addr.id);
  };

  // save edits
  const handleEditSave = async (e) => {
    e.preventDefault();
    setEditLoading(true);
    setEditError("");
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/addresses/${editingId}/`,
        {
          method: "PATCH",
          headers: {
            Authorization: `Token ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            full_name: editFormData.full_name,
            default: editFormData.default,
            address_data: {
              street: editFormData.street,
              city: editFormData.city,
              state: editFormData.state,
              country: editFormData.country,
              zip_code: editFormData.zip_code,
              phone_number: editFormData.phone_number,
            },
          }),
        },
      );
      if (!res.ok) {
        const txt = await res.text();
        throw new Error(txt || `Status ${res.status}`);
      }
      const updated = await res.json();
      setAddresses((prev) =>
        prev.map((a) => (a.id === editingId ? updated : a)),
      );
      setEditingId(null);
      window.alert("Address updated successfully.");
    } catch (err) {
      console.error(err);
      setEditError("Failed to update address.");
    } finally {
      setEditLoading(false);
    }
  };

  // delete
  const handleDelete = async (id) => {
    if (!confirm("Are you sure you want to delete this address?")) return;
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/addresses/${id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error(`Deleted failed (${res.status})`);
      setAddresses((prev) => prev.filter((a) => a.id !== id));
      window.alert("Address deleted.");
    } catch {
      window.alert("Could not delete address.");
    }
  };

  return (
    <div className="min-h-screen px-4 py-6 bg-gray-50">
      <div className="bg-white shadow-md rounded-lg p-6">
        {/* Header + Search */}
        <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-6 space-y-4 md:space-y-0">
          <div>
            <h1 className="text-2xl font-semibold">Address Book</h1>
            {user?.username && (
              <p className="text-gray-600">Hello, {user.username}</p>
            )}
          </div>
          <div className="relative w-full md:w-1/3">
            <FiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search addresses‚Ä¶"
              className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
            />
          </div>
        </header>

        {error && (
          <div className="mb-4 px-4 py-3 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}

        {/* Table */}
        <div className="overflow-x-auto">
          <table className="w-full table-fixed text-left">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="w-[15%] pb-2">Name</th>
                <th className="w-[25%] pb-2">Street</th>
                <th className="w-[12%] pb-2">City</th>
                <th className="w-[12%] pb-2">State</th>
                <th className="w-[10%] pb-2">Country</th>
                <th className="w-[8%] pb-2">ZIP</th>
                <th className="w-[8%] pb-2">Phone</th>
                <th className="w-[5%] pb-2">Default</th>
                <th className="w-[5%] pb-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                Array.from({ length: SKELETON_ROWS }).map((_, idx) => (
                  <tr key={idx} className="even:bg-gray-50 animate-pulse">
                    {Array.from({ length: 9 }).map((__, i) => (
                      <td key={i} className="py-3">
                        <div className="h-4 bg-gray-200 rounded w-3/4 mx-auto" />
                      </td>
                    ))}
                  </tr>
                ))
              ) : paginated.length > 0 ? (
                paginated.map((addr) => (
                  <tr
                    key={addr.id}
                    className="even:bg-gray-50 hover:bg-gray-100"
                  >
                    <td className="py-3">{addr.full_name ?? "‚Äî"}</td>
                    <td className="py-3">
                      {addr.address_data?.street ??
                        addr.address_data?.address_line_1 ??
                        "‚Äî"}
                    </td>
                    <td className="py-3">
                      {addr.address_data?.city ??
                        addr.address_data?.town ??
                        "‚Äî"}
                    </td>
                    <td className="py-3">
                      {addr.address_data?.state ??
                        addr.address_data?.local_area ??
                        "‚Äî"}
                    </td>
                    <td className="py-3">
                      {addr.address_data?.country ?? "‚Äî"}
                    </td>
                    <td className="py-3">
                      {addr.address_data?.zip_code ??
                        addr.address_data?.postcode ??
                        "‚Äî"}
                    </td>
                    <td className="py-3">
                      {addr.address_data?.phone_number ?? "‚Äî"}
                    </td>
                    <td className="py-3">
                      {addr.default ? (
                        <span className="text-green-600">Yes</span>
                      ) : (
                        <span className="text-red-600">No</span>
                      )}
                    </td>
                    <td className="py-3 space-x-4 pl-2">
                      <button onClick={() => startEdit(addr)} title="Edit">
                        <FaEdit className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                      <button
                        onClick={() => handleDelete(addr.id)}
                        title="Delete"
                      >
                        <FaTrash className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={9} className="py-4 text-center text-gray-500">
                    No addresses found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* bottom pagination */}
        {totalPages > 1 && (
          <div className="mt-4 flex justify-center">
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
            />
          </div>
        )}
      </div>

      {/* Edit Modal */}
      {editingId && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <form
            onSubmit={handleEditSave}
            className="bg-white rounded-lg shadow-lg p-6 w-full max-w-lg space-y-4"
          >
            <h2 className="text-xl font-semibold">Edit Address</h2>
            {editError && <p className="text-red-600 text-sm">{editError}</p>}

            <div className="grid grid-cols-1 gap-4">
              <label className="block">
                <span className="text-sm font-medium">Full Name</span>
                <input
                  type="text"
                  value={editFormData.full_name}
                  onChange={(e) =>
                    setEditFormData((fd) => ({
                      ...fd,
                      full_name: e.target.value,
                    }))
                  }
                  className="mt-1 block w-full border-gray-300 rounded px-3 py-2"
                  required
                />
              </label>
              <label className="block">
                <span className="text-sm font-medium">Street</span>
                <input
                  type="text"
                  value={editFormData.street}
                  onChange={(e) =>
                    setEditFormData((fd) => ({
                      ...fd,
                      street: e.target.value,
                    }))
                  }
                  className="mt-1 block w-full border-gray-300 rounded px-3 py-2"
                  required
                />
              </label>
              <div className="grid grid-cols-2 gap-4">
                <label className="block">
                  <span className="text-sm font-medium">City</span>
                  <input
                    type="text"
                    value={editFormData.city}
                    onChange={(e) =>
                      setEditFormData((fd) => ({
                        ...fd,
                        city: e.target.value,
                      }))
                    }
                    className="mt-1 block w-full border-gray-300 rounded px-3 py-2"
                  />
                </label>
                <label className="block">
                  <span className="text-sm font-medium">State</span>
                  <input
                    type="text"
                    value={editFormData.state}
                    onChange={(e) =>
                      setEditFormData((fd) => ({
                        ...fd,
                        state: e.target.value,
                      }))
                    }
                    className="mt-1 block w-full border-gray-300 rounded px-3 py-2"
                  />
                </label>
              </div>
              <div className="grid grid-cols-3 gap-4">
                <label className="block">
                  <span className="text-sm font-medium">Country</span>
                  <input
                    type="text"
                    value={editFormData.country}
                    onChange={(e) =>
                      setEditFormData((fd) => ({
                        ...fd,
                        country: e.target.value,
                      }))
                    }
                    className="mt-1 block w-full border-gray-300 rounded px-3 py-2"
                  />
                </label>
                <label className="block">
                  <span className="text-sm font-medium">ZIP</span>
                  <input
                    type="text"
                    value={editFormData.zip_code}
                    onChange={(e) =>
                      setEditFormData((fd) => ({
                        ...fd,
                        zip_code: e.target.value,
                      }))
                    }
                    className="mt-1 block w-full border-gray-300 rounded px-3 py-2"
                  />
                </label>
                <label className="block">
                  <span className="text-sm font-medium">Phone</span>
                  <input
                    type="text"
                    value={editFormData.phone_number}
                    onChange={(e) =>
                      setEditFormData((fd) => ({
                        ...fd,
                        phone_number: e.target.value,
                      }))
                    }
                    className="mt-1 block w-full border-gray-300 rounded px-3 py-2"
                  />
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/profile-settings/page.jsx =====
"use client";

import React, { useState } from "react";
import { useSelector } from "react-redux";
import { FaEdit } from "react-icons/fa";

export default function ProfilePage() {
  const { user, token } = useSelector((state) => state.auth);

  const [profile, setProfile] = useState(user ?? {});
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    first_name: user?.first_name ?? "",
    last_name: user?.last_name ?? "",
    username: user?.username ?? "",
    email: user?.email ?? "",
    phone_number: user?.phone_number ?? "",
    local_area: user?.local_area ?? "",
    town: user?.town ?? "",
    city: user?.city ?? "",
    region: user?.region ?? "",
    country: user?.country ?? "",
    time_zone: user?.time_zone ?? "",
    preferred_language: user?.preferred_language ?? "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const openEditor = () => {
    setError("");
    setFormData({
      first_name: profile.first_name ?? "",
      last_name: profile.last_name ?? "",
      username: profile.username ?? "",
      email: profile.email ?? "",
      phone_number: profile.phone_number ?? "",
      local_area: profile.local_area ?? "",
      town: profile.town ?? "",
      city: profile.city ?? "",
      region: profile.region ?? "",
      country: profile.country ?? "",
      time_zone: profile.time_zone ?? "",
      preferred_language: profile.preferred_language ?? "",
    });
    setIsEditing(true);
  };

  const handleSave = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      // build headers exactly as your snippet
      const myHeaders = new Headers();
      myHeaders.append("Authorization", `Token ${token}`);
      myHeaders.append("Content-Type", "application/json");

      // convert only the fields that the API accepts
      const raw = JSON.stringify({
        first_name: formData.first_name,
        last_name: formData.last_name,
        username: formData.username,
        email: formData.email,
        phone_number: formData.phone_number,
        local_area: formData.local_area,
        town: formData.town,
        city: formData.city,
        region: formData.region,
        country: formData.country,
        time_zone: formData.time_zone,
        preferred_language: formData.preferred_language,
      });

      const requestOptions = {
        method: "PUT",
        headers: myHeaders,
        body: raw,
        redirect: "follow",
      };

      const response = await fetch(
        "https://media.upfrica.com/api/update-profile/",
        requestOptions,
      );
      if (!response.ok) {
        const text = await response.text();
        throw new Error(text || `Status ${response.status}`);
      }
      const updated = await response.json();
      setProfile(updated);
      setIsEditing(false);
      window.alert("Profile updated successfully.");
    } catch (err) {
      console.error(err);
      setError("Failed to update profile.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-2xl mx-auto bg-white shadow rounded-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-semibold">My Profile</h1>
          <button
            onClick={openEditor}
            className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
          >
            <FaEdit /> Edit Profile
          </button>
        </div>

        <dl className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4 text-gray-700">
          <div>
            <dt className="font-medium">First Name</dt>
            <dd>{profile.first_name ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Last Name</dt>
            <dd>{profile.last_name ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Username</dt>
            <dd>{profile.username ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Email</dt>
            <dd>{profile.email ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Phone</dt>
            <dd>{profile.phone_number ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Local Area</dt>
            <dd>{profile.local_area ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Town</dt>
            <dd>{profile.town ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">City</dt>
            <dd>{profile.city ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Region</dt>
            <dd>{profile.region ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Country</dt>
            <dd>{profile.country ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Time Zone</dt>
            <dd>{profile.time_zone ?? "‚Äî"}</dd>
          </div>
          <div>
            <dt className="font-medium">Preferred Language</dt>
            <dd>{profile.preferred_language ?? "‚Äî"}</dd>
          </div>
        </dl>
      </div>

      {/* Edit Modal */}
      {isEditing && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <form
            onSubmit={handleSave}
            className="bg-white rounded-lg shadow-lg p-6 w-full max-w-lg space-y-4"
          >
            <h2 className="text-xl font-semibold">Edit Profile</h2>
            {error && <p className="text-red-600 text-sm">{error}</p>}

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {[
                { name: "first_name", label: "First Name" },
                { name: "last_name", label: "Last Name" },
                { name: "username", label: "Username" },
                { name: "email", label: "Email", type: "email" },
                { name: "phone_number", label: "Phone" },
                { name: "local_area", label: "Local Area" },
                { name: "town", label: "Town" },
                { name: "city", label: "City" },
                { name: "region", label: "Region" },
                { name: "country", label: "Country" },
                { name: "time_zone", label: "Time Zone" },
                { name: "preferred_language", label: "Preferred Language" },
              ].map(({ name, label, type }) => (
                <div key={name}>
                  <label className="block text-sm font-medium text-gray-700">
                    {label}
                  </label>
                  <input
                    type={type ?? "text"}
                    value={formData[name] ?? ""}
                    onChange={(e) =>
                      setFormData((fd) => ({
                        ...fd,
                        [name]: e.target.value,
                      }))
                    }
                    className="mt-1 block w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300"
                  />
                </div>
              ))}
            </div>

            <div className="flex justify-end gap-3 mt-4">
              <button
                type="button"
                onClick={() => setIsEditing(false)}
                className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300"
                disabled={loading}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
                disabled={loading}
              >
                {loading ? "Saving‚Ä¶" : "Save Changes"}
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/quick-actions/page.jsx =====
"use client";

import React, { useState } from "react";
import Link from "next/link";
import Image from "next/image";

// Placeholder counts & permissions‚Äîreplace with real data/fetches
const pendingCount = 12;
const newMessagesCount = 3;
const userPermissions = ["basic", "premium"]; // e.g. ['basic'] or ['premium']

const GROUPS = [
  {
    title: "Dashboard",
    actions: [
      {
        id: "add-product",
        label: "Add New Product",
        icon: "‚ûï",
        href: "/products/new",
      },
      {
        id: "message-admin",
        label: "Message Admin",
        icon: "üí¨",
        href: "/messages/admin",
        count: newMessagesCount,
      },
    ],
  },
  {
    title: "Orders",
    actions: [
      {
        id: "pending-fulfillment",
        label: "Pending Fulfillment",
        icon: "üöö",
        href: "/orders/pending",
        count: pendingCount,
      },
      { id: "all-orders", label: "All Orders", icon: "üìã", href: "/orders" },
    ],
  },
  {
    title: "Products",
    actions: [
      {
        id: "bulk-import",
        label: "Bulk Import / Export",
        icon: "üì•",
        href: "/products/import",
      },
      { id: "drafts", label: "Drafts", icon: "üìù", href: "/products/drafts" },
    ],
  },
  {
    title: "Promotions",
    actions: [
      {
        id: "create-coupon",
        label: "Create Coupon",
        icon: "üè∑Ô∏è",
        href: "/promotions/coupons/new",
      },
      {
        id: "start-flash-sale",
        label: "Start Flash Sale",
        icon: "‚ö°",
        href: "/promotions/flash-sales/new",
      },
    ],
  },
  {
    title: "Reports",
    requires: "premium",
    actions: [
      {
        id: "view-reports",
        label: "View Reports",
        icon: "üìä",
        href: "/reports",
      },
    ],
  },
  {
    title: "Payments",
    actions: [
      {
        id: "payout-settings",
        label: "Payout Settings",
        icon: "üí∞",
        href: "/payments/settings",
      },
      {
        id: "transaction-logs",
        label: "Transaction Logs",
        icon: "üìë",
        href: "/payments/logs",
      },
    ],
  },
];

export default function QuickActionsPage() {
  const [openGroups, setOpenGroups] = useState(() => {
    const init = {};
    GROUPS.forEach((g) => {
      init[g.title] = true;
    });
    return init;
  });

  const toggleGroup = (title) => {
    setOpenGroups((prev) => ({ ...prev, [title]: !prev[title] }));
  };

  return (
    <div className="min-h-screen flex flex-col">
      {/* Sticky Profile Header */}
      <header className="sticky top-0 bg-white shadow p-4 flex items-center justify-between z-10">
        <div className="flex items-center">
          <Image src="/logo.png" width={40} height={40} alt="Store Logo" />
          <span className="ml-2 font-bold text-xl">My Store</span>
        </div>
        <div className="space-x-4">
          <Link href="/profile" className="hover:underline">
            My Profile
          </Link>
          <button
            onClick={() => {
              /* logout logic */
            }}
            className="hover:underline"
          >
            Logout
          </button>
        </div>
      </header>

      {/* Quick Actions Content */}
      <main className="flex-1 p-6">
        <h1 className="text-2xl font-semibold mb-4">Quick Actions</h1>
        <div className="space-y-6">
          {GROUPS.map((group) => {
            // permission-aware: skip if requires not met
            if (group.requires && !userPermissions.includes(group.requires))
              return null;

            return (
              <section key={group.title} className="border rounded-lg">
                <button
                  className="w-full flex justify-between items-center p-4 bg-gray-50 hover:bg-gray-100"
                  onClick={() => toggleGroup(group.title)}
                >
                  <span className="font-medium">{group.title}</span>
                  <span>{openGroups[group.title] ? "‚àí" : "+"}</span>
                </button>

                {openGroups[group.title] && (
                  <div className="grid gap-4 p-4 grid-cols-2 sm:grid-cols-3 lg:grid-cols-4">
                    {group.actions.map((action) => (
                      <Link
                        key={action.id}
                        href={action.href}
                        className="flex flex-col items-center justify-center p-3 bg-white rounded-lg hover:shadow cursor-pointer"
                      >
                        <span className="text-3xl">{action.icon}</span>
                        <span className="mt-2 text-sm text-center hidden sm:block">
                          {action.label}
                          {action.count !== undefined && (
                            <span className="ml-1 inline-block bg-red-500 text-white rounded-full px-2 text-xs">
                              {action.count}
                            </span>
                          )}
                        </span>
                      </Link>
                    ))}
                  </div>
                )}
              </section>
            );
          })}
        </div>
      </main>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/reviews/page.jsx =====
// src/app/(pages)/new-dashboard/reviews/page.jsx
"use client";

import RoleGuard from "@/components/auth/RoleGuard";
import MyReviewsPageContent from "@/components/new-dashboard/MyReviewsPageContent";

export default function BuyerReviewsPage() {
  return (
    <RoleGuard allowed={["buyer"]}>
      <MyReviewsPageContent />
    </RoleGuard>
  );
}

===== src/app/(pages)/new-dashboard/sales/[id]/page.jsx =====
// app/(pages)/new-dashboard/sales/[id]/page.jsx
"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { AiOutlineArrowLeft } from "react-icons/ai";

export default function SalesOrderDetailPage() {
  const { id } = useParams();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);

  // Replace this with actual API call
  useEffect(() => {
    async function fetchOrder() {
      setLoading(true);
      try {
        const res = await fetch(`/api/orders/${id}`);
        const data = await res.json();
        setOrder(data);
      } catch (err) {
        console.error("Failed to fetch order:", err);
      } finally {
        setLoading(false);
      }
    }
    if (id) fetchOrder();
  }, [id]);

  const formatDate = (dateStr) => {
    if (!dateStr) return "‚Äî";
    return new Date(dateStr).toLocaleString(undefined, {
      dateStyle: "medium",
      timeStyle: "short",
    });
  };

  if (loading) return <div className="p-6">Loading...</div>;
  if (!order) return <div className="p-6">Order not found.</div>;

  return (
    <div className="p-6 max-w-4xl mx-auto text-sm text-gray-800 dark:text-gray-200">
      <Link href="/new-dashboard/sales" className="flex items-center gap-2 mb-4 text-blue-500">
        <AiOutlineArrowLeft /> Back to Sales
      </Link>

      <h1 className="text-2xl font-bold mb-2">Order #{order.id}</h1>
      <p className="mb-4 text-gray-500">
        Placed on {formatDate(order.created_at)} | Payment:{" "}
        {order.payment_status === "Paid" ? (
          <span className="text-green-500 font-medium">‚úÖ Paid</span>
        ) : (
          <span className="text-red-500 font-medium">‚ùå Unpaid</span>
        )}
      </p>

      {/* Buyer & Shipping */}
      <div className="mb-6 space-y-2 border p-4 rounded-md dark:border-gray-700">
        <p><strong>Buyer:</strong> {order.buyer_name} ({order.buyer_email})</p>
        <p>
          <strong>Shipping:</strong> {order.shipping_name} ‚Äî {order.shipping_address?.line1}, {order.shipping_address?.city}, {order.shipping_address?.country}
        </p>
        <a
          href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(
            `${order.shipping_address?.line1}, ${order.shipping_address?.city}, ${order.shipping_address?.country}`
          )}`}
          target="_blank"
          rel="noopener noreferrer"
          className="text-blue-500 underline text-xs"
        >
          View on Map ‚Üí
        </a>
      </div>

      {/* Items */}
      <div className="space-y-4">
        {order.order_items.map((item) => (
          <div key={item.id} className="flex items-center justify-between border p-3 rounded-md bg-gray-50 dark:bg-gray-800">
            <div className="flex items-center gap-3">
              <Image
                src={item.product_image}
                width={48}
                height={48}
                alt={item.product_title}
                className="rounded border object-cover"
              />
              <div>
                <p className="font-medium text-sm">{item.product_title}</p>
                <p className="text-xs text-gray-500">Qty: {item.quantity}</p>
              </div>
            </div>
            <p className="font-semibold text-sm whitespace-nowrap">GHS {item.price}</p>
          </div>
        ))}
      </div>

      {/* Dispatch info */}
      <div className="mt-6 border-t pt-4">
        {order.dispatch_info ? (
          <div className="text-sm space-y-2">
            <p><strong>Carrier:</strong> {order.dispatch_info.carrier}</p>
            <p><strong>Tracking Number:</strong> {order.dispatch_info.trackingNumber}</p>
            {order.dispatch_info.trackingLink && (
              <a
                href={order.dispatch_info.trackingLink}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-500 underline"
              >
                Track Package ‚Üí
              </a>
            )}
            <p><strong>Dispatched on:</strong> {formatDate(order.dispatch_info.dispatchDate)}</p>
          </div>
        ) : (
          <p className="text-yellow-600">Not yet dispatched.</p>
        )}
      </div>

      {/* Total */}
      <div className="mt-6 flex justify-between text-base font-semibold border-t pt-4">
        <span>Total:</span>
        <span>GHS {order.total}</span>
      </div>
    </div>
  );
}

===== src/app/(pages)/new-dashboard/sales/components/DispatchInfo.jsx =====
import { useState } from "react";

const DispatchInfo = ({ order, onDispatchAll }) => {
  const [showAddress, setShowAddress] = useState(false);
  const [copied, setCopied] = useState(false);

  const toggleAddress = () => setShowAddress(!showAddress);

  const shipping = order?.shipping_address || {};
  const mapLink = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(
    [shipping.line1, shipping.city, shipping.region, shipping.postcode, shipping.country]
      .filter(Boolean)
      .join(", ")
  )}`;

  const fullAddress = [shipping.line1, shipping.city, shipping.region, shipping.postcode, shipping.country]
    .filter(Boolean)
    .join(", ");

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(fullAddress);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Copy failed", err);
    }
  };

  const canDispatchAll =
    order.payment_status === "Paid" &&
    order.order_items?.every((item) => !item.dispatched);

  return (
    <div className="text-right text-gray-800 dark:text-gray-100 flex flex-col sm:flex-row sm:items-center sm:gap-4 sm:justify-end">
      <div>
        <p>
          <strong>Dispatch To:</strong> {shipping.full_name || "Unknown"}
          <button
            onClick={toggleAddress}
            className="text-sm text-blue-600 underline ml-2 hover:text-blue-800 dark:hover:text-blue-400"
          >
            {showAddress ? "Hide Address" : "Show Address"}
          </button>
        </p>

        {showAddress && (
          <div className="text-sm text-gray-600 dark:text-gray-300 mt-1 leading-5">
            <p>{fullAddress}</p>

            {order.buyer_phone && (
              <p className="mt-1">üìû {order.buyer_phone}</p>
            )}

            {order.buyer_note && (
              <p className="italic mt-1">üìù {order.buyer_note}</p>
            )}

            <div className="flex gap-3 mt-1 items-center flex-wrap">
              <a
                href={mapLink}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-500 underline"
              >
                üìç View on Map
              </a>
              <button
                onClick={copyToClipboard}
                className="text-blue-500 underline hover:text-blue-700"
              >
                üìã {copied ? "Copied!" : "Copy Address"}
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Dispatch All Items Button */}
{canDispatchAll && (
<button
  onClick={() => onDispatchAll(order)}
  className="bg-amber-500 hover:bg-amber-600 text-black font-semibold px-4 py-1.5 rounded-full text-xs sm:text-sm flex items-center gap-1 shadow-sm transition-colors"
>
  üöö Dispatch All Items
</button>
)}
    </div>
  );
};

export default DispatchInfo;

===== src/app/(pages)/new-dashboard/sales/components/DispatchStatusBadge.jsx =====
// components/DispatchStatusBadge.jsx
import React from "react";

const DispatchStatusBadge = ({ order }) => {
  if (!order || !order.items || order.items.length === 0) return null;

  const dispatchedCount = order.items.filter((i) => i.dispatched).length;
  const totalItems = order.items.length;
  const isPaid = order.payment_status?.toLowerCase() === "paid";

  const paidAt = order.payment_completed_at
    ? new Date(order.payment_completed_at)
    : null;
  const now = new Date();
  const daysSincePaid = paidAt ? (now - paidAt) / (1000 * 60 * 60 * 24) : 0;

  const isOverdue = isPaid && dispatchedCount === 0 && daysSincePaid > 3;

  if (!isPaid) {
    return (
      <span className="bg-gray-200 text-gray-600 px-4 py-1.5 rounded-full text-sm font-medium">
        ‚ùå Unpaid
      </span>
    );
  }

  if (dispatchedCount === totalItems && totalItems > 0) {
    return (
      <span className="bg-emerald-600 text-white px-4 py-1.5 rounded-full text-sm font-medium">
        ‚úÖ All Items Dispatched
      </span>
    );
  }

  if (isOverdue) {
    return (
      <span
        className="text-red-700 px-4 py-1.5 rounded-full text-sm font-semibold animate-pulseRed border border-red-300 bg-red-100"
        title={`Paid ${Math.floor(daysSincePaid)} days ago, no items dispatched`}
      >
        ‚ö†Ô∏è Dispatch Overdue
      </span>
    );
  }

  if (dispatchedCount > 0) {
    return (
      <span className="bg-orange-400 text-white px-4 py-1.5 rounded-full text-sm font-medium">
        üü° {dispatchedCount}/{totalItems} Dispatched
      </span>
    );
  }

  return (
    <span className="bg-yellow-400 text-black px-4 py-1.5 rounded-full text-sm font-medium">
      üöö Pending Dispatch
    </span>
  );
};

export default DispatchStatusBadge;

===== src/app/(pages)/new-dashboard/sales/components/OrderDetailsModal.jsx =====
"use client";

import { Dialog, Transition } from "@headlessui/react";
import { Fragment } from "react";
import Image from "next/image";
import { AiOutlineClose } from "react-icons/ai";

export default function OrderDetailsModal({ isOpen, onClose, order }) {
  if (!order) return null;

  const {
    id,
    order_code,
    order_date,
    order_items = [],
    shipping_address,
    shipping_name,
    buyer_phone,
    buyer_note,
    payment_status,
    payment_completed_at,
    total,
    buyer_name,
    buyer_email,
    order_status, // optional: "Processing", "Dispatched"
    shipping_fee = 0,
    platform_fee = 0,
    seller_payout = total - platform_fee,
  } = order;

  const formatDate = (dateStr) => {
    if (!dateStr) return "‚Äî";
    const date = new Date(dateStr);
    return date.toLocaleString(undefined, {
      dateStyle: "medium",
      timeStyle: "short",
    });
  };

  const fullAddress = [
    shipping_address?.line1,
    shipping_address?.line2,
    shipping_address?.city,
    shipping_address?.region,
    shipping_address?.country,
    shipping_address?.postcode,
  ]
    .filter(Boolean)
    .join(", ");

  const mapLink = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(fullAddress)}`;

  const copyAddress = () => {
    navigator.clipboard.writeText(fullAddress);
  };

  return (
    <Transition show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        {/* Backdrop */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-40 dark:bg-opacity-50 backdrop-blur-md transition-opacity" />
        </Transition.Child>

        {/* Panel */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="translate-y-full"
          enterTo="translate-y-0"
          leave="ease-in duration-200"
          leaveFrom="translate-y-0"
          leaveTo="translate-y-full"
        >
          <Dialog.Panel className="fixed inset-x-0 bottom-0 max-h-[90vh] overflow-y-auto bg-white dark:bg-gray-900 rounded-t-2xl p-6 mx-auto w-full max-w-2xl shadow-xl">
            {/* Header */}
            <div className="flex justify-between items-center mb-4">
              <Dialog.Title className="text-lg font-semibold text-gray-900 dark:text-white">
                Order #{id || "‚Äî"}
              </Dialog.Title>
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-black dark:hover:text-white text-xl"
              >
                <AiOutlineClose />
              </button>
            </div>

            {/* Status Badges */}
            <div className="flex gap-2 mb-4">
              {order_status && (
                <span className="px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-700">
                  {order_status}
                </span>
              )}
              <span
                className={`px-3 py-1 rounded-full text-sm font-medium ${
                  payment_status === "Paid"
                    ? "bg-green-100 text-green-700"
                    : "bg-red-100 text-red-700"
                }`}
              >
                {payment_status === "Paid" ? "‚úÖ Paid" : "‚ùå Unpaid"}
              </span>
            </div>

            {/* Order Info */}
            <div className="space-y-3 text-sm text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-700 pb-4 mb-4">
              <p>
                <span className="font-semibold">Order Date:</span>{" "}
                {formatDate(order_date)}
              </p>

<p>
  <span className="font-semibold">Shipping:</span>{" "}
  {shipping_name} ‚Äî {fullAddress}
  <div className="flex items-center gap-2 mt-2">

        <button
      onClick={() => {
        navigator.clipboard
          .writeText(fullAddress)
          .then(() => alert("üìã Address copied!"))
          .catch(() => alert("‚ùå Failed to copy address"));
      }}
      className="px-3 py-1 rounded-full bg-blue-600 text-white text-xs hover:bg-blue-700 transition "
    >
      Copy
    </button>
    
    <a
      href={mapLink}
      target="_blank"
      rel="noopener noreferrer"
      className="px-3 py-1 rounded-full bg-gray-200 dark:bg-gray-700 text-xs text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition"
    >
      View on Map
    </a>

  </div>
</p>
              {buyer_note && (
                <p>
                  <span className="font-semibold">Buyer Note:</span>{" "}
                  {buyer_note}
                </p>
              )}
              {payment_completed_at && (
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  Paid on {formatDate(payment_completed_at)}
                </p>
              )}
            </div>

            {/* Order Items */}
            <div className="space-y-4">
              {Array.isArray(order_items) && order_items.length > 0 ? (
                order_items.map((item) => {
                  const imageUrl =
                    item.product_image ||
                    item.product?.thumbnail ||
                    "/fallback-image.jpg";
                  const title =
                    item.product_title ||
                    item.product?.title ||
                    "Product";

                  return (
                    <div
                      key={item.id}
                      className="flex items-center justify-between border border-gray-200 dark:border-gray-700 p-3 rounded-md bg-gray-50 dark:bg-gray-800"
                    >
                      <div className="flex gap-3 items-center">
                        <Image
                          src={imageUrl}
                          width={48}
                          height={48}
                          alt={title}
                          className="rounded border border-gray-300 dark:border-gray-600 object-cover"
                          unoptimized
                        />
                        <div className="text-sm text-gray-800 dark:text-gray-200">
                          <p className="font-medium">{title}</p>
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            Qty: {item.quantity} √ó GHS{" "}
                            {item.unit_price?.toFixed(2)}
                          </p>
                          {item.shipping_fee > 0 && (
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              Shipping: GHS {item.shipping_fee.toFixed(2)}
                            </p>
                          )}
                          {item.dispatch_info?.carrier && (
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              Dispatched via {item.dispatch_info.carrier}
                              {item.dispatch_info.trackingNumber &&
                                ` ‚Äî Tracking #: ${item.dispatch_info.trackingNumber}`}
                            </p>
                          )}
                        </div>
                      </div>
                      <p className="font-semibold text-sm text-gray-800 dark:text-gray-100 whitespace-nowrap">
                        GHS {item.total_price?.toFixed(2)}
                      </p>
                    </div>
                  );
                })
              ) : (
                <p className="text-sm italic text-gray-400 dark:text-gray-500">
                  No items found in this order.
                </p>
              )}
            </div>

{/* Totals */}
<div className="mt-6 space-y-2 border-t border-gray-200 dark:border-gray-700 pt-4 text-sm text-gray-800 dark:text-gray-200">
  <div className="flex justify-between">
    <span>Items Subtotal:</span>
    <span className="font-medium">GHS {total?.toFixed(2)}</span>
  </div>

  {shipping_fee > 0 && (
    <div className="flex justify-between">
      <span>Postage & Packing:</span>
      <span className="font-medium">GHS {shipping_fee.toFixed(2)}</span>
    </div>
  )}

  {platform_fee > 0 && (
    <div className="flex justify-between text-red-600 dark:text-red-400">
      <span>Platform Fee:</span>
      <span>-GHS {platform_fee.toFixed(2)}</span>
    </div>
  )}

  <div className="flex justify-between font-semibold text-gray-900 dark:text-white">
    <span>Grand Total:</span>
    <span>GHS {(total + shipping_fee)?.toFixed(2)}</span>
  </div>

  <div className="flex justify-between font-semibold text-gray-900 dark:text-white border-t border-gray-300 pt-2 mt-2">
    <span>Seller Payout:</span>
    <span>GHS {seller_payout?.toFixed(2)}</span>
  </div>
</div>
          </Dialog.Panel>
        </Transition.Child>
      </Dialog>
    </Transition>
  );
}

===== src/app/(pages)/new-dashboard/sales/components/OrderItemCard.jsx =====


===== src/app/(pages)/new-dashboard/sales/components/OrderSummaryBox.jsx =====


===== src/app/(pages)/new-dashboard/sales/components/SalesPage.jsx =====
///Part 1: Setup & Imports
"use client";

import React, { useState, useEffect, Fragment } from "react";
import Image from "next/image";
import toast, { Toaster } from "react-hot-toast";
import { Dialog, Transition } from "@headlessui/react";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";
import OrderDetailsModal from "./OrderDetailsModal";
import DispatchInfo from "./DispatchInfo";
import { BASE_API_URL, SITE_BASE_URL } from "@/app/constants";
import { getCleanToken } from "@/lib/getCleanToken";

const fallbackImage =
  "https://d3q0odwafjkyv1.cloudfront.net/50g59dwfx74fq23f6c2p5noqotgo";

/* ---------- image helpers ---------- */
function fixImageUrl(u) {
  if (!u) return "";

  let s = String(u).trim();

  // 1) Repair glued CloudFront host (‚Ä¶cloudfront.netdirect_uploads/‚Ä¶ ‚Üí ‚Ä¶cloudfront.net/direct_uploads/‚Ä¶)
  s = s.replace(/([a-z0-9.-]*cloudfront\.net)(?=[^/])/i, "$1/");

  // 2) Already absolute (http/https/data:) ‚Üí return (after the CloudFront fix above)
  if (/^(https?:)?\/\//i.test(s) || s.startsWith("data:")) return s;

  // 3) Relative media paths ‚Üí make absolute using API base
  const api = (process.env.NEXT_PUBLIC_API_URL || "").replace(/\/$/, "");
  if (!api) return s; // last resort

  // ‚Äú/media/‚Ä¶‚Äù
  if (/^\/?media\//i.test(s)) return `${api}/${s.replace(/^\//, "")}`;

  // Common ActiveStorage-style keys ‚Üí point to /media/<key>
  if (/^(direct_uploads|uploads|active_storage|attachments)\//i.test(s)) {
    return `${api}/media/${s}`;
  }

  return s; // unknown case: return as-is
}

function pickProductImage(item) {
  // Try common fields from your payload
  const candidate =
    item?.product?.image_objects?.[0]?.image_url ||
    item?.product?.product_image_url ||
    item?.product?.thumbnail ||
    item?.product?.image_url ||
    item?.product_image || // your grouped field
    "";

  return fixImageUrl(candidate) || fallbackImage;
}

/* A next/image wrapper that falls back on error */
function SafeImage({ src, alt, fallback = fallbackImage, ...props }) {
  const [imgSrc, setImgSrc] = React.useState(fixImageUrl(src) || fallback);
  useEffect(() => {
    setImgSrc(fixImageUrl(src) || fallback);
  }, [src, fallback]);
  return (
    <Image
      src={imgSrc}
      alt={alt || "Image"}
      onError={() => setImgSrc(fallback)}
      {...props}
    />
  );
}

////Part 2: Component State and Utilities
export default function SalesPage() {
  const [orders, setOrders] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [selectedItem, setSelectedItem] = useState(null);
  const [isTrackingSheetOpen, setIsTrackingSheetOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [orderDetailsOpen, setOrderDetailsOpen] = useState(false);
  const [activeOrder, setActiveOrder] = useState(null);
  const [showAddressMap, setShowAddressMap] = useState({});
  const [bulkMode, setBulkMode] = useState(false);
  const [orderToDispatchAll, setOrderToDispatchAll] = useState(null);

  const [dispatchForm, setDispatchForm] = useState({
    dispatchDate: "",
    dispatchTime: "",
    carrier: "",
    trackingNumber: "",
    trackingLink: "",
    notes: "",
  });

  const cleanToken = getCleanToken();

  const formatDate = (ts) => {
    const date = new Date(ts);
    if (isNaN(date.getTime())) return "N/A";
    return date.toLocaleString(undefined, {
      dateStyle: "medium",
      timeStyle: "short",
    });
  };

  // Part 3. Fetching Real API Data & Grouping by OrderGroup
  const fetchOrders = async () => {
    try {
      const res = await fetch(`${BASE_API_URL}/api/order-items/`, {
        headers: {
          Authorization: `Token ${cleanToken}`,
        },
      });

      if (!res.ok) throw new Error("Failed to fetch");

      const data = await res.json();
      const orderItems = Array.isArray(data) ? data : data.results || [];

      const grouped = {};

      for (const item of orderItems) {
        const group = item.order_group || {};
        const orderId = group.id || item.order?.id || `unknown-${item.id}`;

        const orderCode =
          group.order_code ||
          item.order?.order_code ||
          item.order?.id ||
          `unknown-${item.id}`;

        const orderDate =
          group.created_at || item.order?.created_at || item.created_at || null;

        if (!grouped[orderId]) {
          grouped[orderId] = {
            id: orderId,
            order_code: orderCode,
            order_date: orderDate,
            buyer_phone: group.buyer_phone || item.order?.buyer_phone || "",
            buyer_note: group.buyer_note || item.order?.buyer_note || "",
            payment_status:
              group.payment_status_display ||
              (group.payment_method === "manual" ? "Unpaid" : "Paid"),
            payment_completed_at:
              group.payment_completed_at || item.order?.payment_completed_at || null,
            shipping_name:
              group.shipping_name || item.shipping_address?.full_name || "Unknown",
            shipping_address:
              item.shipping_address || {
                line1: "‚Äî",
                city: "",
                region: "",
                postcode: "",
                country: "Ghana",
              },
            total: 0,
            order_items: [],
          };
        }

        // ‚úÖ Sum frozen totals
        grouped[orderId].total += item.total_price || 0;

        grouped[orderId].order_items.push({
          id: item.id,
          product_title: item.product?.title || "Untitled Product",
          product_image: pickProductImage(item), // üëà fixed URL chosen here
          product_url: item.product?.frontend_url_full || "#",
          quantity: item.quantity || 1,
          unit_price: item.unit_price || 0,
          shipping_fee: item.shipping_fee || 0,
          total_price: item.total_price || 0,
          dispatched: item.dispatch_status === 1,
          dispatch_info: item.tracking_data || {},
          shipping_address: item.shipping_address || {},
        });
      }

      setOrders(Object.values(grouped));
    } catch (error) {
      toast.error("‚ùå Failed to load orders.");
      console.error("Fetch error:", error);
    }
  };

  // Run once cleanToken is available
  useEffect(() => {
    if (!cleanToken) return;
    fetchOrders();
  }, [cleanToken]);

  useEffect(() => {
    orders.forEach((o) => {
      console.log("üßæ Order:", o.order_code);
      console.log("‚û°Ô∏è Shipping Name:", o.shipping_name);
      console.log("‚û°Ô∏è Shipping Address Name:", o.shipping_address?.full_name);
    });
  }, [orders]);

  const formatAddress = (address) => {
    if (!address) return "‚Äî";
    return [address.full_name, address.line1, address.city, address.region, address.country]
      .filter(Boolean)
      .join(", ");
  };

  // Part 4: Dispatch Submission Logic & Modals
  const openTrackingSheet = (order, item) => {
    setBulkMode(false);
    setSelectedOrder(order);
    setSelectedItem(item);
    setDispatchForm({
      dispatchDate: "",
      dispatchTime: "",
      carrier: "",
      trackingNumber: "",
      trackingLink: "",
      notes: "",
    });
    setIsTrackingSheetOpen(true);
  };

  const openBulkTrackingSheet = (order) => {
    setBulkMode(true);
    setOrderToDispatchAll(order);
    setDispatchForm({
      dispatchDate: "",
      dispatchTime: "",
      carrier: "",
      trackingNumber: "",
      trackingLink: "",
      notes: "",
    });
    setIsTrackingSheetOpen(true);
  };

  const undoDispatch = async (order, item) => {
    try {
      const res = await fetch(`${BASE_API_URL}/api/orders/${order.id}/dispatch/`, {
        method: "POST",
        headers: {
          Authorization: `Token ${cleanToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ item_id: item.id, undo: true }),
      });

      if (!res.ok) throw new Error("Failed to undo dispatch");
      const result = await res.json();
      updateOrdersWithDispatchedItems(order.id, result.updated_items || []);
      toast.success(`‚úÖ Dispatch undone for "${item.product_title}".`);
    } catch (err) {
      toast.error(err.message);
    }
  };

  const updateOrdersWithDispatchedItems = (orderId, updatedItems) => {
    setOrders((prev) =>
      prev.map((order) =>
        order.id === orderId
          ? {
              ...order,
              order_items: order.order_items.map((item) => {
                const updatedItem = updatedItems.find((ui) => ui.id === item.id);
                return updatedItem
                  ? {
                      ...item,
                      dispatched: updatedItem.dispatch_status === 1,
                      dispatch_status: updatedItem.dispatch_status,
                      dispatch_info: updatedItem.tracking_data || {},
                    }
                  : item;
              }),
            }
          : order
      )
    );
  };

  const handleDispatchSubmit = async () => {
    const { dispatchDate, dispatchTime, carrier, trackingNumber, trackingLink, notes } =
      dispatchForm;

    const fullDateTime = dispatchDate ? `${dispatchDate}T${dispatchTime || "09:00"}` : "";

    if (!fullDateTime || !carrier.trim()) {
      toast.error("Please fill in dispatch date and carrier.");
      return;
    }

    const payload = {
      dispatchDate: fullDateTime,
      carrier: carrier.trim(),
      trackingNumber: (trackingNumber || "").trim(),
      trackingLink: (trackingLink || "").trim(),
      notes: (notes || "").trim(),
    };

    setIsSubmitting(true);
    try {
      const orderId = bulkMode ? orderToDispatchAll.id : selectedOrder.id;

      const res = await fetch(`${BASE_API_URL}/api/orders/${orderId}/dispatch/`, {
        method: "POST",
        headers: {
          Authorization: `Token ${cleanToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(bulkMode ? payload : { ...payload, item_id: selectedItem.id }),
      });

      if (!res.ok) throw new Error(`Failed to dispatch`);

      const result = await res.json();
      updateOrdersWithDispatchedItems(orderId, result.updated_items || []);
      fetchOrders(); // extra sync

      toast.success(
        bulkMode
          ? `‚úÖ All ${orderToDispatchAll.order_items.length} items marked as dispatched.`
          : `‚úÖ Item "${selectedItem.product_title}" marked as dispatched.`
      );

      setIsTrackingSheetOpen(false);
    } catch (err) {
      toast.error(err.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleViewDetails = (order) => {
    setActiveOrder(order);
    setOrderDetailsOpen(true);
  };

  const toggleAddress = (orderId) => {
    setShowAddressMap((prev) => ({ ...prev, [orderId]: !prev[orderId] }));
  };

  // üß© Part 5: Badges
  const getPaymentStatusBadge = (status) =>
    status === "Paid" ? (
      <span className="bg-green-100 text-green-700 font-semibold px-3 py-1 rounded-full text-sm">
        ‚úÖ Paid
      </span>
    ) : (
      <span className="bg-red-100 text-red-600 font-semibold px-3 py-1 rounded-full text-sm">
        ‚ùå Unpaid
      </span>
    );

  const getDispatchStatusBadge = (order) => {
    const dispatchedCount = order.order_items.filter((i) => i.dispatched).length;
    const totalItems = order.order_items.length;
    const isPaid = order.payment_status === "Paid";
    const paidAt = order.payment_completed_at ? new Date(order.payment_completed_at) : null;
    const daysSincePaid = paidAt ? (new Date() - paidAt) / (1000 * 60 * 60 * 24) : 0;
    const isOverdue = isPaid && dispatchedCount === 0 && daysSincePaid > 3;

    if (!isPaid) return null;
    if (dispatchedCount === totalItems) {
      return (
        <span className="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-medium border border-green-500 text-green-600 hover:bg-green-50 transition-colors">
          ‚úÖ All Dispatched
        </span>
      );
    }
    if (isOverdue) {
      return (
        <span className="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-medium border border-red-500 text-red-600 hover:bg-red-50 transition-colors animate-pulse">
          ‚ö†Ô∏è Dispatch Overdue
        </span>
      );
    }
    if (dispatchedCount > 0) {
      return (
        <span className="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-medium border border-blue-500 text-blue-600 hover:bg-blue-50 transition-colors">
          üü¶ {dispatchedCount}/{totalItems} Dispatched
        </span>
      );
    }
    return (
      <span className="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-medium border border-amber-500 text-amber-600 hover:bg-amber-50 transition-colors">
        üöö Pending Dispatch
      </span>
    );
  };

  // Part 6: Filter
  const filteredOrders = orders.filter((o) => {
    if (!o || !Array.isArray(o.order_items) || o.order_items.length === 0) return false;

    const name = o.buyer_name || o.shipping_name || "";
    const id = o.id || o.order_code || "";
    const phone = o.buyer_phone || "";

    const address = o.order_items[0]?.shipping_address || {};
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/sales/components/SalesPageTheme.jsx =====
"use client";

import React, { useState, Fragment } from "react";

import Image from "next/image";
import toast, { Toaster } from "react-hot-toast";
import { Dialog, Transition } from "@headlessui/react";
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";
import OrderDetailsModal from "./OrderDetailsModal";

const fallbackImage =
  "https://d3q0odwafjkyv1.cloudfront.net/50g59dwfx74fq23f6c2p5noqotgo";

const initialOrders = [
  {
    id: "0000507",
    buyer_name: "massfold uk",
    buyer_email: "masfolduk@gmail.com",
      shipping_name: "Charles K Wiredu",
  shipping_address: {
    line1: "12 Cocoa Avenue",
    city: "Accra",
    country: "Ghana"
  },
    status: "Processing",
    order_date: "23/05/2024",
    total: "120.00",
    payment_status: "Paid",
    payment_completed_at: "Jan 22, 2024 11:17 AM",
    dispatched: false,
    dispatch_info: {},
    order_items: [
      {
        id: 1,
        product_title: "Blender Portable Mini Blender 380ml for shakes and smoothies",
        product_image: fallbackImage,
        quantity: 1,
        price: 60,
      },
      {
        id: 2,
        product_title: "Natural Shea Butter ‚Äì 200g",
        product_image: fallbackImage,
        quantity: 2,
        price: 30,
      },
    ],
  },
  {
    id: "0000508",
    buyer_name: "Akosua Adepa",
    buyer_email: "akosua@gmail.com",
      shipping_name: "Akosua Adepa", // ‚úÖ add this
  shipping_address: {            // ‚úÖ and this
    line1: "14 Spintex Road",
    city: "Tema",
    country: "Ghana",
  },
    status: "Pending",
    order_date: "20/05/2024",
    total: "85.00",
    payment_status: "Unpaid",
    payment_completed_at: null,
    dispatched: true,
    dispatch_info: {
      dispatchDate: "2024-05-22T11:00",
      carrier: "Ghana Post",
      trackingNumber: "GH123456789",
      trackingLink: "https://example.com/track",
      notes: "Delivered to front desk",
    },
    order_items: [
      {
        id: 3,
        product_title: "Natural Shea Butter ‚Äì 200g",
        product_image: fallbackImage,
        quantity: 2,
        price: 85,
      },
    ],
  },
];

export default function SalesPage() {
  const [orders, setOrders] = useState(initialOrders);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [isTrackingSheetOpen, setIsTrackingSheetOpen] = useState(false);
  const [showAddressMap, setShowAddressMap] = useState({});
  const [dispatchForm, setDispatchForm] = useState({
    dispatchDate: "",
    carrier: "",
    trackingNumber: "",
    trackingLink: "",
    notes: "",
  });


const formatDate = (ts) => {
  const date = new Date(ts);
  return date.toLocaleString(undefined, {
    dateStyle: "medium",
    timeStyle: "short",
  });
};

const openTrackingSheet = (order, item) => {
  setSelectedOrder(order);
  setSelectedItem(item); // ‚úÖ now valid
  setDispatchForm({
    dispatchDate: "",
    carrier: "",
    trackingNumber: "",
    trackingLink: "",
    notes: "",
  });
  setIsTrackingSheetOpen(true);
};

  const [selectedItem, setSelectedItem] = useState(null); // üëà for per-item tracking
  const [isSubmitting, setIsSubmitting] = useState(false);


const [orderDetailsOpen, setOrderDetailsOpen] = useState(false);
const [activeOrder, setActiveOrder] = useState(null);

const handleViewDetails = (order) => {
  setActiveOrder(order);
  setOrderDetailsOpen(true);
};

const handleDispatchSubmit = () => {
  const { dispatchDate, carrier, trackingNumber } = dispatchForm;
  if (!dispatchDate || !carrier || !trackingNumber) {
    toast.error("Please fill in dispatch date, carrier, and tracking number.");
    return;
  }

  setIsSubmitting(true); // Start loading

  // Simulate API delay (or wrap your actual API call here)
  setTimeout(() => {
    const updatedOrders = orders.map((order) => {
      if (order.id === selectedOrder.id) {
        const updatedItems = order.order_items.map((item) =>
          item.id === selectedItem.id
            ? {
                ...item,
                dispatched: true,
                dispatch_info: { ...dispatchForm },
              }
            : item
        );

        const isFullyDispatched = updatedItems.every((item) => item.dispatched);

        return {
          ...order,
          order_items: updatedItems,
          dispatched: isFullyDispatched,
        };
      }
      return order;
    });

    setOrders(updatedOrders);
    setIsTrackingSheetOpen(false);
    setIsSubmitting(false); // Stop loading
    toast.success("Item marked as dispatched.");
  }, 1000); // Simulate 1 second delay
};


const getDispatchStatusBadge = (order) => {
  const dispatchedCount = order.order_items.filter((i) => i.dispatched).length;
  const totalItems = order.order_items.length;
  const isPaid = order.payment_status === "Paid";

  // Parse payment completed date
  const paidAt = order.payment_completed_at
    ? new Date(order.payment_completed_at)
    : null;

  const now = new Date();
  const daysSincePaid = paidAt ? (now - paidAt) / (1000 * 60 * 60 * 24) : 0;

  const isOverdue = isPaid && dispatchedCount === 0 && daysSincePaid > 3;

  if (!isPaid) {
    return (
      <span className="bg-gray-300 text-gray-600 px-4 py-1.5 rounded-full text-sm font-medium">
        ‚ùå Unpaid
      </span>
    );
  }

  if (dispatchedCount === totalItems) {
    return (
      <span className="bg-emerald-600 text-white px-4 py-1.5 rounded-full text-sm font-medium">
        ‚úÖ All Items Dispatched
      </span>
    );
  }

  if (isOverdue) {
    return (
<span className="text-red-700 px-4 py-1.5 rounded-full text-sm font-semibold animate-pulseRed border border-red-300 bg-red-100">
  ‚ö†Ô∏è Dispatch Overdue
</span>
    );
  }

  if (dispatchedCount > 0) {
    return (
      <span className="bg-orange-400 text-white px-4 py-1.5 rounded-full text-sm font-medium">
        üü° {dispatchedCount}/{totalItems} Dispatched
      </span>
    );
  }

  return (
    <span className="bg-yellow-400 text-black px-4 py-1.5 rounded-full text-sm font-medium">
      üöö Pending Dispatch
    </span>
  );
};

  const renderPaymentStatus = (status, date) => (
    <>
      <p className="font-semibold text-sm">
        Payment:{" "}
        <span
          title={status === "Paid" && date ? `Payment completed at: ${date}` : ""}
          className={status === "Paid" ? "text-green-500" : "text-red-500"}
        >
          {status === "Paid" ? "‚úÖ Paid" : "‚ùå Unpaid"}
        </span>
      </p>
      {status === "Paid" && date && (
        <p className="text-xs text-gray-600 dark:text-gray-400">Payment completed at: {date}</p>
      )}
    </>
  );

  const toggleAddress = (orderId) => {
  setShowAddressMap((prev) => ({
    ...prev,
    [orderId]: !prev[orderId],
  }));
};

const filteredOrders = orders.filter(
  (o) =>
    o.buyer_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    o.id.includes(searchQuery)
);

  return (
    <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-12 py-6 text-black dark:text-white">
      <Toaster position="top-right" />
      <div className="flex flex-col md:flex-row justify-between items-center gap-4 mb-6">
        <div className="relative w-full md:w-2/3">
          <AiOutlineSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-xl text-gray-500 dark:text-gray-300" />
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search sales by buyer name or order #..."
            className="w-full rounded-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-10 py-2 text-sm"
          />
          {searchQuery && (
            <AiOutlineClose
              className="absolute right-3 top-1/2 -translate-y-1/2 text-xl text-gray-400 cursor-pointer"
              onClick={() => setSearchQuery("")}
            />
          )}
        </div>

        <select className="px-4 py-2 border rounded-md bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-sm">
          <option>All Time</option>
          <option>Last 30 Days</option>
          <option>Past 3 Months</option>
          <option>This Year</option>
        </select>
      </div>

      <h1 className="text-2xl font-bold text-gray-800 dark:text-white mb-6">
        My Sales ({filteredOrders.length})
      </h1>

      {filteredOrders.length === 0 ? (
        <p className="text-gray-500 dark:text-gray-400">No sales found.</p>
      ) : (
        <div className="space-y-6">
          {filteredOrders.map((order) => (
            <div
              key={order.id}
              className="rounded-xl border border-gray-300 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 p-5 shadow-sm"
            >




<div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-4">
  {/* Left: Order Status */}
  <div className="flex flex-col">
    <div className="flex items-center gap-2">
      <span className="inline-flex items-center px-2 py-1 rounded-full bg-green-100 text-green-700 text-sm font-semibold">
        ‚úÖ Processing
      </span>
    </div>
<p className="font-semibold mt-2">Order # {order.id}</p>
<p className="text-sm text-gray-600">Date: {order.order_date}</p>
  </div>

  {/* Right: Dispatch & Payment */}
  <div className="text-right">
    <p><span className="font-semibold">Dispatch To:</span> {order.shipping_name}</p>

    {/* Hidden address with reveal */}
{showAddressMap[order.id] ? (
  <Transition
    show={showAddressMap[order.id]}
    enter="transition-opacity duration-300"
    enterFrom="opacity-0"
    enterTo="opacity-100"
    leave="transition-opacity duration-200"
    leaveFrom="opacity-100"
    leaveTo="opacity-0"
  >
    <p className="text-sm text-gray-600 mt-1">
      {order.shipping_address?.line1}, {order.shipping_address?.city},{" "}
      {order.shipping_address?.country}
      <br />
      <a
        href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(order.shipping_address?.line1 + ', ' + order.shipping_address?.city + ', ' + order.shipping_address?.country)}`}
        target="_blank"
        rel="noopener noreferrer"
        className="text-blue-500 underline"
      >
        View on Map ‚Üí
      </a>
    </p>
  </Transition>
) : (
  <button
    onClick={() => toggleAddress(order.id)}
    className="text-sm text-blue-600 underline hover:text-blue-800"
  >
    Show Delivery Address ‚Üí
  </button>
)}

    <p className="mt-2">
      <strong>Payment:</strong>{" "}
      <span className="inline-flex items-center gap-1 text-green-600 font-medium">
        ‚úÖ Paid
      </span>
    </p>
<p className="text-xs text-gray-500">Completed at: {formatDate(order.payment_completed_at)}</p>
  </div>
</div>


              
<div className="border-t border-gray-200 dark:border-gray-700 pt-4 space-y-3">
  {order.order_items.map((item) => (
<div
  key={item.id}
  className="flex items-center justify-between gap-4 text-sm rounded-md border bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-700 px-4 py-3 shadow-sm"
>
      <div className="flex items-center gap-4">
        <Image
          src={item.product_image}
          alt={item.product_title}
          width={48}
          height={48}
          className="rounded-md border object-cover"
        />
        <div>
          <p className="font-medium line-clamp-1">{item.product_title}</p>
          <p className="text-xs text-gray-600 dark:text-gray-400">Qty: {item.quantity}</p>

{!item.dispatched ? (
  order.payment_status === "Paid" ? (
    <button
      onClick={() => openTrackingSheet(order, item)}
      className="bg-yellow-400 text-black px-3 py-1 rounded text-xs mt-1"
    >
      Mark as Dispatched
    </button>
  ) : (
    <p className="text-xs text-red-500 italic mt-1">Cannot dispatch unpaid order</p>
  )
) : (
  <div className="text-green-600 text-xs font-semibold mt-1 block space-y-0.5">
    ‚úÖ Dispatched
{item.dispatch_info && (
  <div className="text-[11px] text-gray-500 dark:text-gray-300 font-normal space-y-0.5">
    {item.dispatch_info.carrier && item.dispatch_info.dispatchDate && (
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/sales/components/SellerOrderCard.jsx =====
"use client";

import React from "react";
import Image from "next/image";

/* ---------- tiny, file-local helpers (JS, no types) ---------- */
function fixImageUrl(u) {
  if (!u) return "";
  let s = String(u).trim();

  // repair "cloudfront.netdirect_uploads/..." ‚Üí "cloudfront.net/direct_uploads/..."
  s = s.replace(/(cloudfront\.net)(?=[^/])/i, "$1/");

  // turn "/media/..." into absolute using NEXT_PUBLIC_API_URL
  if (/^\/?media\//i.test(s)) {
    const base = (process.env.NEXT_PUBLIC_API_URL || "").replace(/\/$/, "");
    return base ? `${base}/${s.replace(/^\//, "")}` : s;
  }

  return s;
}

function pickProductImage(item) {
  return fixImageUrl(
    item?.product_image_url ||
      item?.product_image ||
      item?.thumbnail ||
      item?.image_url ||
      item?.image ||
      item?.photos?.[0]?.url ||
      item?.image_objects?.[0]?.image_url ||
      item?.image_objects?.[0]?.url ||
      ""
  );
}

/* safe image with runtime fallback (works with next/image) */
function SafeImage({ src, alt, fallback, ...props }) {
  const [imgSrc, setImgSrc] = React.useState(src || fallback);
  React.useEffect(() => {
    setImgSrc(src || fallback);
  }, [src, fallback]);
  return (
    <Image
      src={imgSrc || fallback}
      alt={alt || "Image"}
      onError={() => setImgSrc(fallback)}
      {...props}
    />
  );
}

/* ---------- component ---------- */
export default function SellerOrderCard({ order }) {
  const {
    id,
    buyer_name,
    buyer_email,
    status,
    order_date,
    total,
    payment_status,
    payment_completed_at,
    order_items = [],
  } = order;

  // single trusted fallback (CloudFront) ‚Äì make sure this host is whitelisted in next.config.js
  const fallbackImage =
    "https://d3q0odwafjkyv1.cloudfront.net/50g59dwfx74fq23f6c2p5noqotgo";

  return (
    <div className="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl shadow-upfrica mb-6 p-4">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 gap-4 md:gap-0">
        <div className="flex-1 min-w-0 space-y-2">
          <div className="text-green-600 font-bold text-sm">‚úÖ {status}</div>
          <div className="text-sm text-black dark:text-white">
            <span className="font-bold text-green-600">Order #</span> {id}
          </div>
          <div className="text-sm text-black dark:text-white">
            <span className="font-bold text-green-600">Date</span> {order_date}
          </div>
          <div className="text-sm text-black dark:text-white">
            <span className="font-bold text-green-600">Buyer</span>: {buyer_name} (
            {buyer_email?.slice(0, 3)}***)
          </div>
          <div className="text-sm text-black dark:text-white">
            <span className="font-bold text-green-600">Payment</span>:{" "}
            {payment_status === "Paid" ? (
              <span className="text-green-500">‚úÖ Paid</span>
            ) : (
              <span className="text-red-500">‚ùå Unpaid</span>
            )}
          </div>
          {payment_status === "Paid" && (
            <div className="text-xs text-gray-500">
              Payment completed at: {payment_completed_at}
            </div>
          )}
        </div>

        <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
          <button className="h-9 text-white upfrica-btn-primary-sm">View Details</button>
          <button className="h-9 upfrica-btn-primary-outline-sm">Mark as Dispatched</button>
        </div>
      </div>

      {/* Items */}
      <div className="mt-5 space-y-4">
        {order_items.map((item) => {
          const src = pickProductImage(item) || fallbackImage;
          return (
            <div key={item.id} className="flex gap-4">
              <div className="w-20 h-20 flex-shrink-0">
                <SafeImage
                  src={src}
                  alt={item.product_title || "Product Image"}
                  fallback={fallbackImage}
                  width={80}
                  height={80}
                  className="rounded-md border border-gray-300 dark:border-gray-600 object-cover w-full h-full"
                />
              </div>
              <div className="flex-1 min-w-0">
                <div className="font-semibold text-black dark:text-white break-words">
                  {item.product_title}
                </div>
                <div className="text-sm text-gray-500 dark:text-gray-400">
                  Qty: {item.quantity} ¬∑ GHS {item.price}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <div className="mt-4 text-sm font-medium text-black dark:text-white border-t pt-4 border-gray-200 dark:border-gray-700">
        Total: GHS {total}
      </div>
    </div>
  );
}

===== src/app/(pages)/new-dashboard/sales/components/SellerOrderDetail.jsx =====


===== src/app/(pages)/new-dashboard/sales/components/TrackingInfoModal.jsx =====


===== src/app/(pages)/new-dashboard/sales/page.jsx =====
import SalesPage from "./components/SalesPage";

export default function Page() {
  return <SalesPage />;
}


===== src/app/(pages)/new-dashboard/seller/page.jsx =====
// src/app/(pages)/new-dashboard/seller/page.jsx
"use client";

import RequireRole from "@/components/new-dashboard/RequireRole";
import SellerDashboardHome from "@/components/new-dashboard/SellerDashboardHome";

export default function Page() {
  return (
    <RequireRole need="seller">
      <SellerDashboardHome />
    </RequireRole>
  );
}


===== src/app/(pages)/new-dashboard/seller/reviews/page.jsx =====
// src/app/(pages)/new-dashboard/seller/reviews/page.jsx
"use client";

import React, { useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import ProductReviewList from "@/components/new-dashboard/ProductReviewList";
import SellerReviewList from "@/components/new-dashboard/SellerReviewList";

export default function SellerReviewsPage() {
  const { token } = useAuth();
  const [activeTab, setActiveTab] = useState("product");

  return (
    <div className="max-w-6xl mx-auto px-4 py-6">
      {/* Page Title */}
      <h1 className="text-2xl font-semibold mb-4 dark:text-white text-gray-800">
        Buyer Feedback

      </h1>

      {/* Tab Selector */}
      <div className="flex gap-2 mb-6 border-b">
        {["product", "seller"].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`px-4 py-2 text-sm font-medium transition ${
              activeTab === tab
                ? "border-b-2 border-blue-600 text-blue-600 dark:text-blue-400"
                : "text-gray-600 dark:text-gray-300"
            }`}
          >
            {tab === "product" ? "Product Reviews" : "Seller Reviews"}
          </button>
        ))}
      </div>

      {/* Render Tab Content */}
      {activeTab === "product" ? (
        <ProductReviewList token={token} />
      ) : (
        <SellerReviewList token={token} />
      )}
    </div>
  );
}

===== src/app/(pages)/new-dashboard/settings/addresses/page.jsx =====
// app/(pages)/new-dashboard/settings/addresses/page.jsx
'use client';

import { useEffect, useMemo, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import AddressForm from '@/components/addresses/AddressForm';
import { BASE_API_URL } from '@/app/constants';
import { getCleanToken } from '@/lib/getCleanToken';

/* -------------------------- helpers -------------------------- */

const API_ROOT = (BASE_API_URL || '').replace(/\/+$/, '');
const API = (p) => `${API_ROOT}/api/${String(p).replace(/^\/+/, '')}`;

const absolutize = (maybeRelative) =>
  !maybeRelative ? null :
  /^https?:\/\//i.test(maybeRelative) ? maybeRelative :
  `${API_ROOT}${maybeRelative.startsWith('/') ? '' : '/'}${maybeRelative}`;

const safelyExtractArray = (payload) => {
  if (!payload) return [];
  if (Array.isArray(payload)) return payload;
  if (Array.isArray(payload.results)) return payload.results;
  if (Array.isArray(payload.data?.results)) return payload.data.results;
  if (Array.isArray(payload.data)) return payload.data;
  // generic one-level scan
  for (const v of Object.values(payload)) {
    if (Array.isArray(v)) return v;
    if (v && typeof v === 'object' && Array.isArray(v.results)) return v.results;
  }
  return [];
};

const codeToFlag = (code) => {
  if (!code) return '';
  const cc = String(code).slice(0, 2).toUpperCase();
  return String.fromCodePoint(...[...cc].map((c) => 0x1f1e6 + (c.charCodeAt() - 65)));
};

/* ------------------------- UI piece -------------------------- */

const AddressCard = ({
  addr,
  onEdit,
  onMakePrimary,
  onDelete,
  pendingPrimaryId,
  pendingDeleteId,
}) => {
  const flag = addr.flag_emoji || codeToFlag(addr.country_code || addr.country);
  const phone = addr.phone_number || '';
  const isDefault = !!addr.default;

  const making = pendingPrimaryId === addr.id;
  const deleting = pendingDeleteId === addr.id;

  return (
    <div
      className={`rounded-2xl border p-4 md:p-5 shadow-sm
      ${isDefault
        ? 'border-violet-500/60 bg-violet-50 dark:bg-violet-950/30'
        : 'border-gray-200 dark:border-gray-700 bg-white/60 dark:bg-gray-900/60'}`}
    >
      <div className="flex items-start justify-between gap-3">
        <div className="min-w-0">
          <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
            {flag && <span className="text-lg leading-none">{flag}</span>}
            <span className="truncate">{addr.country || addr.country_code}</span>
            {isDefault && (
              <span className="inline-flex items-center rounded-full border border-violet-500/50 px-2 py-0.5 text-xs font-medium text-violet-700 dark:text-violet-300">
                Primary
              </span>
            )}
          </div>
          <div className="mt-1 font-semibold text-gray-900 dark:text-gray-100">
            {addr.full_name}
          </div>
          <div className="mt-1 text-sm text-gray-700 dark:text-gray-300">
            {addr.display_address || [
              addr.address_line_1, addr.address_line_2, addr.local_area,
              addr.town, addr.state_or_region, addr.postcode, addr.country
            ].filter(Boolean).join(', ')}
          </div>
          {phone && (
            <div className="mt-1 text-sm text-gray-600 dark:text-gray-400">{phone}</div>
          )}
        </div>

        <div className="flex shrink-0 flex-col gap-2">
          {!isDefault && (
            <button
              onClick={() => onMakePrimary(addr.id)}
              disabled={making}
              aria-busy={making}
              className="rounded-full border px-3 py-1 text-sm font-medium
                         border-gray-300 text-gray-800 hover:bg-gray-100
                         dark:border-gray-600 dark:text-gray-100 dark:hover:bg-gray-800
                         disabled:opacity-50"
            >
              {making ? 'Making‚Ä¶' : 'Make primary'}
            </button>
          )}
          <button
            onClick={() => onEdit(addr)}
            className="rounded-full border px-3 py-1 text-sm font-medium
                       border-gray-300 text-gray-800 hover:bg-gray-100
                       dark:border-gray-600 dark:text-gray-100 dark:hover:bg-gray-800"
          >
            Edit
          </button>
          <button
            onClick={() => onDelete(addr.id)}
            disabled={deleting}
            aria-busy={deleting}
            className="rounded-full border px-3 py-1 text-sm font-medium
                       border-red-300 text-red-700 hover:bg-red-50
                       dark:border-red-700/60 dark:text-red-400 dark:hover:bg-red-950/30
                       disabled:opacity-50"
          >
            {deleting ? 'Deleting‚Ä¶' : 'Delete'}
          </button>
        </div>
      </div>
    </div>
  );
};

/* --------------------------- page ---------------------------- */

export default function AddressPage() {
  const cleanToken = getCleanToken();

  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(true);

  const [sheetOpen, setSheetOpen] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);

  const [defaultCountry, setDefaultCountry] = useState(null);

  // in-flight UX guards
  const [pendingPrimaryId, setPendingPrimaryId] = useState(null);
  const [pendingDeleteId, setPendingDeleteId] = useState(null);

  /* -------------------- loaders -------------------- */

  const getMe = async () => {
    if (!cleanToken) return null;
    try {
      const res = await fetch(API('users/me/'), {
        headers: { Authorization: `Token ${cleanToken}` },
        cache: 'no-store',
      });
      if (!res.ok) return null;
      const u = await res.json();
      const code = u?.country_fk?.code || u?.country || u?.country_code || null;
      setDefaultCountry(code ? String(code).toUpperCase() : null);
      return u;
    } catch { return null; }
  };

  const fetchAllPages = async (startUrl) => {
    const out = [];
    let url = startUrl;
    while (url) {
      const res = await fetch(url, {
        headers: { Authorization: `Token ${cleanToken}`, Accept: 'application/json' },
        cache: 'no-store',
      });
      if (!res.ok) break;
      const json = await res.json().catch(() => null);
      out.push(...safelyExtractArray(json));
      url = absolutize(json?.next);
      if (url === startUrl) break;
    }
    return out;
  };

  const fetchAddresses = async (userId = null) => {
    // 1) primary list (scoped to request.user by backend)
    let list = await fetchAllPages(API('addresses/'));

    // 2) optional fallback if list is empty and your backend still supports owner params
    if (!list.length && userId) {
      list = await fetchAllPages(API(`addresses/?owner_type=User&owner_id=${userId}`));
    }

    return (list || [])
      .filter((a) => a && a.is_deleted !== true)
      .sort((a, b) => Number(b?.default) - Number(a?.default));
  };

  const refresh = async () => {
    setLoading(true);
    try {
      const me = await getMe();
      const list = await fetchAddresses(me?.id ?? null);
      setAddresses(list);
      console.log('üì´ addresses (ids/default):', list.map(a => ({ id: a.id, default: a.default })));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    refresh();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [cleanToken]);

  /* -------------------- actions -------------------- */

  const openAdd = () => { setEditingAddress(null); setSheetOpen(true); };

  const openEdit = (addr) => {
    const d = addr.address_data || {};
    setEditingAddress({
      id: addr.id,
      full_name: addr.full_name,
      phone_number: addr.phone_number || d.phone_number || '',
      address_line_1: addr.address_line_1 || d.address_line_1 || '',
      address_line_2: addr.address_line_2 || d.address_line_2 || '',
      town: addr.town || d.town || '',
      local_area: addr.local_area || d.local_area || '',
      state_or_region: addr.state_or_region || d.state_or_region || '',
      country: addr.country_code || addr.country || d.country_code || '',
      postcode: addr.postcode || d.postcode || '',
      delivery_instructions: addr.delivery_instructions || d.delivery_instructions || '',
      default: !!addr.default,
    });
    setSheetOpen(true);
  };

  const closeSheet = () => { setEditingAddress(null); setSheetOpen(false); };
  const handleSaved = () => { closeSheet(); refresh(); };

  const handleMakePrimary = async (id) => {
    if (!cleanToken || pendingPrimaryId) return;
    setPendingPrimaryId(id);
    try {
      const res = await fetch(API(`addresses/${id}/set-default/`), {
        method: 'POST',
        headers: { Authorization: `Token ${cleanToken}` },
      });
      if (res.ok) await refresh();
    } finally {
      setPendingPrimaryId(null);
    }
  };

  const handleDelete = async (id) => {
    if (!cleanToken || pendingDeleteId) return;
    if (!confirm('Delete this address?')) return;
    setPendingDeleteId(id);
    try {
      const res = await fetch(API(`addresses/${id}/`), {
        method: 'DELETE',
        headers: { Authorization: `Token ${cleanToken}` },
      });
      if (res.ok) await refresh();
    } finally {
      setPendingDeleteId(null);
    }
  };

  /* --------------------------- UI --------------------------- */

  const primary = useMemo(() => addresses.find((a) => a.default), [addresses]);
  const others  = useMemo(() => addresses.filter((a) => !a.default), [addresses]);

  return (
    <div className="mx-auto w-full max-w-5xl px-0 py-6 text-gray-900 dark:text-gray-100">
<div className="mb-5 sm:mb-6 grid gap-3 sm:flex sm:items-center sm:justify-between">
  <div>
    <h1 className="text-2xl font-bold dark:text-gray-100">Delivery addresses</h1>
    <p className="text-sm text-gray-600 dark:text-gray-400">
      Used at checkout. You can set one primary address.
    </p>
  </div>

  <button
    onClick={openAdd}
    className="w-full sm:w-auto inline-flex items-center justify-center rounded-full
               bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
  >
    Add address
  </button>
</div>

      {/* loading state */}
      {loading && (
        <div className="grid gap-4 md:grid-cols-2">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="h-28 animate-pulse rounded-2xl bg-gray-100 dark:bg-gray-800" />
          ))}
        </div>
      )}

      {!loading && addresses.length === 0 && (
        <div className="rounded-2xl border border-dashed border-gray-300 p-8 text-center dark:border-gray-700">
          <p className="mb-3 text-gray-700 dark:text-gray-300">
            You don‚Äôt have any saved addresses yet.
          </p>
          <button
            onClick={openAdd}
            className="rounded-full bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
          >
            Add your first address
          </button>
        </div>
      )}

      {!loading && addresses.length > 0 && (
        <>
          {primary ? (
            <>
              <h2 className="mb-2 mt-4 text-sm font-medium uppercase tracking-wide text-gray-500 dark:text-gray-400">
                Primary delivery address
              </h2>
              <AddressCard
                addr={primary}
                onEdit={openEdit}
                onMakePrimary={handleMakePrimary}
                onDelete={handleDelete}
                pendingPrimaryId={pendingPrimaryId}
                pendingDeleteId={pendingDeleteId}
              />

              {others.length > 0 && (
                <>
                  <h2 className="mb-2 mt-6 text-sm font-medium uppercase tracking-wide text-gray-500 dark:text-gray-400">
                    Other delivery addresses
                  </h2>
                  <div className="grid gap-4 md:grid-cols-2">
                    {others.map((a) => (
                      <AddressCard
                        key={a.id}
                        addr={a}
                        onEdit={openEdit}
                        onMakePrimary={handleMakePrimary}
                        onDelete={handleDelete}
                        pendingPrimaryId={pendingPrimaryId}
                        pendingDeleteId={pendingDeleteId}
                      />
                    ))}
                  </div>
                </>
              )}
            </>
          ) : (
            // No primary yet ‚Üí show a single list without the ‚ÄúOther‚Äù heading
            <>
              <h2 className="mb-2 mt-4 text-sm font-medium uppercase tracking-wide text-gray-500 dark:text-gray-400">
                Delivery addresses
              </h2>
              <div className="grid gap-4 md:grid-cols-2">
                {addresses.map((a) => (
                  <AddressCard
                    key={a.id}
                    addr={a}
                    onEdit={openEdit}
                    onMakePrimary={handleMakePrimary}
                    onDelete={handleDelete}
                    pendingPrimaryId={pendingPrimaryId}
                    pendingDeleteId={pendingDeleteId}
                  />
                ))}
              </div>
            </>
          )}
        </>
      )}

      {/* ---------------- Bottom Sheet (Add/Edit) ---------------- */}
      <AnimatePresence>
        {sheetOpen && (
          <>
            {/* overlay */}
            <motion.div
              className="fixed inset-0 z-40 bg-black/40"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={closeSheet}
            />
            {/* sheet */}
            <motion.div
              className="fixed inset-x-0 bottom-0 z-50 max-h-[85vh] overflow-auto rounded-t-3xl
                         bg-white p-4 shadow-2xl dark:bg-gray-900 md:inset-y-10 md:mx-auto md:max-w-2xl md:rounded-2xl"
              initial={{ y: '100%' }}
              animate={{ y: 0 }}
              exit={{ y: '100%' }}
              transition={{ type: 'spring', stiffness: 320, damping: 32 }}
            >
              <div className="mx-auto w-full max-w-xl">
                <div className="mb-3 flex items-center justify-between">
                  <h3 className="text-lg font-semibold">
                    {editingAddress ? 'Edit address' : 'Add new address'}
                  </h3>
                  <button
                    onClick={closeSheet}
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/settings/page.jsx =====
// src/app/(pages)/new-dashboard/settings/page.jsx
"use client";

import React, { useEffect, useMemo, useState } from "react";
import { FaUserCog, FaLock, FaWallet, FaMapMarkerAlt, FaStore } from "react-icons/fa";
import { BASE_API_URL } from "@/app/constants";
import { getCleanToken } from "@/lib/getCleanToken";

export default function SettingsPage() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [now, setNow] = useState(new Date());
  const [payoutChecked, setPayoutChecked] = useState(false);
  const [hasPayout, setHasPayout] = useState(null); // null until probed

  // Format "time ago"
  const formatTimeAgo = (dateString) => {
    if (!dateString) return "Never";
    const date = new Date(dateString);
    const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    const rtf = new Intl.RelativeTimeFormat("en", { numeric: "auto" });

    if (seconds < 60) return rtf.format(-seconds, "second");
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return rtf.format(-minutes, "minute");
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return rtf.format(-hours, "hour");
    const days = Math.floor(hours / 24);
    if (days < 30) return rtf.format(-days, "day");
    return date.toLocaleString();
  };

  // Load dashboard payload
  useEffect(() => {
    const token = getCleanToken();
    if (!token) {
      setLoading(false);
      return;
    }
    (async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/users/me/dashboard/`, {
          headers: { Authorization: `Token ${token}` },
        });
        const data = await res.json();
        setUser(data);
      } catch {
        setUser(null);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // Probe payout info directly (more reliable than a flag)
  useEffect(() => {
    const token = getCleanToken();
    if (!token) return;
    (async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/payout-info/`, {
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) setHasPayout(false);
        else {
          const data = await res.json();
          setHasPayout(Boolean(data?.account_number));
        }
      } catch {
        setHasPayout(user?.has_payout_info ?? false);
      } finally {
        setPayoutChecked(true);
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Tick ‚Äúnow‚Äù every second for relative time
  useEffect(() => {
    const interval = setInterval(() => setNow(new Date()), 1000);
    return () => clearInterval(interval);
  }, []);

  const showEditPayout = useMemo(() => {
    return (hasPayout ?? user?.has_payout_info) === true;
  }, [hasPayout, user?.has_payout_info]);

  if (loading) return <div className="p-6 text-gray-500">Loading...</div>;
  if (!user) return <div className="p-6 text-red-500">Failed to load settings.</div>;

  const PayoutBadge = () =>
    showEditPayout ? (
      <span className="ml-2 px-2 py-0.5 text-xs rounded bg-gray-200 text-gray-700">Edit</span>
    ) : (
      <span className="ml-2 px-2 py-0.5 text-xs rounded bg-red-500 text-white">Setup Required</span>
    );

  const payoutDescription = showEditPayout
    ? "Update your bank account or mobile money payout details."
    : "Set up your bank account or mobile money payout details to receive payments.";

  // Seller / entitlement helpers
  const isSeller = Array.isArray(user?.account_type)
    ? user.account_type.some((t) => String(t).startsWith("seller"))
    : !!user?.is_seller;

  const entitlements = Array.isArray(user?.entitlements) ? user.entitlements : [];
  const canManageFaqs =
    entitlements.includes("storefront_unlock") ||
    entitlements.includes("faq_customization") ||
    entitlements.includes("allow_display_seller_contact");

  // Settings tiles
  const settingsLinks = [
    {
      title: "Profile Settings",
      description: "Update your name, email, and profile picture.",
      icon: <FaUserCog className="text-blue-500 text-2xl" />,
      href: "/new-dashboard/settings/profile",
      badge: !user.profile_complete ? (
        <span className="ml-2 px-2 py-0.5 text-xs rounded bg-yellow-500 text-white">Incomplete</span>
      ) : null,
    },
    {
      title: "Security Settings",
      description: "Change your password and manage two-factor authentication.",
      icon: <FaLock className="text-green-500 text-2xl" />,
      href: "/new-dashboard/settings/security",
      badge: !user.is_verified ? (
        <span className="ml-2 px-2 py-0.5 text-xs rounded bg-red-500 text-white">Verify</span>
      ) : null,
    },
    {
      title: "Payout Settings",
      description: payoutDescription,
      icon: <FaWallet className="text-purple-500 text-2xl" />,
      href: "/new-dashboard/settings/payout",
      badge: payoutChecked ? <PayoutBadge /> : null,
    },
    ...(user.account_type?.includes?.("buyer")
      ? [
          {
            title: "Delivery Addresses",
            description: "Manage your saved delivery addresses for faster checkout.",
            icon: <FaMapMarkerAlt className="text-orange-500 text-2xl" />,
            href: "/new-dashboard/settings/addresses",
          },
        ]
      : []),
    ...(isSeller
      ? [
          {
            title: "Store Settings",
            description: canManageFaqs
              ? "Edit shop profile, banner & FAQs that boost your shop SEO."
              : "Edit shop profile & banner. Upgrade to unlock custom FAQs.",
            icon: <FaStore className="text-indigo-500 text-2xl" />,
            href: "/new-dashboard/settings/shop",
            badge: canManageFaqs ? null : (
              <span className="ml-2 px-2 py-0.5 text-xs rounded bg-gray-200 text-gray-700">
                Limited
              </span>
            ),
          },
        ]
      : []),
  ];

  const formatAccountTypes = (types) => {
    if (!types || !Array.isArray(types)) return "‚Äî";
    const labelMap = {
      buyer: "Buyer",
      seller_private: "Seller (Private)",
      seller_business: "Seller (Business)",
      agent: "Sourcing Agent",
    };
    return types.map((t) => labelMap[t] || t).join(", ");
  };

  const AccountOverview = () => (
    <div className="border border-gray-200 dark:border-gray-700 rounded-xl bg-white dark:bg-gray-800 p-5">
      <h3 className="text-lg font-semibold mb-4 dark:text-white">Account Overview</h3>
      <ul className="space-y-3 text-sm">
        <li className="flex justify-between">
          <span className="text-gray-600 dark:text-gray-400">Account Type</span>
          <span className="font-medium dark:text-white">{formatAccountTypes(user.account_type)}</span>
        </li>
        <li className="flex justify-between items-center">
          <span className="text-gray-600 dark:text-gray-400">Verification</span>
          <span className={`font-medium ${user.is_verified ? "text-green-500" : "text-red-500"}`}>
            {user.is_verified ? "Verified" : "Not Verified"}
          </span>
        </li>
        <li className="flex justify-between">
          <span className="text-gray-600 dark:text-gray-400">Last Login</span>
          <span className="font-medium dark:text-white">{formatTimeAgo(user.last_login)}</span>
        </li>
        <li className="flex justify-between">
          <span className="text-gray-600 dark:text-gray-400">Current Plan</span>
          <span className="font-medium dark:text-white">{user.seller_plan_name || "None"}</span>
        </li>
      </ul>

      <div className="mt-4 flex gap-2 flex-wrap">
        {!user.is_verified && (
          <a
            href="/new-dashboard/settings/security"
            className="text-xs px-3 py-1 rounded bg-red-500 text-white hover:bg-red-600"
          >
            Verify Now
          </a>
        )}
        {!showEditPayout && (
          <a
            href="/new-dashboard/settings/payout"
            className="text-xs px-3 py-1 rounded bg-blue-600 text-white hover:bg-blue-700"
          >
            Set Up Payouts
          </a>
        )}
      </div>
    </div>
  );

  return (
    <div className="p-2">
      <div className="max-w-7xl mx-auto flex flex-col lg:flex-row gap-6">
        {/* Main Settings */}
        <div className="flex-1">
          <h1 className="text-2xl font-semibold mb-2 dark:text-white">Settings</h1>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            Manage your account, security, and payout preferences all in one place.
          </p>

          <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
            {settingsLinks.map((item, index) => (
              <a
                key={index}
                href={item.href}
                className="h-full group rounded-xl border border-gray-200 dark:border-gray-700 p-5 bg-white dark:bg-gray-800 hover:shadow-lg hover:-translate-y-1 transition-all duration-200 flex justify-between items-start"
              >
                <div className="flex items-start gap-4">
                  <div className="p-3 rounded-lg bg-gray-100 dark:bg-gray-700">{item.icon}</div>
                  <div>
                    <h2 className="text-lg font-medium text-gray-900 dark:text-white flex items-center">
                      {item.title}
                      {item.badge}
                    </h2>
                    <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                      {item.description}
                    </p>
                  </div>
                </div>
                <span className="text-gray-400 group-hover:text-blue-500 transition-colors">‚Üí</span>
              </a>
            ))}
          </div>
        </div>

        {/* Sidebar Overview */}
        <aside className="lg:w-64 flex-shrink-0">
          <div className="sticky top-6">
            <AccountOverview />
          </div>
        </aside>
      </div>
    </div>
  );
}

===== src/app/(pages)/new-dashboard/settings/payout/page.jsx =====
//src/app/(pages)/new-dashboard/settings/payout/page.jsx
"use client";

import PayoutSettings from "@/components/new-dashboard/settings/PayoutSettings";

export default function PayoutSettingsPage() {
  return (
    <main className="px-4 py-6">
      <PayoutSettings />
    </main>
  );
}



===== src/app/(pages)/new-dashboard/settings/profile/page.jsx =====
//src/app/(pages)/new-dashboard/settings/profile/page.jsx
"use client"; // Ensures it's a Client Component if needed

import React from "react";

export default function SettingsPage() {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-semibold mb-4">Settings</h1>
      <p className="text-gray-600">
        This is the main settings dashboard. Customize your profile, security,
        and payout settings here.
      </p>

      {/* Dummy links to sub-settings pages */}
      <ul className="mt-6 space-y-2">
        <li>
          <a
            href="/new-dashboard/settings/profile"
            className="text-blue-500 hover:underline"
          >
            Profile Settings
          </a>
        </li>
        <li>
          <a
            href="/new-dashboard/settings/security"
            className="text-blue-500 hover:underline"
          >
            Security Settings
          </a>
        </li>
        <li>
          <a
            href="/new-dashboard/settings/payout"
            className="text-blue-500 hover:underline"
          >
            Payout Settings
          </a>
        </li>
      </ul>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/settings/security/page.jsx =====
//src/app/(pages)/new-dashboard/settings/security/page.jsx
"use client"; // Ensures it's a Client Component if needed

import React from "react";

export default function SettingsPage() {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-semibold mb-4">Settings</h1>
      <p className="text-gray-600">
        This is the main settings dashboard. Customize your profile, security,
        and payout settings here.
      </p>

      {/* Dummy links to sub-settings pages */}
      <ul className="mt-6 space-y-2">
        <li>
          <a
            href="/new-dashboard/settings/profile"
            className="text-blue-500 hover:underline"
          >
            Profile Settings
          </a>
        </li>
        <li>
          <a
            href="/new-dashboard/settings/security"
            className="text-blue-500 hover:underline"
          >
            Security Settings
          </a>
        </li>
        <li>
          <a
            href="/new-dashboard/settings/payout"
            className="text-blue-500 hover:underline"
          >
            Payout Settings
          </a>
        </li>
      </ul>
    </div>
  );
}


===== src/app/(pages)/new-dashboard/settings/shop/page.jsx =====
// src/app/(pages)/new-dashboard/settings/shop/page.jsx
"use client";

import React, {
  useEffect,
  useMemo,
  useRef,
  useState,
  useCallback,
} from "react";
import Image from "next/image";
import { Editor } from "@tinymce/tinymce-react";
import { HiChevronDown } from "react-icons/hi";

import { BASE_API_URL } from "@/app/constants";
import { getCleanToken } from "@/lib/getCleanToken";
import FAQsEditor from "@/components/new-dashboard/settings/FAQs";

/* ----------------------- small helpers ----------------------- */
function Section({ id, title, subtitle, open, onToggle, children, actions }) {
  return (
    <section id={id} className="mb-4">
      <button
        type="button"
        onClick={onToggle}
        className="w-full flex items-center justify-between rounded-md bg-white dark:bg-slate-900 border border-gray-200 dark:border-gray-800 px-4 py-3 text-left"
        aria-expanded={open}
        aria-controls={`${id}-panel`}
      >
        <div className="min-w-0">
          <h2 className="font-semibold text-base">{title}</h2>
          {subtitle ? (
            <p className="text-xs text-gray-500 mt-0.5">{subtitle}</p>
          ) : null}
        </div>
        <div className="flex items-center gap-3">
          {actions}
          <HiChevronDown
            className={`h-5 w-5 transition-transform ${
              open ? "rotate-180" : ""
            }`}
          />
        </div>
      </button>
      <div
        id={`${id}-panel`}
        className={`overflow-hidden transition-[max-height] duration-300 ${
          open ? "max-h-[3000px]" : "max-h-0"
        }`}
      >
        <div className="p-4 bg-white dark:bg-slate-900 border-x border-b border-gray-200 dark:border-gray-800 rounded-b-md">
          {children}
        </div>
      </div>
    </section>
  );
}

/* -------------------------- page ----------------------------- */
export default function ShopSettingsPage() {
  const [shop, setShop] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);

  // profile/branding
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [phone, setPhone] = useState("");
  const [bgColor, setBgColor] = useState("#E8EAED");
  const [logoFile, setLogoFile] = useState(null);
  const [bannerFile, setBannerFile] = useState(null);

  // SEO article
  const [seoContent, setSeoContent] = useState("");
  const [seoSaving, setSeoSaving] = useState(false);
  const [seoSavedAt, setSeoSavedAt] = useState(null);
  const [seoError, setSeoError] = useState(null);
  const editorRef = useRef(null);

  // layout: desktop keeps all open; mobile collapses
  const [isDesktop, setIsDesktop] = useState(true);
  useEffect(() => {
    const update = () => setIsDesktop(window.innerWidth >= 1024);
    update();
    window.addEventListener("resize", update);
    return () => window.removeEventListener("resize", update);
  }, []);

  const [openProfile, setOpenProfile] = useState(true);
  const [openSeo, setOpenSeo] = useState(true);
  const [openFaqs, setOpenFaqs] = useState(true);
  useEffect(() => {
    // On mount, collapse on mobile, expand on desktop
    setOpenProfile(isDesktop);
    setOpenSeo(isDesktop);
    setOpenFaqs(isDesktop);
  }, [isDesktop]);

  const token = useMemo(() => getCleanToken(), []);

  // load my shop
  useEffect(() => {
    (async () => {
      try {
        const r = await fetch(`${BASE_API_URL}/api/shops/my/`, {
          headers: token ? { Authorization: `Token ${token}` } : {},
          cache: "no-store",
        });
        if (!r.ok) throw new Error(`Failed to load shop (${r.status})`);
        const data = await r.json();

        setShop(data);
        setName(data?.name || "");
        setDescription(data?.description || "");
        setPhone(data?.seller_contact_number || "");
        setBgColor(data?.bg_color || "#E8EAED");
        setSeoContent(data?.seo_content || "");
      } catch (e) {
        setError(e?.message || "Failed to load shop.");
      } finally {
        setLoading(false);
      }
    })();
  }, [token]);

  const logoUrl = shop?.shop_logo || null;
  const bannerUrl = shop?.top_banner || null;

  // entitlements
  const canEditSeo = useMemo(() => {
    const ents = new Set(Array.isArray(shop?.entitlements) ? shop.entitlements : []);
    return ents.has("seo_article") || ents.has("storefront_unlock");
  }, [shop?.entitlements]);

  /* ---------------------- actions ----------------------- */
  const handleSave = async (e) => {
    e?.preventDefault?.();
    if (!shop?.slug) return;

    setSaving(true);
    setError(null);

    try {
      const fd = new FormData();
      if (name) fd.append("name", name);
      if (description !== undefined) fd.append("description", description);
      if (phone) fd.append("seller_contact_number", phone);
      if (bgColor) fd.append("bg_color", bgColor);
      if (logoFile) fd.append("shop_logo_upload", logoFile);
      if (bannerFile) fd.append("top_banner_upload", bannerFile);

      const r = await fetch(`${BASE_API_URL}/api/shops/${shop.slug}/update/`, {
        method: "PATCH",
        headers: token ? { Authorization: `Token ${token}` } : {},
        body: fd,
      });

      if (!r.ok) {
        const j = await r.json().catch(() => ({}));
        throw new Error(j?.detail || `Save failed (${r.status})`);
      }

      const updated = await r.json();
      setShop(updated);
      setLogoFile(null);
      setBannerFile(null);
    } catch (e) {
      setError(e?.message || "Could not save changes.");
    } finally {
      setSaving(false);
    }
  };

  const handleSaveSeo = async () => {
    if (!shop?.slug) return;
    setSeoSaving(true);
    setSeoError(null);
    try {
      const html =
        editorRef.current?.getContent?.({ format: "html" }) ?? seoContent ?? "";
      const fd = new FormData();
      fd.append("seo_content", html);

      const r = await fetch(`${BASE_API_URL}/api/shops/${shop.slug}/update/`, {
        method: "PATCH",
        headers: token ? { Authorization: `Token ${token}` } : {},
        body: fd,
      });

      if (!r.ok) {
        const j = await r.json().catch(() => ({}));
        throw new Error(j?.detail || `Save failed (${r.status})`);
      }

      const updated = await r.json();
      setShop(updated);
      setSeoContent(updated?.seo_content || html);
      setSeoSavedAt(new Date());
    } catch (e) {
      setSeoError(e?.message || "Could not save SEO article.");
    } finally {
      setSeoSaving(false);
    }
  };

  /* -------------------- TinyMCE config ------------------- */
  const tinymceApiKey = process.env.NEXT_PUBLIC_TINYMCE_API_KEY || "";
  const editorInit = useMemo(
    () => ({
      height: 520,
      menubar: "file edit view insert format tools table help",
      plugins:
        "advlist autolink lists link image charmap preview anchor " +
        "searchreplace visualblocks code fullscreen " +
        "insertdatetime media table code help wordcount autoresize",
      toolbar:
        "undo redo | blocks | bold italic underline | " +
        "alignleft aligncenter alignright | bullist numlist | " +
        "link table blockquote | removeformat | preview code",
      block_formats:
        "Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Blockquote=blockquote",
      branding: false,
      default_link_target: "_self",
      convert_urls: false,
      toolbar_mode: "sliding",
      content_style:
        "body{font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,'Helvetica Neue',Arial,'Noto Sans',sans-serif;line-height:1.65;font-size:16px} h1,h2,h3{margin-top:1.25em} ul,ol{padding-left:1.25em}",
      setup: (editor) => {
        editorRef.current = editor;
      },
    }),
    []
  );

  // SEO template
  const buildSeoTemplate = useCallback(() => {
    const shopName = shop?.name || "Our Shop";
    const town = shop?.user?.town || "";
    const country = shop?.user?.country_name || shop?.user?.country || "";
    return `
<h1>Machines in ${country || "Ghana"} ‚Äî ${shopName}</h1>
<p><em>Updated ${new Date().toLocaleDateString()}</em></p>

<h2>Why buy from ${shopName}?</h2>
<ul>
  <li>Verified seller with buyer protection</li>
  <li>Fast delivery in ${town || country || "your area"}</li>
  <li>Local support, warranty options, and genuine parts</li>
</ul>

<h2>Top Categories</h2>
<ul>
  <li><a href="/shops/${shop?.slug}?category=generators">Generators</a></li>
  <li><a href="/shops/${shop?.slug}?category=construction">Construction Equipment</a></li>
  <li><a href="/shops/${shop?.slug}?category=agriculture">Agricultural Machinery</a></li>
</ul>

<h2>Buying Guide</h2>
<h3>Power & Capacity</h3>
<p>Match power and capacity to your intended use. Consider duty cycle, fuel type, and efficiency.</p>
<h3>Condition & Warranty</h3>
<p>We list condition clearly and offer warranty options on select items.</p>
<h3>Delivery & Installation</h3>
<p>We deliver nationwide with optional installation and training.</p>

<h2>How to Order</h2>
<ol>
  <li>Open a product and review specs, price, and delivery.</li>
  <li>Click <strong>Add to Basket</strong> or <strong>Buy Now</strong>.</li>
  <li>Choose address and complete checkout securely.</li>
</ol>

<p><strong>Need help?</strong> Contact <a href="/shops/${shop?.slug}">${shopName}</a> for quotes or bulk orders.</p>
`.trim();
  }, [shop?.name, shop?.slug, shop?.user?.town, shop?.user?.country, shop?.user?.country_name]);

  const applyTemplateIfEmpty = () => {
    const txt = (editorRef.current?.getContent?.({ format: "text" }) || "").trim();
    if (!txt) {
      const tpl = buildSeoTemplate();
      editorRef.current?.setContent?.(tpl);
      setSeoContent(tpl);
    }
  };

  const wordCount = useMemo(() => {
    const text = String(seoContent || "")
      .replace(/<style[\s\S]*?<\/style>/gi, " ")
      .replace(/<script[\s\S]*?<\/script>/gi, " ")
      .replace(/<[^>]+>/g, " ")
      .replace(/\s+/g, " ")
      .trim();
    return text ? text.split(" ").length : 0;
  }, [seoContent]);

  /* ----------------------- render ------------------------ */
  if (loading) return <div className="p-6 text-gray-500">Loading‚Ä¶</div>;
  if (!shop) return <div className="p-6 text-red-500">{error || "Shop not found."}</div>;

  return (
    <div className="p-4 sm:p-6 max-w-3xl mx-auto">
      <h1 className="text-2xl font-semibold mb-4">Store Settings</h1>

      {error && (
        <div className="mb-4 rounded border border-red-200 bg-red-50 text-red-700 p-3 text-sm">
          {error}
        </div>
      )}

      {/* Profile / Branding */}
      <Section
        id="profile"
        title="Profile & Branding"
        subtitle="Shop name, intro, phone, theme color, and media"
        open={openProfile}
        onToggle={() => setOpenProfile((v) => !v)}
        actions={
          <button
            onClick={handleSave}
            disabled={saving}
            className="text-xs px-3 py-1.5 rounded bg-violet-600 text-white hover:bg-violet-700 disabled:opacity-60"
          >
            {saving ? "Saving‚Ä¶" : "Save"}
          </button>
        }
      >
        <form onSubmit={handleSave} className="grid gap-6">
          {/* Shop name */}
          <div>
            <label className="block text-sm font-medium mb-1">Shop Name</label>
            <input
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full rounded border px-3 py-2"
              placeholder="Your shop name"
            />
          </div>

          {/* Short intro */}
          <div>
            <label className="block text-sm font-medium mb-1">Public Intro (short)</label>
            <textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="w-full rounded border px-3 py-2 h-28"
              placeholder="A brief intro shown on the shop page."
            />
          </div>

          {/* Phone */}
          <div>
            <label className="block text-sm font-medium mb-1">Contact Phone Number</label>
            <input
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full rounded border px-3 py-2"
              placeholder="+233201234567"
            />
            <p className="text-xs text-gray-500 mt-1">
              Use international format, e.g., +233245123456
            </p>
          </div>

          {/* BG color */}
          <div>
            <label className="block text-sm font-medium mb-1">Background Color</label>
            <input
              type="color"
              value={bgColor}
              onChange={(e) => setBgColor(e.target.value)}
              className="h-10 w-16 p-0 border rounded"
            />
          </div>

          {/* Logo */}
          <div>
            <label className="block text-sm font-medium mb-2">Logo</label>
            <div className="flex items-center gap-4">
              <div className="h-20 w-32 bg-gray-100 rounded overflow-hidden flex items-center justify-center">
                {logoFile ? (
                  <Image
                    src={URL.createObjectURL(logoFile)}
                    alt="logo preview"
                    width={128}
                    height={80}
                    className="object-cover h-full w-full"
                  />
                ) : shop?.shop_logo ? (
                  <Image
                    src={shop.shop_logo}
                    alt="current logo"
                    width={128}
                    height={80}
                    className="object-cover h-full w-full"
                  />
                ) : (
                  <span className="text-xs text-gray-500">No logo</span>
                )}
              </div>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/new-dashboard/shipped-orders/page.jsx =====
"use client";

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import { FiSearch } from "react-icons/fi";
import {
  MdRemoveRedEye,
  MdDelete,
  MdCheckCircle,
  MdOutlineRemoveRedEye,
} from "react-icons/md";
import { FaEdit } from "react-icons/fa";
import Pagination from "@/components/Pagination";

const PAGE_SIZE = 20;

export default function ShippedOrders() {
  const { token, user } = useSelector((state) => state.auth);
  const router = useRouter();

  const [orderItems, setOrderItems] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);
  const [deletingId, setDeletingId] = useState(null);

  useEffect(() => {
    if (!token) return;

    const fetchOrderItems = async () => {
      setLoading(true);
      try {
        // build query params
        const params = new URLSearchParams();
        params.append("page", currentPage);
        // if there‚Äôs a search term, hit the search endpoint
        const isSearch = Boolean(searchTerm.trim());
        if (isSearch) {
          params.append("q", searchTerm.trim());
        }

        const url = isSearch
          ? `https://media.upfrica.com/api/seller/orders/search/?${params.toString()}`
          : `https://media.upfrica.com/api/seller/shipped-order-items/?${params.toString()}`;

        const res = await fetch(url, {
          method: "GET",
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch");
        const data = await res.json();

        setOrderItems(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchOrderItems();
  }, [token, currentPage, searchTerm]);

  const handleView = (slug) => {
    router.push(`/${user?.country?.toLocaleDateString() || "gh"}/${slug}`);
  };
  const handleEdit = (id) => router.push(`/new-dashboard/all-orders/${id}`);
  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this item?")) return;
    setDeletingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/seller/order-items/${id}/`,
        { method: "DELETE", headers: { Authorization: `Token ${token}` } },
      );
      if (!res.ok) throw new Error("Delete failed");
      setOrderItems((prev) => prev.filter((item) => item.id !== id));
    } catch (err) {
      console.error(err);
    } finally {
      setDeletingId(null);
    }
  };

  return (
    <div className="w-full mx-auto p-6">
      <h1 className="text-2xl font-semibold mb-4">Shipped Orders</h1>

      {/* Search + Pagination */}
      <div className="flex items-center justify-between mb-4">
        <div className="relative w-1/2">
          <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setCurrentPage(1);
            }}
            placeholder="Search orders with product or order ID ..."
            className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none font-medium"
          />
        </div>
        {totalPages > 1 && (
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        )}
      </div>

      {loading ? (
        <div className="space-y-6">
          {[...Array(3)].map((_, i) => (
            <div
              key={i}
              className="animate-pulse bg-gray-50 p-4 rounded-lg h-24"
            />
          ))}
        </div>
      ) : (
        <div className="space-y-6">
          {orderItems.map((item) => {
            const { product } = item;
            const statusText =
              item.dispatch_status === 0 ? "Pending" : "Dispatched";
            const statusColor = item.dispatch_status === 0 ? "yellow" : "green";

            return (
              <div key={item.id} className="space-y-0 ">
                <div
                  className="
                  flex items-center justify-between 
                  bg-gray-50 p-4 
                  rounded-t-lg 
                  shadow-[0_-4px_6px_rgba(0,0,0,0.1)]
                "
                >
                  <div className="flex space-x-6 text-sm text-gray-700 ">
                    <div>
                      <span className="font-medium">
                        Order #{item.order_id}
                      </span>
                    </div>
                    <div>
                      <span className="font-medium">Date</span>{" "}
                      {new Date(item.order_date).toLocaleDateString()}
                    </div>
                    <div>
                      <span className="font-medium">Total</span> GHS{" "}
                      {(item.price_cents / 100).toFixed(2)}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <MdCheckCircle
                      className={`w-6 h-6 text-${statusColor}-500`}
                    />
                    <span className={`text-${statusColor}-800 font-semibold`}>
                      {statusText}
                    </span>
                  </div>
                </div>

                {/* Product Detail ‚Äî bottom corners rounded, bottom‚Äêonly shadow */}
                <div
                  className="
    bg-white px-4 py-3 
    rounded-b-lg 
    shadow-[0_4px_6px_rgba(0,0,0,0.1)]
  "
                >
                  <div className="flex items-start">
                    {product.product_images[0] ? (
                      <img
                        src={product.product_images[0]}
                        alt={product.title}
                        className="w-20 h-20 object-cover rounded-lg mr-4"
                      />
                    ) : (
                      <div className="w-20 h-20 bg-gray-100 rounded-lg mr-4" />
                    )}
                    <div className="flex-1">
                      <h2 className="font-semibold text-lg">{product.title}</h2>
                      <div className="mt-2 space-y-1 text-sm text-gray-600">
                        <div>
                          <span className="font-medium text-gray-800">
                            Status:
                          </span>{" "}
                          {statusText}
                        </div>
                        <div>
                          <span className="font-medium text-gray-800">
                            Item ID:
                          </span>{" "}
                          {item.id}
                        </div>
                        <div>
                          <span className="font-medium text-gray-800">
                            Price:
                          </span>{" "}
                          GHS {(item.price_cents / 100).toFixed(2)}
                        </div>
                      </div>
                    </div>

                    <div className="py-3 flex space-x-2">
                      <button
                        onClick={() => handleEdit(item.id)}
                        className="p-2 bg-gray-100 hover:bg-blue-200 rounded-full text-gray-700 hover:text-blue-700"
                        aria-label="Edit"
                      >
                        <FaEdit size={20} />
                      </button>
                      <button
                        onClick={() => handleDelete(item.id)}
                        disabled={deletingId === item.id}
                        className={`
          p-2 rounded-full font-bold
          ${
            deletingId === item.id
              ? "bg-gray-100 text-gray-400 cursor-not-allowed"
              : "bg-gray-100 hover:bg-red-200 hover:text-red-700"
          }
        `}
                        aria-label="Delete"
                      >
                        <MdDelete size={20} />
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {totalPages > 1 && (
        <div className="flex justify-center mt-4">
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        </div>
      )}
    </div>
  );
}


===== src/app/(pages)/new-dashboard/temp/page.jsx =====
//src/app/(pages)/new-dashboard/temp/page.jsx
export default function TempPage() {
  return (
    <div className="p-8 text-center text-gray-400">Switching dashboard...</div>
  );
}


===== src/app/(pages)/onboarding/account-type/page.jsx =====
"use client";

import { useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { toast } from "sonner";
import { useAuth } from "@/contexts/AuthContext";
import AccountTypeAndPlan from "@/components/onboarding/AccountTypeAndPlan";

export default function AccountTypePage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const paymentSuccess = searchParams.get("payment") === "success";
  const { refreshUser } = useAuth();

  useEffect(() => {
    if (paymentSuccess) {
      toast.success("‚úÖ Payment successful, your plan is active!");
      refreshUser();
      router.push("/new-dashboard");
    }
  }, [paymentSuccess, refreshUser, router]);

  return <AccountTypeAndPlan />;
}


===== src/app/(pages)/order/[section]/page.jsx =====
// app/orders/[section]/page.js
"use client";
import React from "react";
import { useParams } from "next/navigation";
import OrderCart from "@/components/order/OrderCart";

const OrderSectionPage = () => {
  const { section } = useParams();

  let content;
  switch (section) {
    case "order":
      content = <OrderCart />;
      break;
    case "your-sales":
      content = <p>sale page</p>;
      break;
    case "orders":
      content = <p>order page</p>;
      break;
    case "cancellations":
      content = <p>cancellations page</p>;
      break;
    case "returns":
      content = <p>returns page</p>;
      break;
    default:
      content = <AllOrders />; // Default Content
  }

  return <div>{content}</div>;
};

export default OrderSectionPage;


===== src/app/(pages)/order/layout.js =====
"use client";
import LoadingSpinner from "@/components/LoadingSpinner";
import ProfileCard from "@/components/order/ProfileCard";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import OrderBord from "@/components/order/OrderBord";
import { OrderContext } from "@/contexts/OrderContext"; // Import the context

const OrderPageLayout = ({ children }) => {
  const [data, setData] = useState([]);
  const [error, setError] = useState(null);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const storedUser =
      typeof window !== "undefined" ? localStorage.getItem("user") : null;
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    } else {
      setError("No user token found");
    }
  }, []);

  useEffect(() => {
    const fetchOrders = async () => {
      if (user?.token) {
        try {
          const response = await fetch(
            "https://upfrica-staging.herokuapp.com/api/v1/orders",
            {
              headers: {
                Authorization: `Bearer ${user.token}`,
                "Content-Type": "application/json",
              },
            },
          );
          if (!response.ok)
            throw new Error(`Server responded with status ${response.status}`);
          const result = await response.json();
          setData(result?.orders || []);
        } catch (error) {
          setError(error.message);
        } finally {
          setLoading(false);
        }
      }
    };

    fetchOrders();
  }, [user]);

  if (loading)
    return (
      <div className="text-center">
        <LoadingSpinner />
      </div>
    );
  if (error) return <div className="text-red-500 text-center">{error}</div>;

  return (
    <OrderContext.Provider value={{ data, error, loading, user, setData }}>
      <div className="bg-gray-50">
        <div className="container mx-auto grid grid-cols-1 md:grid-cols-4 py-5 gap-10">
          <div className="col-span-1">
            <ProfileCard data={data} />
          </div>
          <div className="col-span-3">
            <div className="p-6">
              <h2 className="text-3xl font-bold text-center mb-6">My Orders</h2>
              <OrderBord />
              {/* Render children components */}
              {children}
            </div>
          </div>
        </div>
      </div>
    </OrderContext.Provider>
  );
};

export default OrderPageLayout;


===== src/app/(pages)/order/page.jsx =====
// app/orders/page.js
import React from "react";

const OrdersHome = () => {
  return (
    <div className="text-center">
      <h1>Welcome to Orders Section</h1>
      <p>Select a category from the navigation above.</p>
    </div>
  );
};

export default OrdersHome;


===== src/app/(pages)/orders/all/page.jsx =====
// app/my-orders/all/page.tsx
export default function AllOrdersPage() {
  return (
    <div>
      <h3>All Orders</h3>
      <p>This is your All Orders page.</p>
    </div>
  );
}


===== src/app/(pages)/orders/cancellations/page.jsx =====
export default function CancellationsPage() {
  return <h3>Your Cancellations</h3>;
}


===== src/app/(pages)/orders/layout.js =====
"use client";
// app/my-orders/layout.tsx
import Link from "next/link";
import { usePathname } from "next/navigation";

export default function Layout({ children }) {
  const pathname = usePathname();

  const tabs = [
    { name: "All Orders", href: "/orders/all" },
    { name: "Your Sales", href: "/orders/sales" },
    { name: "Orders", href: "/orders/purchases" },
    { name: "Cancellations", href: "/orders/cancellations" },
    { name: "Returns", href: "/orders/returns" },
  ];

  return (
    <div style={{ padding: "20px" }}>
      <h2>My Orders</h2>
      <div style={{ display: "flex", gap: "10px", marginBottom: "20px" }}>
        {tabs.map((tab) => (
          <Link
            key={tab.href}
            href={tab.href}
            style={{
              padding: "8px 12px",
              backgroundColor: pathname === tab.href ? "#007bff" : "#f0f0f0",
              color: pathname === tab.href ? "white" : "black",
              borderRadius: "5px",
              textDecoration: "none",
            }}
          >
            {tab.name}
          </Link>
        ))}
      </div>
      {children}
    </div>
  );
}


===== src/app/(pages)/orders/page.jsx =====
// app/my-orders/page.tsx
import { redirect } from "next/navigation";

export default function Page() {
  redirect("/orders/all"); // Default to All Orders
}


===== src/app/(pages)/orders/purchases/page.jsx =====
export default function PurchasesPage() {
  return <h3>Your Purchases</h3>;
}


===== src/app/(pages)/orders/returns/page.jsx =====
export default function ReturnsPage() {
  return <h3>Your Returns</h3>;
}


===== src/app/(pages)/orders/sales/page.jsx =====
export default function SalesPage() {
  return <h3>Your Sales</h3>;
}


===== src/app/(pages)/phoenixcoded/page.jsx =====
"use client";
import Link from "next/link";
import React, { useState } from "react";
import {
  FaCheckCircle,
  FaClock,
  FaTimesCircle,
  FaEye,
  FaEdit,
  FaTrash,
} from "react-icons/fa";

const statusIcons = {
  success: (
    <FaCheckCircle
      className="text-green-500 text-lg mx-auto"
      title="In Stock"
    />
  ),
  warning: (
    <FaClock
      className="text-yellow-500 text-lg mx-auto"
      title="Limited Stock"
    />
  ),
  danger: (
    <FaTimesCircle
      className="text-red-500 text-lg mx-auto"
      title="Out of Stock"
    />
  ),
};

const sampleProducts = [
  {
    id: 1,
    name: "Apple Series 4 GPS A38 MM Space",
    description: "Apple Watch SE Smartwatch",
    category: "Electronics, Laptop",
    price: 14.59,
    qty: 70,
    status: "success",
    image:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-1.jpg",
    brand:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-brand-1.png",
  },
  {
    id: 2,
    name: "Boat On-Ear Wireless",
    description: "Mic(Bluetooth 4.2, Rockerz 450R)",
    category: "Electronics, Headphones",
    price: 81.99,
    qty: 45,
    status: "warning",
    image:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-2.jpg",
    brand:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-brand-1.png",
  },
  {
    id: 3,
    name: "Fitbit MX30 Smart Watch",
    description: "(MX30- waterproof) watch",
    category: "Fashion, Watch",
    price: 49.9,
    qty: 21,
    status: "danger",
    image:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-3.jpg",
    brand:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-brand-1.png",
  },
  {
    id: 4,
    name: "Asus Zenbook Pro",
    description: "High performance ultrabook",
    category: "Electronics, Laptop",
    price: 899.99,
    qty: 12,
    status: "warning",
    image:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-4.jpg",
    brand:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-brand-1.png",
  },
  {
    id: 5,
    name: "Sony WH-1000XM5",
    description: "Noise Cancelling Headphones",
    category: "Electronics, Headphones",
    price: 299.99,
    qty: 25,
    status: "success",
    image:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-5.jpg",
    brand:
      "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-brand-1.png",
  },
];

const ProductTablePage = () => {
  const [perPage, setPerPage] = useState(5);
  const [search, setSearch] = useState("");

  const filteredProducts = sampleProducts.filter((product) =>
    product.name.toLowerCase().includes(search.toLowerCase()),
  );

  return (
    <div className="">
      <div className="min-h-screen">
        <div className="">
          {/* Add Button */}
          <div className="flex justify-end mb-6">
            <a
              href="/application/ecom_product-add.html"
              className="bg-[#04A9F5] text-white px-3 py-2 rounded hover:bg-blue-700 transition flex items-center gap-2 text-sm font-medium"
            >
              <span className="text-xl">Ôºã</span> Add Product
            </a>
          </div>

          {/* Controls */}
          <div className="flex flex-col md:flex-row justify-between gap-4 mb-6">
            <div className="flex items-center gap-2">
              <label className="text-sm text-gray-700">Show</label>
              <select
                name="per-page"
                value={perPage}
                onChange={(e) => setPerPage(Number(e.target.value))}
                className="border border-gray-300 rounded px-3 py-1 text-sm focus:ring-2 focus:ring-blue-400"
              >
                {[5, 10, 15, 20, 25].map((n) => (
                  <option key={n} value={n}>
                    {n}
                  </option>
                ))}
              </select>
              <span className="text-sm text-gray-700">entries</span>
            </div>

            <div>
              <input
                type="search"
                placeholder="Search product..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="border border-gray-300 rounded px-4 py-2 lg:py-3 w-full md:w-64 text-sm focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Table */}
          <div className="overflow-auto bg-white rounded-md  border border-gray-200">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-100 text-gray-600 uppercase text-xs">
                <tr>
                  <th className="text-right p-3 w-[5%]">#</th>
                  <th className="text-left p-3 w-[35%]">Product Detail</th>
                  <th className="text-left p-3 w-[20%]">Categories</th>
                  <th className="text-right p-3 w-[7%]">Price</th>
                  <th className="text-right p-3 w-[6%]">Qty</th>
                  <th className="text-center p-3 w-[8%]">Brand</th>
                  <th className="text-center p-3 w-[9%]">Status</th>
                  <th className="text-center p-3 w-[10%]">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredProducts.slice(0, perPage).map((product) => (
                  <tr
                    key={product.id}
                    className="border-t hover:bg-gray-50 transition"
                  >
                    <td className="text-right p-3 font-medium">{product.id}</td>
                    <td className="p-3">
                      <div className="flex items-center gap-3">
                        <img
                          src={product.image}
                          alt={product.name}
                          className="w-12 h-12 rounded object-cover border"
                        />
                        <div className="min-w-0">
                          <p className="font-semibold truncate">
                            {product.name}
                          </p>
                          <p className="text-gray-500 text-xs truncate">
                            {product.description}
                          </p>
                        </div>
                      </div>
                    </td>
                    <td className="p-3">{product.category}</td>
                    <td className="text-right p-3">
                      ${product.price.toFixed(2)}
                    </td>
                    <td className="text-right p-3">{product.qty}</td>

                    {/* Brand */}
                    <td className="text-center p-3">
                      <img
                        src={product.brand}
                        alt="Brand"
                        className="w-10 h-10 object-contain mx-auto"
                      />
                    </td>

                    {/* Status */}
                    <td className="text-center p-3">
                      {statusIcons[product.status]}
                    </td>

                    {/* Actions */}
                    <td className="text-center p-3">
                      <div className="flex items-center justify-center gap-3">
                        <button
                          className="text-gray-600 hover:text-blue-600"
                          title="View"
                          onClick={() =>
                            alert(`Viewing product: ${product.name}`)
                          }
                        >
                          <FaEye />
                        </button>
                        <a
                          href="/application/ecom_product-add.html"
                          className="text-green-600 hover:text-green-800"
                          title="Edit"
                        >
                          <FaEdit />
                        </a>
                        <button
                          className="text-red-600 hover:text-red-800"
                          title="Delete"
                          onClick={() =>
                            alert(`Deleting product ID: ${product.id}`)
                          }
                        >
                          <FaTrash />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {/* Pagination */}
            <div className="flex justify-between items-center p-4 text-sm bg-gray-50 border-t flex-wrap gap-2">
              <span>
                Showing 1 to {Math.min(perPage, filteredProducts.length)} of{" "}
                {filteredProducts.length} entries
              </span>
              <div className="flex space-x-1">
                <button className="px-3 py-1 border rounded text-gray-600 hover:bg-gray-100">
                  ‚Äπ
                </button>
                <button className="px-3 py-1 border rounded bg-blue-600 text-white">
                  1
                </button>
                <button className="px-3 py-1 border rounded hover:bg-gray-100">
                  2
                </button>
                <button className="px-3 py-1 border rounded hover:bg-gray-100">
                  3
                </button>
                <button className="px-3 py-1 border rounded text-gray-600 hover:bg-gray-100">
                  ‚Ä∫
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductTablePage;


===== src/app/(pages)/prelist/page.jsx =====
// import React from 'react';

// function Prelist() {
//   return (
//     <div className="bg-gray-50 min-h-screen flex items-center justify-center">
//       <div className=" max-w-7xl mx-auto p-4 md:p-8">
//         <h1 className="text-2xl md:text-4xl font-bold text-gray-800 mb-8">
//           Start your listing
//         </h1>

//         <div className="flex flex-col md:flex-row gap-4 mb-8">
//           <input
//             type="text"
//             placeholder="Tell us what you're selling"
//             className="flex-1 border border-gray-300 rounded px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
//           />
//           <button className="bg-blue-600 hover:bg-blue-700 text-white rounded px-6 py-3 flex items-center justify-center">
//             üîç
//           </button>
//         </div>

//         <div className="grid md:grid-cols-3 gap-6">
//           {[1, 2, 3].map((step) => (
//             <div key={step} className="bg-white shadow-lg rounded-lg overflow-hidden">
//               <img
//                 src={`https://via.placeholder.com/400x200?text=Step+${step}`}
//                 alt={`Step ${step}`}
//                 className="w-full object-cover"
//               />
//               <div className="p-6">
//                 <span className="text-blue-600 font-bold">STEP {step}</span>
//                 <h3 className="text-lg font-semibold mt-2">
//                   {step === 1 && "Share item details"}
//                   {step === 2 && "Find a match"}
//                   {step === 3 && "Edit and list"}
//                 </h3>
//                 <p className="mt-2 text-gray-600">
//                   {step === 1 && "Use keywords like brand, model or unique info (ISBN, MPN, VIN)."}
//                   {step === 2 && "We'll search our catalogue to find similar items."}
//                   {step === 3 && "You can preview or make changes before listing your item."}
//                 </p>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }

// export default Prelist;

import React from "react";

function Prelist() {
  return (
    <div className="bg-[#f9fafb] min-h-screen flex items-center justify-center px-4">
      <div className="w-full max-w-7xl p-6 md:p-10  rounded-xl ">
        {/* Title */}
        <h1 className="text-3xl md:text-4xl font-extrabold text-gray-800 mb-8 text-center">
          Start Your Listing
        </h1>

        {/* Search Input */}
        <div className="flex flex-col md:flex-row gap-4 items-center mb-10">
          <input
            type="text"
            placeholder="Tell us what you're selling"
            className="flex-1 w-full border border-gray-300 rounded-md px-5 py-3 text-gray-700 text-base shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
          <button className="w-full md:w-auto bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md px-6 py-3 shadow transition duration-150">
            <span className="inline-flex items-center gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M21 21l-4.35-4.35M10 18a8 8 0 100-16 8 8 0 000 16z"
                />
              </svg>
              Search
            </span>
          </button>
        </div>

        {/* Steps Section */}
        <div className="grid md:grid-cols-3 gap-6">
          {[
            {
              title: "Share item details",
              desc: "Use keywords like brand, model or unique info (ISBN, MPN, VIN).",
              image:
                "https://i.ebayimg.com/00/s/MTIwMFgxNTAw/z/6TYAAOSw2NFlzRIU/%24_1.PNG?set_id=2",
              step: 1,
            },
            {
              title: "Find a match",
              desc: "We'll search our catalogue to find similar items.",
              image:
                "https://i.ebayimg.com/00/s/MTIwMFgxNTAw/z/-QAAAOSw2HZnkubn/$_1.PNG?set_id=2",
              step: 2,
            },
            {
              title: "Edit and list",
              desc: "You can preview or make changes before listing your item.",
              image:
                "https://i.ebayimg.com/00/s/MTIwMFgxNTAw/z/HA0AAOSwfi1nkubn/$_1.PNG?set_id=2",
              step: 3,
            },
          ].map(({ step, title, desc, image }) => (
            <div
              key={step}
              className="bg-white rounded-lg overflow-hidden shadow hover:shadow-lg transition-shadow duration-300"
            >
              <img
                src={image}
                alt={`Step ${step}`}
                className="w-full h-48 object-cover"
              />
              <div className="p-5">
                <p className="text-blue-600 font-semibold text-sm">
                  STEP {step}
                </p>
                <h3 className="text-lg font-bold text-gray-800 mt-1">
                  {title}
                </h3>
                <p className="text-gray-600 mt-2 text-sm">{desc}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default Prelist;


===== src/app/(pages)/prelist_ebay/page.jsx =====
"use client";
import React, { useState } from "react";
import { FaChevronDown, FaEdit } from "react-icons/fa";

const filters = [
  "Brand",
  "Screen Size",
  "Processor",
  "Model",
  "Operating System",
  "Storage Type",
  "Features",
  "SSD Capacity",
  "Type: Notebook/Laptop",
];

// const products = [
//     {
//         title: "Acer Aspire 5 14 in i5 11th Gen 8GB RAM 512GB SSD Laptop - Grey",
//         brand: "Acer",
//         screenSize: "14 in",
//         processor: "Intel Core i5 11th Gen.",
//         image: "https://i.ebayimg.com/images/g/05oAAOSwObJkXJHW/s-l640.jpg",
//     },
//     {
//         title: "Asus E410 14in Celeron N4020, 4GB, 64GB eMMC Laptop - Blue",
//         brand: "ASUS",
//         screenSize: "14 in",
//         processor: "Intel Celeron",
//         image: "https://i.ebayimg.com/images/g/JMUAAOSwfyljBiJt/s-l640.jpg",
//     },
// ];

const products = [
  {
    title:
      "Acer Aspire 5 14 in i5 11th Gen 8GB RAM 512GB SSD Laptop - Grey (NXK5BEK005)",
    image: "https://i.ebayimg.com/images/g/05oAAOSwObJkXJHW/s-l640.jpg",
    brand: "Acer",
    screenSize: "14 in",
    processor: "Intel Core i5 11th Gen.",
  },
  {
    title:
      "Asus E410 14in ( 64GB eMMC, Intel Celeron N4020, 1.10GHz, 4GB) Laptop - Blue - 90NB0Q11-M44000",
    image: "https://i.ebayimg.com/images/g/JMUAAOSwfyljBiJt/s-l640.jpg",
    brand: "ASUS",
    screenSize: "14 in",
    processor: "Intel Celeron",
  },
  {
    title:
      'Lenovo IdeaPad 3 15IAU7 15.6" (128GB SSD, Intel Core i3-1215U, 3.3GHz, 4GB RAM) Notebook - Abyss Blue (82RK009TUK)',
    image: "https://i.ebayimg.com/images/g/DxsAAOSwG11kGWFO/s-l640.jpg",
    brand: "Lenovo",
    screenSize: "15.6 in",
    processor: "Intel Core i3 12th Gen.",
  },
  {
    title:
      'ASUS E510MA 15.6" (64GB eMMC, Intel Celeron N4020, 1.1 GHz, 4GB RAM) Laptop - Black (E510MA-EJ040WS)',
    image: "https://i.ebayimg.com/images/g/ZEAAAOSwDDJjhcOM/s-l640.jpg",
    brand: "ASUS",
    screenSize: "15.6 in",
    processor: "Intel Celeron N",
  },
  {
    title:
      'HP ProBook 430 G8 15.6" (256GB SSD, Intel Core i5 10th Gen., 1.00 GHz, 8GB) Laptop -Silver',
    image: "https://i.ebayimg.com/images/g/blwAAOSwhMhjV~EV/s-l640.jpg",
    brand: "HP",
    screenSize: "15.6 in",
    processor: "Intel Core i5-1035G1",
  },
  {
    title: "Dell 14 in Intel i3 8GB RAM 128GB SSD Laptop - Refurbished",
    image: "https://i.ebayimg.com/images/g/ByoAAOSwARJlgB9v/s-l1600.jpg",
    brand: "Dell",
    screenSize: "14 in",
    processor: "Intel Core i3",
  },
  {
    title:
      'Lenovo Yoga Pro 7 14IRH8 14.5" (512GB SSD, Intel Core i7 13th Gen., 5.00 GHz, 16GB) Laptop - Storm Grey - 82Y7002GUK',
    image: "https://i.ebayimg.com/images/g/70kAAOSw5JxkqFUh/s-l640.jpg",
    brand: "Lenovo",
    screenSize: "14.5 in",
    processor: "Intel Core i7 13th Gen.",
  },
];

export default function ProductFilterSection() {
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showModal, setShowModal] = useState(false);

  const handleOpenModal = (product) => {
    setSelectedProduct(product);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setSelectedProduct(null);
    setShowModal(false);
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-10 space-y-10">
      <div className="grid md:grid-cols-3 gap-10">
        {/* filter section  */}

        <div className="col-span-1 md:sticky md:top-10 self-start h-fit">
          {/* Heading Section */}
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Find a match</h1>
            <p className="text-gray-500 text-sm mt-1">for 'laptop'</p>
            <div className="flex items-center gap-2 mt-2">
              <button className="text-blue-900 underline text-sm">
                Computers &gt; Laptops &gt; PC Laptops &gt; Netbooks
              </button>
              <FaEdit className="text-blue-900" />
            </div>
          </div>

          {/* Filter Buttons */}
          <div className="flex flex-wrap gap-3 border-t pt-6">
            {filters.map((filter, i) => (
              <button
                key={i}
                className="px-4 py-2 border rounded-full text-sm text-gray-700 flex items-center gap-1 hover:bg-gray-100"
              >
                {filter}
                <FaChevronDown className="text-xs" />
              </button>
            ))}
          </div>
        </div>

        {/* Product Cards */}

        <div className="col-span-2">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">
            Top picks from the product library
          </h2>
          <ul className="flex flex-col gap-4">
            {products.map((product, index) => (
              <li key={index} className="w-full">
                <button
                  onClick={() => handleOpenModal(product)}
                  type="button"
                  className="flex flex-col sm:flex-row items-start sm:items-center bg-white shadow-sm hover:shadow-md transition rounded-lg overflow-hidden w-full text-left"
                >
                  {/* Image Section */}
                  <div className="w-full sm:w-40 md:w-52 flex-shrink-0">
                    <img
                      src={product.image}
                      alt={product.title}
                      className="w-full h-full object-cover"
                      loading="lazy"
                    />
                  </div>

                  {/* Text Content Section */}
                  <div className="p-4 sm:px-6 flex flex-col justify-center text-sm">
                    <div className="font-semibold text-gray-800 mb-2">
                      {product.title}
                    </div>
                    <div className="text-gray-500">Brand: {product.brand}</div>
                    <div className="text-gray-500">
                      Screen Size: {product.screenSize}
                    </div>
                    <div className="text-gray-500">
                      Processor: {product.processor}
                    </div>
                  </div>
                </button>
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* {showModal && selectedProduct && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl relative max-h-min">
                        <button
                            onClick={handleCloseModal}
                            className="absolute top-2 right-2 text-gray-600 hover:text-red-600"
                        >
                            &times;
                        </button>

                        <div className="p-6">
                            <div className="flex gap-6">
                                <img
                                    src={selectedProduct.image}
                                    alt={selectedProduct.title}
                                    className="w-40 h-40 object-cover rounded"
                                />
                                <div>
                                    <h2 className="text-xl font-bold">{selectedProduct.title}</h2>
                                    <p className="text-gray-600">Brand: {selectedProduct.brand}</p>
                                    <p className="text-gray-600">Screen Size: {selectedProduct.screenSize}</p>
                                    <p className="text-gray-600">Processor: {selectedProduct.processor}</p>
                                </div>
                            </div>

                            <div className="mt-4">
                                <h3 className="text-md font-semibold mb-2">Select Condition:</h3>
                                <div className="space-y-2">
                                    {[
                                        "New",
                                        "Opened ‚Äì never used",
                                        "Seller refurbished",
                                        "Used",
                                        "For parts or not working",
                                    ].map((condition, idx) => (
                                        <div key={idx} className="flex items-center gap-2">
                                            <input type="radio" name="condition" id={condition} />
                                            <label htmlFor={condition}>{condition}</label>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            <div className="mt-6 text-right">
                                <button className="px-4 py-2 bg-blue-900 text-white rounded hover:bg-blue-800" disabled>
                                    Continue to listing
                                </button>
                            </div>
                        </div>
                    </div>

                </div>
            )} */}

      {showModal && selectedProduct && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 px-4">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl relative h-[80vh] flex flex-col overflow-hidden">
            {/* Close Button */}
            <button
              onClick={handleCloseModal}
              className="absolute top-2 right-2 text-gray-600 hover:text-red-600 text-2xl"
            >
              &times;
            </button>

            {/* Scrollable Body */}
            <div className="p-6 flex-1 overflow-y-auto">
              {/* Top Section */}
              <div className="flex flex-col md:flex-row gap-6">
                <img
                  src={selectedProduct.image}
                  alt={selectedProduct.title}
                  className="w-full md:w-40 h-40 object-cover rounded"
                />
                <div>
                  <h2 className="text-xl font-bold">{selectedProduct.title}</h2>
                  <p className="text-gray-600">
                    Brand: {selectedProduct.brand}
                  </p>
                  <p className="text-gray-600">
                    Screen Size: {selectedProduct.screenSize}
                  </p>
                  <p className="text-gray-600">
                    Processor: {selectedProduct.processor}
                  </p>
                </div>
              </div>

              {/* Condition Selector */}
              <div className="mt-6">
                <h3 className="text-md font-semibold mb-2">
                  Select Condition:
                </h3>
                <div className="space-y-2">
                  {[
                    "New",
                    "Opened ‚Äì never used",
                    "Seller refurbished",
                    "Used",
                    "For parts or not working",
                  ].map((condition, idx) => (
                    <div key={idx} className="flex items-center gap-2">
                      <input type="radio" name="condition" id={condition} />
                      <label htmlFor={condition}>{condition}</label>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Fixed Bottom Button */}
            <div className="border-t p-4 flex justify-center">
              <button className="px-6 py-2 bg-blue-900 text-white rounded hover:bg-blue-800">
                Continue to listing
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Continue Button */}
      <div className="text-center">
        <button className="px-6 py-2 border border-gray-300 rounded-md text-sm hover:bg-gray-100">
          Continue without match
        </button>
      </div>
    </div>
  );
}


===== src/app/(pages)/price/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default layout;


===== src/app/(pages)/price/page.jsx =====
"use client";
import React, { useState } from "react";
import { FaCheck, FaRocket, FaTimes, FaUserTie } from "react-icons/fa";
import { BiLightningCharge } from "react-icons/bi";
import { BsLightningChargeFill } from "react-icons/bs";
import {
  IoArrowForwardCircleOutline,
  IoCheckmarkCircleOutline,
} from "react-icons/io5";
import { FaRegCircleXmark } from "react-icons/fa6";
import { RiSendPlaneFill } from "react-icons/ri";

const Price = () => {
  const [selectedValue, setSelectedValue] = useState("1 Week"); // Default value
  const [cart, setCart] = useState(null);

  const handleToggle = () => {
    // Toggle between "1 Week" and "10 Month"
    setSelectedValue((prevValue) =>
      prevValue === "1 Week" ? "10 Month" : "1 Week",
    );
  };

  const plans = [
    {
      id: 1,
      name: "Free Plan",
      price: 0,
      features: [
        { text: "Free 5 Listings. No sale no fee", included: true },
        { text: "Online payment before delivery only", included: true },
        { text: "5% fee per online payment", included: true },
        { text: "Listing review & optimization", included: false },
        { text: "Sponsored Upfrica homepage", included: false },
        { text: "Display Phone on your ads", included: false },
        { text: "Google adverts to your items/shop", included: false },
        { text: "Shop front for your items", included: false },
        { text: "Facebook/instagram ads", included: false },
        { text: "Phone number on Social Media ads", included: false },
        { text: "Direct link to your website", included: false },
      ],
    },
    {
      id: 2,
      name: "Basic Plan",
      price: 100,
      features: [
        { text: "Free 5 Listings. No sale no fee", included: true },
        { text: "Listing review & optimization", included: true },
        { text: "Sponsored Upfrica homepage", included: true },
        { text: "Display Phone on your ads", included: true },
        {
          text: "Options for online payment before delivery or Click & Collect",
          included: true,
        },
        { text: "3% fee per online payment", included: true },
        { text: "Google adverts to your items/shop", included: false },
        { text: "Shop front for your items", included: false },
        { text: "Facebook/instagram ads", included: false },
        { text: "Phone number on Social Media ads", included: false },
        { text: "Direct link to your website", included: false },
      ],
    },
    {
      id: 3,
      name: "Standard Plan",
      price: 300,
      features: [
        { text: "Unlimited Listing", included: true },
        { text: "Listing review & optimization", included: true },
        { text: "Shop front for your items", included: true },
        { text: "Sponsored Upfrica homepage", included: true },
        { text: "Google adverts to your items/shop", included: true },
        { text: "Phone number on Upfrica ads", included: true },
        { text: "Display Phone on your ads", included: true },
        {
          text: "Options for online payment before delivery or Click & Collect",
          included: true,
        },
        { text: "3% fee per online payment", included: true },
        { text: "Facebook/instagram ads", included: false },
        { text: "Phone number on Social Media ads", included: false },
        { text: "Direct link to your website", included: false },
      ],
    },
    {
      id: 4,
      name: "Premium Plan",
      price: 450,
      features: [
        { text: "Unlimited Listing", included: true },
        { text: "Listing review & optimization", included: true },
        { text: "Shop front for your items", included: true },
        { text: "Google adverts to your items/shop", included: true },
        { text: "Facebook/instagram ads", included: true },
        { text: "Phone number on Upfrica ads", included: true },
        { text: "Phone number on Social Media ads", included: true },
        { text: "Sponsored all related item pages", included: true },
        { text: "Display Phone on your ads", included: true },
        {
          text: "Options for online payment before delivery or Click & Collect",
          included: true,
        },
        { text: "Direct link to your website", included: true },
        { text: "3% fee per online payment", included: true },
      ],
    },
  ];

  const data = [
    {
      id: 1,
      title: "Do you provide customer support?",
      description:
        "Family months lasted simple set nature vulgar him. Picture for attempt joy excited ten carried manners talking how. Suspicion neglected the resolving agreement perceived at an. Comfort reached gay perhaps chamber his six detract besides add.",
    },
    {
      id: 2,
      title: "What is your privacy policy?",
      description:
        "Two before narrow not relied how except moment myself Dejection assurance mrs led certainly So gate at no only none open Betrayed at properly it of graceful on Dinner abroad am depart ye turned hearts as me wished Therefore allowance too perfectly gentleman supposing man his.",
    },
    {
      id: 3,
      title: "Is there a money-back guarantee?",
      description:
        "Two before narrow not relied how except moment myself Dejection assurance mrs led certainly So gate at no only none open Betrayed at properly it of graceful on Dinner abroad am depart ye turned hearts as me wished Therefore allowance too perfectly gentleman supposing man his.",
    },
    {
      id: 4,
      title: "What's the difference between monthly and annual plans?",
      description:
        "Started several mistake joy say painful removed reached end. State burst think end are its. Arrived off she elderly beloved him affixed noisier yet. Tickets regard to up he hardly. View four has said do men saw find dear shy. Talent men wicket add garden.",
    },
    {
      id: 5,
      title: "How can I buy your software?",
      description:
        "Lose john poor same it case do year we Full how way even the sigh Extremely nor furniture fat questions now provision incommode preserved Our side fail to find like now Discovered traveling for insensible partiality unpleasing.",
    },
    {
      id: 6,
      title: "What happens after the trial ends?",
      description:
        "Preference any astonished unreserved Mrs. Prosperous understood Middletons in conviction an uncommonly do. Supposing so be resolving breakfast am or perfectly.",
    },
  ];

  const handleClick = (id) => {
    const selected = plans.find((item) => item?.id === id); // ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    if (selected) {
      setCart(selected); // ‡¶ï‡¶æ‡¶∞‡ßç‡¶ü‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡ßü)
    }
  };

  const handleAdded = (id) => {
    const selected = plans.find((item) => item?.id === id); // ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    if (selected) {
      const result = {
        selectedValue,
        id: selected?.id,
        name: selected?.name, // ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
        price: selected?.price, // ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ
        features: selected?.features, // ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
      };
      setCart(result); // ‡¶ï‡¶æ‡¶∞‡ßç‡¶ü‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡ßü)
      console.log(result); // ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶®‡¶∏‡ßã‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
    }
  };

  //   console.log(typeof(cart))

  return (
    <div className="bg-gray-50 pb-10  lg:px-0">
      <div className=" text-center space-y-2 lg:space-y-8">
        <p className="text-lg lg:text-xl font-bold text-[#8710D8]">Pricing</p>
        <h1 className="text-2xl md:text-4xl lg:text-[56px] font-bold tracking-wide">
          Plan That Fit Your Scale
        </h1>
        <p className="text-lg lg:text-xl text-[#747579] tracking-wide">
          Simple, transparent pricing that grows with you. Try any plan free for
          30 days
        </p>
        <div className="py-4 lg:py-10">
          <label className="inline-flex items-center cursor-pointer gap-4">
            <span className="ms-3 text-base  text-gray-900 dark:text-gray-300 font-bold">
              1 Week
            </span>
            <input
              type="checkbox"
              className="sr-only peer"
              onChange={handleToggle}
            />
            <div className="relative w-16 h-8 bg-gray-200 peer-focus:outline-none peer-focus:ring-4   rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white  after:rounded-full after:h-7 after:w-7 after:transition-all  peer-checked:bg-[#8710D8]"></div>
            <span className="ms-3 text-base  text-gray-900 dark:text-gray-300 font-bold">
              10 Month
            </span>
          </label>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 container mx-auto px-8">
        {plans.map((plan, index) => (
          <div
            key={index}
            className={`bg-white rounded-2xl shadow-xl p-6 flex flex-col justify-between ${plan?.id === cart?.id ? "border-2 border-[#8710D8]" : ""}`}
            onClick={() => handleClick(plan.id)}
          >
            {/* Header Section */}
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-bold text-gray-800">{plan.name}</h2>
                <div className="text-gray-600 flex items-center space-x-1 mt-1">
                  <span className="text-3xl font-semibold text-black">
                    ${plan.price}
                  </span>
                  <span className="text-xl text-gray-500">/ per account</span>
                </div>
              </div>
              <div
                className={`${
                  plan.name === cart?.name
                    ? "bg-purple-200 text-[#8710D8] p-4"
                    : "bg-gray-200 text-black p-4"
                } rounded-full flex items-center justify-center`}
              >
                {plan.name === "Standard Plan" ? (
                  <FaRocket
                    className={`text-2xl h-6 w-6 ${
                      plan.name === cart?.name ? "text-[#8710D8]" : "text-black"
                    }`}
                  /> /* Rocket Icon for Standard Plan */
                ) : plan.name === "Premium Plan" ? (
                  <RiSendPlaneFill
                    className={`text-2xl h-6 w-6 ${
                      plan.name === cart?.name ? "text-[#8710D8]" : "text-black"
                    }`}
                  /> /* Send Plane Icon for Premium Plan */
                ) : (
                  <BsLightningChargeFill
                    className={`text-2xl h-6 w-6 ${
                      plan.name === cart?.name ? "text-[#8710D8]" : "text-black"
                    }`}
                  /> /* Lightning Charge Icon for others */
                )}
              </div>
            </div>

            {/* Divider */}
            <hr className="my-4 border-gray-300" />

            {/* Features */}
            <ul className="space-y-3">
              {plan.features.map((feature, idx) => (
                <li key={idx} className="flex items-start space-x-2">
                  {/* Icon */}
                  <div className="flex-shrink-0">
                    {feature.included ? (
                      <IoCheckmarkCircleOutline className="text-green-400 h-6 w-6" />
                    ) : (
                      <FaRegCircleXmark className="text-red-400 h-5 w-5" />
                    )}
                  </div>

                  {/* Text */}
                  <span className="text-[#747579] text-lg leading-6">
                    {feature.text}
                  </span>
                </li>
              ))}
            </ul>

            {/* Button */}
            <button
              onClick={() => handleAdded(plan.id)}
              className={`mt-6 py-2 px-4 font-bold rounded-lg text-lg  md:text-xl ${plan?.id === cart?.id ? "bg-[#8710D8] hover:bg-purple-700" : "bg-black hover:bg-gray-800"} text-white`}
            >
              Select Plan
            </button>
          </div>
        ))}
      </div>

      <div className="container mx-auto my-20 bg-[#f5f5f6] py-10 lg:py-20">
        <h2 className="text-center text-xl lg:text-2xl font-bold leading-8">
          Trusted by more than 900 companies around the world
        </h2>
      </div>

      {/* Frequently Asked */}
      <div>
        <div className="text-center space-y-3 ">
          <h1 className="text-3xl lg:text-6xl font-bold tracking-wide">
            Frequently Asked Questions
          </h1>
          <p className="text-lg md:text-xl tracking-wide text-[#747579] ">
            Perceived end knowledge certainly day sweetness why cordially
          </p>
        </div>
        <div className="container mx-auto  py-10">
          {/* Responsive grid layout */}
          <div className="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 px-8">
            {data.map((item) => (
              <div key={item.id} className="border rounded-lg p-6">
                <h2 className="text-xl font-bold mb-2">{item.title}</h2>
                <p className="text-[#747579]  leading-relaxed text-lg">
                  {item.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="container mx-auto my-10 bg-[#f5f5f6] p-8 lg:p-20 xl:flex justify-between items-center space-y-5">
        <div className="space-y-3">
          <h2 className="text-2xl lg:text-4xl font-bold tracking-wide">
            Still, have a question?
          </h2>
          <p className="text-lg text-[#747579]">
            He moonlights difficult engrossed it, sportsmen. Interested has all
            Devonshire difficulty gay assistance joy.
          </p>
        </div>
        <button className="flex gap-1 items-center bg-[#A435F0] text-white font-bold text-base lg:text-xl px-6 py-3 rounded-md">
          Contact Us
          <span>
            <IoArrowForwardCircleOutline className="h-6 w-6" />
          </span>
        </button>
      </div>
    </div>
  );
};

export default Price;


===== src/app/(pages)/pricing/page.jsx =====
import UpfricaPricing from "@/components/pricing/UpfricaPricing";

export default function PricingPage() {
  return <UpfricaPricing />;
}

===== src/app/(pages)/product_variants/page.jsx =====
"use client";
import React, { useState } from "react";
import { FaTrashAlt } from "react-icons/fa";

const ProductVariantForm = () => {
  const [variants, setVariants] = useState([
    {
      label: "Package",
      active: true,
      useImageVariant: false,
      options: [
        {
          value: "With Battery",
          additionalPrice: "0.00",
          active: true,
          images: [],
        },
        {
          value: "With Battery & Solar Panels",
          additionalPrice: "599.00",
          active: true,
          images: [],
        },
      ],
    },
  ]);

  const handleVariantChange = (index, updatedVariant) => {
    const newVariants = [...variants];
    newVariants[index] = updatedVariant;
    setVariants(newVariants);
  };

  const handleRemoveVariant = (index) => {
    const newVariants = [...variants];
    newVariants.splice(index, 1);
    setVariants(newVariants);
  };

  const addVariant = () => {
    setVariants([
      ...variants,
      {
        label: "",
        active: true,
        useImageVariant: false,
        options: [],
      },
    ]);
  };

  const addOption = (variantIndex) => {
    const newVariants = [...variants];
    newVariants[variantIndex].options.push({
      value: "",
      additionalPrice: "0.00",
      active: true,
      images: [],
    });
    setVariants(newVariants);
  };

  const handleOptionChange = (variantIndex, optionIndex, updatedOption) => {
    const newVariants = [...variants];
    newVariants[variantIndex].options[optionIndex] = updatedOption;
    setVariants(newVariants);
  };

  const handleRemoveOption = (variantIndex, optionIndex) => {
    const newVariants = [...variants];
    newVariants[variantIndex].options.splice(optionIndex, 1);
    setVariants(newVariants);
  };

  const handleSubmit = () => {
    console.log("Submitted Variants:", variants);
  };

  return (
    <div className="container mx-auto px-4 pb-24 relative">
      {/* Product Info */}
      <div className="my-8">
        <div>
          <strong className="text-lg text-gray-800 block">
            Sliding Gate Opener Electric/Battery and Solar | Sliding Gate Opener
            Kit 12v DC 1200kg Heavy Duty Security Gate Operator set
          </strong>
        </div>
        <div className="mt-2 flex flex-wrap items-center gap-3">
          <span className="text-base font-semibold text-gray-700">
            Current price:
          </span>
          <span className="font-bold text-green-700 text-lg">$7,900.00</span>
          <span className="line-through text-gray-500">$8,600.00</span>
          <span className="text-sm font-semibold text-red-500">8% off</span>
        </div>
      </div>

      <hr className="my-6" />

      <h3 className="text-xl font-bold text-gray-800 mb-4">Product Variants</h3>

      {variants.map((variant, i) => (
        <div
          key={i}
          className="border border-gray-300 rounded-lg mb-8 shadow-sm bg-white"
        >
          <div className="bg-gray-100 px-4 py-3 flex flex-wrap md:flex-nowrap md:items-center gap-4">
            <div className="flex-1">
              <label className="text-sm font-medium text-gray-700 block mb-1">
                Attribute Name (e.g. Colour, Size)
              </label>
              <input
                type="text"
                value={variant.label}
                onChange={(e) =>
                  handleVariantChange(i, {
                    ...variant,
                    label: e.target.value,
                  })
                }
                className="w-full border rounded px-3 py-2 text-sm"
                placeholder="e.g. Color"
              />
            </div>
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={variant.active}
                onChange={(e) =>
                  handleVariantChange(i, {
                    ...variant,
                    active: e.target.checked,
                  })
                }
              />
              <span className="text-sm">Active</span>
            </div>
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={variant.useImageVariant}
                onChange={(e) =>
                  handleVariantChange(i, {
                    ...variant,
                    useImageVariant: e.target.checked,
                  })
                }
              />
              <span className="text-sm">Use image variant</span>
            </div>
            <button
              onClick={() => handleRemoveVariant(i)}
              className="text-red-600 hover:text-red-800 ml-auto text-sm flex items-center gap-1"
            >
              <FaTrashAlt /> Delete
            </button>
          </div>

          {/* Variant Options */}
          <div className="p-4">
            {variant.options.map((opt, j) => (
              <div
                key={j}
                className="mb-4 border border-gray-200 rounded-md p-4 bg-gray-50"
              >
                <div className="grid grid-cols-1 md:grid-cols-12 gap-4 mb-3">
                  <div className="md:col-span-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Option Value
                    </label>
                    <input
                      type="text"
                      value={opt.value}
                      onChange={(e) =>
                        handleOptionChange(i, j, {
                          ...opt,
                          value: e.target.value,
                        })
                      }
                      className="w-full border rounded px-3 py-2 text-sm"
                      placeholder="e.g. Red"
                    />
                  </div>
                  <div className="md:col-span-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Additional Price (¬£)
                    </label>
                    <input
                      type="text"
                      value={opt.additionalPrice}
                      onChange={(e) =>
                        handleOptionChange(i, j, {
                          ...opt,
                          additionalPrice: e.target.value,
                        })
                      }
                      className="w-full border rounded px-3 py-2 text-sm"
                    />
                  </div>
                  <div className="md:col-span-2 flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={opt.active}
                      onChange={(e) =>
                        handleOptionChange(i, j, {
                          ...opt,
                          active: e.target.checked,
                        })
                      }
                    />
                    <span className="text-sm">Active</span>
                  </div>
                  <div className="md:col-span-2 flex items-center">
                    <button
                      onClick={() => handleRemoveOption(i, j)}
                      className="text-red-600 hover:underline text-sm flex items-center gap-1"
                    >
                      <FaTrashAlt /> Remove Option
                    </button>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Upload Images
                  </label>
                  <input
                    type="file"
                    multiple
                    onChange={(e) =>
                      handleOptionChange(i, j, {
                        ...opt,
                        images: Array.from(e.target.files),
                      })
                    }
                    className="w-full text-sm text-gray-600"
                  />
                </div>
              </div>
            ))}

            <button
              type="button"
              onClick={() => addOption(i)}
              className="text-blue-600 text-sm hover:underline mt-2"
            >
              + Add Option
            </button>
          </div>
        </div>
      ))}

      {/* Add Variant Button */}
      <button
        onClick={addVariant}
        className="mt-4 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm"
      >
        + Add Variant
      </button>

      {/* Sticky Footer with Submit / Back */}
      <div className="fixed bottom-0 left-0 right-0 bg-white shadow-md py-3 border-t flex justify-center gap-4 z-50">
        <button
          name="button"
          type="submit"
          onClick={handleSubmit}
          className="btn btn-sm bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded"
        >
          Submit
        </button>
        <button
          type="button"
          onClick={() => window.history.back()}
          className="btn btn-sm bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded"
        >
          Back
        </button>
      </div>
    </div>
  );
};

export default ProductVariantForm;


===== src/app/(pages)/products/edit/[slug]/page.jsx =====
"use client";
import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useFormik } from "formik";
import { FaMinus, FaPlus, FaTimes, FaArrowLeft, FaEye } from "react-icons/fa";
import { IoMdNotifications } from "react-icons/io";
import { useRouter } from "next/navigation";

import LoaderButton from "@/components/LoaderButton";
import Title from "@/components/input/Title";
import Description from "@/components/input/Description";
import Categore from "@/components/input/Categore";
import Conditon from "@/components/input/Conditon";
import Brand from "@/components/input/Brand";
import PriceSection from "@/components/input/PriceSection";
import Promotions from "@/components/input/Promotions";
import SellersPaymentTerms from "@/components/input/SellersPaymentTerms";

import DeliverySection from "@/components/input/DeliverySection";
import CancellationReturns from "@/components/input/CancellationReturns";
import ApprovalNotesSelect from "@/components/input/ApprovalNotesSelect";
import PhotoUploader from "@/components/input/Photo";

// Skeleton loader for the edit form
function SkeletonLoader() {
  return (
    <div className="animate-pulse max-w-5xl mx-auto p-4 space-y-6">
      <div className="h-10 bg-gray-300 rounded w-1/3 mx-auto" />
      <div className="space-y-4">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="h-8 bg-gray-300 rounded" />
        ))}
      </div>
      <div className="space-y-4">
        {[...Array(3)].map((_, i) => (
          <div key={i} className="h-40 bg-gray-300 rounded" />
        ))}
      </div>
      <div className="h-12 bg-gray-300 rounded" />
    </div>
  );
}

// Modal popup for success/error
function NotificationModal({ open, onClose, title, message, slug }) {
  const router = useRouter();
  if (!open) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-lg max-w-md w-full relative p-6">
        {/* Close button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-800"
        >
          <FaTimes size={18} />
        </button>
        <h2 className="text-xl font-semibold mb-2">{title}</h2>
        <p className="mb-6">{message}</p>
        <div className="flex justify-end space-x-3">
          <button
            onClick={() => router.back()}
            className="px-4 py-2 border rounded hover:bg-gray-100 flex items-center"
          >
            <FaArrowLeft className="mr-2" />
            Go Back
          </button>

          <button
            onClick={() => router.push(`/${slug}`)}
            className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 flex items-center"
          >
            <FaEye className="mr-2" />
            Preview
          </button>
        </div>
      </div>
    </div>
  );
}

const LoadingDots = ({ color = "white" }) => (
  <div className="flex space-x-2 justify-center py-2">
    <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce`} />
    <div
      className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-150`}
    />
    <div
      className={`h-2 w-2 bg-${color} rounded-full animate-bounce delay-300`}
    />
  </div>
);

export default function EditProductPage({ params }) {
  const { slug } = params;
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [positionsOpen, setPositionsOpen] = useState(false);
  const [supplierOpen, setSupplierOpen] = useState(false);
  const [selectedImages, setSelectedImages] = useState([]);
  const [multiBuyTiers, setMultiBuyTiers] = useState([]);
  const [modal, setModal] = useState({
    open: false,
    title: "",
    message: "",
  });

  // Fetch existing product
  useEffect(() => {
    async function fetchProduct() {
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/products/${slug}/`,
        );
        const data = await res.json();
        // let tiers = [];
        // if (data.secondary_data?.multi_buy_tiers) {
        //     try {
        //         tiers = JSON.parse(data.secondary_data.multi_buy_tiers) || [{}];
        //     } catch { tiers = []; }
        // }
        // if (!tiers.length) tiers = [{ min_quantity: '', price_each: '' }];
        // setProduct(data);
        // setMultiBuyTiers(tiers);

        let tiers = [];

        if (data.secondary_data?.multi_buy_tiers) {
          const rawTiers = data.secondary_data.multi_buy_tiers;

          if (typeof rawTiers === "string") {
            try {
              tiers = JSON.parse(rawTiers) || [{}];
            } catch {
              tiers = [];
            }
          } else if (Array.isArray(rawTiers)) {
            tiers = rawTiers;
          }
        }

        if (!tiers.length) {
          tiers = [{ min_quantity: "", price_each: "" }];
        }

        setProduct(data);
        setMultiBuyTiers(tiers);

        setSelectedImages(
          (data.product_images || []).map((url) => ({ data_url: url })),
        );
      } catch (err) {
        console.error(err);
        setModal({
          open: true,
          title: "Error Loading",
          message: "Could not load product data. Please try again.",
        });
      } finally {
        setLoading(false);
      }
    }
    fetchProduct();
  }, [slug]);

  // Formik setup
  const formik = useFormik({
    enableReinitialize: true,
    initialValues: {
      title: product?.title || "",
      description: product?.description || "",
      product_quantity: product?.product_quantity || 1,
      price_cents: product?.price_cents?.toString() || "0",
      price_currency: product?.price_currency || "GHS",
      status: product?.status || "",
      on_sales: product?.on_sales === "yes" ? "yes" : "no",
      sale_price_cents: product?.sale_price_cents || 0,
      sale_start_date: product?.sale_start_date || "",
      sale_end_date: product?.sale_end_date || "",
      postage_fee_cents: product?.postage_fee_cents || 0,
      secondary_postage_fee_cents: product?.secondary_postage_fee_cents || 0,
      multi_buy: product?.secondary_data?.multi_buy === "yes" ? "yes" : "no",
      multi_buy_tiers: multiBuyTiers,
      cancellable: product?.secondary_data?.cancellable || false,
      cancellationWindowHours:
        product?.cancellation_policy?.cancellationWindowHours || 2,
      sellerResponseSLA:
        product?.cancellation_policy?.sellerResponseSLA || "24h",
      denyIfShippedOrCustom:
        product?.cancellation_policy?.denyIfShippedOrCustom || false,
      autoCancelUnpaidHours:
        product?.cancellation_policy?.autoCancelUnpaidHours || 48,
      abuseFlagThreshold: product?.cancellation_policy?.abuseFlagThreshold || 5,
      approval_notes: product?.secondary_data?.approval_notes || "",
      brand: product?.brand?.id || "",
      category: product?.category?.id || "",
      condition: product?.condition?.id || "",
      seller_payment_terms: product?.seller_payment_terms || "",
    },
    onSubmit: async (values) => {
      const formData = new FormData();
      // Append all fields...
      formData.append("title", values.title);
      formData.append("description", values.description);
      formData.append("product_quantity", values.product_quantity.toString());
      formData.append("price_cents", values.price_cents);
      formData.append("price_currency", values.price_currency);
      formData.append("status", values.status);
      formData.append("user_id", user?.user?.id);
      formData.append("brand", values.brand);
      formData.append("category", values.category);
      formData.append("condition", values.condition);
      formData.append("on_sales", values.on_sales);
      if (values.on_sales === "yes") {
        formData.append("sale_price_cents", values.sale_price_cents.toString());
        formData.append("sale_price_currency", values.price_currency);
        formData.append("sale_start_date", values.sale_start_date);
        formData.append("sale_end_date", values.sale_end_date);
      }
      formData.append("postage_fee_cents", values.postage_fee_cents.toString());
      formData.append(
        "secondary_postage_fee_cents",
        values.secondary_postage_fee_cents.toString(),
      );
      formData.append("multi_buy", values.multi_buy);
      if (values.multi_buy === "yes") {
        formData.append(
          "multi_buy_tiers",
          JSON.stringify(values.multi_buy_tiers),
        );
      } else {
        formData.append("multi_buy_tiers", "");
      }
      formData.append("cancellable", values.cancellable ? "yes" : "no");
      if (values.cancellable) {
        formData.append(
          "cancellation_policy",
          JSON.stringify({
            cancellable: values.cancellable,
            cancellationWindowHours: values.cancellationWindowHours,
            sellerResponseSLA: values.sellerResponseSLA,
            denyIfShippedOrCustom: values.denyIfShippedOrCustom,
            autoCancelUnpaidHours: values.autoCancelUnpaidHours,
            abuseFlagThreshold: values.abuseFlagThreshold,
          }),
        );
      }
      formData.append("approval_notes", values.approval_notes);
      formData.append("seller_payment_terms", values.seller_payment_terms);
      const existingUrls = selectedImages
        .filter((img) => !img.file)
        .map((img) => img.data_url);
      if (existingUrls.length) {
        formData.append("existing_image_urls", JSON.stringify(existingUrls));
      }
      selectedImages
        .filter((img) => img.file)
        .forEach((img) => formData.append("images", img.file, img.file.name));

      // selectedImages.forEach((img, idx) => {
      // const identifier = img.data_url || (img.file && img.file.name) || 'unknown';
      // console.log(`Image position ${idx + 1}:`, identifier);
      // })

      selectedImages.forEach((img, idx) => {
        if (img.file) {
          // Local file: just the filename
          console.log(`Image position ${idx + 1}: ${img.file.name}`);
        } else {
          // Already-uploaded image: log its URL
          console.log(`Image position ${idx + 1}: ${img.data_url}`);
        }
      });
      const imageOrder = selectedImages.map((img) =>
        img.file ? img.file.name : img.data_url,
      );
      // ‚Ä¶and log it
      console.log("Image order array:", imageOrder);

      // Now append that array (stringified) to your form data
      // return;
      formData.append("image_positions", JSON.stringify(imageOrder));

      try {
        const res = await fetch(
          `https://media.upfrica.com/api/product/${product.id}/`,
          {
            method: "PATCH",
            headers: { Authorization: `Token ${token}` },
            body: formData,
          },
        );
        if (!res.ok) throw new Error("Network response was not ok");
        const result = await res.json();
        setModal({
          open: true,
          title: "Update Successful",
          message: "Your product was updated successfully.",
        });
      } catch (err) {
        console.error(err);
        setModal({
          open: true,
          title: "Update Failed",
          message:
            "There was an error updating your product. Please try again.",
        });
      }
    },
  });

  if (loading) {
    return <SkeletonLoader />;
  }

  return (
    <>
      <NotificationModal
        open={modal.open}
        title={modal.title}
        message={modal.message}
        slug={slug}
        onClose={() => setModal((m) => ({ ...m, open: false }))}
      />

      <div className="flex justify-center md:pt-20 bg-slate-50 px-2 md:px-4">
        <form
          onSubmit={formik.handleSubmit}
          className="w-full lg:max-w-5xl py-5 space-y-6"
        >
          {/* Header */}
          <div className="text-center pb-8">
            <h1 className="text-3xl font-bold">
              Edit Listing: {product.title}
            </h1>
          </div>

          {/* Homepage Positions */}
          <div className="p-4 bg-white shadow-md rounded-xl">
            <div className="flex justify-between items-center mb-2">
              <h2 className="font-bold">Homepage Positions</h2>
              <button
                onClick={(e) => {
                  e.preventDefault();
                  setPositionsOpen(!positionsOpen);
                }}
              >
                {positionsOpen ? <FaMinus /> : <FaPlus />}
              </button>
            </div>
            {positionsOpen && (
              <div className="space-y-2">
                {[1, 2, 3, 4, 5].map((pos) => (
                  <label key={pos} className="flex items-center">
                    <input type="checkbox" className="mr-2 rounded" />
                    Position {pos}
                  </label>
                ))}
              </div>
            )}
          </div>

          {/* Supplier & Costing */}
          <div className="p-4 bg-white shadow-md rounded-xl">
            <div className="flex justify-between items-center mb-2">
              <div className="flex items-center space-x-2">
                <IoMdNotifications />
                <span className="font-bold">Supplier & Costing</span>
              </div>
              <button
                onClick={(e) => {
                  e.preventDefault();
                  setSupplierOpen(!supplierOpen);
                }}
              >
                {supplierOpen ? <FaMinus /> : <FaPlus />}
              </button>
            </div>
            {supplierOpen && (
              <div className="pt-4 space-y-4 text-base text-gray-700">
                {/* supplier fields here */}
              </div>
            )}
          </div>

          {/* Main Sections */}
          <div className="bg-white shadow-md rounded-md p-4 space-y-6">
            <PhotoUploader
              initialImages={product.product_images}
              onImagesSelect={setSelectedImages}
            />
            <Title formik={formik} />
            <Description formik={formik} />
            <Categore formik={formik} />
            <Conditon formik={formik} />
            <Brand formik={formik} />
          </div>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/products/edit/specifics/[id]/page.jsx =====
"use client";

import React, { useState } from "react";
import { useSelector } from "react-redux";
import { FaTrashAlt, FaArrowLeft } from "react-icons/fa";
import LoaderButton from "@/components/LoaderButton";

export default function ProductSpecificsPage({ params }) {
  const { id: productId } = params;
  const { token } = useSelector((state) => state.auth);

  const [specifics, setSpecifics] = useState([
    { label: "", value: "", active: true },
  ]);
  const [saving, setSaving] = useState(false);

  const handleSpecificChange = (idx, field, val) => {
    setSpecifics((prev) => {
      const copy = [...prev];
      copy[idx] = { ...copy[idx], [field]: val };
      return copy;
    });
  };

  const handleRemoveSpecific = (idx) => {
    setSpecifics((prev) => prev.filter((_, i) => i !== idx));
  };

  const addSpecific = () => {
    setSpecifics((prev) => [...prev, { label: "", value: "", active: true }]);
  };

  const handleSubmit = async () => {
    setSaving(true);
    try {
      const payload = specifics.map((s) => ({
        label: s.label,
        value: s.value,
      }));

      const res = await fetch(
        `https://media.upfrica.com/api/products/${productId}/properties/bulk/`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
          body: JSON.stringify(payload),
        },
      );

      if (!res.ok) {
        const txt = await res.text();
        throw new Error(txt || `Error ${res.status}`);
      }

      alert("Specifics saved successfully.");
      window.history.back();
    } catch (err) {
      console.error(err);
      alert("Failed to save specifics‚Äîcheck console for details.");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-6">
      {/* Header */}
      <header className="flex items-center justify-between mb-6">
        <button
          onClick={() => window.history.back()}
          className="inline-flex items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-full"
        >
          <FaArrowLeft className="mr-2" /> Go Back
        </button>
        <h1 className="text-2xl font-semibold">
          Product #{productId} Specifics
        </h1>
      </header>

      {/* Specifics List */}
      <div className="space-y-6">
        {specifics.map((s, i) => (
          <div
            key={i}
            className="border border-gray-300 rounded-lg bg-white shadow p-4 flex flex-wrap items-center gap-4"
          >
            {/* Label */}
            <div className="flex-1 min-w-[150px]">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Label
              </label>
              <input
                type="text"
                value={s.label}
                onChange={(e) =>
                  handleSpecificChange(i, "label", e.target.value)
                }
                className="w-full border border-gray-300 rounded-full px-3 py-2 text-sm"
                placeholder="e.g. Color"
              />
            </div>

            {/* Value */}
            <div className="flex-1 min-w-[150px]">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Value
              </label>
              <input
                type="text"
                value={s.value}
                onChange={(e) =>
                  handleSpecificChange(i, "value", e.target.value)
                }
                className="w-full border border-gray-300 rounded-full px-3 py-2 text-sm"
                placeholder="e.g. Red"
              />
            </div>

            {/* Active */}
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={s.active}
                onChange={(e) =>
                  handleSpecificChange(i, "active", e.target.checked)
                }
                className="h-4 w-4 text-violet-600 border-gray-300 rounded"
              />
              <span className="text-sm">Active</span>
            </label>

            {/* Delete */}
            <button
              onClick={() => handleRemoveSpecific(i)}
              className="text-red-600 hover:text-red-800 text-sm rounded-full p-2"
            >
              <FaTrashAlt />
            </button>
          </div>
        ))}
      </div>

      {/* Actions */}
      <div className="mt-6 flex items-center gap-4">
        <button
          onClick={addSpecific}
          className="px-4 py-2 bg-violet-700 hover:bg-violet-800 text-white rounded-full text-sm"
        >
          + Add Specific
        </button>
        <LoaderButton
          onClick={handleSubmit}
          loading={saving}
          className="px-6 py-2 bg-violet-700 hover:bg-violet-800 text-white rounded-full text-sm"
        >
          {saving ? "Saving‚Ä¶" : "Submit"}
        </LoaderButton>
      </div>
    </div>
  );
}


===== src/app/(pages)/products/edit/variants/[id]/page.jsx =====
// 'use client';
// import React, { useState, useEffect } from 'react';
// import { useSelector } from 'react-redux';
// import { FaPlus, FaEdit, FaTrashAlt } from 'react-icons/fa';
// import LoaderButton from '@/components/LoaderButton';

// export default function ProductVariantsPage({ params }) {
//     const { id: productId } = params;
//     const { token } = useSelector((state) => state.auth);

//     const [variants, setVariants] = useState([]);
//     const [loading, setLoading] = useState(false);
//     const [error, setError] = useState('');

//     const [showModal, setShowModal] = useState(false);
//     const [isEditing, setIsEditing] = useState(false);
//     const [formData, setFormData] = useState({
//         id: null,
//         label: '',
//         active: true,
//         options: [{ id: null, value: '', additionalPrice: '', active: true }],
//     });
//     const [saving, setSaving] = useState(false);

//     // Fetch all variants on mount
//     useEffect(() => {
//         if (!token) return;
//         setLoading(true);
//         fetch(`https://media.upfrica.com/api/products/${productId}/variants/`, {
//             headers: { Authorization: `Token ${token}` },
//         })
//             .then((res) => {
//                 if (!res.ok) throw new Error(`Error ${res.status}`);
//                 return res.json();
//             })
//             .then((data) => {
//                 setVariants(data);
//                 setError('');
//             })
//             .catch((err) => setError(err.message))
//             .finally(() => setLoading(false));
//     }, [productId, token]);

//     // Open empty form for new variant
//     const handleAdd = () => {
//         setFormData({
//             id: null,
//             label: '',
//             active: true,
//             options: [{ id: null, value: '', additionalPrice: '', active: true }],
//         });
//         setIsEditing(false);
//         setShowModal(true);
//     };

//     // Open form populated for editing
//     const handleEdit = (v) => {
//         setFormData({
//             id: v.id,
//             label: v.label,
//             active: v.active,
//             options: (v.variant ?? []).map((opt) => ({
//                 id: opt.id,
//                 value: opt.value,
//                 additionalPrice: (opt.additional_price_cents / 100).toFixed(2),
//                 active: opt.active,
//             })),
//         });
//         setIsEditing(true);
//         setShowModal(true);
//     };

//     // Delete variant group
//     const handleDelete = async (variantId) => {
//         if (!confirm('Are you sure you want to delete this variant?')) return;
//         try {
//             const res = await fetch(
//                 `https://media.upfrica.com/api/products/${productId}/variants/${variantId}/`,
//                 {
//                     method: 'DELETE',
//                     headers: { Authorization: `Token ${token}` },
//                 }
//             );
//             if (!res.ok) throw new Error(`Error ${res.status}`);
//             setVariants((prev) => prev.filter((v) => v.id !== variantId));
//         } catch (err) {
//             alert(`Could not delete variant: ${err.message}`);
//         }
//     };

//     // Form field handlers
//     const updateField = (field, val) =>
//         setFormData((fd) => ({ ...fd, [field]: val }));
//     const updateOption = (idx, field, val) =>
//         setFormData((fd) => {
//             const opts = [...fd.options];
//             opts[idx] = { ...opts[idx], [field]: val };
//             return { ...fd, options: opts };
//         });
//     const addOption = () =>
//         setFormData((fd) => ({
//             ...fd,
//             options: [
//                 ...fd.options,
//                 { id: null, value: '', additionalPrice: '', active: true },
//             ],
//         }));
//     const removeOption = (idx) =>
//         setFormData((fd) => {
//             const opts = [...fd.options];
//             opts.splice(idx, 1);
//             return { ...fd, options: opts };
//         });

//     // Create or update variant
//     const handleSubmit = async (e) => {
//         e.preventDefault();
//         setSaving(true);
//         try {
//             const payload = {
//                 label: formData.label,
//                 active: formData.active,
//                 default_value: formData.options[0]?.value || '',
//                 variant: formData.options.map((opt) => ({
//                     value: opt.value,
//                     additional_price_cents: Math.round(parseFloat(opt.additionalPrice) * 100),
//                     additional_price_currency: 'USD',
//                     active: opt.active,
//                 })),
//             };

//             const urlBase = `https://media.upfrica.com/api/products/${productId}/variants/`;
//             const url = isEditing ? `${urlBase}${formData.id}/` : urlBase;
//             const method = isEditing ? 'PATCH' : 'POST';

//             const res = await fetch(url, {
//                 method,
//                 headers: {
//                     'Content-Type': 'application/json',
//                     Authorization: `Token ${token}`,
//                 },
//                 body: JSON.stringify(payload),
//             });
//             if (!res.ok) {
//                 const txt = await res.text();
//                 throw new Error(txt || `Error ${res.status}`);
//             }

//             // Replace local variants list with full array returned by server
//             const data = await res.json();
//             setVariants(Array.isArray(data) ? data : []);

//             setShowModal(false);
//         } catch (err) {
//             alert(`Save failed: ${err.message}`);
//         } finally {
//             setSaving(false);
//         }
//     };

//     return (
//         <div className="container mx-auto p-6">
//             <header className="flex items-center justify-between mb-6">
//                 <h1 className="text-2xl font-semibold">Product #{productId} Variants</h1>
//                 <button
//                     onClick={handleAdd}
//                     className="inline-flex items-center px-4 py-2 bg-violet-700 hover:bg-violet-800 text-white rounded-full shadow"
//                 >
//                     <FaPlus className="mr-2" /> Add Variant
//                 </button>
//             </header>

//             {error && <p className="mb-4 text-red-600">Error: {error}</p>}

//             <div className="overflow-x-auto bg-white shadow rounded-lg">
//                 <table className="w-full text-left">
//                     <thead className="bg-gray-100">
//                         <tr>
//                             <th className="px-4 py-2">Label</th>
//                             <th className="px-4 py-2">Options</th>
//                             <th className="px-4 py-2">Active</th>
//                             <th className="px-4 py-2">Actions</th>
//                         </tr>
//                     </thead>
//                     <tbody>
//                         {loading
//                             ? Array.from({ length: 5 }).map((_, i) => (
//                                 <tr key={i} className="animate-pulse">
//                                     <td className="px-4 py-3">
//                                         <div className="h-4 bg-gray-200 rounded w-3/4" />
//                                     </td>
//                                     <td className="px-4 py-3">
//                                         <div className="h-4 bg-gray-200 rounded w-5/6" />
//                                     </td>
//                                     <td className="px-4 py-3">
//                                         <div className="h-4 bg-gray-200 rounded w-1/2" />
//                                     </td>
//                                     <td className="px-4 py-3">
//                                         <div className="h-4 bg-gray-200 rounded w-1/3" />
//                                     </td>
//                                 </tr>
//                             ))
//                             : variants.map((v) => (
//                                 <tr key={v.id} className="border-t">
//                                     <td className="px-4 py-3">{v.label}</td>
//                                     <td className="px-4 py-3">
//                                         {((v.variant ?? []).map((o) => o.value).join(', ')) || '‚Äî'}
//                                     </td>
//                                     <td className="px-4 py-3">{v.active ? 'Yes' : 'No'}</td>
//                                     <td className="px-4 py-3 space-x-3">
//                                         <button
//                                             onClick={() => handleEdit(v)}
//                                             className="inline-flex items-center px-3 py-1 bg-violet-700 hover:bg-violet-800 text-white rounded-full"
//                                         >
//                                             <FaEdit />
//                                         </button>
//                                         <button
//                                             onClick={() => handleDelete(v.id)}
//                                             className="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-full"
//                                         >
//                                             <FaTrashAlt />
//                                         </button>
//                                     </td>
//                                 </tr>
//                             ))}
//                     </tbody>
//                 </table>
//             </div>

//             {/* Modal */}
//             {showModal && (
//                 <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 px-4">
//                     <form
//                         onSubmit={handleSubmit}
//                         className="relative bg-white rounded-lg shadow-lg w-full max-w-2xl p-8 space-y-6"
//                     >
//                         {/* Close button */}
//                         <button
//                             type="button"
//                             onClick={() => setShowModal(false)}
//                             className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 text-2xl"
//                         >
//                             &times;
//                         </button>

//                         <h2 className="text-2xl font-semibold">
//                             {isEditing ? 'Edit Variant' : 'New Variant'}
//                         </h2>

//                         {/* Label */}
//                         <label className="block">
//                             <span className="text-sm font-medium">Label</span>
//                             <input
//                                 type="text"
//                                 placeholder="Color, Size, etc."
//                                 value={formData.label}
//                                 onChange={(e) => updateField('label', e.target.value)}
//                                 className="mt-1 block w-full border-gray-300 rounded-full px-4 py-2"
//                                 required
//                             />
//                         </label>

//                         {/* Active */}
//                         <label className="flex items-center space-x-2">
//                             <input
//                                 type="checkbox"
//                                 className="h-4 w-4 text-violet-600 border-gray-300 rounded"
//                                 checked={formData.active}
//                                 onChange={(e) => updateField('active', e.target.checked)}
//                             />
//                             <span className="text-sm">Active</span>
//                         </label>

//                         {/* Options */}
//                         <div>
//                             <p className="text-sm font-medium mb-2">Options</p>
//                             {formData.options.map((opt, i) => (
//                                 <div
//                                     key={i}
//                                     className={`mb-4 border border-gray-200 rounded-full p-4 ${opt.active ? 'bg-gray-100' : 'bg-white'
//                                         }`}
//                                 >
//                                     <div className="flex gap-2 items-center">
//                                         <input
//                                             type="text"
//                                             placeholder="Red, Blue, etc."
//                                             value={opt.value}
//                                             onChange={(e) => updateOption(i, 'value', e.target.value)}
//                                             className="flex-1 border rounded-full px-4 py-2 text-sm"
//                                             required
//                                         />
//                                         <input
//                                             type="number"
//                                             step="1"
//                                             placeholder="Price"
//                                             value={opt.additionalPrice}
//                                             onChange={(e) =>
//                                                 updateOption(i, 'additionalPrice', e.target.value)
//                                             }
//                                             className="w-24 border rounded-full px-4 py-2 text-sm"
//                                             required
//                                         />
//                                         <label className="flex items-center space-x-1">
//                                             <input
//                                                 type="checkbox"
//                                                 className="h-4 w-4 text-violet-600 border-gray-300 rounded"
//                                                 checked={opt.active}
//                                                 onChange={(e) =>
//                                                     updateOption(i, 'active', e.target.checked)
//                                                 }
//                                             />
//                                             <span className="text-sm">Active</span>
//                                         </label>
//                                         <button
//                                             type="button"
//                                             onClick={() => removeOption(i)}
//                                             className="text-red-600 hover:underline text-sm"
//                                         >
//                                             Remove
//                                         </button>
//                                     </div>
//                                 </div>
//                             ))}
//                             <button
//                                 type="button"
//                                 onClick={addOption}
//                                 className="text-violet-700 hover:underline text-sm"
//                             >
//                                 + Add Option
//                             </button>
//                         </div>

//                         {/* Actions */}
//                         <div className="flex justify-end space-x-3 mt-4">
//                             <button
//                                 type="button"
//                                 onClick={() => setShowModal(false)}
//                                 className="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-full"
//                                 disabled={saving}
//                             >
//                                 Cancel
//                             </button>
//                             <LoaderButton
//                                 type="submit"
//                                 loading={saving}
//                                 className="px-6 py-2 bg-violet-700 hover:bg-violet-800 text-white rounded-full"
//                             >
//                                 {isEditing ? 'Save Changes' : 'Create Variant'}
//                             </LoaderButton>
//                         </div>
//                     </form>
//                 </div>
//             )}
//         </div>
//     );
// }
"use client";

import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { FaPlus, FaEdit, FaTrashAlt, FaArrowLeft } from "react-icons/fa";
import LoaderButton from "@/components/LoaderButton";

export default function ProductVariantsPage({ params }) {
  const { id: productId } = params;
  const { token } = useSelector((state) => state.auth);

  const [variants, setVariants] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const [showModal, setShowModal] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    id: null,
    label: "",
    active: true,
    options: [{ id: null, value: "", additionalPrice: "", active: true }],
  });
  const [saving, setSaving] = useState(false);

  // Fetch all variants on mount
  useEffect(() => {
    if (!token) return;
    setLoading(true);
    fetch(`https://media.upfrica.com/api/products/${productId}/variants/`, {
      headers: { Authorization: `Token ${token}` },
    })
      .then((res) => {
        if (!res.ok) throw new Error(`Error ${res.status}`);
        return res.json();
      })
      .then((data) => {
        setVariants(data);
        setError("");
      })
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [productId, token]);

// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/products/new/[id]/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default layout;


===== src/app/(pages)/products/new/[id]/page.jsx =====
"use client";
import React, { useEffect, useState } from "react";
import { FaMinus, FaPencilAlt, FaPlus } from "react-icons/fa";
import { IoMdNotifications, IoMdPhotos } from "react-icons/io";
// import { IoMdNotifications } from "react-icons/io";
import { useFormik } from "formik";
import Categore from "@/components/input/Categore";
import Conditon from "@/components/input/Conditon";
import Brand from "@/components/input/Brand";
import Title from "@/components/input/Title";
import Description from "@/components/input/Description";
import Photo from "@/components/input/Photo";
import SubmitButton from "@/components/input/SubmitButton";
import useCategories from "@/components/api/data";

const NewProduct = ({ params }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [produt, setProduct] = useState();
  const [categorie, setCategorie] = useState([]);
  const [condition, setCondition] = useState([]);

  const { id } = params || {}; // Safely destructure id

  const { categories, conditions } = useCategories();
  // console.log("Categories from useCategories:", categories); // ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ö‡ßç‡¶õ‡ßá

  useEffect(() => {
    setCategorie(categories);
    setCondition(condition);
  }, [categories, conditions]);

  useEffect(() => {
    const fetchProduct = async () => {
      setLoading(true);
      try {
        const user = JSON.parse(localStorage.getItem("user"));
        const token = user?.token;

        if (!token) {
          console.error("User is not authenticated");
          setLoading(false);
          return;
        }

        const myHeaders = new Headers();
        // myHeaders.append("Authorization", `Bearer ${token}`);

        const response = await fetch(
          `https://media.uprica.com/api/products/${id}`,
          {
            method: "GET",
            headers: myHeaders,
          },
        );

        if (!response.ok) {
          throw new Error("Failed to fetch product");
        }

        const data = await response.json();
        console.log(data);
        setProduct(data);

        // Matching category with product's category_id
        const matchedCategory = categories.find(
          (category) => category.id === data.category_id,
        );
        const matchedCondition = conditions.find(
          (condition) => condition.id === data.condition_id,
        );

        // Formik ‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü category_name ‡¶è matchedCategory.name ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        formik.setValues({
          title: data?.title || "",
          description: data?.description?.body || "",
          product_quantity: data?.product_quantity || 1,
          price_cents: data?.price_cents || 1,
          sale_price_cents: data?.sale_price_cents || 0,
          postage_fee_cents: data?.postage_fee_cents || 0,
          secondary_postage_fee_cents: data?.secondary_postage_fee_cents || 0,
          price_currency: data?.price_currency || "GHS",
          status: data?.status || "",
          category_name: matchedCategory ? matchedCategory.name : "", // Set category name if matched
          condition_name: matchedCondition ? matchedCondition.name : "",
        });

        setLoading(false);
      } catch (error) {
        console.error("Error fetching product:", error);
        setLoading(false);
      }
    };

    if (id) {
      fetchProduct();
    }
  }, [id, categories]);

  const formik = useFormik({
    initialValues: {
      title: "",
      description: "",
      product_quantity: 1,
      price_cents: 1,
      sale_price_cents: 0,
      postage_fee_cents: 0,
      secondary_postage_fee_cents: 0,
      price_currency: "GHS",
      status: "",
      category_name: "",
      condition_name: "",
    },
    enableReinitialize: true,
    onSubmit: async (values) => {
      setLoading(true);
      try {
        const user = JSON.parse(localStorage.getItem("user"));
        const token = user?.token;

        if (!token) {
          console.error("User is not authenticated");
          setLoading(false);
          return;
        }

        const myHeaders = new Headers();
        myHeaders.append("Authorization", `Bearer ${token}`);
        myHeaders.append("Content-Type", "application/json");

        console.log(values);

        const response = await fetch(
          `https://upfrica-staging.herokuapp.com/api/v1/products/${id}`,
          {
            method: "PATCH",
            headers: myHeaders,
            body: JSON.stringify({
              product: {
                title: values?.title,
                description: values?.description,
                product_quantity: values?.product_quantity,
                price_cents: values?.price_cents,
                sale_price_cents: values?.sale_price_cents,
                postage_fee_cents: values?.postage_fee_cents,
                secondary_postage_fee_cents:
                  values?.secondary_postage_fee_cents,
                price_currency: values?.price_currency,
                status: values?.status,
                category_id:
                  categories.find((cat) => cat.name === values.category_name)
                    ?.id || null,
                condition_id:
                  conditions.find((cond) => cond.name === values.condition_name)
                    ?.id || null,
              },
            }),
          },
        );

        if (!response.ok) {
          throw new Error("Failed to update product");
        }

        const updatedProduct = await response.json();
        console.log("Product updated successfully:", updatedProduct);
        alert("Product updated successfully!");
      } catch (error) {
        console.error("Error updating product:", error);
        alert("Failed to update product");
      } finally {
        setLoading(false);
      }
    },
  });

  const toggleForm = (e) => {
    e.preventDefault();
    setIsOpen(!isOpen);
  };

  return (
    <div className="flex justify-center pt-5 md:pt-20 bg-slate-50 px-2 md:px-4">
      <form
        onSubmit={formik.handleSubmit}
        className="w-full lg:w-3/5 2xl:w-1/2 py-5"
      >
        <div className="text-center space-y-4 py-5">
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-wide">
            Add New Listing
          </h1>
          <p className="flex items-center justify-center space-x-2 text-[#0063d1]">
            <span className="text-base">
              *Your location: , Dhaka, Bangladesh{" "}
            </span>
            <span>
              <FaPencilAlt />
            </span>
          </p>
        </div>
        <div className="space-y-4">
          {/* Homepage Positions section  */}
          <div className="p-4 bg-white shadow-md rounded-xl">
            <h1 className="text-2xl font-bold mb-4">
              Homepage Positions (Admin)
            </h1>
            <hr className="py-2" />

            {/* Positions with checkbox */}
            <div className="mb-4 text-base font-bold">
              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 1</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 2</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 3</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 4</p>
              </div>

              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                />
                <p>Add to position 5</p>
              </div>
            </div>

            {/* Bulk */}
            <div className="mb-4">
              <p className="font-bold">Bulk?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="bulk"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="bulk"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>

            {/* Available Promo */}
            <div className="mb-4">
              <p className="font-bold">Available Promo?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="available_promo"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="available_promo"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>

            {/* Preorder Promo */}
            <div className="mb-4">
              <p className="font-bold">Preorder Promo?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="preorder_promo"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="preorder_promo"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>

            {/* Promoted */}
            <div className="mb-4">
              <p className="font-bold">Promoted?</p>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="promoted"
                    value="no"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  No
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="promoted"
                    value="yes"
                    className="mr-2 text-purple-600 focus:ring-purple-500 checked:bg-purple-600 checked:border-purple-600"
                  />
                  Yes
                </label>
              </div>
            </div>
          </div>

          {/* Admin Inputs section  */}

          <div className="p-4 bg-white shadow-md rounded-xl">
            {/* Header Section */}
            <div className="flex items-center justify-between text-base font-bold">
              {/* Centered Content */}
              <div className="flex items-center justify-center space-x-2 flex-grow">
                <span>
                  <IoMdNotifications />
                </span>
                <span>Admin Inputs</span>
              </div>

              {/* Arrow Button on Right */}
              <button onClick={toggleForm} className="ml-4 focus:outline-none">
                {isOpen ? <FaMinus /> : <FaPlus />}
              </button>
            </div>

            {/* Toggling Form */}
            {isOpen && (
              <div className="p-4">
                <h1 className="text-2xl font-bold mb-4">
                  Supplier Information
                </h1>

                <form className="space-y-4 text-base text-[#3c4858] ">
                  {/* Supplier Links */}
                  <div>
                    <label className="block  font-bold mb-2">
                      Supplier Link or GPS*
                    </label>
                    <input
                      id="supplierLink"
                      name="supplierLink"
                      type="text"
                      placeholder="Link"
                      onChange={formik.handleChange}
                      value={formik.values.supplierLink}
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    />
                  </div>

                  {/*Backup Supplier Links */}
                  <div>
                    <label className="block  font-bold mb-2">
                      Backup Supplier Link
                    </label>
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/products/new/page.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import {
  FaMinus,
  FaPencilAlt,
  FaPlus,
  FaArrowLeft,
  FaListAlt,
} from "react-icons/fa";
import { IoMdNotifications } from "react-icons/io";
import { AiOutlineCheckCircle, AiOutlineCloseCircle } from "react-icons/ai";
import { useFormik } from "formik";
import Title from "@/components/input/Title";
import Description from "@/components/input/Description";
import Categore from "@/components/input/Categore";
import Conditon from "@/components/input/Conditon";
import Photo from "@/components/input/Photo";
import Brand from "@/components/input/Brand";
import { useSelector } from "react-redux";
import PriceSection from "@/components/input/PriceSection";
import Promotions from "@/components/input/Promotions";
import DeliverySection from "@/components/input/DeliverySection";
import SellersPaymentTerms from "@/components/input/SellersPaymentTerms";

import CancellationReturns from "@/components/input/CancellationReturns";
import ApprovalNotesSelect from "@/components/input/ApprovalNotesSelect";
import { useRouter } from "next/navigation";
import Link from "next/link";

const defaultPaymentTerms = `
  <p>‚úÖ Pay Online (Available at checkout)</p>
  <p>‚ùå Pay on Delivery (Not available)</p>
  <p>‚ùå Pay on Collection (Not available)</p>
`;
const AddNewProducts = () => {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // Collapsible panels
  const [positionsOpen, setPositionsOpen] = useState(false);
  const [isOpen, setIsOpen] = useState(false);

  // Selected images from Photo component
  const [selectedImages, setSelectedImages] = useState([]);

  // Popup state
  const [popupVisible, setPopupVisible] = useState(false);
  const [popupMessage, setPopupMessage] = useState("");
  const [popupSuccess, setPopupSuccess] = useState(false);

  const togglePositions = (e) => {
    e.preventDefault();
    setPositionsOpen((open) => !open);
  };
  const toggleForm = (e) => {
    e.preventDefault();
    setIsOpen((open) => !open);
  };

  const formik = useFormik({
    initialValues: {
      title: "",
      description: "",
      product_quantity: 1,
      price_cents: "0",
      on_sales: "no",
      sale_price_cents: 0,
      sale_start_date: "",
      sale_end_date: "",
      postage_fee_cents: 0,
      secondary_postage_fee_cents: 0,
      price_currency: "GHS",
      status: "",
      multi_buy: false,
      multi_buy_tiers: [{}],
      supplierLink: "",
      backupSupplier: "",
      supplerName: "",
      supplerNumber: "",
      productPrice: "",
      vPrice: "",
      Vshipping: "",
      L: "",
      W: "",
      H: "",
      CBM: "",
      rate: "",
      cmb: "",
      shoppingCost: "",
      productCost: "",
      totalCost: "",
      cancellable: false,
      cancellationWindowHours: 2,
      sellerResponseSLA: "24h",
      denyIfShippedOrCustom: false,
      autoCancelUnpaidHours: 48,
      abuseFlagThreshold: 5,
      approval_notes: "",
      seller_payment_terms: defaultPaymentTerms,
    },
    onSubmit: async (values) => {
      const formData = new FormData();
      // Primary fields
      formData.append("title", values.title);
      formData.append("description", values.description);
      formData.append("product_quantity", values.product_quantity.toString());
      formData.append("price_cents", values.price_cents);
      formData.append("price_currency", values.price_currency);
      formData.append("user_id", user?.user?.id);
      formData.append("brand", values.brand);
      formData.append("category", values.category);
      formData.append("condition", values.condition);
      // Sale fields
      if (values.on_sales === "yes") {
        formData.append("on_sales", values.on_sales);
        formData.append("sale_price_cents", values.sale_price_cents.toString());
        formData.append("sale_price_currency", values.price_currency);
        formData.append("sale_start_date", values.sale_start_date);
        formData.append("sale_end_date", values.sale_end_date);
      }
      // Postage fees
      formData.append("postage_fee_cents", values.postage_fee_cents.toString());
      formData.append("postage_fee_cents_currency", values.price_currency);
      formData.append(
        "secondary_postage_fee_cents",
        values.secondary_postage_fee_cents.toString(),
      );
      formData.append(
        "secondary_postage_fee_cents_currency",
        values.price_currency,
      );
      // Multi-buy
      if (values.multi_buy === "yes") {
        formData.append("multi_buy", values.multi_buy);
        formData.append(
          "multi_buy_tiers",
          JSON.stringify(values.multi_buy_tiers),
        );
      }
      // Approval notes
      formData.append("approval_notes", values.approval_notes);
      formData.append("seller_payment_terms", values.seller_payment_terms);
      // Cancellation policy
      let cancel = values.cancellable ? "yes" : "no";
      formData.append("cancellable", cancel);
      const cancellationPolicy = {
        cancellable: values.cancellable,
        cancellationWindowHours: values.cancellationWindowHours,
        sellerResponseSLA: values.sellerResponseSLA,
        denyIfShippedOrCustom: values.denyIfShippedOrCustom,
        autoCancelUnpaidHours: values.autoCancelUnpaidHours,
        abuseFlagThreshold: values.abuseFlagThreshold,
      };
      formData.append(
        "cancellation_policy",
        cancel === "no" ? "" : JSON.stringify(cancellationPolicy),
      );
      // Supplier fields
      formData.append("supplierLink", values.supplierLink);
      formData.append("backupSupplier", values.backupSupplier);
      formData.append("supplerName", values.supplerName);
      formData.append("supplerNumber", values.supplerNumber);
      formData.append("productPrice", values.productPrice);
      formData.append("vPrice", values.vPrice);
      formData.append("Vshipping", values.Vshipping);
      formData.append("L", values.L);
      formData.append("W", values.W);
      formData.append("H", values.H);
      formData.append("CBM", values.CBM);
      formData.append("rate", values.rate);
      formData.append("cmb", values.cmb);
      formData.append("shoppingCost", values.shoppingCost);
      formData.append("productCost", values.productCost);
      formData.append("totalCost", values.totalCost);
      // Images
      selectedImages.forEach((img, idx) =>
        formData.append(
          "images",
          img.file,
          img.file.name || `image_${idx}.png`,
        ),
      );

      // API request
      const headers = new Headers();
      headers.append("Authorization", `Token ${token}`);
      try {
        const response = await fetch(
          "https://media.upfrica.com/api/product/create/",
          { method: "POST", headers, body: formData },
        );
        const result = await response.json();
        if (response.ok) {
          setPopupMessage("Product created successfully!");
          setPopupSuccess(true);
        } else {
          setPopupMessage(result.error || "Failed to create product.");
          setPopupSuccess(false);
        }
      } catch (err) {
        setPopupMessage("An error occurred while creating the product.");
        setPopupSuccess(false);
      } finally {
        setPopupVisible(true);
      }
    },
  });

  return (
    <div className="flex justify-center md:pt-20 bg-slate-50 px-2 md:px-4">
      <form onSubmit={formik.handleSubmit} className="w-full lg:max-w-5xl py-5">
        {/* Page Title */}
        <div className="text-center space-y-4 pb-10">
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-wide">
            Add New Listing
          </h1>
        </div>

        {/* Homepage Positions (Admin) */}
        <div className="p-4 bg-white shadow-md rounded-xl mb-4">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center space-x-2">
              <IoMdNotifications />
              <h1 className="text-base font-bold">
                Homepage Positions (Admin)
              </h1>
            </div>
            <button onClick={togglePositions} className="focus:outline-none">
              {positionsOpen ? <FaMinus /> : <FaPlus />}
            </button>
          </div>
          {positionsOpen && (
            <>
              <hr className="py-2" />
              {/* Positions */}
              <div className="mb-4 text-base font-bold">
                {[1, 2, 3, 4, 5].map((pos) => (
                  <div key={pos} className="flex items-center mb-2">
                    <input type="checkbox" className="mr-2 rounded" />
                    <p>Add to position {pos}</p>
                  </div>
                ))}
              </div>
              {/* Bulk? */}
              <div className="mb-4">
                <p className="font-bold">Bulk?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="bulk"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
              {/* Available Promo? */}
              <div className="mb-4">
                <p className="font-bold">Available Promo?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="available_promo"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
              {/* Preorder Promo? */}
              <div className="mb-4">
                <p className="font-bold">Preorder Promo?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="preorder_promo"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
              {/* Promoted? */}
              <div className="mb-4">
                <p className="font-bold">Promoted?</p>
                <div className="flex space-x-4">
                  {["no", "yes"].map((v) => (
                    <label key={v} className="flex items-center">
                      <input
                        type="radio"
                        name="promoted"
                        value={v}
                        className="mr-2"
                      />
                      {v.charAt(0).toUpperCase() + v.slice(1)}
                    </label>
                  ))}
                </div>
              </div>
            </>
          )}
        </div>

        {/* Admin Inputs (Supplier) */}
        <div className="p-4 bg-white shadow-md rounded-xl mb-4">
          <div className="flex items-center justify-between text-base font-bold">
            <div className="flex items-center space-x-2">
              <IoMdNotifications />
              <span>Admin Inputs</span>
            </div>
            <button onClick={toggleForm} className="focus:outline-none">
              {isOpen ? <FaMinus /> : <FaPlus />}
            </button>
          </div>
          {isOpen && (
            <div className="p-4 space-y-4 text-base text-[#3c4858]">
              <h1 className="text-2xl font-bold mb-4">Supplier Information</h1>
              {/* Supplier fields (link, backup, name, phone) */}
              {[
                {
                  id: "supplierLink",
                  label: "Supplier Link or GPS*",
                  placeholder: "Link",
                },
                {
                  id: "backupSupplier",
                  label: "Backup Supplier Link",
                  placeholder: "2nd Supplier link",
                },
                {
                  id: "supplerName",
                  label: "Supplier Name",
                  placeholder: "Supplier Name",
                },
                {
                  id: "supplerNumber",
                  label: "Supplier Phone Number",
                  placeholder: "Supplier phone number",
                },
              ].map(({ id, label, placeholder }) => (
                <div key={id}>
                  <label className="block font-bold mb-2">{label}</label>
                  <input
                    id={id}
                    name={id}
                    type="text"
                    placeholder={placeholder}
                    onChange={formik.handleChange}
                    value={formik.values[id]}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2"
                  />
                </div>
              ))}

              {/* Product Costing */}
              <div>
                <p className="font-bold">Product Costing (USD)</p>
                <div className="flex items-center">
                  Price $
                  <input
                    id="productPrice"
                    name="productPrice"
                    type="text"
                    onChange={formik.handleChange}
                    value={formik.values.productPrice}
                    className="flex-1 px-3 py-2 border-none focus:ring-0"
                  />
                </div>
                <hr className="my-2" />
              </div>

              {/* Additional Costing Fields */}
              <div className="grid grid-cols-3 md:grid-cols-5 lg:grid-cols-7 gap-3">
                {[
                  { id: "vPrice", label: "Vprice ($)" },
                  { id: "Vshipping", label: "Vshipping" },
                  { id: "L", label: "L" },
                  { id: "W", label: "W" },
                  { id: "H", label: "H" },
                  { id: "CBM", label: "1CBM" },
                  { id: "rate", label: "Rate ($ to GHS)" },
                ].map(({ id, label }) => (
                  <div key={id}>
                    <label htmlFor={id} className="block text-center">
                      {label}
                      <input
                        id={id}
// ‚Ä¶truncated‚Ä¶

===== src/app/(pages)/reset-password/page.jsx =====
"use client";

import React from "react";
import Image from "next/image";
import signinImage from "../../image/signin.svg";
import logo from "../../../public/images/logo.png";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useRouter } from "next/navigation";

const ResetPasswordPage = () => {
  const router = useRouter();

  const formik = useFormik({
    initialValues: {
      email: "bappymodok0011@gmail.com",
      token: "",
      new_password: "",
      confirm_password: "",
    },
    validationSchema: Yup.object({
      email: Yup.string().email("Invalid email").required("Required"),
      token: Yup.string().required("Required"),
      new_password: Yup.string()
        .min(6, "Must be 6 characters or more")
        .required("Required"),
      confirm_password: Yup.string()
        .min(6, "Must be 6 characters or more")
        .required("Required"),
    }),
    onSubmit: async (values, { resetForm }) => {
      console.log("Form submitted:", values);
      // API call can go here
      // resetForm();

      try {
        const response = await fetch(
          "https://media.upfrica.com/api/reset-password/",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email: values.email,
              token: values.token,
              new_password: values.new_password,
              confirm_password: values.confirm_password,
            }),
          },
        );

        const data = await response.json();

        if (!response.ok) {
          // ‡¶Ø‡¶¶‡¶ø error ‡¶•‡¶æ‡¶ï‡ßá
          console.error("‚ùå Error:", data);
          return;
        }

        console.log("‚úÖ Success:", data);
        // Success ‡¶π‡¶≤‡ßá form reset
        resetForm();
        router.push("/login");
      } catch (error) {
        console.error("‚ùå Request failed:", error.message);
      }
    },
  });

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-50 to-white px-4 py-10">
      <div className="bg-white max-w-5xl w-full rounded-2xl shadow-lg grid grid-cols-1 lg:grid-cols-2 overflow-hidden">
        {/* Left Side Illustration */}
        <div className="hidden lg:flex items-center justify-center bg-purple-50">
          <Image
            src={signinImage}
            alt="Reset Password Illustration"
            width={500}
            height={500}
            className="object-contain max-h-[400px]"
          />
        </div>

        {/* Right Side Form */}
        <div className="w-full p-8 sm:p-10 md:p-12">
          <div className="text-center mb-8">
            <Image
              src={logo}
              alt="Upfrica Logo"
              width={140}
              height={56}
              className="mx-auto h-12"
            />
            <h1 className="text-2xl sm:text-3xl font-bold mt-4 text-gray-800">
              Reset Your Password
            </h1>
            <p className="text-sm text-gray-500 mt-2">
              Please enter the token sent to your email and your new password
              below.
            </p>
          </div>

          <form onSubmit={formik.handleSubmit} className="space-y-6">
            {/* Email Field */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                Email Address
              </label>
              <input
                type="email"
                id="email"
                name="email"
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
                value={formik.values.email}
                className={`mt-1 block w-full rounded-md border px-4 py-2 shadow-sm focus:outline-none focus:ring-2 ${
                  formik.errors.email
                    ? "border-red-500 focus:ring-red-300"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
              />
              {formik.touched.email && formik.errors.email && (
                <p className="text-sm text-red-500 mt-1">
                  {formik.errors.email}
                </p>
              )}
            </div>

            {/* Token Field */}
            <div>
              <label
                htmlFor="token"
                className="block text-sm font-medium text-gray-700"
              >
                Reset Token
              </label>
              <input
                type="text"
                id="token"
                name="token"
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
                value={formik.values.token}
                className={`mt-1 block w-full rounded-md border px-4 py-2 shadow-sm focus:outline-none focus:ring-2 ${
                  formik.errors.token
                    ? "border-red-500 focus:ring-red-300"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
              />
              {formik.touched.token && formik.errors.token && (
                <p className="text-sm text-red-500 mt-1">
                  {formik.errors.token}
                </p>
              )}
            </div>

            {/* New Password Field */}
            <div>
              <label
                htmlFor="new_password"
                className="block text-sm font-medium text-gray-700"
              >
                New Password
              </label>
              <input
                type="password"
                id="new_password"
                name="new_password"
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
                value={formik.values.new_password}
                className={`mt-1 block w-full rounded-md border px-4 py-2 shadow-sm focus:outline-none focus:ring-2 ${
                  formik.errors.new_password
                    ? "border-red-500 focus:ring-red-300"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
              />
              {formik.touched.new_password && formik.errors.new_password && (
                <p className="text-sm text-red-500 mt-1">
                  {formik.errors.new_password}
                </p>
              )}
            </div>

            {/* confram  Password Field */}
            <div>
              <label
                htmlFor="confirm_password"
                className="block text-sm font-medium text-gray-700"
              >
                Confirm Password
              </label>
              <input
                type="password"
                id="confirm_password"
                name="confirm_password"
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
                value={formik.values.confirm_password}
                className={`mt-1 block w-full rounded-md border px-4 py-2 shadow-sm focus:outline-none focus:ring-2 ${
                  formik.errors.confirm_password
                    ? "border-red-500 focus:ring-red-300"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
              />
              {formik.touched.new_password &&
                formik.errors.confirm_password && (
                  <p className="text-sm text-red-500 mt-1">
                    {formik.errors.confirm_password}
                  </p>
                )}
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              className="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-md transition"
            >
              Reset Password
            </button>
          </form>

          <p className="text-center text-xs text-gray-400 mt-10">
            ¬© 2024 Upfrica. All rights reserved.
          </p>
        </div>
      </div>
    </div>
  );
};

export default ResetPasswordPage;


===== src/app/(pages)/sell-online/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const SellOnline = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default SellOnline;


===== src/app/(pages)/sell-online/page.jsx =====
import React from "react";
import Link from "next/link";
import CommonButton from "@/components/CommonButton";
import { FaCheckCircle } from "react-icons/fa";

const SellOnline = () => {
  const workData = [
    {
      id: 1,
      name: "Upfrica BD",
      title: "A unique marketplace for online buyers and sellers.",
    },
    {
      id: 2,
      name: "Tech Hub",
      title: "Connecting technology enthusiasts and professionals.",
    },
    {
      id: 3,
      name: "Green World",
      title: "Promoting eco-friendly products and services.",
    },
    {
      id: 4,
      name: "Fitness Plus",
      title: "Your one-stop solution for fitness and wellness.",
    },
  ];

  const General = [
    {
      id: 1,
      name: "Why should I sell on Upfrica BD?",
      title:
        "Upfrica is packed with top and modern eCommerce features enabling sellers to reach thousands of potential buyers at a low handling fee.",
    },
    {
      id: 2,
      name: "Reach More Customers",
      title:
        "Upfrica gives you access to a large customer base, helping you reach more buyers easily.",
    },
    {
      id: 3,
      name: "Low Fees",
      title:
        "With just a small handling fee, you can sell without worrying about high costs.",
    },
    {
      id: 4,
      name: "Easy to Use",
      title:
        "Our platform is designed to be user-friendly, allowing you to manage your sales with ease.",
    },
    {
      id: 5,
      name: "Secure Payment Processing",
      title:
        "We offer secure payment options to ensure safe transactions for both sellers and buyers.",
    },
  ];

  return (
    <>
      <div>
        {/* Hero Section */}
        <div className="flex justify-center items-center bg-[#E3ECFB] py-10 lg:py-20 px-4">
          <div className="text-center container space-y-6 lg:space-y-10">
            <h1 className="text-2xl lg:text-3xl font-extrabold text-gray-800">
              Sell Online With Upfrica BD
            </h1>
            <h2 className="text-3xl lg:text-5xl font-bold text-gray-700">
              Start adding your items for free - No Sale No Fee.
            </h2>
            <div className="flex gap-4 justify-center items-center">
              <CommonButton
                className="text-white bg-purple-600 hover:bg-purple-700 px-4 lg:px-6 py-2 lg:py-3 rounded-full transition duration-300 font-bold"
                text="Get Started"
              />
              <CommonButton
                className="px-4 lg:px-6 py-2 lg:py-3 rounded-full border border-black font-bold"
                text="Get Started"
              />
            </div>
            <p className="text-base lg:text-xl">
              Launch your online shop for free and process payments safely.
            </p>
          </div>
        </div>

        {/* Work Data Section */}
        <div className="py-10 lg:py-20 container mx-auto px-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-10">
            {workData.map((work) => (
              <div
                key={work.id}
                className="flex flex-col items-start relative bg-white rounded-lg p-6 transition transform hover:scale-105 duration-200 shadow-md"
              >
                <div className="absolute top-4 left-4 w-12 lg:w-16 h-12 lg:h-16 bg-white text-purple-500 rounded-full border border-purple-500 font-bold text-lg lg:text-xl flex items-center justify-center shadow-lg">
                  {work.id}
                </div>
                <h1 className="text-lg lg:text-2xl font-bold mt-16 lg:mt-24 text-gray-800 mx-auto">
                  {work.name}
                </h1>
                <h2 className="text-gray-600 text-center mt-2 lg:mt-4">
                  {work.title}
                </h2>
              </div>
            ))}
          </div>
        </div>

        {/* Sign In Section */}
        <div className="fixed bottom-0 left-0 right-0 bg-black bg-opacity-95 shadow-lg text-white">
          <div className="flex items-center justify-center mx-auto py-3 lg:py-4 px-6">
            <p className="text-base lg:text-lg">
              Sign in for the best experience
            </p>
            <button className="ml-4 px-4 lg:px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-full font-semibold transition duration-300">
              <Link href="/login">Sign in</Link>
            </button>
          </div>
        </div>

        {/* Pricing Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 container mx-auto py-8 gap-6 lg:gap-10 px-4">
          <div className="col-span-1">
            <img
              className="w-full"
              src="https://proinsidegh.s3.amazonaws.com/static/upfrica-pc-man4.jpg"
              alt="Pricing Image"
            />
          </div>
          <div className="col-span-1 flex items-center justify-center text-base lg:text-xl text-[#747579]">
            <div className="bg-white  space-y-6 lg:space-y-10">
              <h2 className="text-xl lg:text-2xl font-bold text-gray-800">
                Pricing 3% of total sale
              </h2>
              <p className="text-purple-400">No sale, no fee</p>
              <p>
                Adding an item to sell on Upfrica is free. We will not charge a
                listing fee or a monthly subscription fee. We only charge a
                one-off Net Value Fee (NVF) when your item is sold.
              </p>
              <p className="text-purple-400">
                NVF is calculated as 3% of the sale's total amount (the item
                price and delivery cost).
              </p>
              <p className="font-bold">
                For example, your listed item sold for $90 and you charged $10
                for delivery. The NVF is $100, so we will charge you $3 as a
                processing fee and pay you $97.
              </p>
              <CommonButton
                text="Start Selling"
                className="ml-4 px-4 lg:px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-full font-semibold transition duration-300"
              />
            </div>
          </div>
        </div>

        {/* Frequently Asked Questions */}
        <div className="py-10 bg-[#E3ECFB]">
          <h1 className="text-center text-2xl md:text-4xl font-bold">
            Frequently Asked Questions
          </h1>
          <div className="grid grid-cols-1 gap-10 md:grid-cols-2 container mx-auto py-10 items-center">
            <div className="col-span-1">
              <h1 className="text-xl md:text-3xl font-bold p-4">General</h1>
              <div className="container mx-auto py-4 md:py-8">
                {General.map((reason) => (
                  <div key={reason.id} className="p-4 text-xl space-y-4">
                    <h2 className=" text-gray-600 mt-2 ">{reason.name}</h2>
                    <p className=" font-bold text-gray-800">{reason.title}</p>
                  </div>
                ))}
              </div>
              <CommonButton
                text="Sell Your frist item +"
                className="ml-4 px-4 lg:px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-full transition duration-300 font-bold text-xl"
              />
            </div>
            <div className="col-span-1">
              <h1 className="text-xl md:text-3xl font-bold p-4">
                Product Listing
              </h1>
              <div className="container mx-auto py-4 md:py-8">
                {General.map((reason) => (
                  <div key={reason.id} className="p-4 text-xl space-y-4">
                    <h2 className=" text-gray-600 mt-2 ">{reason.name}</h2>
                    <p className=" font-bold text-gray-800">{reason.title}</p>
                  </div>
                ))}
              </div>
              <CommonButton
                text="Sell Your frist item +"
                className="ml-4 px-4 lg:px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-full transition duration-300 font-bold text-xl"
              />
            </div>
          </div>
        </div>

        {/* Free days  */}
        <div className="grid grid-cols-2 md:grid-cols-5 container mx-auto  justify-center items-center px-4">
          <div className="col-span-3 py-5">
            {/* Free Trial Offer Section */}
            <div className="space-y-6 text-xl">
              <h2 className="text-2xl md:text-4xl font-extrabold text-purple-700 mb-4">
                Try 30 Days FREE
              </h2>
              <p className=" text-gray-700">
                0% commission on any sale you make in the first 30 days when you
                sign up.
              </p>
              <p className="  text-gray-700">
                What happens after my free trial?
              </p>
            </div>

            <div className="mt-5 space-y-6 text-base md:text-xl font-bold">
              <p className="flex items-center text-gray-700">
                <span>
                  <FaCheckCircle className="h-4 w-4 hidden lg:flex" />
                </span>
                Your free product listing allowance will continue.
              </p>
              <p className="flex items-center text-gray-700">
                <span>
                  <FaCheckCircle className="h-4 w-4 hidden lg:flex" />
                </span>
                We will only charge you a 3% handling fee when you sell an item.
              </p>
            </div>
          </div>
          <div className="col-span-2 ">
            <img
              className="w-full h-full"
              src="https://proinsidegh.s3.amazonaws.com/static/upfrica-smart.jpg"
              alt=""
            />
          </div>
        </div>

        <div className="grid grid-cols-1 gap-10 md:grid-cols-2 container mx-auto pb-10 px-4">
          <div className="col-span-1 order-2 md:order-1">
            <img
              className="h-full w-full"
              src="https://proinsidegh.s3.amazonaws.com/static/upfrica-table.jpg"
              alt=""
            />
          </div>
          <div className="col-span-1 flex justify-center items-center order-1 md:order-2">
            {/* Main Header Section */}
            <div className="underline  py-10">
              <div className="text-xl sm:text-2xl md:text-3xl font-bold">
                <h2 className="mb-4">End-To-End eCommerce</h2>
                <p className="text-sm sm:text-base md:text-lg text-gray-700">
                  Upfrica handles everything from marketing and payments, to
                  secure checkout.
                </p>
              </div>

              <div className="text-gray-400">
                <h2 className="text-lg sm:text-xl md:text-2xl">
                  Whether you sell online, on social media, in store, or car
                  boot sale, Upfrica has you covered.
                </h2>
              </div>

              <div className="mt-5 space-y-4 text-sm sm:text-base md:text-lg font-bold text-gray-700">
                <p className="flex items-center">
                  <FaCheckCircle className="h-4 w-4 hidden lg:flex mr-2" />
                  Your free product listing allowance will continue.
                </p>
                <p className="flex items-center">
                  <FaCheckCircle className="h-4 w-4 hidden lg:flex mr-2" />
                  We will only charge you a 3% handling fee when you sell an
                  item.
                </p>
                <p className="flex items-center">
                  <FaCheckCircle className="h-4 w-4 hidden lg:flex mr-2" />
                  Pocket more from each sale, with a total handling fee as low
                  as 3%.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default SellOnline;


===== src/app/(pages)/sellplus/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const SellPlus = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default SellPlus;


===== src/app/(pages)/sellplus/page.jsx =====
import CommonButton from "@/components/CommonButton";
import React from "react";
import Link from "next/link";

const Sellplus = () => {
  const workData = [
    {
      id: 1,
      name: "Upfrica BD",
      title: "A unique marketplace for online buyers and sellers.",
    },
    {
      id: 2,
      name: "Tech Hub",
      title: "Connecting technology enthusiasts and professionals.",
    },
    {
      id: 3,
      name: "Green World",
      title: "Promoting eco-friendly products and services.",
    },
    {
      id: 4,
      name: "Fitness Plus",
      title: "Your one-stop solution for fitness and wellness.",
    },
  ];
  return (
    <section>
      <div className="bg-[#02431D] py-10 md:py-20">
        <div className="container mx-auto space-y-6 md:space-y-12 text-center px-4 sp">
          {/* ‡¶π‡ßá‡¶°‡¶ø‡¶Ç */}
          <div className=" space-y-10">
            <h1 className="font-bold text-4xl md:text-6xl lg:text-7xl 2xl:text-8xl text-white leading-tight max-w-7xl mx-auto">
              Welcome to Upfrica SellPlus
            </h1>
            <h3 className="text-lg md:text-2xl lg:text-4xl text-white tracking-wide max-w-6xl mx-auto font-bold">
              Get any of your favorite selling items at wholesale prices
              directly to your doorstep.
            </h3>
          </div>

          {/* SellPost ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡¶∏ */}
          <div className="flex items-center justify-center gap-4 font-bold">
            <CommonButton
              className="text-white bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-full transition duration-300"
              text="Join Now"
            />
            <CommonButton
              className="text-white px-6 py-3 rounded-full border border-black font-bold"
              text="Sign in"
            />
          </div>

          {/* ‡¶§‡¶•‡ßç‡¶Ø‡¶¨‡¶π‡ßÅ‡¶≤ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü */}
          <p className="mt-8 text-white  md:text-lg lg:text-2xl max-w-5xl mx-auto">
            Our dedicated team has you covered. We'll source items from
            worldwide manufacturers, deliver them to you, and help you sell
            quicker online.
          </p>

          {/* How It Works ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ */}
          <div className="mt-6 font-bold">
            <CommonButton
              className="text-white px-6 py-3 rounded-full border border-black font-bold"
              text="How If Works"
            />
          </div>
        </div>
      </div>
      <div className="flex flex-col py-20">
        {/* Hero Section */}

        {/* Work Data Section */}
        <div className="py-10 md:py-20 container mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-10 px-4">
            {workData.map((work) => (
              <div
                key={work.id}
                className="flex flex-col items-start relative bg-white shadow-lg rounded-lg p-6 transition transform hover:scale-105 duration-200"
              >
                <div className="absolute top-4 left-4 w-16 h-16 bg-white text-purple-500 rounded-full border border-purple-500 font-bold text-xl flex items-center justify-center shadow-lg">
                  {work.id}
                </div>
                <h1 className="text-2xl font-bold mt-24 text-gray-800 mx-auto">
                  {work.name}
                </h1>
                <h2 className="text-gray-600 text-center mt-4">{work.title}</h2>
              </div>
            ))}
          </div>
        </div>

        {/* WhatsApp Contact Section */}
        <div className=" p-10 rounded-lg max-w-lg mx-auto text-center space-y-6 ">
          <button className="bg-[#A435F0] hover:bg-purple-600 text-white px-6 py-3  rounded-full text-xl tracking-wide font-bold max-w-5xl">
            Join SellPlus Today +
          </button>
          <div className="space-y-4">
            <h2 className="text-xl text-gray-500">Our WhatsApp Contacts</h2>
            <p className="text-xl text-gray-500">
              +44 7466800672,+44 7466800672
            </p>
          </div>
          <p className="text-lg text-gray-500">Already Have Items To Sell?</p>
          <button className="bg-[#A435F0] hover:bg-purple-600 text-white px-6 py-3 rounded-full text-lg tracking-wide font-bold">
            <Link href={"/login"}>Start Selling</Link>
          </button>
        </div>

        {/* Sign In Section */}
        <div className="fixed bottom-0 left-0 right-0 bg-black bg-opacity-95 shadow-lg text-white">
          <div className="flex  items-center  justify-center mx-auto py-4 px-6">
            <p className="text-lg">Sign in for the best experience</p>
            <button className="ml-4 px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-full font-semibold transition duration-300">
              <Link href={"/login"}>Sign in</Link>
            </button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Sellplus;


===== src/app/(pages)/shopify/layout.js =====
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
    </div>
  );
};

export default layout;


===== src/app/(pages)/shopify/page.jsx =====
import Footer from "@/components/common/footer/Footer";
import CtaFooterBanner from "@/components/shopify/CtaFooterBanner";
import Header from "@/components/shopify/Header";
import NewsletterBanner from "@/components/shopify/NewsletterBanner";
import ShopifyBanner from "@/components/shopify/ShopifyBanner";
import ShopifyShippingHero from "@/components/shopify/ShopifyShippingHero";
import TradeUpdateSection from "@/components/shopify/TradeUpdateSection";
import React from "react";

const Shopify = () => {
  return (
    <div className="">
      <Header />
      <ShopifyBanner />
      <ShopifyShippingHero />
      <TradeUpdateSection />
      <NewsletterBanner />
      <CtaFooterBanner />
      <Footer />
    </div>
  );
};

export default Shopify;


===== src/app/(pages)/shops/[slug]/page.jsx =====
// src/app/(pages)/shops/[slug]/page.jsx
import { redirect } from "next/navigation";
import { cookies } from "next/headers";
import { BASE_API_URL } from "@/app/constants";

function getAuthHeaders() {
  const t =
    cookies().get("auth_token")?.value || cookies().get("token")?.value;
  return t ? { Authorization: `Token ${t}` } : {};
}

function pickRegionFromCookie() {
  // your RegionSetter stores { name, code, symbol, region }
  const raw = cookies().get("selected_country")?.value;
  if (!raw) return null;
  try {
    const v = JSON.parse(decodeURIComponent(raw));
    return (v?.region || v?.code)?.toString().slice(0, 2).toLowerCase() || null;
  } catch {
    return null;
  }
}

export default async function Page({ params }) {
  const { slug } = params;

  let cc = null;

  // 1) Try API (no-store so we don't loop on cached empties)
  try {
    const r = await fetch(`${BASE_API_URL}/api/shops/${slug}/products/`, {
      headers: getAuthHeaders(),
      cache: "no-store",
    });
    if (r.ok) {
      const data = await r.json();
      cc =
        data?.shop?.user?.country_code?.toLowerCase() ||
        data?.shop?.user?.country?.code?.toLowerCase() ||
        data?.shop?.seller_country?.toLowerCase() ||
        data?.shop?.listing_country_code?.toLowerCase() ||
        null;
    }
  } catch {}

  // 2) Cookie fallback
  if (!cc) cc = pickRegionFromCookie();

  // 3) Optional default (comment out if you‚Äôd rather 404)
  if (!cc) cc = "gh";

  // 4) Redirect to canonical regional path
  redirect(`/${cc}/shops/${slug}`);
}

===== src/app/(pages)/sidebar/layout.js =====
import Header from "@/components/common/header/Header";
import Sidebar from "@/components/dashboard/Sidebar";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <div className="xl:pl-44">
        <Header />
      </div>
      <div className="flex flex-col min-h-screen">
        {/* ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶™‡¶∞‡¶ø */}

        {/* ‡¶π‡ßá‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá ‡¶´‡ßç‡¶≤‡ßá‡¶ï‡ßç‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ */}
        <div className="flex flex-1 reative  ">
          {/* ‡¶¨‡¶æ‡¶Æ ‡¶™‡¶æ‡¶∂‡ßá Sidebar */}
          <Sidebar />

          {/* ‡¶Æ‡¶æ‡¶ù‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü */}
          <main className="flex-1 xl:ml-64 ">{children}</main>
        </div>
      </div>
    </div>
  );
};

export default layout;


===== src/app/(pages)/sidebar/page.jsx =====
import Header from "@/components/common/header/Header";
import Dashboard from "@/components/dashboard/Dashboard";
import React from "react";

const page = () => {
  return (
    <div>
      <Dashboard />
    </div>
  );
};

export default page;


===== src/app/(pages)/signup/page.jsx =====
"use client";

import { useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import { FcGoogle } from "react-icons/fc";
import { FaFacebookF } from "react-icons/fa";
import { useFormik } from "formik";
import { useRouter } from "next/navigation";

import signUpLogo from "../../image/signin.svg";
import LoaderButton from "@/components/LoaderButton";

const SignUp = () => {
  const router = useRouter();
  const [showPassword, setShowPassword] = useState(false);
  const [errorMessage, setErrorMessage] = useState(null);

  const formik = useFormik({
    initialValues: {
      email: "",
      first_name: "",
      last_name: "",
      username: "",
      password: "",
      time_zone: "UTC",
      terms_of_service: false,
    },
    onSubmit: async (values, { setSubmitting }) => {
      setErrorMessage(null);

      // strip out the TOS field before sending
      const { terms_of_service, ...payload } = values;

      try {
        const response = await fetch("https://media.upfrica.com/api/signup/", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        const data = await response.json();

        if (response.ok) {
          // push to verify page with email in the query string
          router.push(
            `/verify-account?email=${encodeURIComponent(values.email)}`,
          );
        } else {
          setErrorMessage(data.message || "Signup failed. Please try again.");
        }
      } catch (err) {
        setErrorMessage("Error: " + err.message);
      } finally {
        setSubmitting(false);
      }
    },
  });

  return (
    <div className="w-full min-h-screen flex items-center justify-center bg-gray-50">
      <div className="w-full container mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8 bg-white shadow-xl border rounded-md p-6 sm:p-10">
        {/* Illustration */}
        <div className="flex justify-center items-center">
          <Image
            src={signUpLogo}
            alt="Sign Up Illustration"
            width={500}
            height={500}
            className="w-full max-h-[400px] object-contain"
          />
        </div>

        {/* Form */}
        <div className="w-full">
          <div className="space-y-4">
            {/* Logo */}
            <div className="flex justify-center">
              <Image
                src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark-0200279f4edfa75fc643c477221cbe7ea4d4afdd5ac37ed8f22164659d2b0fb9.png"
                alt="Upfrica Logo"
                width={200}
                height={56}
                priority
                className="h-10 lg:h-14"
              />
            </div>

            {/* Headings */}
            <h2 className="text-2xl md:text-3xl font-extrabold text-center">
              Create New Account
            </h2>
            <p className="text-base text-[#85878A] text-center leading-6">
              Already a member?
              <Link href="/login">
                <span className="text-purple-500 font-medium ml-1">Log in</span>
              </Link>
              <br />
            </p>

            {/* Social Buttons */}
            <div className="mt-4 flex space-x-4">
              <a
                href="https://media.upfrica.com/accounts/google/login/"
                className="flex-1 flex items-center justify-center border border-gray-300 py-2 rounded-lg hover:bg-gray-100 transition"
              >
                <FcGoogle className="text-2xl" />
                <span className="ml-2 text-gray-700 font-medium">Google</span>
              </a>
              <a
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  // router.push('https://media.upfrica.com/accounts/facebook/signup/')
                }}
                className="flex-1 flex items-center justify-center border border-gray-300 py-2 rounded-lg hover:bg-gray-100 transition"
              >
                <FaFacebookF className="text-2xl text-blue-600" />
                <span className="ml-2 text-gray-700 font-medium">Facebook</span>
              </a>
            </div>

            {/* Divider */}
            <div className="relative mt-6">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200" />
              </div>
              <div className="relative flex justify-center">
                <span className="px-2 bg-white text-gray-500 text-sm">
                  or continue with
                </span>
              </div>
            </div>

            <form onSubmit={formik.handleSubmit} className="space-y-4">
              {/* Email */}
              <div>
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-[#85878A]"
                >
                  Email Address
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  placeholder="Enter your email"
                  required
                  onChange={formik.handleChange}
                  value={formik.values.email}
                  className="w-full mt-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>

              {/* Name */}
              <div>
                <label className="block text-sm font-medium text-[#85878A]">
                  Your Name
                </label>
                <div className="flex flex-col sm:flex-row gap-2 mt-1">
                  <input
                    id="first_name"
                    name="first_name"
                    type="text"
                    placeholder="First Name"
                    required
                    onChange={formik.handleChange}
                    value={formik.values.first_name}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                  <input
                    id="last_name"
                    name="last_name"
                    type="text"
                    placeholder="Last Name"
                    required
                    onChange={formik.handleChange}
                    value={formik.values.last_name}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                </div>
              </div>

              {/* Username */}
              <div>
                <label
                  htmlFor="username"
                  className="block text-sm font-medium text-[#85878A]"
                >
                  Username / Display Name
                </label>
                <input
                  id="username"
                  name="username"
                  type="text"
                  placeholder="This will be public"
                  required
                  onChange={formik.handleChange}
                  value={formik.values.username}
                  className="w-full mt-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>

              {/* Password */}
              <div>
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-[#85878A]"
                >
                  Password
                </label>
                <div className="relative mt-1">
                  <input
                    id="password"
                    name="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="At least 6 characters"
                    required
                    onChange={formik.handleChange}
                    value={formik.values.password}
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 pr-10"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-3 flex items-center text-gray-500"
                  >
                    {showPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
              </div>

              {/* Terms */}
              <div className="flex items-start gap-2">
                <input
                  id="terms_of_service"
                  name="terms_of_service"
                  type="checkbox"
                  required
                  onChange={formik.handleChange}
                  checked={formik.values.terms_of_service}
                  className="h-4 w-4 mt-1 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
                />
                <label
                  htmlFor="terms_of_service"
                  className="text-sm text-[#85878A]"
                >
                  I agree to the{" "}
                  <Link href="/terms-of-use">
                    <span className="text-blue-500 underline">
                      Terms of Use
                    </span>
                  </Link>{" "}
                  and{" "}
                  <Link href="/privacy-policy">
                    <span className="text-blue-500 underline">
                      Privacy Policy
                    </span>
                  </Link>
                </label>
              </div>

              {/* Submit */}
              <LoaderButton
                type="submit"
                loading={formik.isSubmitting}
                className="w-full py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md font-semibold focus:outline-none focus:ring-2 focus:ring-purple-500"
              >
                Sign Up
              </LoaderButton>

              {/* Help */}
              <button
                type="button"
                onClick={() => alert("Need help? Contact support.")}
                className="w-full py-2 bg-gray-100 hover:bg-gray-200 rounded-md text-gray-700 font-semibold focus:outline-none focus:ring-2 focus:ring-purple-300"
              >
                Help
              </button>
            </form>

            {/* Error */}
            {errorMessage && (
              <p className="text-red-500 text-center mt-4">{errorMessage}</p>
            )}

            <p className="text-center text-sm text-gray-400 mt-6">
              ¬© 2024 Upfrica. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SignUp;


===== src/app/(pages)/support/page.jsx =====
import MobileNav from "@/components/support/MobileNav";
import { CgMail } from "react-icons/cg";
import { FaFacebook, FaLinkedin, FaInstagram, FaTwitter } from "react-icons/fa";
import React from "react";

const Support = () => {
  const cardData = [
    {
      id: 1,
      name: "Jane Smith",
      title: "UI/UX Designer",
      image:
        "https://assets.website-files.com/5e77cec29a2d833ece98ee9f/5e77cec29a2d83321998eed3_icon-payments.svg",
    },
    {
      id: 2,
      name: "John Doe",
      title: "Software Engineer",
      image:
        "https://assets.website-files.com/5e77cec29a2d833ece98ee9f/5e77cec29a2d83321998eed3_icon-payments.svg",
    },
    {
      id: 3,
      name: "Alice Johnson",
      title: "Product Manager",
      image:
        "https://assets.website-files.com/5e77cec29a2d833ece98ee9f/5e77cec29a2d83321998eed3_icon-payments.svg",
    },
    {
      id: 4,
      name: "David Lee",
      title: "Graphic Designer",
      image:
        "https://assets.website-files.com/5e77cec29a2d833ece98ee9f/5e77cec29a2d83321998eed3_icon-payments.svg",
    },
    {
      id: 5,
      name: "Emily Brown",
      title: "Marketing Specialist",
      image:
        "https://assets.website-files.com/5e77cec29a2d833ece98ee9f/5e77cec29a2d8398aa98eeb3_frequently-asked-question.svg",
    },
  ];

  return (
    <div className="">
      {/* Mobile Navigation */}
      <MobileNav />

      {/* Help Center Section */}
      <div className="relative bg-blue-600 h-[600px] text-white px-4">
        <div className="text-center py-20 space-y-6">
          {/* First Title */}
          <h1 className="text-5xl font-extrabold leading-tight">
            Upfrica Help Center
          </h1>

          {/* Second Title */}
          <h2 className="text-3xl font-semibold">
            Have questions? Search through our Help Center.
          </h2>

          {/* Search Bar */}
          <form className="mt-10 mx-auto max-w-4xl py-3 px-8 rounded-full bg-gray-50 border flex focus-within:border-gray-300 shadow-lg">
            <input
              type="text"
              placeholder="Search anything"
              className="bg-transparent w-full focus:outline-none pr-4 border-0 focus:ring-0 px-6 py-3 text-lg text-gray-500"
              name="topic"
            />
            <button className="flex items-center justify-center min-w-[150px] px-6 rounded-full tracking-wide border disabled:cursor-not-allowed disabled:opacity-50 transition-all ease-in-out duration-300 text-base bg-blue-600 text-white py-4 h-[42px] ml-4 font-bold hover:bg-blue-700">
              Search
            </button>
          </form>
        </div>
      </div>

      {/* Cards Section */}
      <div className="bg-gray-100 relative z-10 py-20 px-4">
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 container mx-auto">
          {/* Cards */}
          <div className="col-span-2 space-y-10">
            {cardData.map((item) => (
              <div
                key={item.id}
                className="bg-white p-10 h-80 rounded-2xl shadow-2xl flex items-center hover:shadow-3xl transition-all duration-300 transform hover:translate-y-[-10px]"
              >
                {/* Left Side: Image */}
                <div className="flex-shrink-0 w-24 h-24 rounded-full overflow-hidden mr-6">
                  <img
                    src={item.image}
                    alt={item.name}
                    className="w-full h-full object-cover"
                  />
                </div>

                {/* Right Side: Name and Title */}
                <div className="flex flex-col justify-center">
                  <h3 className="text-xl font-semibold">{item.name}</h3>
                  <p className="text-gray-500">{item.title}</p>
                </div>
              </div>
            ))}
          </div>
          {/* Cart Details Section */}
          <div className="col-span-1 h-auto bg-white p-10 rounded-2xl shadow-2xl space-y-6">
            {/* Title */}
            <h2 className="text-3xl font-bold ">Need Extra Support?</h2>

            {/* Description */}
            <p className="text-gray-500 text-2xl">
              Can‚Äôt find what you‚Äôre looking for? Get in touch with us today!
            </p>

            {/* Contact Button */}
            <button className="w-full bg-blue-600 text-white py-4 px-6 rounded-full hover:bg-blue-600 transition text-base font-bold">
              Contact Support
            </button>

            {/* Horizontal Line */}
            <hr className="my-6 border-gray-300" />

            {/* Contact Information */}
            <p className="text-3xl font-bold ">Contact Information</p>
            <p className="text-xl pl-24">( +233) 554248805</p>

            {/* Message Icon with Click to Continue */}
            <div className="flex text-2xl items-center gap-4">
              <span className="bg-gray-200 p-2 rounded-full">
                <CgMail className="h-8 w-8 text-blue-500" />
              </span>
              <p>Click to continue</p>
            </div>
          </div>
        </div>
      </div>

      {/* footer section  */}
      <footer className="px-3 pt-4 lg:px-9  bg-gray-100">
        <div className="grid gap-10 row-gap-6 mb-8 sm:grid-cols-2 lg:grid-cols-5 container mx-auto">
          <div className="sm:col-span-2">
            <a href="#" className="inline-flex items-center space-x-4">
              <img
                src="https://assets.website-files.com/5e77cec29a2d83297b98ee8c/5e77cec29a2d837ef598eedf_docs-logo.svg"
                alt="logo"
                className="h-20 w-20"
              />
              {/* Vertical Divider (Hidden on Mobile) */}
              <div className="hidden sm:block h-6 w-px bg-gray-300"></div>

              {/* Help Center (Hidden on Mobile) */}
              <span className="hidden sm:block text-gray-600 text-xl sm:text-2xl font-medium hover:text-blue-600 transition duration-300">
                Help Center
              </span>
            </a>
            <div className="mt-6 lg:max-w-xl">
              <p className="text-base font-bold text-gray-600">
                Upfrica is a multinational marketplace of reliable sellers and
                active buyers. We provide a powerful yet simplified tools,
                helping you to sell online faster.
              </p>
              <div className="flex  space-x-6 p-4">
                {/* Facebook Icon */}
                <a
                  href="https://www.facebook.com"
                  className="text-blue-600 hover:text-blue-700"
                >
                  <FaFacebook className="w-8 h-8" />
                </a>

                {/* LinkedIn Icon */}
                <a
                  href="https://www.linkedin.com"
                  className="text-blue-700 hover:text-blue-800"
                >
                  <FaLinkedin className="w-8 h-8" />
                </a>

                {/* Instagram Icon */}
                <a
                  href="https://www.instagram.com"
                  className="text-pink-500 hover:text-pink-600"
                >
                  <FaInstagram className="w-8 h-8" />
                </a>

                {/* Twitter Icon */}
                <a
                  href="https://www.twitter.com"
                  className="text-blue-400 hover:text-blue-500"
                >
                  <FaTwitter className="w-8 h-8" />
                </a>
              </div>
            </div>
          </div>

          <div className="flex flex-col gap-2 text-lg text-gray-600">
            <p className=" font-bold tracking-wide text-gray-900 ">Menu</p>
            <a href="#">Home</a>
            <a href="#">Products</a>
            <a href="#">Categore</a>
          </div>

          <div className="space-y-3 text-lg text-gray-600">
            <p className=" font-bold tracking-wide text-gray-900 ">Category</p>
            <p>Sell on Upfrica</p>
            <p>How it work</p>
          </div>
          <div className="space-y-3 text-lg text-gray-600">
            <p className=" font-bold tracking-wide text-gray-900 ">
              Popular Questions
            </p>
            <p> How does Upfrica works?</p>
            <p>How do I create a Upfrica account?</p>
          </div>
        </div>

        <div className="flex flex-col-reverse justify-between pt-5 pb-10 border-t lg:flex-row">
          <p className="text-sm text-gray-600">
            ¬© Copyright 2023 Company. All rights reserved.
          </p>
          <ul className="flex flex-col mb-3 space-y-2 lg:mb-0 sm:space-y-0 sm:space-x-5 sm:flex-row">
            <li>
              <a
                href="#"
                className="text-sm text-gray-600 transition-colors duration-300 hover:text-deep-purple-accent-400"
              >
                Privacy &amp; Cookies Policy
              </a>
            </li>
            <li>
              <a
                href="#"
                className="text-sm text-gray-600 transition-colors duration-300 hover:text-deep-purple-accent-400"
              >
                Disclaimer
              </a>
            </li>
          </ul>
        </div>
      </footer>
    </div>
  );
};

export default Support;


===== src/app/(pages)/todays-deals/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default layout;


===== src/app/(pages)/todays-deals/page.jsx =====
import Link from "next/link";
import React from "react";
import { AiOutlineShoppingCart } from "react-icons/ai";
import { FaHeart } from "react-icons/fa";

const TodaysDeals = () => {
  const products = [
    {
      id: 1,
      title: "Stylish Watch",
      price: { cents: 2999 },
      product_images: [
        "https://www.upfrica.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBdGhqIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--d3ccb6c56e672908cc7b04e5bfaf933afc06ccbb/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDRG9MWm05eWJXRjBTU0lKZDJWaWNBWTZCa1ZVT2hOeVpYTnBlbVZmZEc5ZlptbHNiRnNIYVFMMEFXa0M5QUU2REdOdmJuWmxjblE2Q1hkbFluQT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--822becc989580aaeb23fb25e468593064e9c80da/sliding-door1.webp",
      ],
    },
    {
      id: 2,
      title: "Classic Shoes",
      price: { cents: 4999 },
      product_images: [
        "https://www.upfrica.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBaGtxIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--3b8bdbc066c08644fa0e473582f9a41622f5ad45/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDRG9MWm05eWJXRjBTU0lJY0c1bkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQXZRQmFRTDBBVG9NWTI5dWRtVnlkRG9KZDJWaWNBPT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--0f68375eaf441ecd8b3a772d120bb6aff2c461ab/Screenshot%202022-09-17%20at%2021.43.38.png",
      ],
    },
    {
      id: 3,
      title: "Leather Jacket",
      price: { cents: 7999 },
      product_images: [
        "https://www.upfrica.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBancrIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--d65bf0de22df685e75c04b41e530555696ea7ccf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDRG9MWm05eWJXRjBTU0lKZDJWaWNBWTZCa1ZVT2hOeVpYTnBlbVZmZEc5ZlptbHNiRnNIYVFMMEFXa0M5QUU2REdOdmJuWmxjblE2Q1hkbFluQT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--822becc989580aaeb23fb25e468593064e9c80da/tttblak.webp",
      ],
    },
    {
      id: 4,
      title: "Headphones",
      price: { cents: 1999 },
      product_images: [
        "https://www.upfrica.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBbmx4IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--3d7eb1ee3c91c075bf1a1b56f61067bccb1314cb/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDRG9MWm05eWJXRjBTU0lKZDJWaWNBWTZCa1ZVT2hOeVpYTnBlbVZmZEc5ZlptbHNiRnNIYVFMMEFXa0M5QUU2REdOdmJuWmxjblE2Q1hkbFluQT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--822becc989580aaeb23fb25e468593064e9c80da/up-peenut.webp",
      ],
    },
    {
      id: 5,
      title: "Smartphone",
      price: { cents: 15999 },
      product_images: [
        "https://www.upfrica.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBdDE0IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--edc016c887e0dc894de79e4a05cced53bb2bfea3/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDRG9MWm05eWJXRjBTU0lKZDJWaWNBWTZCa1ZVT2hOeVpYTnBlbVZmZEc5ZlptbHNiRnNIYVFMMEFXa0M5QUU2REdOdmJuWmxjblE2Q1hkbFluQT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--822becc989580aaeb23fb25e468593064e9c80da/uppress-5.webp",
      ],
    },
    {
      id: 6,
      title: "Sunglasses",
      price: { cents: 999 },
      product_images: [
        "https://www.upfrica.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBaGY5IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--8c7eece1605f06ea6a34682346c1509a5f0459e9/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDRG9MWm05eWJXRjBTU0lKYW5CbFp3WTZCa1ZVT2hOeVpYTnBlbVZmZEc5ZlptbHNiRnNIYVFMMEFXa0M5QUU2REdOdmJuWmxjblE2Q1hkbFluQT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--29660478de3e7db46108b4d681e7f0be8b9f3f86/IMG_4455.jpeg",
      ],
    },
  ];

  return (
    <div className="container mx-auto py-5 px-2">
      <div className="  p-6 text-center py-20">
        <h1 className="text-2xl lg:text-4xl font-bold tracking-wide mb-2">
          Today's Deals Up to 50% Off
        </h1>
        <p className="text-xl lg:text-2xl mb-4">
          Best online sales items selling at low prices.
        </p>
        <p className="text-base lg:text-xl">
          Have something to sell?{" "}
          <span className="font-semibold text-blue-400 underline">
            Sell on Upfrica
          </span>
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map((product) => (
          <div
            key={product.id}
            className="border rounded-lg shadow-lg relative flex flex-col justify-between bg-white transition-transform transform hover:scale-105 hover:shadow-xl"
          >
            {/* Card Image Section */}
            <div>
              <div className="relative">
                {product.product_images.length > 0 && (
                  <Link href={`/details`}>
                    <img
                      src={product.product_images[0]}
                      alt={product.title}
                      className="w-full h-[500px] object-cover rounded-t-lg"
                    />
                  </Link>
                )}

                {/* Heart Icon at the top-right */}
                <div className="absolute top-2 right-2 border p-2 rounded-full bg-white shadow-md">
                  <FaHeart className="h-6 w-6 text-black-500" />
                </div>

                {/* Sales Button at the bottom-left */}
                <div className="absolute bottom-2 left-2">
                  <button className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm shadow-md">
                    Sales
                  </button>
                </div>
              </div>

              <div className="px-4 pb-4">
                {/* Title Section */}
                <div className="mt-4">
                  <h2 className="text-xl font-bold text-gray-800">
                    {product.title.length > 30
                      ? `${product.title.substring(0, 15)}...`
                      : product.title}
                  </h2>
                </div>

                {/* Price and Cart Section */}
                <div className="flex justify-between items-center mt-4">
                  <p className="text-xl font-semibold text-gray-700">
                    ${product.price.cents / 100}
                  </p>
                  <span className="border-2 rounded-full p-2 hover:bg-purple-500 hover:text-white transition-colors">
                    <AiOutlineShoppingCart className="h-6 w-6 text-purple-500" />
                  </span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TodaysDeals;


===== src/app/(pages)/unauthorized/page.jsx =====
// app/unauthorized/page.jsx
export default function Unauthorized() {
  return (
    <div className="p-6 text-center">
      <h1 className="text-2xl font-bold text-red-500">Access Denied</h1>
      <p className="mt-4">You do not have permission to view this page.</p>
    </div>
  );
}


===== src/app/(pages)/updated-password/page.jsx =====
// 'use client';
// import { useFormik } from 'formik';
// import * as Yup from 'yup';
// import { useRouter } from 'next/navigation';
// import { useState } from 'react';

// const UpdatePasswordPage = () => {
//     const router = useRouter();
//     const [loading, setLoading] = useState(false);

//     const formik = useFormik({
//         initialValues: {
//             old_password: '',
//             new_password: '',
//             confirm_password: '',
//         },
//         validationSchema: Yup.object({
//             old_password: Yup.string().required('Old password is required'),
//             new_password: Yup.string()
//                 .min(6, 'New password must be at least 6 characters')
//                 .required('New password is required'),
//             confirm_password: Yup.string()
//                 .oneOf([Yup.ref('new_password'), null], 'Passwords must match')
//                 .required('Confirm your new password'),
//         }),
//         onSubmit: async (values, { resetForm }) => {
//             setLoading(true);
//             try {
//                 const response = await fetch('https://media.upfrica.com/api/update-password/', {
//                     method: 'POST',
//                     headers: {
//                         'Content-Type': 'application/json',
//                     },
//                     body: JSON.stringify(values),
//                 });

//                 const data = await response.json();

//                 if (!response.ok) {
//                     alert(data.message || 'Password update failed');
//                 } else {
//                     alert('‚úÖ Password updated successfully!');
//                     resetForm();
//                     router.push('/login');
//                 }
//             } catch (error) {
//                 alert('Something went wrong. Please try again.');
//                 console.error(error);
//             } finally {
//                 setLoading(false);
//             }
//         },
//     });

//     return (
//         <div className="max-w-md mx-auto mt-12 p-6 bg-white shadow-md rounded-lg border">
//             <h2 className="text-2xl font-semibold mb-6 text-center text-gray-800">Update Password</h2>
//             <form onSubmit={formik.handleSubmit} className="space-y-4">
//                 <div>
//                     <label htmlFor="old_password" className="block mb-1 text-gray-700">Old Password</label>
//                     <input
//                         type="password"
//                         id="old_password"
//                         name="old_password"
//                         onChange={formik.handleChange}
//                         onBlur={formik.handleBlur}
//                         value={formik.values.old_password}
//                         className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
//                     />
//                     {formik.touched.old_password && formik.errors.old_password && (
//                         <p className="text-red-500 text-sm">{formik.errors.old_password}</p>
//                     )}
//                 </div>

//                 <div>
//                     <label htmlFor="new_password" className="block mb-1 text-gray-700">New Password</label>
//                     <input
//                         type="password"
//                         id="new_password"
//                         name="new_password"
//                         onChange={formik.handleChange}
//                         onBlur={formik.handleBlur}
//                         value={formik.values.new_password}
//                         className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
//                     />
//                     {formik.touched.new_password && formik.errors.new_password && (
//                         <p className="text-red-500 text-sm">{formik.errors.new_password}</p>
//                     )}
//                 </div>

//                 <div>
//                     <label htmlFor="confirm_password" className="block mb-1 text-gray-700">Confirm Password</label>
//                     <input
//                         type="password"
//                         id="confirm_password"
//                         name="confirm_password"
//                         onChange={formik.handleChange}
//                         onBlur={formik.handleBlur}
//                         value={formik.values.confirm_password}
//                         className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
//                     />
//                     {formik.touched.confirm_password && formik.errors.confirm_password && (
//                         <p className="text-red-500 text-sm">{formik.errors.confirm_password}</p>
//                     )}
//                 </div>

//                 <button
//                     type="submit"
//                     disabled={loading}
//                     className={`w-full py-2 px-4 rounded text-white transition ${loading ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700'
//                         }`}
//                 >
//                     {loading ? 'Updating...' : 'Update Password'}
//                 </button>
//             </form>
//         </div>
//     );
// };

// export default UpdatePasswordPage;

"use client";

import Image from "next/image";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useRouter } from "next/navigation";
import { useState } from "react";
import image from "../../image/signin.svg";
import logo from "../../../public/images/logo.png";
import { useSelector } from "react-redux";

const UpdatePasswordPage = () => {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const token = useSelector((state) => state.auth.token);
  // console.log("token",token);

  const formik = useFormik({
    initialValues: {
      old_password: "",
      new_password: "",
      confirm_password: "",
    },
    validationSchema: Yup.object({
      old_password: Yup.string().required("Old password is required"),
      new_password: Yup.string()
        .min(6, "New password must be at least 6 characters")
        .required("New password is required"),
      confirm_password: Yup.string()
        .oneOf([Yup.ref("new_password"), null], "Passwords must match")
        .required("Please confirm your new password"),
    }),
    onSubmit: async (values, { resetForm }) => {
      console.log("value", values);

      setLoading(true);
      try {
        const res = await fetch(
          "https://media.upfrica.com/api/update-password/",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Token ${token}`,
            },
            body: JSON.stringify(values),
          },
        );
        const data = await res.json();
        if (!res.ok) {
          alert(data.message || "Update failed");
        } else {
          alert("‚úÖ Password updated successfully!");
          resetForm();
          router.push("/login");
        }
      } catch (err) {
        console.error(err);
        alert("Something went wrong. Please try again.");
      } finally {
        setLoading(false);
      }
    },
  });

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-purple-50 to-white px-4 py-10">
      <div className="max-w-5xl mx-auto  flex  shadow-md">
        {/* Left illustration */}
        <div className="hidden lg:flex w-1/2 items-center justify-center">
          <Image
            src={image}
            alt="Security illustration"
            width={500}
            height={500}
          />
        </div>

        {/* Right form */}
        <div className="flex flex-1 items-center justify-center p-8">
          <div className="w-full bg-white shadow rounded-lg border p-6">
            <div className="text-center mb-6">
              <Image
                className="mx-auto h-12"
                src={logo}
                alt="Upfrica.com"
                width={120}
                height={40}
              />
              <h2 className="mt-4 text-2xl font-semibold text-gray-800">
                Update Your Password
              </h2>
              <p className="mt-2 text-gray-600 text-sm">
                Enter your current password and choose a new one below.
              </p>
            </div>

            <form onSubmit={formik.handleSubmit} className="space-y-4">
              {/* Old Password */}
              <div>
                <label
                  htmlFor="old_password"
                  className="block mb-1 text-gray-700 font-medium"
                >
                  Old Password
                </label>
                <input
                  id="old_password"
                  name="old_password"
                  type="password"
                  value={formik.values.old_password}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
                />
                {formik.touched.old_password && formik.errors.old_password && (
                  <p className="mt-1 text-red-500 text-sm">
                    {formik.errors.old_password}
                  </p>
                )}
              </div>

              {/* New Password */}
              <div>
                <label
                  htmlFor="new_password"
                  className="block mb-1 text-gray-700 font-medium"
                >
                  New Password
                </label>
                <input
                  id="new_password"
                  name="new_password"
                  type="password"
                  value={formik.values.new_password}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
                />
                {formik.touched.new_password && formik.errors.new_password && (
                  <p className="mt-1 text-red-500 text-sm">
                    {formik.errors.new_password}
                  </p>
                )}
              </div>

              {/* Confirm Password */}
              <div>
                <label
                  htmlFor="confirm_password"
                  className="block mb-1 text-gray-700 font-medium"
                >
                  Confirm Password
                </label>
                <input
                  id="confirm_password"
                  name="confirm_password"
                  type="password"
                  value={formik.values.confirm_password}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
                />
                {formik.touched.confirm_password &&
                  formik.errors.confirm_password && (
                    <p className="mt-1 text-red-500 text-sm">
                      {formik.errors.confirm_password}
                    </p>
                  )}
              </div>

              <button
                type="submit"
                disabled={loading}
                className={`w-full py-2 rounded text-white transition ${
                  loading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-purple-600 hover:bg-purple-700"
                }`}
              >
                {loading ? "Updating..." : "Update Password"}
              </button>
            </form>

            <p className="mt-6 text-center text-gray-500 text-xs">
              ¬© 2024 Upfrica. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UpdatePasswordPage;


===== src/app/(pages)/updated-profile/page.jsx =====
// 'use client';

// import Image from 'next/image';
// import { useFormik } from 'formik';
// import * as Yup from 'yup';
// import { useRouter } from 'next/navigation';
// import { useState } from 'react';
// import { useSelector } from 'react-redux';
// import profileImg from '../../image/signin.svg';
// import logo from '../../../public/images/logo.png';

// const UpdateProfilePage = () => {
//     const router = useRouter();
//     const [loading, setLoading] = useState(false);

//     // Redux ‡¶•‡ßá‡¶ï‡ßá user ‡¶ì token ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡¶õ‡¶ø
//     const token = useSelector((state) => state.auth.token);
//     const firstName = useSelector((state) => state.auth.user?.first_name) || '';

//     const formik = useFormik({
//         initialValues: {
//             first_name: firstName,
//         },
//         validationSchema: Yup.object({
//             first_name: Yup.string()
//                 .min(2, '‡¶®‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá')
//                 .required('‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ò‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®'),
//         }),
//         onSubmit: async (values, { resetForm }) => {
//             console.log('üìù updating profile with', values, 'token:', token);
//             setLoading(true);

//             try {
//                 const res = await fetch(
//                     'https://media.upfrica.com/api/update-profile/',
//                     {
//                         method: 'PUT', // ‡¶Ö‡¶•‡¶¨‡¶æ PATCH
//                         headers: {
//                             'Content-Type': 'application/json',
//                             Authorization: `Token ${token}`,
//                         },
//                         body: JSON.stringify(values),
//                     }
//                 );
//                 const data = await res.json();

//                 if (!res.ok) {
//                     // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶è‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá error message ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
//                     alert(data.message || '‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡¶®‡¶ø');
//                 } else {
//                     alert('‚úÖ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá!');
//                     resetForm({ values }); // ‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶ø‡¶¨‡ßá
//                     // ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
//                     router.push('/dashboard');
//                 }
//             } catch (err) {
//                 console.error(err);
//                 alert('‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®');
//             } finally {
//                 setLoading(false);
//             }
//         },
//     });

//     return (
//         <div className='max-w-screen-2xl flex justify-center items-center mx-auto lg:p-10  min-h-screen'>
//             <div className="bg-white container grid lg:grid-cols-2 py-10 lg:px-20 shadow-xl border rounded-md">
//                 {/* ‡¶¨‡¶æ‡¶Å‡¶¶‡¶ø‡¶ï‡ßá ‡¶á‡¶≤‡¶æ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® (‡¶≤‡¶ú‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø */}
//                 <div className="hidden lg:flex  items-center justify-center">
//                     <Image src={profileImg} alt="Profile illustration" width={500} height={400} />
//                 </div>

//                 {/* ‡¶°‡¶æ‡¶®‡ßá ‡¶´‡¶∞‡ßç‡¶Æ */}
//                 <div className="flex flex-1 items-center justify-center p-8">
//                     <div className="w-full  bg-white  rounded-lg  p-6">
//                         <div className="text-center mb-6">
//                             <Image src={logo} alt="Logo" width={120}  className='h-10 lg:h-10 mx-auto' />
//                             <h2 className="mt-4 text-2xl font-semibold text-gray-800">
//                                 Update Your Profile
//                             </h2>
//                             {/* <p className="mt-2 text-gray-600 text-sm">
//                                 ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
//                             </p> */}
//                         </div>

//                         <form onSubmit={formik.handleSubmit} className="space-y-4">
//                             <div>
//                                 <label
//                                     htmlFor="first_name"
//                                     className="block mb-1 text-gray-700 font-medium"
//                                 >
//                                     First Name
//                                 </label>
//                                 <input
//                                     id="first_name"
//                                     name="first_name"
//                                     type="text"
//                                     value={formik.values.first_name}
//                                     onChange={formik.handleChange}
//                                     onBlur={formik.handleBlur}
//                                     className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
//                                 />
//                                 {formik.touched.first_name && formik.errors.first_name && (
//                                     <p className="mt-1 text-red-500 text-sm">
//                                         {formik.errors.first_name}
//                                     </p>
//                                 )}
//                             </div>

//                             <button
//                                 type="submit"
//                                 disabled={loading}
//                                 className={`w-full py-2 rounded text-white transition ${loading
//                                         ? 'bg-gray-400 cursor-not-allowed'
//                                         : 'bg-purple-600 hover:bg-purple-700'
//                                     }`}
//                             >
//                                 {loading ? 'Updating...' : 'Update Name'}
//                             </button>
//                         </form>

//                         <p className="mt-6 text-center text-gray-500 text-xs">
//                             ¬© 2024 Upfrica. All rights reserved.
//                         </p>
//                     </div>
//                 </div>
//             </div>
//         </div>
//     );
// };

// export default UpdateProfilePage;

"use client";

import Image from "next/image";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { useSelector } from "react-redux";
import profileImg from "../../image/signin.svg";
import logo from "../../../public/images/logo.png";

const UpdateProfilePage = () => {
  const router = useRouter();
  const [loading, setLoading] = useState(false);

  // Redux ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ
  const token = useSelector((state) => state.auth.token);
  const user = useSelector((state) => state.auth.user) || {};

  const formik = useFormik({
    initialValues: {
      first_name: user.first_name || "",
      last_name: user.last_name || "",
      email: user.email || "",
      phone: user.phone || "",
    },
    validationSchema: Yup.object({
      first_name: Yup.string()
        .min(2, "‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞")
        .required("First name ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®"),
      last_name: Yup.string()
        .min(2, "‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞")
        .required("Last name ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®"),
      email: Yup.string().email("‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü").required("Email ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®"),
      phone: Yup.string()
        .matches(
          /^[0-9()+-\s]*$/,
          "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶®‡¶Ç, ‡¶∏‡ßç‡¶™‡ßá‡¶∏, (+) ‡¶¨‡¶æ (-) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®",
        )
        .min(7, "‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß≠ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü")
        .nullable(),
    }),
    onSubmit: async (values, { setSubmitting, resetForm }) => {
      console.log("Submitting profile update:", values, "token:", token);
      setLoading(true);
      try {
        const res = await fetch(
          "https://media.upfrica.com/api/update-profile/",
          {
            method: "PUT", // ‡¶Ö‡¶•‡¶¨‡¶æ PATCH
            headers: {
              "Content-Type": "application/json",
              Authorization: `Token ${token}`,
            },
            body: JSON.stringify(values),
          },
        );
        const data = await res.json();

        if (!res.ok) {
          alert(data.message || "‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá");
        } else {
          alert("‚úÖ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
          // ‡¶´‡ßç‡¶∞‡¶®‡ßç‡¶ü‡ßá Redux ‡¶ì LocalStorage ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
          resetForm({ values });
          router.push("/dashboard"); // ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶™‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü
        }
      } catch (err) {
        console.error(err);
        alert("‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®");
      } finally {
        setLoading(false);
        setSubmitting(false);
      }
    },
  });

  return (
    <div className="max-w-screen-2xl flex justify-center items-center mx-auto lg:p-10  min-h-screen">
      <div className="bg-white container grid lg:grid-cols-2 py-10 lg:px-20 shadow-xl border rounded-md">
        {/* Illustrative panel */}
        <div className="hidden lg:flex w-1/2 items-center justify-center bg-white">
          <Image
            src={profileImg}
            alt="Profile illustration"
            width={400}
            height={400}
          />
        </div>

        {/* Form panel */}
        <div className="flex flex-1 items-center justify-center p-8">
          <div className="w-full max-w-lg bg-white  p-6">
            <div className="text-center mb-6">
              <Image
                src={logo}
                alt="Logo"
                width={120}
                height={40}
                className="mx-auto"
              />
              <h2 className="mt-4 text-2xl font-semibold text-gray-800">
                Update Your Profile
              </h2>
            </div>

            <form onSubmit={formik.handleSubmit} className="space-y-4">
              {/* First Name */}
              <div>
                <label
                  htmlFor="first_name"
                  className="block mb-1 font-medium text-gray-700"
                >
                  First Name
                </label>
                <input
                  id="first_name"
                  name="first_name"
                  type="text"
                  value={formik.values.first_name}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
                />
                {formik.touched.first_name && formik.errors.first_name && (
                  <p className="mt-1 text-red-500 text-sm">
                    {formik.errors.first_name}
                  </p>
                )}
              </div>

              {/* Last Name */}
              <div>
                <label
                  htmlFor="last_name"
                  className="block mb-1 font-medium text-gray-700"
                >
                  Last Name
                </label>
                <input
                  id="last_name"
                  name="last_name"
                  type="text"
                  value={formik.values.last_name}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
                />
                {formik.touched.last_name && formik.errors.last_name && (
                  <p className="mt-1 text-red-500 text-sm">
                    {formik.errors.last_name}
                  </p>
                )}
              </div>

              {/* Email */}
              <div>
                <label
                  htmlFor="email"
                  className="block mb-1 font-medium text-gray-700"
                >
                  Email Address
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  value={formik.values.email}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
                />
                {formik.touched.email && formik.errors.email && (
                  <p className="mt-1 text-red-500 text-sm">
                    {formik.errors.email}
                  </p>
                )}
              </div>

              {/* Phone Number */}
              <div>
                <label
                  htmlFor="phone"
                  className="block mb-1 font-medium text-gray-700"
                >
                  Phone Number
                </label>
                <input
                  id="phone"
                  name="phone"
                  type="text"
                  value={formik.values.phone}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  className="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-600"
                />
                {formik.touched.phone && formik.errors.phone && (
                  <p className="mt-1 text-red-500 text-sm">
                    {formik.errors.phone}
                  </p>
                )}
              </div>

              {/* Submit Button */}
              <button
                type="submit"
                disabled={loading || formik.isSubmitting}
                className={`w-full py-2 rounded text-white transition ${
                  loading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-purple-600 hover:bg-purple-700"
                }`}
              >
                {loading ? "Updating..." : "Save Changes"}
              </button>
            </form>

            <p className="mt-6 text-center text-gray-500 text-xs">
              ¬© 2024 Upfrica. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UpdateProfilePage;


===== src/app/(pages)/upsearch/[name]/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";

const layout = ({ children }) => {
  return (
    <div>
      <Header />
      {children}
      <Footer />
    </div>
  );
};

export default layout;


===== src/app/(pages)/upsearch/[name]/page.jsx =====
"use client";
import Link from "next/link";
import { useParams } from "next/navigation";
import React, { useEffect, useState } from "react";

const SearchName = () => {
  const params = useParams();
  const { name } = params;
  console.log(name);

  const [categoryData, setCategoryData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (name) {
      const fetchCategoryData = async () => {
        try {
          const response = await fetch(
            `https://upfrica-staging.herokuapp.com/api/v1/products?q=${name}`,
          );
          const data = await response.json();
          setCategoryData(data.products);
        } catch (error) {
          console.error("Error fetching category data:", error);
        } finally {
          setLoading(false);
        }
      };

      fetchCategoryData();
    }
  }, [name]);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (!categoryData || categoryData.length === 0) {
    return <p className="h-screen text-center">No data found for "{name}"</p>;
  }

  console.log(categoryData);

  return (
    <div
      className={`grid lg:grid-cols-4 gap-10 container mx-auto py-5 ${categoryData.length <= 2 ? "h-screen" : "h-auto"}`}
    >
      <div className="col-span-1 hidden lg:flex bg-white shadow-xl p-10 rounded h-[200px]">
        <div>
          <h1 className="text-xl font-bold mb-4">Price Filter</h1>
          <div className="flex flex-col space-y-4">
            <div className="flex space-x-4 items-center">
              <input
                type="text"
                name="min-price"
                id="min-price"
                placeholder="Max"
                className="border border-gray-300 px-3 py-2 rounded-md w-14 lg:w-24"
              />
              <input
                type="text"
                name="max-price"
                id="max-price"
                placeholder="Min"
                className="border border-gray-300 px-3 py-2 rounded-md w-24"
              />
              <button className="px-4 py-2 border rounded-xl">Go</button>
            </div>
          </div>
        </div>
      </div>
      <div className="col-span-3">
        <h1 className="text-2xl font-bold tracking-wide pb-4">
          Speakers & Accessories in Ghana for sale
        </h1>
        {/* catagore detels card  */}
        <div className="grid grid-cols-1 gap-6 px-2">
          {categoryData.map((product) => (
            <div
              key={product.id}
              className="bg-white shadow-lg rounded-lg overflow-hidden border border-gray-300 p-4 flex items-center space-x-6"
            >
              <div className="w-full sm:w-1/4">
                <Link href={`/details/${product.id}`}>
                  <img
                    src={
                      product.product_images &&
                      product.product_images.length > 0
                        ? product.product_images[0]
                        : "fallback-image-url.jpg"
                    }
                    alt={product.title}
                    className="w-full h-52 lg:h-72 object-center rounded-md"
                  />
                </Link>
              </div>
              <div className="w-full sm:w-3/4 space-y-2">
                <h2 className="text-xl font-bold">{product.title}</h2>
                <p
                  className={`text-base ${product.brandNew ? "text-green-500" : "text-red-500"}`}
                >
                  {product.brandNew ? "Brand New" : "Used"}
                </p>
                <p className="text-xl md:text-2xl font-bold ">
                  ${product.price.cents}
                </p>
                {product.oldPrice && (
                  <p className="text-base text-gray-500 line-through">
                    {product.oldPrice}
                  </p>
                )}
                <p className="text-base font-bold">Buy it now</p>
                <p className="text-base">Delivery: {product?.deliveryPrice}</p>
                <p className="text-sm">
                  Estimated Delivery: {product?.deliveryDate}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default SearchName;


===== src/app/(pages)/verify-account/page.jsx =====
"use client";
// export const dynamic = "force-dynamic";

import React, { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useDispatch } from "react-redux";
import { setUser } from "@/app/store/slices/userSlice";
import logo from "../../../public/images/logo.png";
import verifyIllustration from "../../image/signin.svg";
import LoaderButton from "@/components/LoaderButton";

const VerifyAccountPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const dispatch = useDispatch();

  const redirect = searchParams.get("redirect") || "/";
  const emailFromQuery = searchParams.get("email") || "";

  const [submissionStatus, setSubmissionStatus] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);

  const formik = useFormik({
    initialValues: {
      email: emailFromQuery,
      token: "",
    },
    validationSchema: Yup.object({
      email: Yup.string()
        .email("Invalid email address")
        .required("Email is required"),
      token: Yup.string()
        .matches(/^\d{6}$/, "Token must be exactly 6 digits")
        .required("Verification token is required"),
    }),
    onSubmit: async (values, { setSubmitting, setErrors }) => {
      setErrorMessage(null);
      setSubmissionStatus(null);

      try {
        const response = await fetch(
          "https://media.upfrica.com/api/verify-account/",
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(values),
          },
        );
        const data = await response.json();

        if (response.ok) {
          dispatch(setUser(data));
          setSubmissionStatus("‚úÖ Account verified!");
          setTimeout(() => router.push(redirect), 1000);
        } else {
          setErrors({ email: data.message || "Verification failed" });
        }
      } catch (err) {
        console.error("Unexpected error:", err);
        setErrorMessage("An unexpected error occurred. Please try again.");
      } finally {
        setSubmitting(false);
      }
    },
  });

  return (
    <div className="w-full min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8 bg-white shadow-xl border rounded-md p-6 sm:p-10">
        {/* Illustration */}
        <div className="flex justify-center items-center">
          <Image
            src={verifyIllustration}
            alt="Verify Account Illustration"
            width={500}
            height={500}
            className="w-full max-h-[400px] object-contain"
          />
        </div>

        {/* Form */}
        <div className="w-full flex flex-col justify-center">
          {/* Logo */}
          <div className="flex justify-center mb-6">
            <Link href="/" aria-label="Go to homepage" className="inline-block">
              <Image src={logo} alt="Upfrica Logo" width={150} height={48} />
            </Link>
          </div>

          <h2 className="text-2xl md:text-3xl font-extrabold text-center text-gray-800 mb-2">
            Verify Your Account
          </h2>
          <p className="text-base text-[#85878A] text-center mb-8 leading-relaxed">
            Enter the <strong>6-digit</strong> verification token sent to your
            email.
          </p>

          <form onSubmit={formik.handleSubmit} className="space-y-6">
            {/* Email */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-[#85878A] mb-1"
              >
                Email Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                onChange={formik.handleChange}
                value={formik.values.email}
                placeholder="you@example.com"
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  formik.touched.email && formik.errors.email
                    ? "border-red-500 ring-red-200"
                    : "border-gray-300 focus:ring-purple-500 focus:border-purple-500"
                }`}
              />
              {formik.touched.email && formik.errors.email && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.email}
                </p>
              )}
            </div>

            {/* Token */}
            <div>
              <label
                htmlFor="token"
                className="block text-sm font-medium text-[#85878A] mb-1"
              >
                Verification Token
              </label>
              <input
                id="token"
                name="token"
                type="text"
                inputMode="numeric"
                maxLength={6}
                onChange={formik.handleChange}
                value={formik.values.token}
                placeholder="123456"
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  formik.touched.token && formik.errors.token
                    ? "border-red-500 ring-red-200"
                    : "border-gray-300 focus:ring-purple-500 focus:border-purple-500"
                }`}
              />
              {formik.touched.token && formik.errors.token && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.token}
                </p>
              )}
            </div>

            {/* Submit */}
            <LoaderButton
              type="submit"
              loading={formik.isSubmitting}
              className="w-full py-2 text-white font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 bg-purple-600 hover:bg-purple-700"
            >
              Verify Account
            </LoaderButton>

            {/* API‚Äêlevel error banner */}
            {errorMessage && (
              <p className="text-red-500 text-center">{errorMessage}</p>
            )}

            {/* Success message */}
            {submissionStatus && (
              <p className="text-green-600 text-center">{submissionStatus}</p>
            )}
          </form>

          <p className="text-center text-sm text-gray-400 mt-8">
            ¬© {new Date().getFullYear()} Upfrica. All rights reserved.
          </p>
        </div>
      </div>
    </div>
  );
};

export default VerifyAccountPage;


===== src/app/(pages)/works/layout.js =====
import Footer from "@/components/common/footer/Footer";
import Header from "@/components/common/header/Header";
import React from "react";

const layout = ({ children }) => {
  return (
    <>
      <Header />
      {children}
      <Footer />
    </>
  );
};

export default layout;


===== src/app/(pages)/works/page.jsx =====
import Link from "next/link";
import React from "react";

const WorksPage = () => {
  const workData = [
    {
      id: 1,
      name: "Upfrica BD",
      title: "A unique marketplace for online buyers and sellers.",
    },
    {
      id: 2,
      name: "Tech Hub",
      title: "Connecting technology enthusiasts and professionals.",
    },
    {
      id: 3,
      name: "Green World",
      title: "Promoting eco-friendly products and services.",
    },
    {
      id: 4,
      name: "Fitness Plus",
      title: "Your one-stop solution for fitness and wellness.",
    },
  ];

  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section */}
      <div className="flex justify-center items-center bg-gradient-to-r from-purple-200 via-blue-200 to-purple-100 py-20">
        <div className="text-center container">
          <h1 className="text-3xl font-extrabold text-gray-800 mb-4">
            Upfrica BD
          </h1>
          <h2 className="text-5xl font-bold text-gray-700 mb-4">
            A unique marketplace for online buyers and sellers.
          </h2>
          <p className="text-xl font-medium text-gray-600 mb-8">
            Enjoy shopping for the items you love at the best prices. Buy or
            Sell, deliver & process payments.
          </p>
          <button className="bg-purple-500 hover:bg-black hover:text-white py-3 px-8 font-semibold rounded-full transition duration-300">
            <Link href={"/signup"}>Create Account</Link>
          </button>
        </div>
      </div>

      {/* Work Data Section */}
      <div className="py-20 container mx-auto">
        <h1 className="text-3xl text-purple-500 font-bold text-right mb-10">
          Selling with Upfrica
        </h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-10">
          {workData.map((work) => (
            <div
              key={work.id}
              className="flex flex-col items-start relative bg-white shadow-lg rounded-lg p-6 transition transform hover:scale-105 duration-200"
            >
              <div className="absolute top-4 left-4 w-16 h-16 bg-white text-purple-500 rounded-full border border-purple-500 font-bold text-xl flex items-center justify-center shadow-lg">
                {work.id}
              </div>
              <h1 className="text-2xl font-bold mt-24 text-gray-800 mx-auto">
                {work.name}
              </h1>
              <h2 className="text-gray-600 text-center mt-4">{work.title}</h2>
            </div>
          ))}
        </div>
      </div>

      {/* WhatsApp Contact Section */}
      <div className="bg-gray-100 p-10 rounded-lg max-w-lg mx-auto text-center space-y-6 shadow-md">
        <h2 className="text-2xl font-bold text-gray-700">
          Our WhatsApp Contact
        </h2>
        <p className="text-xl text-gray-500">+44 7466800672</p>
        <p className="text-lg text-gray-500">Already Have Items To Sell?</p>
        <button className="bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-full font-semibold transition duration-300">
          <Link href={"/login"}>Start Selling</Link>
        </button>
      </div>

      {/* Sign In Section */}
      <div className="fixed bottom-0 left-0 right-0 bg-black bg-opacity-95 shadow-lg text-white">
        <div className="flex  items-center  justify-center mx-auto py-4 px-6">
          <p className="text-lg">Sign in for the best experience</p>
          <button className="ml-4 px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-full font-semibold transition duration-300">
            <Link href={"/login"}>Sign in</Link>
          </button>
        </div>
      </div>
    </div>
  );
};

export default WorksPage;


===== src/app/(pages)/zoomImage/page.jsx =====
import React from "react";

function page() {
  return <div>page</div>;
}

export default page;


===== src/app/constants.js =====
// app/constants.ts (or .js)
export const SITE_BASE_URL =
  process.env.NEXT_PUBLIC_SITE_BASE_URL || "http://localhost:3000";

// Make sure this includes protocol and NO trailing slash.
export const BASE_API_URL =
  (process.env.NEXT_PUBLIC_API_BASE_URL || "http://127.0.0.1:8000").replace(/\/$/, "");

// Convenience: this always points to the DRF "api" namespace
export const API_BASE = `${BASE_API_URL}/api`;

===== src/app/layout.js =====
// src/app/layout.js
import "./globals.css";
import { Roboto } from "next/font/google";
import Providers from "./providers";
import { Toaster } from "react-hot-toast";
import BasketSheetGlobal from "@/components/BasketSheetGlobal";

const SITE =
  (process.env.NEXT_PUBLIC_SITE_BASE_URL || "https://upfrica.com").replace(/\/$/, "");

const roboto = Roboto({
  subsets: ["latin"],
  weight: ["300", "400", "500", "700"],
  variable: "--font-roboto",
});

// Optional: theme color + viewport defaults
export const viewport = {
  width: "device-width",
  initialScale: 1,
  /* Use brand-600 for light theme color to match new primary */
  themeColor: [
    { media: "(prefers-color-scheme: dark)", color: "#0b0b0b" },
    { media: "(prefers-color-scheme: light)", color: "#1E5BFF" },
  ],
};


// Site-wide defaults (page routes can override via generateMetadata)
export const metadata = {
  metadataBase: new URL(SITE),
  title: {
    default: "Upfrica Marketplace",
    template: "%s | Upfrica",
  },
  description:
    "Buy and sell online in Ghana and across Africa. Post free ads for phones, cars, electronics, fashion, and more on Upfrica Marketplace.",
  keywords: [
    "Upfrica",
    "marketplace",
    "Ghana",
    "phones",
    "cars",
    "fashion",
    "electronics",
    "buy and sell",
    "free ads",
  ],
  icons: {
    icon: "/favicon.ico",
    apple: "/apple-touch-icon.png",
  },
  manifest: "/site.webmanifest",
  openGraph: {
    type: "website",
    siteName: "Upfrica",
    title: "Upfrica Marketplace",
    description:
      "Buy and sell online in Ghana and across Africa. Post free ads for phones, cars, electronics, fashion, and more.",
    url: SITE,
    images: [
      {
        url: "/default-og-banner.jpg",
        width: 1200,
        height: 630,
        alt: "Upfrica Marketplace",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "Upfrica Marketplace",
    description:
      "Buy and sell online in Ghana and across Africa. Post free ads for phones, cars, electronics, fashion, and more.",
    images: ["/default-og-banner.jpg"],
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-snippet": -1,
      "max-image-preview": "large",
      "max-video-preview": -1,
    },
  },
  // If you use site verifications, set via env and Next will omit when empty
  verification: {
    google: process.env.NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION || undefined,
    yandex: process.env.NEXT_PUBLIC_YANDEX_SITE_VERIFICATION || undefined,
  },
};

export default function RootLayout({ children }) {
  // Organization JSON-LD (site-wide)
  const orgJsonLd = {
    "@context": "https://schema.org",
    "@type": "Organization",
    name: "Upfrica",
    url: SITE,
    logo: `${SITE}/android-chrome-512x512.png`,
    sameAs: [
      // add your official socials if/when ready
      // "https://www.facebook.com/...",
      // "https://www.instagram.com/...",
      // "https://www.linkedin.com/company/upfrica",
      // "https://twitter.com/Upfrica",
    ],
  };

  return (
    <html lang="en">
      <body
        className={`${roboto.variable} min-h-screen antialiased bg-white text-slate-900 dark:bg-neutral-950 dark:text-slate-100`}
        suppressHydrationWarning
      >
        <Providers>
          {children}

          {/* Global basket sheet lives here (renders into #portal-root) */}
          <BasketSheetGlobal />

          {/* Toasts */}
          <Toaster
            position="top-right"
            toastOptions={{
              duration: 4000,
              style: {
                padding: "12px 16px",
                fontSize: "14px",
                borderRadius: "8px",
                boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
              },
              success: { style: { background: "#d1fae5", color: "#065f46" } },
              error: { style: { background: "#fee2e2", color: "#991b1b" } },
              info: { style: { background: "#e0f2fe", color: "#075985" } },
              loading: { style: { background: "#fef3c7", color: "#92400e" } },
            }}
          />
        </Providers>

        {/* Portal root for sheets/modals (outside main stacking contexts) */}
        <div id="portal-root" />

        {/* Site-wide Organization JSON-LD */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(orgJsonLd) }}
        />
      </body>
    </html>
  );
}

===== src/app/loading.jsx =====
// src/app/loading.js
export default function Loading() {
  return (
    <>
      {/* Accessible status for screen readers */}
      <div className="sr-only" role="status" aria-live="polite">
        Loading‚Ä¶
      </div>

      {/* Minimal top progress bar (pure CSS) */}
      <div className="fixed inset-x-0 top-0 z-[1000] h-1 bg-black/10">
        <div className="h-full bg-[var(--brand-600)] upfrica-loading-bar" />
      </div>

      <style>{`
        @keyframes upfrica-loading {
          0%   { transform: translateX(-100%); }
          50%  { transform: translateX(0%); }
          100% { transform: translateX(100%); }
        }
        .upfrica-loading-bar {
          width: 30%;
          animation: upfrica-loading 1.2s ease-in-out infinite;
          will-change: transform;
        }
      `}</style>
    </>
  );
}


===== src/app/page.js =====
// src/app/page.js
import Image from "next/image";
import Script from "next/script";
import Head from "next/head";

export const revalidate = 1800; // ISR: refresh every 30 mins
export const dynamic = "force-static";

/** ‚úÖ Ensure correct mobile scaling/fitting */
export const viewport = {
  width: "device-width",
  initialScale: 1,
  viewportFit: "cover",
};

// Choose the top hero style: 'curved' | 'mosaic' | 'classic'
const HERO_STYLE = "curved";

/** --- COUNTRY META -------------------------------------------------------- */
/** @type {Record<string, {name:string,currency:'GHS'|'NGN'|'GBP',currencySymbol:string,lcpHeadline:string,lcpTagline:string,code:string,cities:string[]}>} */
const COUNTRY_META = {
  gh: {
    name: "Ghana",
    currency: "GHS",
    currencySymbol: "GH‚Çµ",
    lcpHeadline: "Shop Ghana ‚Äî Fast Delivery, MoMo & BNPL",
    lcpTagline: "Local sellers ‚Ä¢ Same-day/Next-day ‚Ä¢ Buyer Protection",
    code: "GH",
    cities: ["Accra", "Kumasi", "Takoradi", "Tamale", "Cape Coast", "Tema"],
  },
  ng: {
    name: "Nigeria",
    currency: "NGN",
    currencySymbol: "‚Ç¶",
    lcpHeadline: "Shop Nigeria ‚Äî Fast Delivery & Pay on Delivery",
    lcpTagline: "Local sellers ‚Ä¢ Same-day/Next-day ‚Ä¢ Buyer Protection",
    code: "NG",
    cities: ["Lagos", "Abuja", "Port Harcourt", "Ibadan", "Benin City", "Abeokuta"],
  },
  uk: {
    name: "United Kingdom",
    currency: "GBP",
    currencySymbol: "¬£",
    lcpHeadline: "Shop African Goods in the UK ‚Äî Next-Day Delivery",
    lcpTagline: "Verified sellers ‚Ä¢ Next-day ‚Ä¢ Diaspora favourites ‚Ä¢ Buyer Protection",
    code: "UK",
    cities: ["London", "Manchester", "Birmingham", "Leeds", "Glasgow", "Liverpool"],
  },
};


// ‚úÖ Stable demo images (bare Unsplash IDs; loader adds ?w=&q=)
const PRODUCT_IMG_POOL = [
  'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9', // phones
  'https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9', // beauty/hair
  'https://images.unsplash.com/photo-1506806732259-39c2d0268443', // kitchen gear
  'https://images.unsplash.com/photo-1556910103-1c02745aae4d',     // cookware
  'https://images.unsplash.com/photo-1518444028785-8fbcd101ebb9', // speakers
  'https://images.unsplash.com/photo-1530124566582-a618bc2615dc', // ring lights
  'https://images.unsplash.com/photo-1512496015851-a90fb38ba796', // cosmetics/creams
  'https://images.unsplash.com/photo-1545235617-9465d2a5560b',    // kettles
  'https://images.unsplash.com/photo-1482049016688-2d3e1b311543', // food prep
  'https://images.unsplash.com/photo-1517336714731-489689fd1ca8', // gadgets/accessories
  'https://images.unsplash.com/photo-1520975922284-8b456906c813', // fabrics/supplies
  'https://images.unsplash.com/photo-1539185441755-769473a23570', // sneakers
];

/** --- MOCK DATA LAYER ----------------------------------------------------- */
async function getHomeData(cc, { shuffle = false } = {}) {
  const meta = COUNTRY_META[cc] || COUNTRY_META.gh;

  // Build rails with de-dupe + optional shuffle
  const railsRaw = [
    { key: "for_you", title: "Just for You", subtitle: "Handpicked picks for you", items: demoProducts(10, cc, { badge: "Recommended" }) },
    { key: "trending_near_you", title: "Trending Near You", subtitle: "Hot right now in your area", items: demoProducts(12, cc) },
    { key: "same_day", title: "Same-Day Delivery", subtitle: "Order now, get it today", items: demoProducts(10, cc, { badge: "Same-Day" }) },
    { key: "verified_sellers", title: "From Verified Sellers", subtitle: "Top-rated, trusted shops", items: demoProducts(10, cc, { badge: "Verified" }) },
    { key: "wholesale", title: "Wholesale & Bulk", subtitle: "MOQ deals ‚Ä¢ Unit pricing", items: demoWholesale(10, cc) },
    { key: "seasonal", title: "Seasonal Picks", subtitle: "Back to School ‚Ä¢ Festivals ‚Ä¢ Eid", items: demoProducts(10, cc, { badge: "Deal" }) },
  ];
  const rails = dedupeRails(shuffle ? railsRaw.map(r => ({ ...r, items: shuffleArr(r.items) })) : railsRaw);

  return {
    country: cc,
    hero: {
      image: heroImage(cc),
      alt: `Upfrica ${meta.name} marketplace deals banner`,
      primaryCta: { label: "Browse Today's Deals", href: `/${cc}/deals` },
      secondaryCta: { label: "Sell on Upfrica", href: `/${cc}/sell` },
      searchPlaceholder: "Search products, brands, shops‚Ä¶",
    },
    carouselBanners: heroBanners(cc),
    promos: promoTiles(cc),
    featured: shuffle ? shuffleArr(demoFeatured(10, cc)) : demoFeatured(10, cc),
    rails,
    topShops: demoShops(6, cc),
    categories: demoCategories(cc),
    exploreNeeds: exploreByNeed(cc),
    socialProof: demoSocialProof(cc),
    guides: [
      { title: "How Buyer Protection Works", href: `/${cc}/help/buyer-protection` },
      { title: "Sell on Upfrica ‚Äî Start in 3 Steps", href: `/${cc}/sell` },
      { title: "Shipping Options & Delivery Times", href: `/${cc}/help/delivery` },
    ],
    seoBlocks: [
      {
        h2: "Upfrica ‚Äî The African Marketplace Built for Speed and Trust",
        body: `Discover thousands of items from local sellers and diaspora shops. Pay in ${meta.currencySymbol}, enjoy fast delivery, and shop confidently with Buyer Protection.`,
      },
      {
        h2: `Popular categories in ${meta.name}`,
        body:
          "Mobile Phones, Beauty & Hair, Food & Groceries, Home & Living, Electronics, Fashion, Industrial & Wholesale.",
      },
    ],
    faq: demoFAQ(cc),
    cityLinks: meta.cities,
  };
}

function heroImage(cc) {
  const map = {
    gh: "https://images.unsplash.com/photo-1560393464-5c69a73c5770?q=80&w=2400&auto=format&fit=crop",
    ng: "https://images.unsplash.com/photo-1590648938591-6fc4f1a6391c?q=80&w=2400&auto=format&fit=crop",
    uk: "https://images.unsplash.com/photo-1460353581641-37baddab0fa2?q=80&w=2400&auto=format&fit=crop",
  };
  return map[cc] || map.gh;
}

/* --- HERO BANNERS (carousel) --------------------------------------------- */
function heroBanners(cc) {
  const prefix = `/${cc}`;
  return [
    { title:"Back to School", sub:"20% off essentials", href:`${prefix}/deals?tag=school`, img:"https://images.unsplash.com/photo-1520975922284-8b456906c813?q=80&w=1600&auto=format&fit=crop" },
    { title:"Mega Flash Sale", sub:"New drops every hour", href:`${prefix}/deals?flash=true`, img:"https://images.unsplash.com/photo-1512295767273-ac109ac3acfa?q=80&w=1600&auto=format&fit=crop" },
    { title:"Local Food", sub:"Delivering today", href:`${prefix}/food`, img:"https://images.unsplash.com/photo-1504754524776-8f4f37790ca0?q=80&w=1600&auto=format&fit=crop" },
  ];
}

function promoTiles(cc) {
  if (cc === "gh")
    return [
      { title: "Same-Day in Accra", href: "/gh/same-day", image: "https://picsum.photos/seed/accra-same-day/1200/800" },
      { title: "MoMo First", href: "/gh/momo", image: "https://picsum.photos/seed/gh-momo/1200/800" },
      { title: "BNPL (Ghana Card)", href: "/gh/bnpl", image: "https://picsum.photos/seed/gh-bnpl/1200/800" },
    ];
  if (cc === "ng")
    return [
      { title: "Pay on Delivery Zones", href: "/ng/search?pod=true", image: "https://images.unsplash.com/photo-1586201375761-83865001e31b?q=80&w=1200&auto=format&fit=crop" },
      { title: "Mobile Phones", href: "/ng/consumer-electronics/mobile-phones", image: "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?q=80&w=1200&auto=format&fit=crop" },
      { title: "Beauty & Hair", href: "/ng/beauty", image: "https://images.unsplash.com/photo-1515651673353-3f8a83a77d89?q=80&w=1200&auto=format&fit=crop" },
    ];
  return [
    { title: "Diaspora Favourites", href: "/uk/diaspora", image: "https://images.unsplash.com/photo-1526318472351-c75fcf070305?q=80&w=1200&auto=format&fit=crop" },
    { title: "African Food & Groceries", href: "/uk/food", image: "https://images.unsplash.com/photo-1504754524776-8f4f37790ca0?q=80&w=1200&auto=format&fit=crop" },
    { title: "Hair & Beauty", href: "/uk/beauty", image: "https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?q=80&w=1200&auto=format&fit=crop" },
  ];
}

function demoProducts(n, cc, opts = {}) {
  const titles = [
    "Android Phone","Human Hair Wig","Spice Grinder","Jollof Rice Pot",
    "Bluetooth Speaker","LED Ring Light","Shea Butter","Electric Kettle",
    "Cassava Grater","Power Bank","African Print Fabric","Nike Air Max",
  ];
  const cities = (COUNTRY_META[cc]?.cities || ["City"]).slice(0, 6);

  return Array.from({ length: n }).map((_, i) => {
    const rating = 3.7 + ((i * 13) % 15) / 10; // 3.7 ‚Äì 5.1
    const reviews = 25 + ((i * 37) % 180);     // 25 ‚Äì 204
    const price = 10 * (i + 4);
    const compareAt = i % 3 === 0 ? Math.round(price * 1.25) : undefined; // some items show savings

    return {
      id: `p-${cc}-${i + 1}`,
      title: titles[i % titles.length],
      price,
      compareAt,
      image: PRODUCT_IMG_POOL[(i + (cc?.charCodeAt?.(0) ?? 0)) % PRODUCT_IMG_POOL.length],
      city: cities[i % cities.length],
      rating: Math.min(5, Math.round(rating * 10) / 10),
      reviews,
      badge: opts.badge
        ? opts.badge
        : (i % 4 === 0 ? "Same-Day" : i % 4 === 1 ? "Verified" : i % 4 === 2 ? "Deal" : ""),
    };
  });
}

// NEW: Featured items (paid placements)
function demoFeatured(n, cc) {
  return demoProducts(n, cc).map((p, i) => ({
    ...p,
    id: `f-${p.id}`,
    sponsored: true,
    badge: i % 3 === 0 ? "Hot" : p.badge,
  }));
}

function demoWholesale(n, cc) {
  const cities = COUNTRY_META[cc]?.cities ?? [];
  const pickCity = (idx) => (cities.length ? cities[idx % cities.length] : "City");
  return Array.from({ length: n }).map((_, i) => ({
    id: `w-${cc}-${i + 1}`,
    title: ["Carton of Noodles (40x)", "Shea Butter Bulk (5kg)", "Android Phones Lot (10x)", "Human Hair Bundle (20x)"][i % 4],
    price: 100 * (i + 3),
    moq: [10, 20, 50, 100][i % 4],
    unitPrice: 5 * (i + 2),
    image: `https://picsum.photos/seed/upfrica-wh-${cc}-${i}/600/600`,
    badge: "MOQ",
    city: pickCity(i),
  }));
}

function demoShops(n, cc) {
  const cities = COUNTRY_META[cc]?.cities || [];
  return Array.from({ length: n }).map((_, i) => ({
    id: `shop-${cc}-${i + 1}`,
    name: ["Accra Tech Hub", "Lagos Beauty Pro", "UK Afro Grocers", "Kumasi Home Deals", "Abuja Fashion Mall", "Tema Electronics"][i % 6],
    rating: (Math.round((3.8 + (i % 5) * 0.3) * 10) / 10).toFixed(1),
    city: cities[i % cities.length] || cities[0] || "City",
    badges: i % 2 ? ["Verified", "Fast Delivery"] : ["Fast Delivery"],
    image: `https://picsum.photos/seed/upfrica-shop-${cc}-${i}/800/600`,
  }));
}

function demoCategories(cc) {
  const cats = [
    ["Consumer Electronics", "/electronics", "devices"],
    ["Beauty & Hair", "/beauty", "hair"],
    ["Food & Groceries", "/food", "food"],
    ["Fashion", "/fashion", "fashion"],
    ["Home & Living", "/home", "home"],
    ["Wholesale", "/wholesale", "box"],
    ["Vehicles", "/vehicles", "car"],
    ["Industrial", "/industrial", "factory"],
    ["Baby & Kids", "/kids", "baby"],
    ["Sports & Fitness", "/sports", "dumbbell"],
    ["Health", "/health", "heart"],
    ["Services", "/services", "wrench"],
  ];
  return cats.map(([label, href, icon], i) => ({ id: `c-${cc}-${i}`, label, href: `/${cc}${href}`, icon }));
}

function exploreByNeed(cc){
  const { currencySymbol } = COUNTRY_META[cc] || COUNTRY_META.gh;
  const prefix = `/${cc}`;
  return [
    { label: 'Pay on Delivery', href: `${prefix}/deals?pod=true` },
    { label: `Under ${currencySymbol}100`, href: `${prefix}/deals?price_lte=100` },
    { label: 'New & Sealed', href: `${prefix}/search?condition=new` },
    { label: 'Local Pickup', href: `${prefix}/search?delivery=pickup` },
    { label: 'Free Delivery', href: `${prefix}/search?shipping=free` },
  ];
}

function demoSocialProof(cc) {
  const city = COUNTRY_META[cc]?.cities?.[0] ?? "your area";
  return {
    reviews: [
      { user: "Ama", text: "Same-day delivery. Impressed!", rating: 5 },
      { user: "Chinedu", text: "Item matched description.", rating: 5 },
      { user: "Yvonne", text: "Great value and fast.", rating: 4 },
    ],
    recentOrdersTicker: [`Order delivered in 2h ‚Ä¢ ${city}`, "Order delivered in 4h ‚Ä¢ Lagos", "Next-day delivery in London"],
  };
}

function demoFAQ(cc) {
  return [
    { q: "How does Buyer Protection work?", a: "If your order doesn't arrive or is not as described, we help you get a refund. See the policy page for details." },
    { q: "What are the delivery times?", a: "Same-day in select cities, otherwise next-day to 3 days depending on the seller location." },
    {
      q: "Do you support Pay on Delivery?",
      a: cc === "uk" ? "PoD is limited in the UK. Most orders use card or PayPal. Some local pickup sellers accept cash on collection." : "Yes, available in select cities and categories. Look for the Pay on Delivery badge.",
    },
    { q: "Is BNPL available?", a: cc === "gh" ? "Yes ‚Äî BNPL is available with Ghana Card verification." : "BNPL is available for eligible buyers and categories." },
    { q: "What about wholesale?", a: "Many sellers offer MOQ discounts. Check the Wholesale & Bulk rail and category for unit prices." },
  ];
}

/** --- SEO METADATA -------------------------------------------------------- */
export async function generateMetadata({ params } = {}) {
  const cc = (params?.country || params?.region || "gh").toLowerCase();
  const meta = COUNTRY_META[cc] || COUNTRY_META.gh;
  const baseUrl = "https://www.upfrica.com";
  const url = `${baseUrl}/${cc}`;

  return {
    title: `${meta.name} ‚Ä¢ Upfrica Marketplace ‚Äî Fast Delivery, Local Sellers`,
    description: meta.lcpTagline,
    alternates: {
      canonical: url,
      languages: {
        "en-GH": `${baseUrl}/gh`,
        "en-NG": `${baseUrl}/ng`,
        "en-GB": `${baseUrl}/uk`,
        "x-default": `${baseUrl}/`,
      },
    },
    openGraph: {
      title: `Upfrica ${meta.name}`,
      description: meta.lcpTagline,
      url,
      siteName: "Upfrica",
      type: "website",
      images: [{ url: `${baseUrl}/og/upfrica-${cc}.png`, width: 1200, height: 630, alt: `Upfrica ${meta.name}` }],
      locale: "en",
    },
    twitter: {
      card: "summary_large_image",
      title: `Upfrica ${meta.name}`,
      description: meta.lcpTagline,
      images: [`${baseUrl}/og/upfrica-${cc}.png`],
    },
  };
}

/* ------------------------------ VALUE PILLS ------------------------------ */
function ValuePills({ cc }) {
  const items = [
    ["üõ°Ô∏è", "Buyer Protection", "Refunds if things go wrong"],
    ["‚úÖ", "Verified Sellers", "Trusted stores"],
    ["‚ö°", "Fast Delivery", "Same-day / Next-day"],
    ["üí≥", "Flexible Payments", cc === "gh" ? "MoMo & BNPL" : cc === "ng" ? "Card/Transfer & PoD" : "Card & PayPal"],
  ];

  return (
    <section className="mx-auto max-w-7xl px-4 mt-8 md:mt-12" aria-label="Why Upfrica">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
        {items.map(([icon, h, p], i) => (
          <div key={i} className="rounded-2xl border border-[var(--line)] bg-white p-4 flex items-center gap-3">
            <div className="h-10 w-10 rounded-full bg-[var(--alt-surface)] border border-[var(--line)] flex items-center justify-center text-lg">
              <span aria-hidden>{icon}</span>
            </div>
            <div>
              <div className="font-semibold leading-none text-sm md:text-base">{h}</div>
              <div className="text-[var(--ink-2)] text-xs mt-1">{p}</div>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
}

/* ------------------------------ BRAND STRIP ------------------------------ */
function BrandStrip() {
  const brands = ["Upfrica Local", "KenteCo", "Jollof Express", "AfroBeauty", "TechAfrica", "HomeCraft"];

  return (
    <section className="mx-auto max-w-7xl px-4 mt-6" aria-label="Featured brands">
      <div className="rounded-2xl border border-[var(--line)] bg-white p-3 overflow-x-auto no-scrollbar">
        <ul className="flex items-center gap-6 min-w-max">
          {brands.map((b, i) => (
            <li key={i} className="h-8 px-3 rounded-lg bg-[var(--alt-surface)] border border-[var(--line)] flex items-center text-sm text-[var(--ink-2)]">
              {b}
            </li>
          ))}
        </ul>
      </div>
    </section>
  );
}

/* ------------------------------ PROMO TILES ------------------------------ */
function PromoTiles({ tiles = [] }) {
  return (
    <section className="mx-auto max-w-7xl px-4 pt-4 pb-6">
      <div className="grid gap-3 grid-cols-1 sm:grid-cols-3">
        {tiles.map((t, i) => (
          <a key={i} href={t.href} className="relative rounded-2xl overflow-hidden border border-[var(--line)] bg-white group">
            <div className="relative aspect-[4/3]">
              {/* Decorative image; link text below provides the name */}
              <Image
                src={t.image}
                alt=""
                aria-hidden="true"
                fill
                sizes="(max-width: 640px) 100vw, 33vw"
                className="object-cover transition-transform group-hover:scale-[1.02]"
                priority={i === 0}
                loading={i === 0 ? "eager" : "lazy"}
                decoding="async"
              />
            </div>
            <div className="absolute inset-x-0 bottom-0 p-3 sm:p-4 bg-gradient-to-t from-black/60 to-transparent text-white">
              <div className="text-sm font-semibold">{t.title}</div>
            </div>
          </a>
        ))}
      </div>
    </section>
  );
}

/* ------------------------------ MOBILE SIDEBAR --------------------------- */
function MobileSidebar({ cc, categories = [] }) {
  const prefix = `/${cc}`;
  const quick = [
// ‚Ä¶truncated‚Ä¶

===== src/app/password/new/page.jsx =====
"use client";

import Link from "next/link";
import React, { useState } from "react";
import { useFormik } from "formik";
import * as Yup from "yup";

const ForgotPassword = () => {
  const [submissionStatus, setSubmissionStatus] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);

  const formik = useFormik({
    initialValues: { email: "" },
    validationSchema: Yup.object({
      email: Yup.string().email("‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®").required("‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï"),
    }),
    validateOnChange: false,
    validateOnBlur: false,
    onSubmit: async (values) => {
      setSubmissionStatus(null);
      setErrorMessage(null);
      try {
        const response = await fetch(
          "https://media.upfrica.com/api/forgot-password/",
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email: values.email }),
          },
        );
        const data = await response.json();
        if (response.ok) {
          setSubmissionStatus("‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá!");
          setTimeout(() => {
            window.location.href = `/reset-password?email=${encodeURIComponent(values.email)}`;
          }, 1500);
        } else {
          setErrorMessage(
            data.message ||
              "‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
          );
        }
      } catch (error) {
        setErrorMessage("‡¶è‡¶∞‡¶∞: " + error.message);
      }
    },
  });

  return (
    <main className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="w-full max-w-3xl space-y-8">
        {/* Header */}
        <div className="text-center">
          <a href="/">
            <img
              src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark-0200279f4edfa75fc643c477221cbe7ea4d4afdd5ac37ed8f22164659d2b0fb9.png"
              alt="upfrica"
              className="h-[50px] mx-auto mb-4"
              loading="lazy"
            />
          </a>
          <h2 className="text-3xl font-extrabold text-gray-900">
            Forgot your password?
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            We‚Äôll send you instructions to reset your password.
          </p>
        </div>

        {/* Form */}
        <div className="bg-white py-8 px-6 shadow rounded-lg sm:px-10">
          <form onSubmit={formik.handleSubmit} className="space-y-6">
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                placeholder="you@example.com"
                onChange={formik.handleChange}
                value={formik.values.email}
                className={`mt-1 block w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 ${
                  formik.errors.email ? "border-red-500" : "border-gray-300"
                }`}
              />
              {formik.errors.email && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.email}
                </p>
              )}
            </div>

            <div>
              <button
                type="submit"
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700 transition"
                disabled={formik.isSubmitting}
              >
                {formik.isSubmitting ? "Sending..." : "Send Reset Link"}
              </button>
            </div>

            {submissionStatus && (
              <p className="text-green-600 text-center text-sm">
                {submissionStatus}
              </p>
            )}
            {errorMessage && (
              <p className="text-red-500 text-center text-sm">{errorMessage}</p>
            )}
          </form>

          {/* Navigation Links */}
          <div className="mt-6 text-center text-sm text-gray-600 space-y-2">
            <p>
              Remember your password?{" "}
              <Link href="/login" className="text-purple-600 hover:underline">
                Sign in
              </Link>
            </p>
            <p>
              Didn‚Äôt receive confirmation instructions?{" "}
              <a
                href="/confirmation/new"
                className="text-purple-600 hover:underline"
              >
                Resend
              </a>
            </p>
          </div>
        </div>

        {/* Help button */}
        <div className="text-center">
          <a
            href="https://wa.me/233554248805"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 hover:bg-gray-100 transition"
          >
            <i
              className="fab fa-whatsapp text-xl"
              style={{ color: "#4DC247" }}
            ></i>
            Need Help? Chat with us
          </a>
        </div>

        {/* Footer */}
        <footer className="text-center text-sm text-gray-500 mt-10 space-y-2">
          <div>¬© 2025 Upfrica Marketplace BD. All rights reserved.</div>
          <div className="space-x-2">
            <a href="/about" className="hover:underline">
              About
            </a>
            |
            <a href="/privacy" className="hover:underline">
              Privacy
            </a>
            |
            <a href="/terms" className="hover:underline">
              Terms
            </a>
          </div>
          <div className="space-x-3 text-lg">
            <a href="https://www.facebook.com/upfrica" target="_blank">
              <i className="fa fa-facebook"></i>
            </a>
            <a href="https://www.twitter.com/upfrica" target="_blank">
              <i className="fa fa-twitter"></i>
            </a>
            <a href="https://www.instagram.com/upfrica" target="_blank">
              <i className="fa fa-instagram"></i>
            </a>
            <a href="https://www.pinterest.co.uk/upfrica" target="_blank">
              <i className="fa fa-pinterest"></i>
            </a>
          </div>
        </footer>
      </div>
    </main>
  );
};

export default ForgotPassword;


===== src/app/providers.jsx =====
// src/app/providers.jsx
"use client";

import { Provider } from "react-redux";
import { store } from "./store/store";
import { AuthProvider } from "@/contexts/AuthContext";

export default function Providers({ children }) {
  return (
    <Provider store={store}>
      <AuthProvider>{children}</AuthProvider>
    </Provider>
  );
}


===== src/app/reviews/[reviewToken]/page.jsx =====


===== src/app/settings/addresses/page.jsx =====
//src/app/settings/addresses/page.jsx
'use client';

import { useEffect, useState } from 'react';
import AddressForm from '@/components/addresses/AddressForm';
import { getCleanToken } from "@/lib/getCleanToken";
import { BASE_API_URL } from "@/app/constants";

export default function AddressPage() {
  const cleanToken = getCleanToken();
  const [savedAddresses, setSavedAddresses] = useState([]);
  const [scriptLoaded, setScriptLoaded] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);

  const fetchAddresses = async () => {
    try {
      const res = await fetch(`${BASE_API_URL}/api/addresses/`, {
        headers: { Authorization: `Token ${cleanToken}` },
      });
      const data = await res.json();
      setSavedAddresses(data);
    } catch (error) {
      console.error("Error fetching addresses:", error);
    }
  };

  useEffect(() => {
    if (!window.google && !document.getElementById('google-maps-script')) {
      const script = document.createElement('script');
      script.id = 'google-maps-script';
      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places`;
      script.async = true;
      script.onload = () => setScriptLoaded(true);
      document.body.appendChild(script);
    } else {
      setScriptLoaded(true);
    }
  }, []);

  useEffect(() => {
    if (cleanToken) fetchAddresses();
  }, [cleanToken]);

  const handleEdit = (address) => {
    const a = address.address_data || {};
    setEditingAddress({
      id: address.id,
      full_name: address.full_name,
      phone_number: a.phone_number || address.phone_number || '',
      address_line_1: a.address_line_1 || '',
      address_line_2: a.address_line_2 || '',
      town: a.town || '',
      state_or_region: a.state_or_region || '',
      country: a.country || address.country || '',
      postcode: a.postcode || '',
      default: address.default || false,
    });
  };

  const handleCancelEdit = () => {
    setEditingAddress(null);
  };

  return (
    <div className="p-4 max-w-3xl mx-auto text-gray-900 dark:text-gray-100">
      <h2 className="text-xl font-bold mb-4 dark:text-white">
        {editingAddress ? 'Edit Address' : 'Add New Address'}
      </h2>

      {scriptLoaded ? (
        <AddressForm
          token={cleanToken}
          onSave={() => {
            fetchAddresses();
            setEditingAddress(null);
          }}
          scriptLoaded={scriptLoaded}
          initialData={editingAddress}
          editId={editingAddress?.id}
          onCancel={handleCancelEdit}
        />
      ) : (
        <p>Loading address form...</p>
      )}

      {editingAddress && (
        <div className="mt-2 mb-6">
          <button
            onClick={handleCancelEdit}
            className="text-sm text-gray-500 hover:text-gray-700 underline"
          >
            Cancel Edit
          </button>
        </div>
      )}

      <h3 className="text-lg font-semibold mt-8 dark:text-white">Saved Addresses</h3>
      <ul className="mt-4 space-y-4">
        {savedAddresses.map((addr) => {
          const a = addr.address_data || {};
          return (
            <li
              key={addr.id}
              className="border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4 rounded-md shadow-sm"
            >
              <div className="flex justify-between items-start">
                <div>
                  <div className="font-semibold">{addr.full_name}</div>
                  <div className="text-sm">
                    {a.address_line_1 || addr.address_line_1}, {a.town || addr.town}
                  </div>
                  <div className="text-sm">
                    {a.postcode || addr.postcode}, {a.country || addr.country}
                  </div>
                  <div className="text-sm">üìû {a.phone_number || addr.phone_number}</div>
                </div>
                {addr.default && (
                  <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded ml-2">Default</span>
                )}
              </div>

              <div className="mt-2 flex gap-4 text-sm">
                {!addr.default && (
                  <button
                    className="text-blue-600 hover:underline"
                    onClick={() => handleEdit(addr)}
                  >
                    Edit
                  </button>
                )}
                <button className="text-red-500 hover:underline">Delete</button>
              </div>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

===== src/app/settings/layout.jsx =====
import React from "react";
import clsx from "clsx";
import HeaderControls from "@/components/HeaderControls";
import Sideber from "@/components/new-dashboard/page";

const Layout = ({ children }) => {
  return (
    <div className="flex relative w-full bg-upfricaGray2 text-gray-900">
      {/* Sidebar */}
      <div>
        <Sideber />
      </div>

      {/* Main Content */}
      <div className={clsx("flex-1 transition-all duration-300 lg:px-4 py-5")}>
        <HeaderControls />
        {children}
      </div>
    </div>
  );
};

export default Layout;


===== src/app/settings/page.jsx =====
"use client";

import { ChevronRight } from "lucide-react";
import Link from "next/link";

const settings = [
  { label: "Store Details", href: "/settings/store" },
  { label: "Shipping", href: "/settings/shipping" },
  { label: "Payments", href: "/settings/payments" },
  { label: "Taxes", href: "/settings/taxes" },
];

export default function StoreSettingsPage() {
  return (
    <div className="max-w-2xl mx-auto p-6 min-h-screen">
      <h1 className="text-2xl font-semibold mb-6 ">Settings</h1>
      <div className="bg-white p-4 rounded-xl border py-6 border-gray-200 dark:border-gray-800 shadow-md">
        <div className="space-y-4">
          {settings.map((item) => (
            <Link
              key={item.label}
              href={item.href}
              className="flex items-center justify-between bg-white border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition"
            >
              <span className="text-base font-medium text-gray-800">
                {item.label}
              </span>
              <ChevronRight className="h-5 w-5 text-gray-400" />
            </Link>
          ))}
        </div>
      </div>
    </div>
  );
}


===== src/app/settings/page2.jsx =====
"use client";

import { useEffect, useState } from "react";
import {
  LayoutDashboard,
  Box,
  Package,
  Megaphone,
  LineChart,
  Layers,
  Settings,
  MessageCircle,
  Banknote,
  Bell,
  User,
} from "lucide-react";
import { Card, CardContent } from "@/components/ui/Card";
import { Button } from "@/components/ui/button";
import {
  LineChart as ReLineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

const dummyChartData = [
  { name: "Mon", orders: 5, views: 200 },
  { name: "Tue", orders: 2, views: 180 },
  { name: "Wed", orders: 4, views: 220 },
  { name: "Thu", orders: 1, views: 150 },
  { name: "Fri", orders: 6, views: 300 },
  { name: "Sat", orders: 3, views: 190 },
  { name: "Sun", orders: 7, views: 250 },
];

const navItems = [
  { label: "Dashboard", icon: <LayoutDashboard size={16} /> },
  { label: "My Products", icon: <Box size={16} /> },
  { label: "Orders", icon: <Package size={16} /> },
  { label: "Marketing Tools", icon: <Megaphone size={16} /> },
  { label: "Analytics", icon: <LineChart size={16} /> },
  { label: "My Plan & Add-ons", icon: <Layers size={16} /> },
  { label: "Store Settings", icon: <Settings size={16} /> },
  { label: "Messages", icon: <MessageCircle size={16} /> },
  { label: "Payouts & Finances", icon: <Banknote size={16} /> },
];

export default function DashboardPage() {
  return (
    <div className="min-h-screen flex flex-col lg:flex-row bg-[#F1F3F4]">
      {/* Sidebar */}
      <aside className="w-full lg:w-64 bg-gray-900 text-white p-4 space-y-4">
        <div className="text-2xl font-bold">upfrica</div>
        <nav className="space-y-2">
          {navItems.map(({ label, icon }) => (
            <div
              key={label}
              className="flex items-center gap-2 hover:bg-gray-700 rounded p-2 cursor-pointer"
            >
              {icon}
              <span>{label}</span>
            </div>
          ))}
        </nav>
      </aside>

      {/* Main Content */}
      <main className="flex-1 bg-[#F1F3F4] p-4">
        {/* TopBar */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-xl font-semibold">Dashboard</h1>
          <div className="flex gap-4">
            <Bell className="cursor-pointer" size={20} />
            <User className="cursor-pointer" size={20} />
          </div>
        </div>

        {/* Welcome Header */}
        <Card className="mb-4">
          <CardContent>
            <h2 className="text-lg font-semibold">Welcome back, Kofi!</h2>
            <p>
              Your current plan: <strong>Growth</strong> | Active Listings:{" "}
              <strong>8/50</strong>
            </p>
            <div className="mt-2 space-x-2">
              <Button>Upgrade Plan</Button>
              <Button variant="outline">Auto-fix Listings</Button>
            </div>
          </CardContent>
        </Card>

        {/* Key Stats Overview */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
          {[
            { label: "Orders", value: 12 },
            { label: "Revenue", value: "‚Çµ4,200" },
            { label: "Views", value: 1230 },
            { label: "Reviews", value: 32 },
          ].map((stat) => (
            <Card key={stat.label}>
              <CardContent className="text-center">
                <div className="text-sm text-gray-500">{stat.label}</div>
                <div className="text-lg font-semibold">{stat.value}</div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Quick Actions */}
        <div className="flex flex-wrap gap-2 mb-4">
          <Button>+ Add Product</Button>
          <Button variant="outline">View Orders</Button>
          <Button variant="outline">Run Ad Boost</Button>
        </div>

        {/* Visibility Status */}
        <Card className="mb-4">
          <CardContent>
            <p>üìç Storefront Visibility: ‚úÖ Active</p>
            <p>üìç Featured Products: 2 (of 3 allowed)</p>
            <p>üìç Locked Products: 5 (exceeds plan limit)</p>
            <div className="mt-2 space-x-2">
              <Button variant="outline">Manage Products</Button>
              <Button variant="outline">Select Featured</Button>
            </div>
          </CardContent>
        </Card>

        {/* Performance Snapshot */}
        <Card className="mb-4">
          <CardContent>
            <h3 className="text-md font-medium mb-2">
              üìà Sales Trend (Last 7 Days)
            </h3>
            <ResponsiveContainer width="100%" height={200}>
              <ReLineChart data={dummyChartData}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="orders" stroke="#10b981" />
                <Line type="monotone" dataKey="views" stroke="#6366f1" />
              </ReLineChart>
            </ResponsiveContainer>
            <div className="mt-2 text-sm text-gray-600">
              üü¢ CTR: 4.3% | üü° Conversion Rate: 2.1%
            </div>
          </CardContent>
        </Card>

        {/* Recent Activity */}
        <Card className="mb-4">
          <CardContent className="space-y-2">
            <p>üîî ‚ÄúProduct ‚ÄòSamsung TV 40"‚Äô was flagged ‚Äì action required‚Äù</p>
            <p>
              üü¢ ‚ÄúTry boosting your visibility ‚Äì 12 users viewed your shop
              today.‚Äù
            </p>
            <p>‚öôÔ∏è ‚ÄúUpdate your store banner for more trust.‚Äù</p>
          </CardContent>
        </Card>

        {/* AI Suggestions */}
        <Card>
          <CardContent className="space-y-2">
            <p>‚úÖ Add keywords to top product titles</p>
            <p>‚úÖ Lower price slightly on slow-moving item</p>
            <p>‚úÖ Add shipping method for Kumasi zone</p>
          </CardContent>
        </Card>

        {/* Footer */}
        <footer className="mt-6 text-sm text-gray-500 text-center">
          Need Help?{" "}
          <a href="/help" className="underline">
            Visit Help Center
          </a>{" "}
          |{" "}
          <a href="/contact" className="underline">
            Contact Support
          </a>
        </footer>
      </main>
    </div>
  );
}


===== src/app/settings/payments/page.jsx =====
// /app/settings/payouts/page.jsx
"use client";

import PayoutSettings from "@/components/new-dashboard/settings/PayoutSettings";

export default function PayoutSettingsPage() {
  return (
    <main className="px-4 py-6">
      <PayoutSettings />
    </main>
  );
}


===== src/app/settings/payouts/page.jsx =====
// /app/settings/payouts/page.jsx
"use client";

import PayoutSettings from "@/components/new-dashboard/settings/PayoutSettings";

export default function PayoutSettingsPage() {
  return (
    <main className="px-4 py-6">
      <PayoutSettings />
    </main>
  );
}


===== src/app/settings/shop/page.jsx =====
// app/settings/shop/page.jsx
import { cookies } from "next/headers";
import { redirect } from "next/navigation";
import FAQs from "@/components/new-dashboard/settings/FAQs";

export const metadata = {
  title: "Shop FAQs | Settings",
  description: "Create and manage your shop‚Äôs Frequently Asked Questions.",
};

export default function Page() {
  // Require auth (we only check for a token cookie here).
  const token =
    cookies().get("auth_token")?.value || cookies().get("token")?.value;
  if (!token) {
    redirect("/login?next=/settings/shop");
  }

  // The client component reuses the same cookie and fetches the shop.
  return (
    <div className="mx-auto max-w-5xl px-4 py-6">
      <h1 className="text-2xl font-semibold mb-4">Store Settings</h1>
      <FAQs />
    </div>
  );
}

===== src/app/store/slices/cartSlice.js =====
// src/app/store/slices/cartSlice.js
import { createSlice } from "@reduxjs/toolkit";

const STORAGE_KEY = "basket";

const read = () => {
  if (typeof window === "undefined") return [];
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    const arr = raw ? JSON.parse(raw) : [];
    return Array.isArray(arr) ? arr : [];
  } catch {
    return [];
  }
};

const write = (items) => {
  if (typeof window === "undefined") return;
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(items));
  } catch {}
};

const initialState = {
  items: read(),
};

const cartSlice = createSlice({
  name: "basket",
  initialState,
  reducers: {
    setBasket(state, action) {
      state.items = Array.isArray(action.payload) ? action.payload : [];
      write(state.items);
    },

    // Replaces quantity (not +=) if the item exists; otherwise pushes new
    addToBasket(state, action) {
      const payload = action.payload || {};
      const qty = Math.max(1, Number(payload.quantity ?? 1));
      const idx = state.items.findIndex(
        (i) => i.id === payload.id && i.sku === payload.sku
      );

      if (idx !== -1) {
        // keep existing fields, refresh with latest payload, set quantity
        state.items[idx] = { ...state.items[idx], ...payload, quantity: qty };
      } else {
        state.items.push({ ...payload, quantity: qty });
      }
      write(state.items);
    },

    updateQuantity(state, action) {
      const { id, sku, quantity } = action.payload || {};
      const idx = state.items.findIndex((i) => i.id === id && i.sku === sku);
      if (idx === -1) return;

      const q = Number(quantity);
      if (!Number.isFinite(q) || q <= 0) {
        // treat <= 0 as remove
        state.items.splice(idx, 1);
      } else {
        state.items[idx].quantity = q;
      }
      write(state.items);
    },

    removeFromBasket(state, action) {
      // Accept either { id, sku } or just id (legacy)
      const payload = action.payload;
      if (payload && typeof payload === "object") {
        const { id, sku } = payload;
        state.items = state.items.filter(
          (i) => !(i.id === id && (sku ? i.sku === sku : true))
        );
      } else {
        const id = payload;
        state.items = state.items.filter((i) => i.id !== id);
      }
      write(state.items);
    },

    clearBasket(state) {
      state.items = [];
      write(state.items);
    },
  },
});

export const {
  setBasket,
  addToBasket,
  updateQuantity,
  removeFromBasket,
  clearBasket,
} = cartSlice.actions;

// ---- Selectors -------------------------------------------------------------
export const selectBasketItems = (s) => s.basket.items;
export const selectBasketCount = (s) =>
  s.basket.items.reduce((n, i) => n + (i.quantity || 0), 0);

// If each item stores a per-unit price in cents (e.g., price_cents), this works:
export const selectBasketSubtotalCents = (s) =>
  s.basket.items.reduce(
    (sum, i) => sum + (i.price_cents || 0) * (i.quantity || 1),
    0
  );

export default cartSlice.reducer;

===== src/app/store/slices/countrySlice.js =====
import { createSlice } from "@reduxjs/toolkit";

const countries = [
  { name: "Ghana", code: "GHS", symbol: "‚Çµ", region: "gh" },
  { name: "United States", code: "USD", symbol: "$", region: "us" },
  { name: "United Kingdom", code: "GBP", symbol: "¬£", region: "uk" },
  { name: "Nigeria", code: "NGN", symbol: "‚Ç¶", region: "ng" },
  { name: "Kenya", code: "KES", symbol: "KSh", region: "ke" },
  { name: "South Africa", code: "ZAR", symbol: "R", region: "za" },
  { name: "Eurozone", code: "EUR", symbol: "‚Ç¨", region: "eu" },
  { name: "China", code: "CNY", symbol: "¬•", region: "cn" },
  { name: "Bangladesh", code: "BDT", symbol: "‡ß≥", region: "bd" },
];

const initialState = {
  list: countries,
  // ‚Üê default to the first entry (Ghana)
  selected: countries[0],
};

const countrySlice = createSlice({
  name: "country",
  initialState,
  reducers: {
    setSelectedCountry(state, action) {
      state.selected = action.payload;
    },
  },
});

export const { setSelectedCountry } = countrySlice.actions;
export const selectCountryList = (state) => state.country.list;
export const selectSelectedCountry = (state) => state.country.selected;
export default countrySlice.reducer;


===== src/app/store/slices/exchangeRatesSlice.js =====
// /app/store/slices/exchangeRatesSlice.js
import { createSlice } from "@reduxjs/toolkit";

const getInitialRates = () => {
  if (typeof window !== "undefined") {
    const savedRates = localStorage.getItem("exchangeRates");
    return savedRates ? JSON.parse(savedRates) : [];
  }
  return [];
};

const exchangeRatesSlice = createSlice({
  name: "exchangeRates",
  initialState: {
    rates: getInitialRates(),
  },
  reducers: {
    setExchangeRates: (state, action) => {
      state.rates = action.payload;
      if (typeof window !== "undefined") {
        localStorage.setItem("exchangeRates", JSON.stringify(state.rates));
      }
    },
  },
});

export const { setExchangeRates } = exchangeRatesSlice.actions;
export default exchangeRatesSlice.reducer;


===== src/app/store/slices/reviewsSlice.js =====
// features/reviews/reviewsSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  reviews: [],
  summary: {
    average_rating: 0,
    review_count: 0,
    // [5‚òÖ%, 4‚òÖ%, 3‚òÖ%, 2‚òÖ%, 1‚òÖ%]
    rating_percent: [0, 0, 0, 0, 0],
  },
  loading: false,
  error: null,
};

const reviewsSlice = createSlice({
  name: "reviews",
  initialState,
  reducers: {
    fetchReviewsStart(state) {
      state.loading = true;
      state.error = null;
    },
    fetchReviewsSuccess(state, action) {
      const { results, average_rating, review_count, rating_percent } =
        action.payload;
      state.loading = false;
      state.error = null;
      state.reviews = results;
      state.summary = { average_rating, review_count, rating_percent };
    },
    fetchReviewsFailure(state, action) {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const { fetchReviewsStart, fetchReviewsSuccess, fetchReviewsFailure } =
  reviewsSlice.actions;

export default reviewsSlice.reducer;


===== src/app/store/slices/toggleSlice.js =====
// store/slices/tokenSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  toggle: true,
};

const toggleSlice = createSlice({
  name: "toggle",
  initialState,
  reducers: {
    setToggle(state, action) {
      state.toggle = action.payload;
    },
    clearToggle(state) {
      state.toggle = !state.toggle;
    },
  },
});

export const { setToggle, clearToggle } = toggleSlice.actions;
export default toggleSlice.reducer;


===== src/app/store/slices/uiSlice.js =====
// src/app/store/slices/uiSlice.js
import { createSlice } from "@reduxjs/toolkit";

const uiSlice = createSlice({
  name: "ui",
  initialState: {
    basketSheetOpen: false,
  },
  reducers: {
    openBasketSheet(state) { state.basketSheetOpen = true; },
    closeBasketSheet(state) { state.basketSheetOpen = false; },
    toggleBasketSheet(state) { state.basketSheetOpen = !state.basketSheetOpen; },
  },
});

export const { openBasketSheet, closeBasketSheet, toggleBasketSheet } = uiSlice.actions;
export const selectBasketSheetOpen = (s) => s.ui.basketSheetOpen;
export default uiSlice.reducer;

===== src/app/store/slices/userSlice.js =====
// src/app/store/slices/userSlice.js
import { createSlice } from "@reduxjs/toolkit";
import {
  getFromStorage,
  saveToStorage,
  removeFromStorage,
} from "@/app/utils/storage";

const initialState = {
  user: getFromStorage("user", null),
  token: getFromStorage("token", null),
};

const userSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setUser(state, action) {
      const { user, token } = action.payload || {};
      state.user = user ?? null;
      state.token = token ?? null;
      saveToStorage("user", state.user);
      saveToStorage("token", state.token);
    },
    // Update only user fields (keep token)
    patchUser(state, action) {
      const patch = action.payload || {};
      state.user = { ...(state.user || {}), ...patch };
      saveToStorage("user", state.user);
    },
    clearUser(state) {
      state.user = null;
      state.token = null;
      removeFromStorage("user");
      removeFromStorage("token");
    },
  },
});

export const { setUser, patchUser, clearUser } = userSlice.actions;

// Selectors
export const selectAuth = (s) => s.auth;
export const selectCurrentUser = (s) => s.auth?.user || null;
export const selectToken = (s) => s.auth?.token || null;
export const selectIsLoggedIn = (s) => Boolean(s.auth?.token && s.auth?.user);

export default userSlice.reducer;

===== src/app/store/store.js =====
// /app/store/store.js
import { configureStore } from "@reduxjs/toolkit";
import exchangeRatesReducer from "./slices/exchangeRatesSlice";
import basketReducer from "./slices/cartSlice";
import userReducer from "./slices/userSlice";
import toggleReducer from "./slices/toggleSlice";
import countryReducer from "./slices/countrySlice";
import reviewsReducer from "./slices/reviewsSlice";
import uiReducer from "./slices/uiSlice";                    // ‚¨ÖÔ∏è add this

export const store = configureStore({
  reducer: {
    basket: basketReducer,
    exchangeRates: exchangeRatesReducer,
    auth: userReducer,
    toggle: toggleReducer,
    country: countryReducer,
    reviews: reviewsReducer,
    ui: uiReducer,                                           // ‚¨ÖÔ∏è add this
  },
});

===== src/app/utils/productUtils.js =====
// src/app/utils/productUtils.js

export function getProductUrl(product) {
  if (!product) return "#";
  return (
    product.frontend_url ||
    (product.slug && product.seller_country
      ? `/${product.seller_country.toLowerCase()}/${product.slug}`
      : "#")
  );
}

export function getProductFrontendUrl(product) {
  return getProductUrl(product); // reuse
}

export function getProductCanonicalUrl(product) {
  return product?.canonical_url || "";
}

export function getProductApiUrl(product) {
  return product?.product_url || "";
}

export function getProductImage(product) {
  if (!product) return "/placeholder.png";

  return (
    product?.product_images?.[0]?.url ||
    product?.image_objects?.[0]?.image_url ||
    product?.thumbnail ||
    "/placeholder.png"
  );
}


===== src/app/utils/roles.js =====
// src/app/utils/roles.js

// Normalize UI role names
export function normalizeRole(roleView) {
  if (roleView === "seller") return "seller";
  if (roleView === "agent") return "agent";
  if (roleView === "affiliate") return "affiliate";
  return "buyer";
}

// ‚úÖ NEW: Try to infer roles from many possible shapes
export function deriveRawRoles(user) {
  if (!user || typeof user !== "object") return ["buyer"];

  const out = new Set();
  const push = (v) => v && out.add(v);

  // 0) direct account_type if present (string or array)
  if (Array.isArray(user.account_type)) {
    user.account_type.filter(Boolean).forEach((r) => push(r));
  } else if (typeof user.account_type === "string") {
    push(user.account_type);
  }

  // 1) generic ‚Äúroles‚Äù arrays that might be strings or objects
  const tryArrays = [
    user.roles,
    user.user_roles,
    user.userRoles,
    user.groups,          // [{name, slug}] from DRF/ Django usually
    user.permissions,
    user.perms,
  ].filter(Boolean);

  for (const arr of tryArrays) {
    if (!Array.isArray(arr)) continue;
    for (const item of arr) {
      if (typeof item === "string") {
        // normalize common variants
        if (/seller/.test(item)) push("seller");
        if (/agent/.test(item)) push("agent");
        if (/affiliate/.test(item)) push("affiliate");
        if (/buyer/.test(item)) push("buyer");
      } else if (item && typeof item === "object") {
        const name = item.name || item.slug || item.code || item.key;
        if (typeof name === "string") {
          if (/seller/.test(name)) push("seller");
          if (/agent/.test(name)) push("agent");
          if (/affiliate/.test(name)) push("affiliate");
          if (/buyer/.test(name)) push("buyer");
        }
      }
    }
  }

  // 2) boolean-ish flags commonly seen
  if (user.is_seller || user.has_store || user.seller_type) push("seller");
  if (user.is_agent || user.agent) push("agent");
  if (user.is_affiliate || user.affiliate) push("affiliate");

  // 3) onboarding hints
  const ob = user.onboarding;
  if (ob && typeof ob === "object") {
    const hinted = ob.roles || ob.role || ob.selected_roles;
    if (Array.isArray(hinted)) {
      hinted.forEach((r) => {
        if (typeof r === "string") push(r);
      });
    } else if (typeof hinted === "string") {
      push(hinted);
    }
  }

  // 4) subscriptions / plans (very common source)
  const subs = user.subscriptions || user.plans || user.memberships;
  if (Array.isArray(subs)) {
    for (const s of subs) {
      const plan = (s && (s.plan || s.name || s.slug)) || "";
      if (typeof plan === "string") {
        if (/seller/.test(plan)) push("seller");
        if (/agent/.test(plan)) push("agent");
        if (/affiliate/.test(plan)) push("affiliate");
      }
    }
  }

  // 5) collapse seller_* ‚Üí seller
  const collapsed = new Set();
  for (const r of out) {
    if (r === "seller_private" || r === "seller_business") {
      collapsed.add("seller");
    } else {
      collapsed.add(r);
    }
  }

  // Always allow buyer as baseline if we still got nothing
  if (collapsed.size === 0) collapsed.add("buyer");

  const result = Array.from(collapsed);

  // Debug so you can see exactly what we got every time
  try {
    // Keep these while you‚Äôre diagnosing
    console.log("[roles] deriveRawRoles() input keys:", Object.keys(user || {}));
    console.log("[roles] deriveRawRoles() harvested:", result);
  } catch {}

  return result;
}

===== src/app/utils/showToast.js =====

// src/app/utils/showToast.js
import { toast } from "react-hot-toast"
import { X } from "lucide-react" // or any icon you like

/**
 * Display a toast with close button and custom style
 * @param {string} message - The message to display
 * @param {'success' | 'error' | 'info' | 'loading'} type - Type of toast
 */
export const showToast = (message, type = "error") => {
  toast.custom((t) => (
    <div
      className={`${
        t.visible ? 'animate-enter' : 'animate-leave'
      } max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5 border-l-4 ${
        type === 'success'
          ? 'border-green-600'
          : type === 'error'
          ? 'border-red-600'
          : type === 'info'
          ? 'border-blue-600'
          : 'border-yellow-500'
      }`}
    >
      <div className="flex-1 w-0 p-4">
        <p
          className={`text-sm font-medium ${
            type === 'success'
              ? 'text-green-800'
              : type === 'error'
              ? 'text-red-800'
              : type === 'info'
              ? 'text-blue-800'
              : 'text-yellow-800'
          }`}
        >
          {message}
        </p>
      </div>
      <div className="flex border-l border-gray-200">
        <button
          onClick={() => toast.dismiss(t.id)}
          className="w-full rounded-none rounded-r-lg p-2 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500"
        >
          <span className="sr-only">Close</span>
          <X className="h-4 w-4 text-gray-700" />
        </button>
      </div>
    </div>
  ), { duration: 5000 })
}

===== src/app/utils/storage.js =====
// src/app/utils/storage.js

// ‚úÖ Safe get from localStorage with JSON parsing + fallback
export function getFromStorage(key, fallback = null) {
  if (typeof window === "undefined") return fallback;

  try {
    const raw = localStorage.getItem(key);
    return raw ? JSON.parse(raw) : fallback;
  } catch (err) {
    console.warn(`‚ö†Ô∏è Failed to parse localStorage key "${key}":`, err);
    return fallback;
  }
}

// ‚úÖ Save to localStorage with JSON stringify and error handling
export function saveToStorage(key, value) {
  if (typeof window !== "undefined") {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch (err) {
      console.error(`‚ùå Failed to save key "${key}" to localStorage:`, err);
    }
  }
}

// ‚úÖ Remove key from localStorage
export function removeFromStorage(key) {
  if (typeof window !== "undefined") {
    try {
      localStorage.removeItem(key);
    } catch (err) {
      console.error(`‚ùå Failed to remove key "${key}" from localStorage:`, err);
    }
  }
}

===== src/app/utils/utils.js =====
// /app/utils.js
/**
 * Converts the price from the base currency to the target currency.
 *
 * @param {number} price - The price in the base currency.
 * @param {string} baseCurrency - The code of the base currency (e.g., 'USD').
 * @param {string} targetCurrency - The code of the target currency (e.g., 'EUR').
 * @param {Array} rates - Array of exchange rate objects.
 * @returns {number} - The converted price.
 */
export const convertPrice = (price, baseCurrency, targetCurrency, rates) => {
  const baseRateObj = rates.find((rate) => rate.currency === baseCurrency);
  const targetRateObj = rates.find((rate) => rate.currency === targetCurrency);

  if (!baseRateObj || !targetRateObj) {
    // If either rate is missing, return the original price.
    return price;
  }

  // Calculate the conversion factor: (target rate / base rate)
  const conversionFactor =
    parseFloat(targetRateObj.rate) / parseFloat(baseRateObj.rate);
  return price * conversionFactor;
};


===== src/components/AddItem/AiDescription.jsx =====
import React from "react";

const DescriptionEditor = ({ formik }) => {
  return (
    <section className="">
      <div className="mb-4">
        <h2 className="text-2xl font-semibold">Description</h2>
      </div>

      {/* Toolbar can stay as-is */}

      {/* Textarea bound to formik */}
      <div className="mb-4">
        <textarea
          className="w-full h-40 border border-gray-300 p-3 rounded resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Write a detailed description of your item, or let AI draft it for you..."
          name="description"
          value={formik.values.description}
          onChange={formik.handleChange}
        />
      </div>

      {/* Optional AI Suggestion Button */}
      <div className="text-right">
        <button
          type="button"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
          onClick={() => {
            const aiText = "This is a suggested AI description...";
            formik.setFieldValue("description", aiText); // Example AI text
          }}
        >
          Use AI description
        </button>
      </div>
    </section>
  );
};

export default DescriptionEditor;


===== src/components/AddItem/CategorySection.jsx =====
"use client";
import React from "react";
import { FiEdit2 } from "react-icons/fi";

export const CategorySection = () => {
  return (
    <div className="">
      {/* Header */}
      <div className="flex justify-between items-center mb-2">
        <h2 className="text-lg font-semibold text-gray-800">Item category</h2>
        <button
          type="button"
          aria-label="Edit Item category"
          className="flex items-center gap-1 text-blue-600 hover:text-blue-800 text-sm"
        >
          <FiEdit2 className="w-4 h-4" />
          <span>Edit</span>
        </button>
      </div>

      {/* Category Value */}
      <div className="text-sm text-gray-800">
        <button
          type="button"
          className="text-blue-600 hover:underline focus:outline-none"
        >
          Smart Watches
        </button>
        <div className="text-xs text-gray-500 mt-1">
          in Mobile Phones & Communication
        </div>
      </div>

      {/* Divider */}
      <div className="border-t mt-4"></div>
    </div>
  );
};


===== src/components/AddItem/CollectionInPersonSection.jsx =====
import React from "react";

const CollectionInPersonSection = () => {
  return (
    <div className="space-y-4  rounded-md p-4">
      {/* Header */}
      <div>
        <h3 className="text-lg font-semibold">Collection in person</h3>
        <p className="text-sm text-gray-600">
          Reach local buyers and post fewer packages.
        </p>
      </div>

      {/* City input field */}
      <div>
        <label
          htmlFor="itemLocationCityState"
          className="block text-sm font-medium text-gray-700"
        >
          City, area
        </label>
        <input
          type="text"
          name="itemLocationCityState"
          id="itemLocationCityState"
          className="mt-1 block w-full md:w-1/2 border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
        <p className="text-xs text-gray-500 mt-1">
          Postcode will not be visible on the listing.
        </p>
      </div>
    </div>
  );
};

export default CollectionInPersonSection;


===== src/components/AddItem/CompleteListing.jsx =====
import { FaImage } from "react-icons/fa"; // optional icon
import { SlOptionsVertical } from "react-icons/sl"; // for options icon

const CompleteListing = () => {
  return (
    <div className=" border-b py-5">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-semibold">Complete your listing</h2>
          <p className="text-sm mt-2 font-semibold">PHOTOS & VIDEO</p>
        </div>
        <button className="flex items-center gap-2 text-sm border px-3 py-1 rounded-full hover:bg-gray-100">
          <SlOptionsVertical className="h-4 w-4" />
          See photo options
        </button>
      </div>
      <p className="text-sm text-gray-600 mt-2 max-w-2xl">
        You can add up to 24 photos and a 1-minute video. Buyers want to see all
        details and angles.{" "}
        <a href="#" className="text-blue-600 underline hover:text-blue-800">
          Tips for taking pro photos
        </a>
      </p>
    </div>
  );
};

export default CompleteListing;


===== src/components/AddItem/DeliveryDetails.jsx =====
"use client";
import React, { useState } from "react";
import PackageDetails from "./PackageDetails";
import DomesticPostage from "./DomesticPostage";
import CollectionInPersonSection from "./CollectionInPersonSection";

export default function DeliveryDetails({ formik }) {
  const [showOptions, setShowOptions] = useState(false);
  const [internationalPostage, setInternationalPostage] = useState(false);
  const [excludedLocations, setExcludedLocations] = useState(false);
  const [deliveryMethod, setDeliveryMethod] = useState("FLAT_RATE_ONLY");

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold">Delivery details</h2>
        <button
          onClick={() => setShowOptions(!showOptions)}
          className="flex items-center space-x-1 text-blue-600 hover:underline"
        >
          <span>See postage options</span>
          <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24">
            <path d="M5 8l7 7 7-7" stroke="currentColor" strokeWidth="2" />
          </svg>
        </button>
      </div>

      {/* Toggle Options */}
      {showOptions && (
        <div className="space-y-4 p-4 border rounded-md bg-gray-50">
          <div className="flex items-center justify-between">
            <label className="font-medium">International postage</label>
            <input
              type="checkbox"
              checked={internationalPostage}
              onChange={() => setInternationalPostage(!internationalPostage)}
              className="toggle"
            />
          </div>
          <div className="flex items-center justify-between">
            <div>
              <label className="font-medium">Excluded locations</label>
              <p className="text-sm text-gray-500">
                Set specific locations that you don‚Äôt want to post to.
              </p>
            </div>
            <input
              type="checkbox"
              checked={excludedLocations}
              onChange={() => setExcludedLocations(!excludedLocations)}
              className="toggle"
            />
          </div>
        </div>
      )}

      {/* Delivery Method Selection */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {[
          {
            name: "FLAT_RATE_LOCAL_PICKUP",
            title: "Postage or collection in person",
            subtitle: "Let buyers choose how they get their items.",
          },
          {
            name: "FLAT_RATE_ONLY",
            title: "Postage only",
            subtitle: "Post items directly to buyers.",
          },
          {
            name: "NOT_SPECIFIED",
            title: "Collection only",
            subtitle: "Arrange collection in person without any postage costs.",
          },
          {
            name: "FREIGHT_RATE",
            title: "Freight only",
            subtitle: "Post oversized items.",
          },
        ].map((method) => (
          <button
            key={method.name}
            onClick={() => setDeliveryMethod(method.name)}
            className={`border h-[150px]  p-4 rounded-md text-left ${deliveryMethod === method.name ? "border-blue-500 bg-blue-50" : "hover:bg-gray-50"}`}
          >
            <h4 className="font-semibold">{method.title}</h4>
            <p className="text-sm text-gray-600">{method.subtitle}</p>
          </button>
        ))}
      </div>

      {/* Conditional rendering for PackageDetails and DomesticPostage */}
      {(deliveryMethod === "FLAT_RATE_LOCAL_PICKUP" ||
        deliveryMethod === "FLAT_RATE_ONLY") && (
        <>
          {/* Package Size & Dimensions */}
          <PackageDetails formik={formik} />

          {/* Domestic Postage */}
          <DomesticPostage />
        </>
      )}

      {deliveryMethod === "NOT_SPECIFIED" && <CollectionInPersonSection />}

      {/* Preferences */}
      <div className="space-y-2">
        <h3 className="text-lg font-medium">Preferences</h3>
        <div className="space-y-1 text-sm text-gray-700">
          <div>3 working days handling</div>
          <div>Item location: Bangladesh (Postcode not shown)</div>
          <div>No returns accepted unless item is not as described</div>
        </div>
      </div>
    </div>
  );
}


===== src/components/AddItem/DomesticPostage.jsx =====
import { useState } from "react";
import { ChevronDown, Plus, MoreVertical, Check } from "lucide-react";

export default function DomesticPostage() {
  const [selectedRate, setSelectedRate] = useState("None");
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [menuOpen, setMenuOpen] = useState(false);

  const handleRateSelect = (rate) => {
    setSelectedRate(rate);
    setDropdownOpen(false);
  };

  return (
    <div className="">
      <h3 className="text-lg font-semibold mb-1">Domestic postage</h3>
      <p className="text-sm text-gray-600 mb-4">
        For complete seller protection, choose postage with tracking and
        purchase the postage label through eBay.
      </p>

      <div className="mb-4">
        <button className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
          <Plus size={16} />
          Add primary service
        </button>
      </div>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            Rate table <span className="text-gray-400">(optional)</span>
          </label>
          <div className="relative inline-block w-full max-w-xs">
            <button
              onClick={() => setDropdownOpen(!dropdownOpen)}
              className="w-full flex justify-between items-center border rounded px-3 py-2 bg-gray-50 text-sm"
            >
              <span>{selectedRate}</span>
              <ChevronDown size={16} />
            </button>

            {dropdownOpen && (
              <div
                className="absolute mt-1 w-full border bg-white shadow rounded z-10"
                role="listbox"
              >
                <div
                  role="option"
                  className={`px-4 py-2 cursor-pointer hover:bg-gray-100 flex items-center justify-between ${
                    selectedRate === "None" ? "bg-gray-100" : ""
                  }`}
                  onClick={() => handleRateSelect("None")}
                >
                  <span>None</span>
                  {selectedRate === "None" && <Check size={16} />}
                </div>
                {/* ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶Ö‡¶™‡¶∂‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã */}
              </div>
            )}
          </div>
        </div>

        <div className="relative">
          <button
            onClick={() => setMenuOpen(!menuOpen)}
            className="p-2 rounded hover:bg-gray-100"
            aria-label="More options"
          >
            <MoreVertical size={24} />
          </button>
          {menuOpen && (
            <div
              role="menu"
              className="absolute right-0 mt-2 w-40 bg-white border rounded shadow z-10"
            >
              <div
                role="menuitem"
                className="px-4 py-2 hover:bg-gray-100 cursor-pointer flex justify-between items-center"
                onClick={() => {
                  alert("Create new clicked");
                  setMenuOpen(false);
                }}
              >
                <span>Create new</span>
                <Check size={16} />
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


===== src/components/AddItem/DropdownSelect.jsx =====
"use client";
import { useState } from "react";
import { FaChevronRight } from "react-icons/fa";

const DropdownSelect = ({ label, tooltip, options, selected, setSelected }) => {
  const [open, setOpen] = useState(false);

  return (
    <div className="mb-6 flex items-center justify-between gap-4">
      {/* Label (Left) */}
      <div className="w-1/3 text-sm font-medium text-gray-700 ">{label}</div>

      {/* Dropdown (Right) */}
      <div className="w-2/3 relative">
        <button
          type="button"
          className=" flex items-center justify-between w-full bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left text-sm focus:outline-none"
          onClick={() => setOpen(!open)}
        >
          {selected || `Select ${label}`}
          <FaChevronRight className="text-gray-400 text-sm rotate-90" />
        </button>

        {open && (
          <ul className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-sm ring-1 ring-black ring-opacity-5 overflow-auto">
            {options.map((option, idx) => (
              <li
                key={idx}
                onClick={() => {
                  setSelected(option);
                  setOpen(false);
                }}
                className={` cursor-pointer select-none py-2 px-3 hover:bg-blue-100 ${
                  option === selected
                    ? "font-semibold text-blue-600"
                    : "text-gray-900"
                }`}
              >
                <span>{option}</span>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default DropdownSelect;


===== src/components/AddItem/EbayFooter.jsx =====
import React from "react";

export default function EbayFooter() {
  const footerLinks = [
    { label: "About eBay", href: "https://www.ebayinc.com/our-company/" },
    {
      label: "Announcements",
      href: "https://community.ebay.co.uk/t5/Announcements/bg-p/Announcements",
    },
    { label: "Community", href: "https://community.ebay.co.uk" },
    {
      label: "Safety Centre",
      href: "https://pages.ebay.co.uk/safetycentre/index.html",
    },
    { label: "Seller Centre", href: "https://www.ebay.co.uk/sellercentre" },
    {
      label: "VeRO: Protecting Intellectual Property",
      href: "https://pages.ebay.co.uk/vero/index.html",
    },
    {
      label: "Policies",
      href: "https://www.ebay.co.uk/help/policies/az-index/az-index-policies?id=4649",
    },
    {
      label: "Product Safety Tips",
      href: "http://pages.ebay.co.uk/safetytips",
    },
    { label: "Help & Contact", href: "https://www.ebay.co.uk/help/home" },
    { label: "Site Map", href: "https://pages.ebay.co.uk/sitemap.html" },
  ];

  return (
    <footer className="bg-gray-50 border-t text-sm text-gray-600">
      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* Top link row */}
        <ul className="flex flex-wrap justify-center gap-x-6 gap-y-2 mb-4 text-sm text-gray-700">
          {footerLinks.map((link, idx) => (
            <li key={idx}>
              <a
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                className="hover:underline"
              >
                {link.label}
              </a>
            </li>
          ))}
        </ul>

        {/* Legal disclaimer */}
        <div className="text-center text-xs text-gray-500 space-y-1">
          <p>
            ¬© 1995-2025 eBay Inc. All Rights Reserved.{" "}
            <a
              href="https://www.ebay.co.uk/help/policies/member-behaviour-policies/user-agreement?id=4259"
              className="hover:underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              User Agreement
            </a>
            ,{" "}
            <a
              href="https://www.ebay.co.uk/help/policies/member-behaviour-policies/user-privacy-notice-privacy-policy?id=4260"
              className="hover:underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              Privacy
            </a>
            ,{" "}
            <a
              href="https://pages.ebay.co.uk/payment/2.0/terms.html"
              className="hover:underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              Payments Terms of Use
            </a>
            ,{" "}
            <a
              href="https://www.ebay.co.uk/help/policies/member-behaviour-policies/ebay-cookie-notice?id=4267"
              className="hover:underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              Cookies
            </a>{" "}
            and{" "}
            <a
              href="https://www.ebay.co.uk/adchoice"
              className="hover:underline inline-flex items-center"
              target="_blank"
              rel="noopener noreferrer"
            >
              AdChoice
              <svg
                aria-hidden="true"
                className="w-4 h-4 ml-1"
                viewBox="0 0 16 16"
                fill="currentColor"
              >
                <path d="M8 0a8 8 0 108 8A8 8 0 008 0zm.93 12.588h-1.8v-1.8h1.8zm1.307-6.323a2.312 2.312 0 00-.516-.89 2.247 2.247 0 00-.822-.528 3.414 3.414 0 00-1.066-.169 3.1 3.1 0 00-1.23.247 2.277 2.277 0 00-.902.703 1.753 1.753 0 00-.325.961h1.86a.881.881 0 01.158-.417.87.87 0 01.32-.276 1.107 1.107 0 01.485-.105 1.148 1.148 0 01.589.14.659.659 0 01.264.564.825.825 0 01-.11.406 2.07 2.07 0 01-.379.46c-.21.198-.395.374-.553.528a2.706 2.706 0 00-.426.53 1.615 1.615 0 00-.222.704v.243h1.8v-.12a1.2 1.2 0 01.13-.487 2.021 2.021 0 01.31-.429c.162-.178.34-.355.532-.528a3.151 3.151 0 00.544-.627 1.622 1.622 0 00.219-.872 2.04 2.04 0 00-.148-.761z" />
              </svg>
            </a>
          </p>
        </div>
      </div>
    </footer>
  );
}


===== src/components/AddItem/ImageUploader.jsx =====
"use client";
import React, { useState } from "react";

const MAX_IMAGES = 25;

const ImageUploader = () => {
  const [images, setImages] = useState([
    "https://i.ebayimg.com/images/g/Ng0AAOSwHJdlcvwO/s-l1200.jpg", // Stock Image
  ]);

  const handleUpload = (e) => {
    const files = Array.from(e.target.files);
    const newUrls = files.map((file) => URL.createObjectURL(file));
    setImages((prev) => [...prev, ...newUrls].slice(0, MAX_IMAGES));
  };

  return (
    <div className="p-4">
      {/* Image count */}
      <div className="mb-2">
        <p className="text-sm text-gray-600">
          {images.length}/{MAX_IMAGES}
        </p>
      </div>

      {/* Upload and thumbnails */}
      <div className="grid grid-cols-3 xl:grid-cols-5 gap-4">
        {/* Upload Box */}
        <label className="flex flex-col items-center justify-center border-2 border-dashed border-gray-400 rounded-lg p-4 cursor-pointer h-32">
          <svg
            className="w-6 h-6 text-gray-500 mb-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M4 16v1a2 2 0 002 2h12a2 2 0 002-2v-1M16 12l-4-4m0 0l-4 4m4-4v12"
            />
          </svg>
          <p className="text-sm">Drag and drop files</p>
          <span className="text-xs mt-1 px-2 py-0.5 border rounded-full">
            Upload from computer
          </span>
          <input
            type="file"
            accept="image/*"
            multiple
            onChange={handleUpload}
            className="hidden"
          />
        </label>

        {/* Images */}
        {images.map((img, index) => (
          <div
            key={index}
            className="relative rounded-lg overflow-hidden bg-gray-100 shadow-sm h-32"
          >
            <img
              src={img}
              alt={`img-${index}`}
              className="w-full h-full object-cover"
            />
            {index === 0 && (
              <span className="absolute top-1 left-1 bg-black text-white text-xs px-2 py-0.5 rounded">
                Stock
              </span>
            )}
          </div>
        ))}

        {/* Empty Boxes (placeholders) */}
        {Array.from({ length: MAX_IMAGES - images.length }).map((_, i) => (
          <div key={i} className="bg-gray-100 rounded-lg h-32"></div>
        ))}
      </div>
    </div>
  );
};
export default ImageUploader;


===== src/components/AddItem/Item.jsx =====
import React from "react";
import ItemAttributesForm from "./ItemAttributesForm";

const Item = ({ formik }) => {
  return (
    <div>
      <h1 className="text-lg lg:text-xl uppercase font-bold">Item specifics</h1>
      <ItemAttributesForm formik={formik} />
    </div>
  );
};

export default Item;


===== src/components/AddItem/ItemAttributeField.jsx =====
// components/ItemAttributeField.jsx
import React, { useState } from "react";

const ItemAttributeField = ({
  label,
  tooltip,
  options = [],
  selected,
  onChange,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");

  const filteredOptions = options.filter((option) =>
    option.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  return (
    <div className="mb-6 relative">
      <div className="flex items-center gap-2 mb-1">
        <label className="font-medium text-gray-700">{label}</label>
        <div className="group relative">
          <span className="text-sm text-blue-600 cursor-pointer">?</span>
          <div className="absolute hidden group-hover:block bg-white text-sm text-gray-700 p-2 border shadow-md w-64 z-10">
            {tooltip}
          </div>
        </div>
      </div>

      <div className="relative">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="w-full text-left px-3 py-2 border border-gray-300 rounded bg-white flex justify-between items-center"
        >
          <span>{selected || "Select an option"}</span>
          <svg className="w-4 h-4" viewBox="0 0 20 20">
            <path d="M5 8l5 5 5-5H5z" fill="currentColor" />
          </svg>
        </button>

        {isOpen && (
          <div className="absolute mt-1 w-full bg-white border border-gray-300 rounded shadow-lg z-50 max-h-60 overflow-y-auto">
            <div className="p-2">
              <input
                type="text"
                placeholder="Search or enter your own"
                className="w-full border px-2 py-1 text-sm rounded"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            {filteredOptions.map((opt, i) => (
              <div
                key={i}
                className="px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm flex justify-between"
                onClick={() => {
                  onChange(opt);
                  setIsOpen(false);
                  setSearchTerm("");
                }}
              >
                <span>{opt}</span>
                {opt === selected && (
                  <svg className="w-4 h-4 text-green-500" viewBox="0 0 20 20">
                    <path
                      d="M7.629 13.53l-3.3-3.3L2.5 12.06l5.13 5.13 10.37-10.37-1.83-1.83z"
                      fill="currentColor"
                    />
                  </svg>
                )}
              </div>
            ))}
            {filteredOptions.length === 0 && (
              <div className="px-3 py-2 text-sm text-gray-500">
                No results found
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ItemAttributeField;


===== src/components/AddItem/ItemAttributesForm.jsx =====
"use client";
import React, { useState } from "react";
// import './styles.css'; // For custom transitions (optional)

const attributes = [
  {
    label: "Item Height",
    tooltip: "Measured height from top to bottom when upright.",
    options: ["15 in", "75 in", "250 cm"],
  },
  {
    label: "Item Length",
    tooltip: "Measured length from left to right when upright.",
    options: ["0.5 in", "1 in", "18 in"],
  },
  {
    label: "Item Width",
    tooltip: "Shortest horizontal side of the item.",
    options: ["15 in", "100 cm", "150 cm"],
  },
  {
    label: "Type",
    tooltip: 'Specific type of product, e.g., "Wardrobe"',
    options: ["Wardrobe", "Canvas Wardrobe", "Freestanding Wardrobe"],
  },
];

// const ItemAttributesForm = ({formik}) => {
//   const [values, setValues] = useState({});
//   const [openDropdown, setOpenDropdown] = useState(null);

//   const handleChange = (label, value) => {
//     setValues({ ...values, [label]: value });
//   };

//   return (
//     <form className="">
//       <h2 className="text-lg font-semibold text-gray-800 mb-6 pt-5">Item Details</h2>

//       {attributes.map((attr, index) => (
//         <div key={index} className="flex justify-between items-start mb-6">
//           {/* Label + Tooltip */}
//           <div className="w-1/3 pr-4">
//             <label className="text-sm font-medium text-gray-800 flex items-center">
//               {attr.label}
//               <div className="ml-2 relative group">

//                 <div className="absolute hidden group-hover:block bg-black text-white text-xs p-2 rounded shadow-md w-48 z-20 top-5 left-0">
//                   {attr.tooltip}
//                 </div>
//               </div>
//             </label>
//           </div>

//           {/* Select Input */}
//           <div className="w-2/3 relative">
//             <select
//               onFocus={() => setOpenDropdown(attr.label)}
//               onBlur={() => setOpenDropdown(null)}
//               value={values[attr.label] || ''}
//               onChange={(e) => handleChange(attr.label, e.target.value)}
//               className={`w-full border border-gray-300 rounded-md p-2 text-sm transition-all duration-300 ease-in-out ${
//                 openDropdown === attr.label ? 'shadow-lg scale-[1.02]' : 'shadow-sm'
//               } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500`}
//             >
//               <option value="">Select {attr.label}</option>
//               {attr.options.map((opt, i) => (
//                 <option key={i} value={opt}>
//                   {opt}
//                 </option>
//               ))}
//             </select>
//           </div>
//         </div>
//       ))}
//     </form>
//   );
// };

const ItemAttributesForm = ({ formik }) => {
  const [openDropdown, setOpenDropdown] = useState(null);

  const handleChange = (label, value) => {
    formik.setFieldValue(`attributes.${label}`, value); // update formik value
  };

  const values = formik.values.attributes || {}; // get from formik

  return (
    <form className="">
      <h2 className="text-lg font-semibold text-gray-800 mb-6 pt-5">
        Item Details
      </h2>

      {attributes.map((attr, index) => (
        <div key={index} className="flex justify-between items-start mb-6">
          <div className="w-1/3 pr-4">
            <label className="text-sm font-medium text-gray-800 flex items-center">
              {attr.label}
              <div className="ml-2 relative group">
                <div className="absolute hidden group-hover:block bg-black text-white text-xs p-2 rounded shadow-md w-48 z-20 top-5 left-0">
                  {attr.tooltip}
                </div>
              </div>
            </label>
          </div>

          <div className="w-2/3 relative">
            <select
              onFocus={() => setOpenDropdown(attr.label)}
              onBlur={() => setOpenDropdown(null)}
              value={values[attr.label] || ""}
              onChange={(e) => handleChange(attr.label, e.target.value)}
              className={`w-full border border-gray-300 rounded-md p-2 text-sm transition-all duration-300 ease-in-out ${
                openDropdown === attr.label ? "shadow-lg " : "shadow-sm"
              } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500`}
            >
              <option value="">Select {attr.label}</option>
              {attr.options.map((opt, i) => (
                <option key={i} value={opt}>
                  {opt}
                </option>
              ))}
            </select>
          </div>
        </div>
      ))}
    </form>
  );
};

export default ItemAttributesForm;


===== src/components/AddItem/ItemConditionSelector.jsx =====
// 'use client'
// import React, { useState } from "react";

// const ItemConditionSelector = () => {
//     const [selectedCondition, setSelectedCondition] = useState("New");
//     const [showModal, setShowModal] = useState(false);

//     const conditions = [
//         {
//             label: "New",
//             description:
//                 "A brand-new, unused, unopened and undamaged item in original retail packaging.",
//         },
//         {
//             label: "Opened ‚Äì never used",
//             description:
//                 "A new, unused item with absolutely no signs of wear. Packaging might be opened or missing.",
//         },
//         {
//             label: "Used",
//             description:
//                 "An item that has been previously used but is fully operational.",
//         },
//         {
//             label: "For parts or not working",
//             description:
//                 "Item that does not function as intended or requires repair.",
//         },
//     ];

//     const handleSelect = (value) => {
//         setSelectedCondition(value);
//         setShowModal(false);
//     };

//     return (
//         <div className="">
//             <h1 className="text-xl font-bold tracking-wide pb-3">condition</h1>
//             <h2 className="text-sm  mb-2">Item Condition</h2>
//             <button
//                 className="text-blue-600 underline"
//                 onClick={() => setShowModal(true)}
//             >
//                 {selectedCondition}
//             </button>

//             {/* {showModal && (
//         <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
//           <div className="bg-white p-6 rounded-xl shadow-lg max-w-md w-full">
//             <h3 className="text-lg font-bold mb-4">Select Item Condition</h3>

//             <div className="space-y-4">
//               {conditions.map((cond) => (
//                 <label key={cond.label} className="block cursor-pointer">
//                   <input
//                     type="radio"
//                     name="condition"
//                     value={cond.label}
//                     checked={selectedCondition === cond.label}
//                     onChange={() => handleSelect(cond.label)}
//                     className="mr-2"
//                   />
//                   <span className="font-medium">{cond.label}</span>
//                   <div className="text-sm text-gray-600">{cond.description}</div>
//                 </label>
//               ))}
//             </div>

//             <button
//               onClick={() => setShowModal(false)}
//               className="mt-6 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
//             >
//               Done
//             </button>
//           </div>
//         </div>
//       )} */}

//             {showModal && (
//                 <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">

//                     <div className="bg-white p-6 rounded-xl shadow-lg max-w-md w-full">
//                         <h3 className="text-lg font-bold mb-4"> Item Condition</h3>
//                         <div className="space-y-4">
//                             {conditions.map((cond) => (
//                                 <label key={cond.label} className="block cursor-pointer">
//                                     <input
//                                         type="radio"
//                                         name="condition"
//                                         value={cond.label}
//                                         checked={selectedCondition === cond.label}
//                                         onChange={() => handleSelect(cond.label)}
//                                         className="mr-2"
//                                     />
//                                     <span className="font-medium">{cond.label}</span>
//                                     <div className="text-sm text-gray-600">{cond.description}</div>
//                                 </label>
//                             ))}
//                         </div>

//                         <button
//                             onClick={() => setShowModal(false)}
//                             className="mt-6 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
//                         >
//                             Done
//                         </button>
//                     </div>
//                 </div>
//             )}
//         </div>
//     );
// };

// export default ItemConditionSelector;

"use client";

import React, { useState } from "react";

const ItemConditionSelector = ({ formik }) => {
  const [showModal, setShowModal] = useState(false);

  const conditions = [
    {
      label: "New",
      description:
        "A brand-new, unused, unopened and undamaged item in original retail packaging.",
    },
    {
      label: "Opened ‚Äì never used",
      description:
        "A new, unused item with absolutely no signs of wear. Packaging might be opened or missing.",
    },
    {
      label: "Used",
      description:
        "An item that has been previously used but is fully operational.",
    },
    {
      label: "For parts or not working",
      description:
        "Item that does not function as intended or requires repair.",
    },
  ];

  const handleSelect = (value) => {
    formik.setFieldValue("condition", value); // üëà Update formik
    setShowModal(false);
  };

  return (
    <div className="">
      <h1 className="text-xl font-bold tracking-wide pb-3">Condition</h1>
      <h2 className="text-sm mb-2">Item Condition</h2>
      <button
        type="button"
        className="text-blue-600 underline"
        onClick={() => setShowModal(true)}
      >
        {formik.values.condition} {/* üëà Use formik value */}
      </button>

      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-xl shadow-lg max-w-md w-full">
            <h3 className="text-lg font-bold mb-4">Item Condition</h3>
            <div className="space-y-4">
              {conditions.map((cond) => (
                <label key={cond.label} className="block cursor-pointer">
                  <input
                    type="radio"
                    name="condition"
                    value={cond.label}
                    checked={formik.values.condition === cond.label}
                    onChange={() => handleSelect(cond.label)}
                    className="mr-2"
                  />
                  <span className="font-medium">{cond.label}</span>
                  <div className="text-sm text-gray-600">
                    {cond.description}
                  </div>
                </label>
              ))}
            </div>

            <button
              onClick={() => setShowModal(false)}
              className="mt-6 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              Done
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ItemConditionSelector;


===== src/components/AddItem/ItemDisclosures.jsx =====
"use client";
import React, { useState } from "react";

export default function ItemDisclosures() {
  const [productDocuments, setProductDocuments] = useState(false);

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Item disclosures</h2>
      </div>

      {/* Description */}
      <p className="text-gray-700 text-sm">
        Provide more details about your item‚Äôs safety and quality standards if
        you post to buyers in the EU/UK.
      </p>

      {/* Product Documents Switch */}
      <div className="flex items-start justify-between p-4 border rounded-md bg-gray-50">
        <div>
          <label className="block font-medium mb-1">Product documents</label>
          <p className="text-sm text-gray-600">
            Upload user guides, certificates, documents and accessibility
            information that are included with the item.{" "}
            <a
              href="https://www.ebay.co.uk/help/selling/selling/hazardous-materials-labeling?id=5407"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 underline"
            >
              Learn more
            </a>
          </p>
        </div>
        <div>
          <input
            type="checkbox"
            className="toggle"
            checked={productDocuments}
            onChange={() => setProductDocuments(!productDocuments)}
          />
        </div>
      </div>
    </div>
  );
}


===== src/components/AddItem/ItemSpecificsForm.jsx =====
// pages/ItemSpecificsForm.jsx
"use client";
import React, { useState } from "react";
import ItemAttributeField from "./ItemAttributeField";

const ItemSpecificsForm = () => {
  const [brand, setBrand] = useState("Apple");
  const [model, setModel] = useState("Apple Watch Series 8");
  const [caseSize, setCaseSize] = useState("41 mm");
  const [os, setOs] = useState("iOS - Apple");
  const [bandMaterial, setBandMaterial] = useState("Fluoroelastomer");

  return (
    <div className="">
      <h2 className="text-2xl font-semibold mb-6">Item Specifics</h2>

      {/* Required Fields */}
      <fieldset className="border border-gray-200 rounded p-4 mb-8">
        <legend className="text-lg font-semibold text-gray-700 px-2">
          Required
        </legend>
        <p className="text-sm text-gray-500 mb-4">
          Buyers need these details to find your item.
        </p>

        <ItemAttributeField
          label="Brand"
          tooltip="Name of the brand, designer or artist that produces the product."
          options={[
            "Apple",
            "Samsung",
            "Fitbit",
            "Garmin",
            "Amazfit",
            "Unbranded",
          ]}
          selected={brand}
          onChange={setBrand}
        />

        <ItemAttributeField
          label="Model"
          tooltip="Brand or manufacturer‚Äôs specific name used for the product."
          options={[
            "Apple Watch Series 8",
            "Apple Watch Series 7",
            "Apple Watch SE",
            "Apple Watch Series 9",
          ]}
          selected={model}
          onChange={setModel}
        />

        <ItemAttributeField
          label="Case Size"
          tooltip="Measured diagonally from 2 o‚Äôclock to 8 o‚Äôclock in millimetres (mm)."
          options={["38 mm", "40 mm", "41 mm", "42 mm", "44 mm", "45 mm"]}
          selected={caseSize}
          onChange={setCaseSize}
        />

        <ItemAttributeField
          label="Compatible Operating System"
          tooltip="Operating system software compatible with device."
          options={["iOS - Apple", "Android", "Windows", "Tizen", "Fire OS"]}
          selected={os}
          onChange={setOs}
        />

        <ItemAttributeField
          label="Band Material"
          tooltip="Main material of the band on the product."
          options={[
            "Fluoroelastomer",
            "Silicone",
            "Leather",
            "Nylon",
            "Stainless Steel",
          ]}
          selected={bandMaterial}
          onChange={setBandMaterial}
        />
      </fieldset>

      <button className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">
        Submit
      </button>
    </div>
  );
};

export default ItemSpecificsForm;


===== src/components/AddItem/LegalFAQNotice.jsx =====
import React from "react";

export default function LegalFAQNotice() {
  return (
    <div className="text-sm text-gray-700 space-y-3 leading-relaxed mt-4">
      <p>
        To improve your chances of selling, we may send you offers from buyers
        that you can choose to accept or decline.
      </p>

      <p>
        Auctions will be automatically relisted up to 8 times for free and do
        not count towards your monthly listings balance. Auctions with a 1- or
        3-day duration will be relisted with a 7-day duration.
      </p>

      <p>
        Funds from your sales may be unavailable and show as pending for a
        period of time.{" "}
        <a
          href="http://www.ebay.co.uk/help/selling/selling-getting-paid/pending-payments?id=4155"
          target="_blank"
          rel="noopener noreferrer"
          className="text-blue-600 underline"
        >
          Learn more
        </a>
      </p>
    </div>
  );
}


===== src/components/AddItem/ListingCTA.jsx =====
import React from "react";

export default function ListingCTA(formik) {
  return (
    <div className="flex flex-col  mt-6 lg:w-2/5 space-y-3 mx-auto px-8 lg:px-0">
      <button
        type="button"
        className="px-6 py-3 text-white text-sm font-medium bg-blue-600 hover:bg-blue-700 rounded-full shadow"
        aria-label="List it for free"
      >
        List it for free
      </button>

      <button
        type="submit"
        className="px-6 py-3 text-sm font-medium text-gray-700 border-black border   hover:bg-gray-200 rounded-full"
        aria-label="Save for later"
      >
        Save for later
      </button>

      <button
        onClick={() => console.log("Preview clicked:", formik.values)}
        type="button"
        className="px-6 py-3 text-sm font-medium text-gray-700 border-black border  hover:bg-gray-200 rounded-full"
        aria-label="Preview"
        name="preview"
      >
        Preview
      </button>
    </div>
  );
}


===== src/components/AddItem/ListingFee.jsx =====
import React from "react";

export default function ListingFee() {
  return (
    <div className="space-y-4 text-center  ">
      {/* Listing Fee Header */}
      <div>
        <h2 className="text-base font-semibold text-gray-800">Listing fee</h2>
        <p className="text-xl font-bold text-gray-900 mt-1">¬£0.00</p>
      </div>

      {/* Legal Info */}
      <div className="text-sm text-gray-600 space-y-3">
        <p>
          No{" "}
          <a
            href="http://www.ebay.co.uk/help/selling/fees-credits-invoices/selling-fees?id=4822"
            target="_blank"
            rel="noopener noreferrer"
            className="text-blue-600 underline"
          >
            transaction fees
          </a>{" "}
          will be applied. You accept that the duration of your listing may vary
          due to delayed appearance in search.{" "}
          <a
            href="https://www.ebay.co.uk/help/selling/listings/listings-overview?id=4072"
            target="_blank"
            rel="noopener noreferrer"
            className="text-blue-600 underline"
          >
            Learn more
          </a>
        </p>

        <p>
          By selecting <span className="font-semibold">List it for free</span>,
          you agree to pay the above fees, accept the{" "}
          <a
            href="https://www.ebay.co.uk/help/policies/member-behaviour-policies/user-agreement?id=4259"
            target="_blank"
            rel="noopener noreferrer"
            className="text-blue-600 underline"
          >
            eBay User Agreement
          </a>
          ,{" "}
          <a
            href="https://pages.ebay.co.uk/payment/2.0/terms.html"
            target="_blank"
            rel="noopener noreferrer"
            className="text-blue-600 underline"
          >
            Payments Terms of Use
          </a>
          , and{" "}
          <a
            href="https://pages.ebay.co.uk/promote-your-listings/terms/B2C/"
            target="_blank"
            rel="noopener noreferrer"
            className="text-blue-600 underline"
          >
            Marketing Program Terms
          </a>
          , acknowledge reading the{" "}
          <a
            href="https://www.ebay.co.uk/help/policies/member-behaviour-policies/user-privacy-notice-privacy-policy?id=4260"
            target="_blank"
            rel="noopener noreferrer"
            className="text-blue-600 underline"
          >
            User Privacy Notice
          </a>
          , agree to offer products and services that comply with all applicable
          laws, and assume full responsibility for the item offered and the
          content of your listing.
        </p>
      </div>
    </div>
  );
}


===== src/components/AddItem/PackageDetails.jsx =====
"use client";

// import { useState } from 'react';

export default function PackageDetails({ formik }) {
  // const [majorWeight, setMajorWeight] = useState('');
  // const [minorWeight, setMinorWeight] = useState('');
  // const [length, setLength] = useState('');
  // const [width, setWidth] = useState('');
  // const [depth, setDepth] = useState('');

  return (
    // <div className="w-3/4">
    //     <h3 className="text-lg font-semibold flex items-center gap-2">
    //         <span>Package size</span>
    //         <span className="text-gray-500 text-sm">(optional)</span>
    //     </h3>

    //     <div className='flex gap-5'>
    //         {/* Weight Section */}
    //         <fieldset>
    //             <legend className="sr-only">Package weight</legend>
    //             <label className="block font-medium mb-2">Package weight</label>
    //             <div className="flex gap-4">
    //                 <div className="relative">
    //                     <input
    //                         type="text"
    //                         name="majorWeight"
    //                         maxLength={3}
    //                         value={majorWeight}
    //                         onChange={(e) => setMajorWeight(e.target.value)}
    //                         className="border rounded px-3 py-2 pr-10 w-24"
    //                         placeholder="0"
    //                         aria-label="Enter weight in kilogrammes"
    //                     />
    //                     <span className="absolute right-3 top-2.5 text-gray-500 text-sm">kg</span>
    //                 </div>
    //                 <div className="relative">
    //                     <input
    //                         type="text"
    //                         name="minorWeight"
    //                         maxLength={3}
    //                         value={minorWeight}
    //                         onChange={(e) => setMinorWeight(e.target.value)}
    //                         className="border rounded px-3 py-2 pr-10 w-24"
    //                         placeholder="0"
    //                         aria-label="Enter weight in grammes"
    //                     />
    //                     <span className="absolute right-3 top-2.5 text-gray-500 text-sm">g</span>
    //                 </div>
    //             </div>
    //         </fieldset>

    //         {/* Dimension Section */}
    //         <fieldset>
    //             <legend className="sr-only">Package dimensions</legend>
    //             <label className="block font-medium mb-2">Package dimensions</label>
    //             <div className="flex items-center gap-2">
    //                 <div className="relative">
    //                     <input
    //                         type="text"
    //                         name="packageLength"
    //                         value={length}
    //                         onChange={(e) => setLength(e.target.value)}
    //                         className="border rounded px-3 py-2 pr-12 w-24"
    //                         placeholder="Length"
    //                         aria-label="Enter package length in centimetres"
    //                     />
    //                     <span className="absolute right-3 top-2.5 text-gray-500 text-sm">cm</span>
    //                 </div>
    //                 <span>x</span>
    //                 <div className="relative">
    //                     <input
    //                         type="text"
    //                         name="packageWidth"
    //                         value={width}
    //                         onChange={(e) => setWidth(e.target.value)}
    //                         className="border rounded px-3 py-2 pr-12 w-24"
    //                         placeholder="Width"
    //                         aria-label="Enter package width in centimetres"
    //                     />
    //                     <span className="absolute right-3 top-2.5 text-gray-500 text-sm">cm</span>
    //                 </div>
    //                 <span>x</span>
    //                 <div className="relative">
    //                     <input
    //                         type="text"
    //                         name="packageDepth"
    //                         value={depth}
    //                         onChange={(e) => setDepth(e.target.value)}
    //                         className="border rounded px-3 py-2 pr-12 w-24"
    //                         placeholder="Height"
    //                         aria-label="Enter package depth in centimetres"
    //                     />
    //                     <span className="absolute right-3 top-2.5 text-gray-500 text-sm">cm</span>
    //                 </div>
    //             </div>
    //         </fieldset>
    //     </div>
    // </div>

    <div className="lg:w-3/4 space-y-4">
      <h3 className="text-lg font-semibold flex items-center gap-2">
        <span>Package size</span>
        <span className="text-gray-500 text-sm">(optional)</span>
      </h3>

      <div className="md:flex gap-5">
        {/* Weight Section */}
        <fieldset>
          <legend className="sr-only">Package weight</legend>
          <label className="block font-medium mb-2">Package weight</label>
          <div className="flex gap-4">
            <div className="relative">
              <input
                type="text"
                name="majorWeight"
                maxLength={3}
                onChange={formik.handleChange}
                value={formik.values.majorWeight}
                className="border rounded px-3 py-2 pr-10 w-24"
                placeholder="0"
                aria-label="Enter weight in kilogrammes"
              />
              <span className="absolute right-3 top-2.5 text-gray-500 text-sm">
                kg
              </span>
            </div>
            <div className="relative">
              <input
                type="text"
                name="minorWeight"
                maxLength={3}
                onChange={formik.handleChange}
                value={formik.values.minorWeight}
                className="border rounded px-3 py-2 pr-10 w-24"
                placeholder="0"
                aria-label="Enter weight in grammes"
              />
              <span className="absolute right-3 top-2.5 text-gray-500 text-sm">
                g
              </span>
            </div>
          </div>
        </fieldset>

        {/* Dimensions Section */}
        <fieldset>
          <legend className="sr-only">Package dimensions</legend>
          <label className="block font-medium mb-2">Package dimensions</label>
          <div className="flex items-center gap-2">
            <div className="relative">
              <input
                type="text"
                name="length"
                onChange={formik.handleChange}
                value={formik.values.length}
                className="border rounded px-3 py-2 pr-12 w-24"
                placeholder="Length"
                aria-label="Enter package length in centimetres"
              />
              <span className="absolute right-3 top-2.5 text-gray-500 text-sm">
                cm
              </span>
            </div>
            <span>x</span>
            <div className="relative">
              <input
                type="text"
                name="width"
                onChange={formik.handleChange}
                value={formik.values.width}
                className="border rounded px-3 py-2 pr-12 w-24"
                placeholder="Width"
                aria-label="Enter package width in centimetres"
              />
              <span className="absolute right-3 top-2.5 text-gray-500 text-sm">
                cm
              </span>
            </div>
            <span>x</span>
            <div className="relative">
              <input
                type="text"
                name="depth"
                onChange={formik.handleChange}
                value={formik.values.depth}
                className="border rounded px-3 py-2 pr-12 w-24"
                placeholder="Height"
                aria-label="Enter package depth in centimetres"
              />
              <span className="absolute right-3 top-2.5 text-gray-500 text-sm">
                cm
              </span>
            </div>
          </div>
        </fieldset>
      </div>

      {/* Optional Submit Button to test */}
      {/* <button
          type="submit"
          className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Save Package Details
        </button> */}
    </div>
  );
}


===== src/components/AddItem/PhotoTipsModal.jsx =====
// PhotoTipsModal.jsx
import React from "react";

export const PhotoTipsModal = ({ onClose }) => {
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
      <div className="bg-white rounded-md shadow-lg w-full max-w-lg p-6 space-y-4 relative">
        <h2 className="text-xl font-bold">üì∏ Photo Tips</h2>
        <p className="text-gray-600">Make sure your photos are:</p>
        <ul className="list-disc pl-6 text-gray-700 space-y-1">
          <li>Clear, well-lit and in focus</li>
          <li>Show multiple angles of the item</li>
          <li>Use neutral backgrounds</li>
          <li>Include close-ups of any flaws</li>
        </ul>
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-400 hover:text-red-600 text-lg"
        >
          &times;
        </button>
        <div className="text-right">
          <button
            onClick={onClose}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Got it
          </button>
        </div>
      </div>
    </div>
  );
};


===== src/components/AddItem/PhotoUploader.jsx =====
// PhotoUploader.jsx
"use client";
import React, { useState } from "react";
import { ToggleOptions } from "./ToggleOptions";
import { ThumbnailGrid } from "./ThumbnailGrid";
import { PhotoTipsModal } from "./PhotoTipsModal";

export const PhotoUploader = () => {
  const [images, setImages] = useState([]);
  const [showTips, setShowTips] = useState(false);

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    const urls = files.map((file) => URL.createObjectURL(file));
    if (images.length + urls.length <= 24) {
      setImages([...images, ...urls]);
    }
  };

  return (
    <div className="p-6 border rounded-md shadow-sm bg-white space-y-6">
      {/* Section Header */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Photos & Video</h2>
        <button
          onClick={() => setShowTips(true)}
          className="text-blue-600 hover:underline"
        >
          Tips for taking pro photos
        </button>
      </div>

      {/* Toggle Options */}
      <ToggleOptions />

      {/* Upload Area */}
      <div className="border-2 border-dashed border-gray-300 p-6 text-center">
        <input
          type="file"
          accept="image/*"
          multiple
          onChange={handleImageUpload}
          className="hidden"
          id="upload-input"
        />
        <label htmlFor="upload-input" className="cursor-pointer text-gray-600">
          <div className="text-lg font-medium mb-2">
            Drag and drop files or click to upload
          </div>
          <div className="bg-blue-500 text-white px-4 py-2 inline-block rounded">
            Upload from Computer
          </div>
        </label>
      </div>

      {/* Image Count */}
      <div className="text-sm text-gray-600">{images.length}/24 Uploaded</div>

      {/* Thumbnails */}
      <ThumbnailGrid images={images} />

      {/* Tips Modal */}
      {showTips && <PhotoTipsModal onClose={() => setShowTips(false)} />}
    </div>
  );
};


===== src/components/AddItem/PhotoUploaderUI.jsx =====
import { CategorySection } from "./CategorySection";
import CompleteListing from "./CompleteListing";
import ItemSpecificsForm from "./ItemSpecificsForm";
import { TitleSection } from "./TitleSection";
import { UploaderGrid } from "./UploaderGrid";





export const PhotoUploaderUI = () => {


    return (
       
    );
};


===== src/components/AddItem/PriceFields.jsx =====
export default function PricingSection({ formik }) {
  const values = formik.values.pricing;

  return (
    <div className="space-y-6 rounded-lg bg-white w-full lg:w-4/5">
      {/* Format Selection */}
      <div className="grid grid-cols-1 space-y-3">
        <div>
          <label className="block font-medium text-sm mb-1">Format</label>
          <select
            name="pricing.format"
            value={values.format}
            onChange={formik.handleChange}
            className="w-full border px-3 py-2 rounded"
          >
            <option value="Auction">Auction</option>
            <option value="BuyItNow">Buy it now</option>
          </select>
        </div>

        {/* Duration */}
        <div>
          <label className="block font-medium text-sm mb-1">
            Auction duration
          </label>
          <select
            name="pricing.duration"
            value={values.duration}
            onChange={formik.handleChange}
            className="w-full border px-3 py-2 rounded"
          >
            <option value="3 days">3 days</option>
            <option value="5 days">5 days</option>
            <option value="7 days">7 days</option>
            <option value="10 days">10 days</option>
          </select>
        </div>
      </div>

      {/* Starting Bid + Buy it Now */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block font-medium text-sm mb-1">Starting bid</label>
          <div className="relative">
            <span className="absolute left-3 top-2.5 text-gray-500">¬£</span>
            <input
              type="text"
              name="pricing.startingBid"
              value={values.startingBid}
              onChange={formik.handleChange}
              className="w-full pl-7 border px-3 py-2 rounded"
            />
          </div>
        </div>

        <div>
          <label className="block font-medium text-sm mb-1">
            Buy it now <span className="text-gray-500">(optional)</span>
          </label>
          <div className="relative">
            <span className="absolute left-3 top-2.5 text-gray-500">¬£</span>
            <input
              type="text"
              name="pricing.buyItNow"
              value={values.buyItNow}
              onChange={formik.handleChange}
              className="w-full pl-7 border px-3 py-2 rounded"
            />
          </div>
          <p className="text-xs text-gray-500 mt-1">Minimum: ¬£66.78</p>
        </div>
      </div>

      {/* Immediate Payment */}
      <div className="flex items-start gap-3">
        <input
          type="checkbox"
          name="pricing.immediatePay"
          checked={values.immediatePay}
          onChange={formik.handleChange}
          className="mt-1"
        />
        <label htmlFor="pricing.immediatePay" className="text-sm text-gray-700">
          Require immediate payment when buyer uses Buy it now
        </label>
      </div>

      {/* Reserve Price */}
      <div>
        <label className="block font-medium text-sm mb-1">
          Reserve price{" "}
          <span className="text-gray-500">(optional ‚Äî fees apply)</span>
        </label>
        <div className="relative">
          <span className="absolute left-3 top-2.5 text-gray-500">¬£</span>
          <input
            type="text"
            name="pricing.reservePrice"
            value={values.reservePrice}
            onChange={formik.handleChange}
            className="w-full pl-7 border px-3 py-2 rounded"
          />
        </div>
        <p className="text-xs text-gray-500 mt-1">
          This is the lowest price you're willing to sell for. Fees apply even
          if the item doesn‚Äôt sell.
        </p>
      </div>

      {/* Quantity */}
      <div>
        <label className="block font-medium text-sm mb-1">Quantity</label>
        <input
          type="text"
          value={values.quantity}
          disabled
          className="w-20 px-3 py-2 border rounded bg-gray-100 text-gray-600"
        />
      </div>
    </div>
  );
}


===== src/components/AddItem/PricingOptionsPanel.jsx =====
"use client";
import React, { useState } from "react";

export default function PricingOptionsPanel() {
  const [expanded, setExpanded] = useState(false);
  const [options, setOptions] = useState({
    autofill: true,
    buyItNow: true,
    immediatePay: true,
    reservePrice: true,
    scheduling: true,
    sellAsLot: false,
    autoRelist: true,
    privateListing: false,
  });

  const toggleOption = (key) => {
    setOptions({ ...options, [key]: !options[key] });
  };

  return (
    <div className="pb-4">
      {/* Header + Expand */}
      <div className="flex justify-between items-center">
        <h2 className="text-lg font-semibold text-gray-900">Pricing</h2>
        <button
          onClick={() => setExpanded(!expanded)}
          className="text-blue-600 hover:underline text-sm flex items-center gap-1"
          aria-expanded={expanded}
        >
          See pricing options
          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 16 16">
            <path d="M4 6l4 4 4-4" />
          </svg>
        </button>
      </div>

      {/* Expandable Options */}
      {expanded && (
        <div className="mt-4 space-y-4 text-sm text-gray-700">
          {[
            {
              key: "autofill",
              label: "Autofill pricing details",
              description:
                "Allow the Buy It Now price or auction starting bid to be autofilled based on similar or matching items.",
            },
            {
              key: "buyItNow",
              label: "Buy it now",
              description: "Add a fixed price option to your auction.",
            },
            {
              key: "immediatePay",
              label: "Immediate payment",
              description:
                "Require immediate payment for Buy it now purchases.",
              indent: true,
            },
            {
              key: "reservePrice",
              label: "Reserve price",
              description:
                "Set the lowest price you're willing to sell an item for (non-refundable fee applies).",
            },
            {
              key: "scheduling",
              label: "Scheduling",
              description:
                "Select the time and date you want your listing to go live (non-refundable fee applies).",
            },
            {
              key: "sellAsLot",
              label: "Sell as a lot",
              description:
                "Group similar or identical items together to sell to a single buyer.",
            },
            {
              key: "autoRelist",
              label: "Auto relist",
              description:
                "Automatically relist this item up to 8 times if it doesn‚Äôt sell with no insertion or optional listing upgrade fees.",
            },
            {
              key: "privateListing",
              label: "Private listing",
              description:
                "Allow buyers to remain anonymous when they bid on or buy an item.",
            },
          ].map(({ key, label, description, indent }) => (
            <div
              key={key}
              className={`flex items-start justify-between ${
                indent ? "pl-4 border-l border-gray-200" : ""
              }`}
            >
              <div className="flex-1 pr-4">
                <label className="block font-medium">{label}</label>
                <p className="text-gray-500 text-sm">{description}</p>
              </div>
              <div>
                <label className="inline-flex relative items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={options[key]}
                    onChange={() => toggleOption(key)}
                    className="sr-only peer"
                  />
                  <div className="w-10 h-5 bg-gray-300 peer-checked:bg-blue-600 rounded-full peer transition-all">
                    <div className="w-4 h-4 bg-white rounded-full shadow transform peer-checked:translate-x-5 transition-transform duration-200"></div>
                  </div>
                </label>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}


===== src/components/AddItem/PricingSection.jsx =====
import PriceFields from "./PriceFields";
import PricingOptionsPanel from "./PricingOptionsPanel";
import SoldListingsSummary from "./SoldListingsSummary";

export default function PricingSection({ formik }) {
  return (
    <div>
      <PricingOptionsPanel />
      <div className="grid md:grid-cols-2 md:gap-4">
        <div>
          <PriceFields formik={formik} />
        </div>
        <SoldListingsSummary />
      </div>
    </div>
  );
}


===== src/components/AddItem/PromoteListing.jsx =====
"use client";
import React, { useState } from "react";

export default function PromoteYourListing() {
  const [adRate, setAdRate] = useState(9);
  const [isPromoted, setIsPromoted] = useState(true);
  const [isEditing, setIsEditing] = useState(false);

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-lg font-semibold text-gray-900 uppercase tracking-wide">
          Promote Your Listing
        </h2>
        <p className="text-base text-gray-600 mt-1 max-w-3xl">
          Promoting your listings helps drive more sales by increasing
          visibility and reaching more relevant buyers.
        </p>
      </div>

      <div className="bg-white  border rounded-xl p-6 flex flex-col gap-6 lg:flex-row lg:items-start lg:gap-10">
        {/* Strategy */}
        <div className="flex-1">
          <p className="text-sm text-gray-500 uppercase font-medium">
            Campaign Strategy
          </p>
          <h3 className="text-lg font-bold text-gray-900 mt-1">
            Reach more buyers
          </h3>
          <p className="text-base text-gray-600 mt-2">
            Increase listing visibility through ad placements. You only pay when
            your promoted items sell.
          </p>
        </div>

        {/* Insight */}
        <div className="flex-1 border-t pt-4 lg:border-t-0 lg:border-l lg:pt-0 lg:pl-6">
          <p className="flex items-center gap-2 text-base font-semibold text-gray-900">
            <svg
              className="w-5 h-5 text-blue-600"
              viewBox="0 0 24 24"
              fill="none"
            >
              <path
                d="M2 21H22M21 4H16M21 9V4M13 13L21 4M4 15L9 9M9 9L13 13"
                stroke="#3665F3"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            40% more daily bids
          </p>
          <p className="text-base text-gray-600 mt-2">
            Listings promoted using a general campaign see higher engagement
            (based on Jul - Aug 2024 data).
          </p>
        </div>

        {/* Settings */}
        <div className="flex-1 border-t pt-4 lg:border-t-0 lg:border-l lg:pt-0 lg:pl-6 flex flex-col gap-3">
          <div className="flex flex-col gap-2">
            <div className="flex items-center justify-between">
              <div>
                <div className="flex items-center gap-1 text-base font-medium text-gray-700">
                  Listing Ad Rate
                  <button
                    className="text-gray-400 hover:text-gray-600"
                    aria-label="Info"
                  >
                    <svg
                      className="w-4 h-4"
                      viewBox="0 0 16 16"
                      fill="currentColor"
                    >
                      <path d="M8 0a8 8 0 108 8A8 8 0 008 0zm.93 12.588h-1.8v-1.8h1.8zm1.307-6.323a2.312 2.312 0 00-.516-.89 2.247 2.247 0 00-.822-.528 3.414 3.414 0 00-1.066-.169 3.1 3.1 0 00-1.23.247 2.277 2.277 0 00-.902.703 1.753 1.753 0 00-.325.961h1.86a.881.881 0 01.158-.417.87.87 0 01.32-.276 1.107 1.107 0 01.485-.105 1.148 1.148 0 01.589.14.659.659 0 01.264.564.825.825 0 01-.11.406 2.07 2.07 0 01-.379.46c-.21.198-.395.374-.553.528a2.706 2.706 0 00-.426.53 1.615 1.615 0 00-.222.704v.243h1.8v-.12a1.2 1.2 0 01.13-.487 2.021 2.021 0 01.31-.429c.162-.178.34-.355.532-.528a3.151 3.151 0 00.544-.627 1.622 1.622 0 00.219-.872 2.04 2.04 0 00-.148-.761z" />
                    </svg>
                  </button>
                </div>

                <div className="mt-2">
                  {isEditing ? (
                    <input
                      type="number"
                      className="w-20 px-3 py-2 border text-sm rounded focus:outline-none focus:ring focus:ring-blue-500"
                      value={adRate}
                      onChange={(e) => setAdRate(e.target.value)}
                      onBlur={() => setIsEditing(false)}
                    />
                  ) : (
                    <p className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                      {adRate}%
                      <button
                        onClick={() => setIsEditing(true)}
                        className="text-blue-600 hover:text-blue-800"
                        aria-label="Edit ad rate"
                      >
                        <svg
                          className="w-4 h-4"
                          fill="none"
                          viewBox="0 0 16 16"
                        >
                          <path
                            d="M11.25 1.75L14.25 4.75L5.25 13.75H2.25V10.75L11.25 1.75Z"
                            stroke="currentColor"
                            strokeWidth="1.2"
                          />
                        </svg>
                      </button>
                    </p>
                  )}
                  <p className="text-xs text-gray-500">Suggested: 9.0%</p>
                </div>
              </div>

              {/* Toggle */}
              <div className="mt-3">
                <label className="inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={isPromoted}
                    onChange={() => setIsPromoted(!isPromoted)}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-300 peer-checked:bg-blue-600 rounded-full transition relative">
                    <div className="absolute left-1 top-1 w-4 h-4 bg-white rounded-full transition peer-checked:translate-x-5"></div>
                  </div>
                </label>
              </div>
            </div>
          </div>

          {/* Campaign info */}
          <p className="text-sm text-blue-600 truncate mt-2">
            New campaign: Campaign 21/04/2025 11:01:16
          </p>
        </div>
      </div>
    </div>
  );
}


===== src/components/AddItem/ScheduleListing.jsx =====
"use client";
import React, { useState } from "react";

const ScheduleListing = () => {
  const [isScheduled, setIsScheduled] = useState(true);
  const [date, setDate] = useState("2025-04-22");
  const [hour, setHour] = useState("00");
  const [minute, setMinute] = useState("00");

  const hours = [...Array(24).keys()].map((h) => String(h).padStart(2, "0"));
  const minutes = [...Array(60).keys()].map((m) => String(m).padStart(2, "0"));

  return (
    <div className="">
      <div className="flex justify-between items-start mb-4">
        <div>
          <label className="text-lg font-medium block mb-1">
            Schedule your listing
          </label>
          <p className="text-gray-600 text-sm max-w-md">
            Your listing goes live immediately, unless you select a time and
            date you want it to start.
          </p>
        </div>

        <div>
          <label className="relative inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              className="sr-only peer"
              checked={isScheduled}
              onChange={() => setIsScheduled(!isScheduled)}
            />
            <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-blue-600 transition-all"></div>
            <div className="absolute left-1 top-1 w-4 h-4 bg-white rounded-full shadow transform transition peer-checked:translate-x-5"></div>
          </label>
        </div>
      </div>

      {isScheduled && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4 items-end">
          <div>
            <label
              htmlFor="schedule-date"
              className="block text-sm font-medium"
            >
              Day
            </label>
            <input
              id="schedule-date"
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          <div>
            <fieldset>
              <legend className="block text-sm font-medium mb-1">Time</legend>
              <div className="flex items-center gap-2">
                <select
                  value={hour}
                  onChange={(e) => setHour(e.target.value)}
                  className="px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {hours.map((h) => (
                    <option key={h} value={h}>
                      {h}
                    </option>
                  ))}
                </select>
                <span className="text-lg font-semibold">:</span>
                <select
                  value={minute}
                  onChange={(e) => setMinute(e.target.value)}
                  className="px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {minutes.map((m) => (
                    <option key={m} value={m}>
                      {m}
                    </option>
                  ))}
                </select>
                <span className="ml-2 text-sm text-gray-600">BST</span>
              </div>
            </fieldset>
          </div>
        </div>
      )}
    </div>
  );
};

export default ScheduleListing;


===== src/components/AddItem/SoldListingsSummary.jsx =====
"use client";
import React, { useState } from "react";

export default function SoldListingsSummary() {
  const [showTooltip, setShowTooltip] = useState(false);

  return (
    <div className="bg-white   space-y-6">
      {/* Title + Tooltip */}
      <div className="flex items-start justify-between">
        <span className="text-lg font-semibold text-gray-900">
          Sold listings in the last 90 days
        </span>
        <button
          onClick={() => setShowTooltip(!showTooltip)}
          className="text-gray-500 hover:text-gray-700"
          aria-label="Information about sold listings"
        >
          <svg className="w-4 h-4" viewBox="0 0 16 16" fill="currentColor">
            <path d="M8 0a8 8 0 108 8A8 8 0 008 0zm.93 12.588h-1.8v-1.8h1.8zm1.307-6.323a2.312 2.312 0 00-.516-.89 2.247 2.247 0 00-.822-.528 3.414 3.414 0 00-1.066-.169 3.1 3.1 0 00-1.23.247 2.277 2.277 0 00-.902.703 1.753 1.753 0 00-.325.961h1.86a.881.881 0 01.158-.417.87.87 0 01.32-.276 1.107 1.107 0 01.485-.105 1.148 1.148 0 01.589.14.659.659 0 01.264.564.825.825 0 01-.11.406 2.07 2.07 0 01-.379.46c-.21.198-.395.374-.553.528a2.706 2.706 0 00-.426.53 1.615 1.615 0 00-.222.704v.243h1.8v-.12a1.2 1.2 0 01.13-.487 2.021 2.021 0 01.31-.429c.162-.178.34-.355.532-.528a3.151 3.151 0 00.544-.627 1.622 1.622 0 00.219-.872 2.04 2.04 0 00-.148-.761z" />
          </svg>
        </button>
      </div>

      {/* Tooltip Popup */}
      {showTooltip && (
        <div className="border rounded-md p-4 bg-gray-50 text-sm text-gray-700 space-y-3 shadow-md">
          <div>
            <h3 className="font-medium">Recommended starting bid</h3>
            <p>
              A competitive price intended to create more engagement with your
              listing. Based on sold prices of similar listings (excluding
              postage and fees).
            </p>
          </div>
          <div>
            <h3 className="font-medium">Median sold price</h3>
            <p>
              The median sold price per item for similar listings, excluding
              postage and Buyer Protection fees.
            </p>
          </div>
          <div>
            <h3 className="font-medium">Free postage</h3>
            <p>The percentage of sales that included free postage.</p>
          </div>
        </div>
      )}

      {/* Metrics */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
        <div className="bg-gray-100 p-4 rounded text-center">
          <p className="text-sm text-gray-600">Recommended starting bid</p>
          <p className="text-lg font-bold text-gray-900 mt-1">¬£47.70</p>
        </div>
        <div className="bg-gray-100 p-4 rounded text-center">
          <p className="text-sm text-gray-600">Median sold price</p>
          <p className="text-lg font-bold text-gray-900 mt-1">¬£136.91</p>
        </div>
        <div className="bg-gray-100 p-4 rounded text-center">
          <p className="text-sm text-gray-600">Free postage</p>
          <p className="text-lg font-bold text-gray-900 mt-1">33%</p>
        </div>
      </div>

      {/* CTA Button */}
      <div className="text-center">
        <button
          className="text-blue-600 text-sm font-medium hover:underline"
          type="button"
        >
          See sold listings
        </button>
      </div>
    </div>
  );
}


===== src/components/AddItem/ThumbnailGrid.jsx =====
// ThumbnailGrid.jsx
import React from "react";

export const ThumbnailGrid = ({ images }) => {
  return (
    <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4 mt-4">
      {images.map((src, index) => (
        <div
          key={index}
          className="relative w-full h-28 border rounded overflow-hidden"
        >
          <img
            src={src}
            alt={`upload-${index}`}
            className="object-cover w-full h-full"
          />
          <div className="absolute top-1 left-1 bg-black text-white text-xs px-2 py-0.5 rounded">
            #{index + 1}
          </div>
        </div>
      ))}
    </div>
  );
};


===== src/components/AddItem/TitleSection.jsx =====
// 'use client'
// import React, { useState } from "react";
// import { FiSettings } from "react-icons/fi";

// export const TitleSection = ({ formik }) => {
//   const [showOptions, setShowOptions] = useState(false);
//   const [title, setTitle] = useState("Apple Watch SE (2022) 40mm Midnight Aluminium Case with Sport Band, Regular...");
//   const [subtitleEnabled, setSubtitleEnabled] = useState(false);

//   const toggleOptions = () => setShowOptions(!showOptions);

//   return (
//     <div className="">

//       {/* Title header */}
//       <div className="flex justify-between items-center mb-2">
//         <h2 className="text-lg font-semibold">Title</h2>

//         <div className="relative">
//           <button
//             onClick={toggleOptions}
//             className="flex items-center space-x-1  text-sm hover:underline"
//           >
//             <span>See title options</span>
//             <FiSettings className="w-4 h-4" />
//           </button>

//           {showOptions && (
//             <div className="absolute right-0 mt-2 w-80 p-4 bg-white border rounded-md shadow z-10 text-sm">
//               <p className="mb-3 text-gray-700">
//                 Enable the items below that you‚Äôd like to show as an option when listing an item.
//               </p>

//               <div className="flex items-start justify-between gap-4">
//                 <div>
//                   <label className="font-medium">Subtitle</label>
//                   <p className="text-xs text-gray-600">
//                     Subtitles appear in our search results in the list view, and can increase buyer interest by providing more descriptive info (non-refundable fee applies).
//                   </p>
//                 </div>

//                 <label className="inline-flex items-center cursor-pointer">
//                   <input
//                     type="checkbox"
//                     checked={subtitleEnabled}
//                     onChange={() => setSubtitleEnabled(!subtitleEnabled)}
//                     className="sr-only peer"
//                   />
//                   <div className="w-11 h-6 bg-gray-300 peer-checked:bg-blue-600 rounded-full peer relative transition-colors duration-200">
//                     <div className="absolute left-1 top-1 w-4 h-4 bg-white rounded-full shadow peer-checked:translate-x-5 transition-transform duration-200"></div>
//                   </div>
//                 </label>
//               </div>
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Title Input */}
//       <div className="mb-1">
//         <label htmlFor="title" className="block text-sm font-medium text-gray-700">
//           Item title
//         </label>
//         <input
//           id="title"
//           name="title"
//           type="text"
//           maxLength={80}
//           value={formik.values.title}
//           onChange={formik.handleChange}
//           onBlur={formik.handleBlur}
//           className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
//           required
//         />

//       </div>

//       {/* Character counter */}
//       <div className="flex justify-end text-xs text-gray-500">
//         {title.length}/80
//       </div>
//     </div>
//   );
// };

"use client";

import React, { useState } from "react";
import { FiSettings } from "react-icons/fi";

export const TitleSection = ({ formik }) => {
  const [showOptions, setShowOptions] = useState(false);
  const [subtitleEnabled, setSubtitleEnabled] = useState(false); // subtitle option er jonno

  const toggleOptions = () => setShowOptions(!showOptions);

  return (
    <div className="">
      {/* Title Header */}
      <div className="flex justify-between items-center mb-2">
        <h2 className="text-lg font-semibold">Title</h2>

        <div className="relative">
          <button
            type="button"
            onClick={toggleOptions}
            className="flex items-center space-x-1 text-sm hover:underline"
          >
            <span>See title options</span>
            <FiSettings className="w-4 h-4" />
          </button>

          {showOptions && (
            <div className="absolute right-0 mt-2 w-80 p-4 bg-white border rounded-md shadow z-10 text-sm">
              <p className="mb-3 text-gray-700">
                Enable the items below that you‚Äôd like to show as an option when
                listing an item.
              </p>

              <div className="flex items-start justify-between gap-4">
                <div>
                  <label className="font-medium">Subtitle</label>
                  <p className="text-xs text-gray-600">
                    Subtitles appear in our search results in the list view, and
                    can increase buyer interest by providing more descriptive
                    info (non-refundable fee applies).
                  </p>
                </div>

                <label className="inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={subtitleEnabled}
                    onChange={() => setSubtitleEnabled(!subtitleEnabled)}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-300 peer-checked:bg-blue-600 rounded-full peer relative transition-colors duration-200">
                    <div className="absolute left-1 top-1 w-4 h-4 bg-white rounded-full shadow peer-checked:translate-x-5 transition-transform duration-200"></div>
                  </div>
                </label>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Title Input */}
      <div className="mb-1">
        <label
          htmlFor="title"
          className="block text-sm font-medium text-gray-700"
        >
          Item title
        </label>
        <input
          id="title"
          name="title"
          type="text"
          maxLength={80}
          value={formik.values.title}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
          // required
        />
      </div>

      {/* Character Counter */}
      <div className="flex justify-end text-xs text-gray-500">
        {formik.values.title.length}/80
      </div>
    </div>
  );
};


===== src/components/AddItem/ToggleOptions.jsx =====
// ToggleOptions.jsx
import React, { useState } from "react";

export const ToggleOptions = () => {
  const [mobileUpload, setMobileUpload] = useState(false);
  const [webUpload, setWebUpload] = useState(false);
  const [galleryPlus, setGalleryPlus] = useState(false);

  const toggleClasses = (active) =>
    `relative inline-flex items-center h-6 rounded-full w-11 transition ${
      active ? "bg-blue-600" : "bg-gray-300"
    }`;

  return (
    <div className="space-y-4">
      <ToggleSwitch
        label="Upload photos from mobile"
        description="Add photos from a mobile device."
        isOn={mobileUpload}
        onToggle={() => setMobileUpload(!mobileUpload)}
      />
      <ToggleSwitch
        label="Upload photos from web"
        description={
          <>
            Add photos you have permission to use from the web.{" "}
            <a
              href="https://www.ebay.co.uk/help/policies/listing-policies/images-text-policy?id=4240"
              target="_blank"
              rel="noreferrer"
              className="text-blue-600 underline"
            >
              Learn more
            </a>
          </>
        }
        isOn={webUpload}
        onToggle={() => setWebUpload(!webUpload)}
      />
      <ToggleSwitch
        label="Gallery Plus"
        description="Display a large photo in search results (non-refundable fee applies)."
        isOn={galleryPlus}
        onToggle={() => setGalleryPlus(!galleryPlus)}
      />
    </div>
  );
};

const ToggleSwitch = ({ label, description, isOn, onToggle }) => (
  <div className="flex justify-between items-start">
    <div>
      <div className="font-medium">{label}</div>
      <div className="text-sm text-gray-500">{description}</div>
    </div>
    <button
      onClick={onToggle}
      className="ml-4"
      role="switch"
      aria-checked={isOn}
    >
      <span className={isOn ? "sr-only" : ""}>Toggle</span>
      <div
        className={`w-11 h-6 flex items-center bg-gray-300 rounded-full p-1 transition-colors ${isOn ? "bg-blue-600" : ""}`}
      >
        <div
          className={`bg-white w-4 h-4 rounded-full shadow-md transform transition-transform ${isOn ? "translate-x-5" : "translate-x-0"}`}
        ></div>
      </div>
    </button>
  </div>
);


===== src/components/AddItem/UploaderGrid.jsx =====
"use client";
import React, { useState } from "react";

const MAX_ITEMS = 15;

export const UploaderGrid = ({ onImagesChange }) => {
  const [images, setImages] = useState([
    {
      src: "https://i.ebayimg.com/images/g/2-cAAOSwLdtkL7Uk/s-l640.jpg",
      isStock: true,
    },
  ]);

  const handleUpload = (e) => {
    const files = Array.from(e.target.files);
    const newImages = files.map((file) => ({
      src: URL.createObjectURL(file),
      isStock: false,
    }));
    const total = [...images, ...newImages].slice(0, MAX_ITEMS - 1);
    setImages(total);
    onImagesChange(total);
  };

  const totalCount = images.length + 1;

  return (
    <div>
      <p className="text-sm text-gray-500 mb-2">
        {totalCount}/{MAX_ITEMS}
      </p>

      {/* Grid Layout: stack on mobile, grid on medium+ */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        {/* Upload Section */}
        <div className="md:col-span-2">
          <label className="border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center text-center p-6 cursor-pointer h-full min-h-[200px]">
            <div className="flex flex-col items-center">
              <svg
                className="w-8 h-8 text-gray-500 mb-2"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M4 16v1a2 2 0 002 2h12a2 2 0 002-2v-1M16 12l-4-4m0 0l-4 4m4-4v12"
                />
              </svg>
              <p className="font-medium text-sm">Drag and drop files</p>
              <span className="mt-2 px-4 py-1 border rounded-full text-sm text-gray-700">
                Upload from computer
              </span>
            </div>
            <input
              type="file"
              accept="image/*"
              multiple
              onChange={handleUpload}
              className="hidden"
            />
          </label>
        </div>

        {/* Images & Placeholders */}
        <div className="md:col-span-3 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2 mt-4 md:mt-0">
          {images.map((img, idx) => (
            <div
              key={idx}
              className="relative rounded-lg overflow-hidden bg-white h-full w-full shadow-sm"
            >
              <img
                src={img.src}
                alt={`upload-${idx}`}
                className="object-cover w-full h-full rounded-lg"
              />
              {img.isStock && (
                <span className="absolute top-1 left-1 bg-black text-white text-xs px-2 py-0.5 rounded-full">
                  Stock
                </span>
              )}
            </div>
          ))}

          {Array.from({ length: MAX_ITEMS - 1 - images.length }).map((_, i) => (
            <div key={i} className="bg-gray-100 rounded-lg min-h-[100px]"></div>
          ))}
        </div>
      </div>
    </div>
  );
};


===== src/components/Addresses.jsx =====
"use client"; // Ensure this is a client component to use React hooks

import React from "react";

const Addresses = ({
  addresses,
  options,
  onSelect,
  placeholder = "Select an option",
}) => {
  console.log("addresses");

  const handleChange = (e) => {
    const selectedId = e.target.value;
    onSelect(selectedId);
  };

  return (
    <select
      onChange={handleChange}
      className="block w-full px-4 py-2 mt-2 text-base text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      defaultValue=""
    >
      <option value="" disabled>
        {placeholder}
      </option>
      {options?.map((option) => (
        <option key={option.id} value={option.id}>
          {option.value}
        </option>
      ))}
    </select>
  );
};

export default Addresses;


===== src/components/BasketModal.jsx =====
// "use client";
// import React, { useState } from "react";
// import { HiXMark } from "react-icons/hi2";
// import { HiMiniXMark } from "react-icons/hi2";
// import { FaHeart } from "react-icons/fa";
// import { useRouter } from "next/navigation";
// import Link from "next/link";
// import { selectSelectedCountry } from "@/app/store/slices/countrySlice";
// import { useSelector } from "react-redux";

// export default function BasketModal({
//   isModalVisible,
//   handleCloseModal,
//   basket,
//   handleQuantityChange,
//   handleRemoveProduct,
//   saleActive,
//   activePrice,
//   quantity
// }) {

//   // console.log(basket);

//   const router = useRouter();
//   const [isCheckoutLoading, setIsCheckoutLoading] = useState(false);
//   const [isViewBasketLoading, setIsViewBasketLoading] = useState(false);

//   // Define the loader component (three bouncing dots)
//   const Loader = (
//     <div className="flex space-x-2 items-center h-6">
//       <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.3s]" />
//       <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.15s]" />
//       <div className="h-2 w-2 bg-white rounded-full animate-bounce" />
//     </div>
//   );

//   // Handler for checkout navigation
//   const handleCheckout = () => {
//     setIsCheckoutLoading(true);
//     router.push("/checkout");
//   };

//   // Handler for view basket navigation
//   const handleViewBasket = () => {
//     setIsViewBasketLoading(true);
//     router.push("/cart");
//   };

//    // ‡¶ï‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶∏‡¶ø‡¶Æ‡ßç‡¶¨‡¶≤
//   const selectedCountry = useSelector(selectSelectedCountry);
//   const symbol = selectedCountry?.symbol ?? "‚Çµ";

//   return (
//     <div
//       className={`
//         fixed inset-0 z-50 flex justify-center items-start
//         bg-black bg-opacity-50 overflow-y-auto
//         transition-opacity duration-300
//         ${isModalVisible ? "opacity-100 visible" : "opacity-0 invisible"}
//       `}
//       onClick={handleCloseModal}
//     >
//       {/* Modal Container */}
//       <div
//         className={`
//           relative bg-white rounded-lg shadow-lg
//           w-full sm:w-2/3 md:w-3/4 lg:w-1/2 xl:w-2/5 2xl:w-1/3
//           max-w-3xl mx-2
//           lg:mx-auto mt-10 p-6 sm:p-8
//           transform transition-transform duration-300
//           ${isModalVisible ? "translate-y-0" : "-translate-y-12"}
//         `}
//         onClick={(e) => e.stopPropagation()} // Prevent overlay click from closing modal
//       >
//         {/* Modal Header */}
//         <div className="flex justify-between items-center pb-4 border-b">
//           <h3 className="text-xl sm:text-2xl font-medium">
//             {basket.length} Items added to basket
//           </h3>
//           <button
//             onClick={handleCloseModal}
//             className="text-gray-600 hover:text-gray-900"
//           >
//             <HiXMark className="h-8 w-8" />
//           </button>
//         </div>

//          {/* Body */}
//         <div className="py-2 max-h-[70vh] overflow-y-auto">
//           {basket.length > 0 ? basket.map((product, idx) => {
//             // Sale logic
//             const now = new Date();
//             const saleEnd = product.sale_end_date ? new Date(product.sale_end_date) : null;
//             const isOnSale = saleEnd && saleEnd > now && product.sale_price_cents > 0;

//             // Unit & subtotal Í≥ÑÏÇ∞
//             const unitCents = isOnSale ? product.sale_price_cents : product.price_cents;
//             const unitPrice = unitCents / 100;
//             const subtotal = (unitPrice * product.quantity).toFixed(2);

//             return (
//               <div key={idx} className="flex items-stretch gap-4 py-4 border-b border-gray-200 last:border-b-0">
//                 {/* Image */}
//                 <div className="w-[100px] h-[100px] flex-shrink-0">
//                   <img
//                     src={product.image?.[0] || "https://via.placeholder.com/150"}
//                     alt={product.title}
//                     className="h-full w-full object-cover rounded-md"
//                   />
//                 </div>

//                 {/* Details */}
//                 <div className="flex flex-col justify-center w-full">
//                   {product.sku && (
//                     <p className="text-xs text-gray-500 mb-1">SKU: {product.sku}</p>
//                   )}
//                   <div className="flex items-center justify-between w-full">
//                     <p className="text-sm sm:text-base md:text-lg font-semibold text-gray-800">
//                       {product.title}
//                     </p>
//                     <select
//                       value={product.quantity}
//                       onChange={e =>
//                         handleQuantityChange(product.id, +e.target.value)
//                       }
//                       className="py-1 px-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-indigo-500 text-xs sm:text-sm"
//                     >
//                       {[...Array(10)].map((_, i) => (
//                         <option key={i + 1} value={i + 1}>{i + 1}</option>
//                       ))}
//                     </select>
//                   </div>

//                   {/* Price & Subtotal */}
//                   <div className="flex items-center justify-between pt-2">
//                     {/* Remove */}
//                   <button
//                     onClick={() => handleRemoveProduct(product.id)}
//                     className="mt-2 inline-flex items-center text-xs sm:text-sm text-red-600 hover:underline"
//                   >
//                     <HiMiniXMark className="mr-1.5 h-4 w-4 sm:h-5 sm:w-5" />
//                     Remove
//                   </button>
//                     {/* Subtotal */}
//                     <span className="text-sm font-semibold text-gray-900">
//                       {symbol}{subtotal}
//                     </span>
//                   </div>

//                 </div>
//               </div>
//             );
//           }) : (
//             <p className="text-center text-gray-500">No items in the basket.</p>
//           )}
//         </div>

//         {/* Modal Footer */}
//         {basket.length > 0 && (
//           <div className="pt-4 space-y-3">
//             <button
//               onClick={handleCheckout}
//               className="bg-[#8710D8] text-white rounded-3xl hover:bg-purple-700 w-full p-2 font-bold flex items-center justify-center"
//             >
//               {isCheckoutLoading ? Loader : "Checkout"}
//             </button>
//             <button
//               onClick={handleViewBasket}
//               className="px-4 py-2 rounded-3xl border bg-white shadow hover:shadow-md btn-base btn-outline w-full font-bold text-[#8710D8] flex items-center justify-center"
//             >
//               {isViewBasketLoading ? Loader : "View Basket"}
//             </button>
//           </div>
//         )}

//       </div>
//     </div>
//   );
// }
"use client";

import React, { useState } from "react";
import { HiXMark, HiMiniXMark, HiPlus, HiMinus } from "react-icons/hi2";
import { FaHeart } from "react-icons/fa";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useSelector } from "react-redux";
import { selectSelectedCountry } from "@/app/store/slices/countrySlice";

export default function BasketModal({
  isModalVisible,
  handleCloseModal,
  basket,
  handleQuantityChange,
  handleRemoveProduct,
  saleActive,
  activePrice,
  quantity,
}) {
  const router = useRouter();
  const [isCheckoutLoading, setIsCheckoutLoading] = useState(false);
  const [isViewBasketLoading, setIsViewBasketLoading] = useState(false);

  const Loader = (
    <div className="flex space-x-2 items-center h-6">
      <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.3s]" />
      <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.15s]" />
      <div className="h-2 w-2 bg-white rounded-full animate-bounce" />
    </div>
  );

  const handleCheckout = () => {
    setIsCheckoutLoading(true);
    router.push("/checkout");
  };

  const handleViewBasket = () => {
    setIsViewBasketLoading(true);
    router.push("/cart");
  };

  const selectedCountry = useSelector(selectSelectedCountry);
  const symbol = selectedCountry?.symbol ?? "‚Çµ";

  return (
    <div
      className={`
        fixed inset-0 z-50 flex justify-center items-start 
        bg-black bg-opacity-50 overflow-y-auto 
        transition-opacity duration-300
        ${isModalVisible ? "opacity-100 visible" : "opacity-0 invisible"}
      `}
      onClick={handleCloseModal}
    >
      <div
        className={`
          relative bg-white rounded-lg shadow-lg 
          w-full sm:w-2/3 md:w-3/4 lg:w-1/2 xl:w-2/5 2xl:w-1/3
          max-w-3xl mx-2 lg:mx-auto mt-10 p-6 sm:p-8
          transform transition-transform duration-300
          ${isModalVisible ? "translate-y-0" : "-translate-y-12"}
        `}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex justify-between items-center pb-4 border-b-2">
          <h3 className="text-xl sm:text-2xl font-medium">
            {basket.length} Item{basket.length !== 1 && "s"} in your basket
          </h3>
          <button
            onClick={handleCloseModal}
            className="text-gray-600 hover:text-gray-900"
          >
            <HiXMark className="h-8 w-8" />
          </button>
        </div>

        {/* Body */}
        <div className="py-2 max-h-[70vh] overflow-y-auto">
          {basket.length > 0 ? (
            basket.map((product, idx) => {
              const now = new Date();
              const saleEnd = product.sale_end_date
                ? new Date(product.sale_end_date)
                : null;
              const isOnSale =
                saleEnd && saleEnd > now && product.sale_price_cents > 0;

              const unitCents = isOnSale
                ? product.sale_price_cents
                : product.price_cents;
              const unitPrice = unitCents / 100;
              const subtotal = (unitPrice * product.quantity).toFixed(2);

              return (
                <div
                  key={idx}
                  className="flex items-stretch gap-4 py-4 border-b-2 border-gray-200 last:border-b-0"
                >
                  {/* Image */}
                  <div className="w-[100px] h-[100px] flex-shrink-0">
                    <img
                      src={
                        product.image?.[0]?.image_url ||
                  product.image?.[0]?.url ||
                  "/placeholder.png"
                      }
                      alt={product.title}
                      className="h-full w-full object-cover rounded-md"
                    />
                  </div>

                  {/* Details */}
                  <div className="flex flex-col justify-center w-full">
                    {product.sku && (
                      <p className="text-xs text-gray-500 mb-1">
                        SKU: {product.sku}
                      </p>
                    )}

                    <div className="flex items-center justify-between w-full">
                      <p className="text-sm sm:text-base md:text-lg font-semibold text-gray-800">
                        {product.title}
                      </p>

                      {/* Quantity control with bolder borders */}
                      <div className="flex items-center space-x-2">
                        <button
                          className="p-1 border-2 border-gray-400 rounded-md disabled:opacity-50"
                          onClick={() => {
                            if (product.quantity > 1) {
                              handleQuantityChange(
                                product.id,
                                product.quantity - 1,
                              );
                            }
                          }}
                          disabled={product.quantity <= 1}
                        >
                          <HiMinus className="h-4 w-4 text-gray-700" />
                        </button>

                        <span className="w-6 text-center text-sm font-medium">
                          {product.quantity}
                        </span>

                        <button
                          className="p-1 border-2 border-gray-400 rounded-md"
                          onClick={() =>
                            handleQuantityChange(
                              product.id,
                              product.quantity + 1,
                            )
                          }
                        >
                          <HiPlus className="h-4 w-4 text-gray-700" />
                        </button>
                      </div>
                    </div>

                    {/* Remove & Subtotal */}
                    <div className="flex items-center justify-between pt-2">
                      <button
                        onClick={() => handleRemoveProduct(product.id)}
                        className="inline-flex items-center text-xs sm:text-sm text-red-600 hover:underline"
                      >
                        <HiMiniXMark className="mr-1.5 h-4 w-4 " />
                        Remove
                      </button>

                      <span className="text-sm font-semibold text-gray-900">
                        {symbol}
                        {subtotal}
                      </span>
                    </div>
                  </div>
                </div>
              );
            })
          ) : (
            <p className="text-center text-gray-500">No items in the basket.</p>
          )}
        </div>

        {/* Footer */}
        {basket.length > 0 && (
          <div className="pt-4 space-y-3">
            <button
              onClick={handleCheckout}
              className="bg-[#8710D8] text-white rounded-3xl hover:bg-purple-700 w-full p-2 font-bold flex items-center justify-center"
            >
              {isCheckoutLoading ? Loader : "Checkout"}
            </button>
            <button
              onClick={handleViewBasket}
              className="px-4 py-2 rounded-3xl border bg-white shadow hover:shadow-md w-full font-bold text-[#8710D8] flex items-center justify-center"
            >
              {isViewBasketLoading ? Loader : "View Basket"}
            </button>
          </div>
        )}
      </div>
    </div>
  );
}


===== src/components/BasketSheet.jsx =====
// components/BasketSheet.jsx
'use client';

import React, { useEffect, useId, useMemo, useRef, useState } from 'react';
import { useRouter } from 'next/navigation';
import { HiXMark, HiPlus, HiMinus } from 'react-icons/hi2';
import { useSelector } from 'react-redux';
import { selectSelectedCountry } from '@/app/store/slices/countrySlice';

export default function BasketSheet({
  isOpen = false,          // preferred
  open = undefined,        // alias for compatibility
  onClose,                 // () => void
  basket = [],             // items array
  onQuantityChange,        // (id, qty) => void
  onRemove,                // (id) => void
  onUndoRemove,            // optional: (item) => void
}) {
  const actuallyOpen = open ?? isOpen;

  const router = useRouter();
  const titleId = useId();
  const panelRef = useRef(null);
  const scrollerRef = useRef(null);
  const activeBeforeOpenRef = useRef(null);

  // currency symbol
  const selectedCountry = useSelector(selectSelectedCountry);
  const symbol = selectedCountry?.symbol ?? '‚Çµ';

  // buttons loading
  const [isCheckoutLoading, setIsCheckoutLoading] = useState(false);
  const [isViewBasketLoading, setIsViewBasketLoading] = useState(false);

  // live region for SR announcements
  const [liveMsg, setLiveMsg] = useState('');

  // simple remove-undo toast
  const [toast, setToast] = useState(null); // {title, item}

  // scroll cue state
  const [atTop, setAtTop] = useState(true);
  const [atBottom, setAtBottom] = useState(false);

  // ‚îÄ‚îÄ scroll lock + focus restore ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  useEffect(() => {
    if (actuallyOpen) {
      activeBeforeOpenRef.current = document.activeElement;
      document.body.style.overflow = 'hidden';
      const id = setTimeout(() => panelRef.current?.focus(), 0);
      return () => clearTimeout(id);
    }
    document.body.style.overflow = '';
    if (activeBeforeOpenRef.current instanceof HTMLElement) {
      activeBeforeOpenRef.current.focus?.();
    }
    return () => (document.body.style.overflow = '');
  }, [actuallyOpen]);

  // keep cue visibility in sync with scroll
  useEffect(() => {
    if (!actuallyOpen) return;
    const el = scrollerRef.current;
    if (!el) return;
    const onScroll = () => {
      const top = el.scrollTop <= 2;
      const bottom = el.scrollHeight - el.scrollTop - el.clientHeight <= 2;
      setAtTop(top);
      setAtBottom(bottom);
    };
    onScroll();
    el.addEventListener('scroll', onScroll, { passive: true });
    return () => el.removeEventListener('scroll', onScroll);
  }, [actuallyOpen]);

  // Esc to close
  useEffect(() => {
    if (!actuallyOpen) return;
    const onKey = (e) => e.key === 'Escape' && onClose?.();
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, [actuallyOpen, onClose]);

  // Focus trap inside the dialog
  const onKeyDownTrap = (e) => {
    if (e.key !== 'Tab' || !panelRef.current) return;
    const els = Array.from(
      panelRef.current.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      )
    ).filter((el) => !el.hasAttribute('disabled') && el.getAttribute('tabindex') !== '-1');
    if (!els.length) return;
    const first = els[0];
    const last = els[els.length - 1];
    const active = document.activeElement;

    if (e.shiftKey) {
      if (active === first || !panelRef.current.contains(active)) {
        e.preventDefault();
        last.focus();
      }
    } else {
      if (active === last) {
        e.preventDefault();
        first.focus();
      }
    }
  };

  // ‚îÄ‚îÄ swipe to close (drag handle) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const [dragY, setDragY] = useState(0);
  const [dragging, setDragging] = useState(false);
  const startYRef = useRef(0);
  const startTRef = useRef(0);

  // tuning constants
  const DRAG_MAX_PX = 240;     // hard cap (with rubber-band past this)
  const DRAG_CLOSE_PX = 140;   // distance to close if released
  const VELOCITY_CLOSE = 1.0;  // px/ms ‚Üí less sensitive

  const onPointerDown = (e) => {
    setDragging(true);
    startYRef.current = 'touches' in e ? e.touches[0].clientY : e.clientY;
    startTRef.current = performance.now();
  };

  const onPointerMove = (e) => {
    if (!dragging) return;
    const y = 'touches' in e ? e.touches[0].clientY : e.clientY;
    let delta = Math.max(0, y - startYRef.current);
    if (delta > DRAG_MAX_PX) {
      const overflow = delta - DRAG_MAX_PX;
      delta = DRAG_MAX_PX + overflow * 0.2; // rubber-band
    }
    setDragY(delta);
  };

  const onPointerUp = () => {
    if (!dragging) return;
    const durMs = Math.max(1, performance.now() - startTRef.current);
    const velocity = dragY / durMs; // px/ms
    const shouldClose = dragY > DRAG_CLOSE_PX || velocity > VELOCITY_CLOSE;
    setDragging(false);
    setDragY(0);
    if (shouldClose) onClose?.();
  };

  // ‚îÄ‚îÄ actions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const Loader = (
    <span className="inline-flex items-center gap-2 h-6">
      <span className="h-2 w-2 bg-current rounded-full animate-bounce [animation-delay:-0.3s]" />
      <span className="h-2 w-2 bg-current rounded-full animate-bounce [animation-delay:-0.15s]" />
      <span className="h-2 w-2 bg-current rounded-full animate-bounce" />
    </span>
  );

  const handleCheckout = () => {
    setIsCheckoutLoading(true);
    router.push('/checkout');
  };
  const handleViewBasket = () => {
    setIsViewBasketLoading(true);
    router.push('/cart');
  };

  const computeUnitPrice = (p) => {
    const now = new Date();
    const saleEnd = p.sale_end_date ? new Date(p.sale_end_date) : null;
    const isOnSale = saleEnd && saleEnd > now && p.sale_price_cents > 0;
    const cents = isOnSale ? p.sale_price_cents : p.price_cents;
    return (cents || 0) / 100;
  };

  const subtotal = useMemo(
    () => (basket || []).reduce((s, p) => s + computeUnitPrice(p) * (p.quantity || 1), 0),
    [basket]
  );

  const checkoutLabel = isCheckoutLoading ? Loader : `Checkout ‚Ä¢ ${symbol}${subtotal.toFixed(2)}`;

  const titleText = useMemo(() => {
    const n = basket?.length ?? 0;
    return `${n} Item${n === 1 ? '' : 's'} in your basket`;
  }, [basket]);

  const onBackdrop = (e) => {
    if (e.target === e.currentTarget) onClose?.();
  };

const inc = (p) => {
  navigator.vibrate?.(10);
  onQuantityChange?.(p.id, p.sku, (p.quantity || 1) + 1);
  setLiveMsg(`Increased quantity of ${p.title}`);
};

const dec = (p) => {
  if ((p.quantity || 1) <= 1) return;
  navigator.vibrate?.(10);
  onQuantityChange?.(p.id, p.sku, (p.quantity || 1) - 1);
  setLiveMsg(`Decreased quantity of ${p.title}`);
};

const doRemove = (p) => {
  onRemove?.({ id: p.id, sku: p.sku });
  setToast({ title: p.title, item: p });
  setLiveMsg(`Removed ${p.title} from basket`);
  setTimeout(() => setToast(null), 5000);
};

const undoRemove = () => {
  if (toast?.item && onUndoRemove) onUndoRemove(toast.item);
  setToast(null);
};

  return (
    <div
      aria-hidden={!actuallyOpen}
      className={[
        'fixed inset-0 z-[80] md:z-[90] transition-opacity duration-200',
        actuallyOpen ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none',
      ].join(' ')}
      onClick={onBackdrop}
    >
      {/* Live region for SR */}
      <div aria-live="polite" className="sr-only">{liveMsg}</div>

      {/* Backdrop */}
      <div
        className={[
          'absolute inset-0 bg-black/50 backdrop-blur-[1px] transition-opacity',
          actuallyOpen ? 'opacity-100' : 'opacity-0',
        ].join(' ')}
      />

      {/* Sheet container */}
      <div
        role="dialog"
        aria-modal="true"
        aria-labelledby={titleId}
        tabIndex={-1}
        ref={panelRef}
        className="absolute left-1/2 -translate-x-1/2 bottom-0 w-full max-w-[720px] outline-none"
        onKeyDown={onKeyDownTrap}
        onMouseMove={onPointerMove}
        onMouseUp={onPointerUp}
        onTouchMove={onPointerMove}
        onTouchEnd={onPointerUp}
      >
        <div
          className={[
            'mx-auto w-full bg-white dark:bg-neutral-900 rounded-t-3xl shadow-2xl',
            'border-t border-neutral-200 dark:border-neutral-800',
            'transition-transform duration-200 will-change-transform',
          ].join(' ')}
          style={{
            transform: actuallyOpen ? `translateY(${dragY}px)` : 'translateY(110%)',
          }}
        >
          {/* Grab handle */}
          <div
            className="pt-3 pb-2 flex justify-center cursor-grab active:cursor-grabbing select-none touch-action-none"
            onMouseDown={onPointerDown}
            onTouchStart={onPointerDown}
          >
            <span className="h-1.5 w-12 rounded-full bg-neutral-300 dark:bg-neutral-700" />
          </div>

          {/* Header */}
          <div className="px-4 sm:px-6 pb-3 flex items-center justify-between">
            <h2 id={titleId} className="text-lg sm:text-xl font-semibold">
              {titleText}
            </h2>
            <button
              onClick={onClose}
              className="p-2 rounded-full hover:bg-neutral-100 dark:hover:bg-neutral-800 focus:outline-none focus-visible:ring-2 focus-visible:ring-violet-400"
              aria-label="Close basket"
            >
              <HiXMark className="h-6 w-6" />
            </button>
          </div>

          {/* Items */}
          <div
            ref={scrollerRef}
            className="relative px-4 sm:px-6 max-h-[70vh] md:max-h-[72vh] overflow-y-auto pb-4 overscroll-contain"
          >
            {/* top scroll cue */}
            <div
              aria-hidden="true"
              className={[
                'sticky top-0 -mt-4 h-4 bg-gradient-to-b from-white/95 dark:from-neutral-900/95 pointer-events-none z-10 transition-opacity duration-200',
                atTop ? 'opacity-0' : 'opacity-100',
              ].join(' ')}
            />

            {basket?.length ? (
              <ul role="list" className="divide-y divide-neutral-200 dark:divide-neutral-800">
                {basket.map((product) => {
                  const unitPrice = computeUnitPrice(product);
                  const lineTotal = (unitPrice * (product.quantity || 1)).toFixed(2);
                  const img =
                    product.image?.[0]?.image_url ||
                    product.image?.[0]?.url ||
                    product.image_url ||
                    product.thumbnail ||
                    '/placeholder.png';

                  return (
                    <li
                      key={`${product.id}-${product.sku ?? ''}`}
                      className="flex items-stretch gap-4 py-4"
                      role="group"
                      aria-label={product.title}
                    >
                      {/* Image */}
                      <div className="w-[96px] h-[96px] flex-shrink-0">
                        {/* eslint-disable-next-line @next/next/no-img-element */}
                        <img
                          src={img}
                          alt=""
                          width={96}
                          height={96}
                          loading="lazy"
                          className="h-full w-full object-cover rounded-lg bg-neutral-100 dark:bg-neutral-800"
                          draggable={false}
                        />
                      </div>

                      {/* Details */}
                      <div className="flex-1 min-w-0">
                        {product.sku && (
                          <p className="text-[11px] text-neutral-500 dark:text-neutral-400 mb-0.5">
                            SKU: {product.sku}
                          </p>
                        )}
                        <p className="text-sm sm:text-base font-semibold line-clamp-2">
                          {product.title}
                        </p>

                        <div className="mt-2 flex items-center justify-between gap-3">
                          {/* Quantity */}
                          <div className="flex items-center gap-2">
                            <button
                              type="button"
                              className="h-10 w-10 sm:h-8 sm:w-8 p-0 grid place-items-center border border-neutral-300 dark:border-neutral-700 rounded-md disabled:opacity-50"
                              onClick={() => dec(product)}
                              disabled={product.quantity <= 1}
                              aria-label={`Decrease quantity of ${product.title}`}
                            >
                              <HiMinus className="h-4 w-4" />
                            </button>
                            <span className="w-7 text-center text-sm font-medium tabular-nums" aria-live="polite">
                              {product.quantity}
                            </span>
                            <button
                              type="button"
                              className="h-10 w-10 sm:h-8 sm:w-8 p-0 grid place-items-center border border-neutral-300 dark:border-neutral-700 rounded-md"
                              onClick={() => inc(product)}
                              aria-label={`Increase quantity of ${product.title}`}
                            >
                              <HiPlus className="h-4 w-4" />
                            </button>
                          </div>

                          {/* Line total */}
                          <div className="text-sm font-semibold whitespace-nowrap">
                            {symbol}{lineTotal}
                          </div>
                        </div>

                        <div className="mt-2 flex items-center justify-between">
                          <button
                            type="button"
                            onClick={() => doRemove(product)}
                            className="text-xs text-red-600 hover:underline"
                          >
                            Remove
                          </button>
                        </div>
                      </div>
                    </li>
                  );
                })}
              </ul>
            ) : (
              <div className="py-10 text-center text-neutral-500 dark:text-neutral-400">
                Your basket is empty.
              </div>
            )}

            {/* bottom scroll cue */}
            <div
              aria-hidden="true"
              className={[
                'sticky bottom-0 -mb-4 h-4 bg-gradient-to-t from-white/95 dark:from-neutral-900/95 pointer-events-none z-10 transition-opacity duration-200',
                atBottom ? 'opacity-0' : 'opacity-100',
              ].join(' ')}
            />
          </div>

// ‚Ä¶truncated‚Ä¶

===== src/components/BasketSheetGlobal.jsx =====
// src/components/BasketSheetGlobal.jsx
'use client';

import { useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import { useDispatch, useSelector } from 'react-redux';
import BasketSheet from './BasketSheet';
import {
  selectBasketItems,
  updateQuantity,
  removeFromBasket,
  addToBasket,
} from '@/app/store/slices/cartSlice';
import {
  selectBasketSheetOpen,
  closeBasketSheet,
} from '@/app/store/slices/uiSlice';

export default function BasketSheetGlobal() {
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);

  const dispatch = useDispatch();
  const isOpen = useSelector(selectBasketSheetOpen);
  const basket = useSelector(selectBasketItems);

  const onClose = () => dispatch(closeBasketSheet());
  const onQuantityChange = (id, quantity) =>
    dispatch(updateQuantity({ id, quantity }));       // ‚¨ÖÔ∏è match slice
  const onRemove = (id) => dispatch(removeFromBasket(id)); // ‚¨ÖÔ∏è match slice
  const onUndoRemove = (item) => dispatch(addToBasket(item));

  if (!mounted) return null;

  const portalTarget =
    document.getElementById('portal-root') || document.body;

  return createPortal(
    <BasketSheet
      isOpen={isOpen}
      onClose={onClose}
      basket={basket}
      onQuantityChange={onQuantityChange}
      onRemove={onRemove}
      onUndoRemove={onUndoRemove}
    />,
    portalTarget
  );
}

===== src/components/Careers/CareersHero.jsx =====
import React from "react";
import { FaShoppingBag, FaCheckCircle } from "react-icons/fa";

export default function HeroBanner() {
  return (
    <section
      className="
        relative
        flex
        items-center
        justify-center
        text-center
        text-white
        p-8
        md:p-16
        bg-cover
        bg-center
        h-[500px]
      "
      style={{
        backgroundImage:
          "url('https://images.pexels.com/photos/4559715/pexels-photo-4559715.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2')",
      }}
    >
      {/* Dark semi-transparent + blur overlay */}
      <div className="absolute inset-0 bg-black bg-opacity-20 backdrop-blur-sm"></div>

      {/* Centered Content */}
      <div className="relative z-10 max-w-2xl space-y-8 text-center">
        <h1 className="text-6xl md:text-7xl font-extrabold uppercase">
          <span className="text-white">JOIN&nbsp;</span>
          <span className="text-violet-700">UPFRICA!</span>
        </h1>

        <p className="text-2xl md:text-3xl font-semibold ">
          Become a local sourcing agent.
        </p>

        <a
          href="/careers/apply"
          className="
            inline-block
            text-white
            bg-violet-700
            font-semibold
            uppercase
            py-4
            px-20
            rounded-full
            hover:opacity-90
            transition
          "
        >
          APPLY NOW
        </a>
      </div>
    </section>
  );
}


===== src/components/Careers/Contact.jsx =====
import Link from "next/link";
import React from "react";
import {
  FaFacebookMessenger,
  FaFacebookSquare,
  FaInstagram,
  FaLinkedin,
  FaTwitter,
  FaYoutube,
} from "react-icons/fa";
import { IoLogoWhatsapp } from "react-icons/io";

const Contact = () => {
  return (
    <div className=" px-4 py-5">
      {/* Main Grid */}
      <div className="md:flex justify-between gap-8 text-gray-800 space-y-8 md:space-y-0">
        {/* Contact Info */}
        <div className="space-y-2">
          <p className="text-lg font-bold text-gray-900">Contact Us</p>
          <ul className="space-y-3 text-base">
            <li>
              Email:{" "}
              <span className="text-pink-400">gogirlsgobd@gmail.com</span>
            </li>
            <li>
              Phone: <span className="text-pink-400">+01810368925</span>
            </li>
          </ul>
        </div>

        {/* contact us  */}
        <div>
          <Link
            href={
              "https://api.whatsapp.com/send?phone=%2B8801810368925&context=ARCfwjbLS7S5pNqFv89vbV433gnfjsKYBPBC1NXdTkmtND2jj57pHnfDbbpscX1P54Eqbr1KZI5QNNoUc5lE14xtYhTQN-qnkXYQmB2K9R5IBfGNv5cWVF1AlUoa2kvGUEqU4s7PFbrfGntyhw8QvQ_mNQ&source=FB_Page&app=facebook&entry_point=page_cta&fbclid=IwY2xjawHWF1hleHRuA2FlbQIxMAABHcCy7cXq_oMXVGJz0WF_pMdow1WCg35-gMGMtQ7LQFPNeTEy4cqLUSesgQ_aem_qpPnqo8feMkAoB4_2k8hfA"
            }
          >
            WhatsApp: <span className="text-pink-400">Message us</span>
          </Link>
          {/* Social Icons */}
          <div className="flex items-center gap-4 pt-4 md:justify-center">
            <Link href={"https://www.facebook.com/gogirlzzzz"}>
              <FaFacebookSquare className="w-6 h-6 text-gray-700 hover:text-blue-600 transition-colors" />
            </Link>
            <Link
              href={
                "https://api.whatsapp.com/send?phone=%2B8801810368925&context=ARCfwjbLS7S5pNqFv89vbV433gnfjsKYBPBC1NXdTkmtND2jj57pHnfDbbpscX1P54Eqbr1KZI5QNNoUc5lE14xtYhTQN-qnkXYQmB2K9R5IBfGNv5cWVF1AlUoa2kvGUEqU4s7PFbrfGntyhw8QvQ_mNQ&source=FB_Page&app=facebook&entry_point=page_cta&fbclid=IwY2xjawHWF1hleHRuA2FlbQIxMAABHcCy7cXq_oMXVGJz0WF_pMdow1WCg35-gMGMtQ7LQFPNeTEy4cqLUSesgQ_aem_qpPnqo8feMkAoB4_2k8hfA"
              }
            >
              <IoLogoWhatsapp className="w-6 h-6 text-gray-700 hover:text-blue-400 transition-colors" />
            </Link>
            {/* <Link href={""}>
              <FaTwitter className="w-6 h-6 text-gray-700 hover:text-blue-500 transition-colors" />
            </Link> */}
            <Link href={"https://www.instagram.com/go.girlzzzz/"}>
              <FaInstagram className="w-6 h-6 text-gray-700 hover:text-pink-500 transition-colors" />
            </Link>
            <Link href={"https://www.youtube.com/@gogirlsgobd"}>
              <FaYoutube className="w-6 h-6 text-gray-700 hover:text-red-600 transition-colors" />
            </Link>
            {/* <Link href={""}>
              <FaLinkedin className="w-6 h-6 text-gray-700 hover:text-blue-700 transition-colors" />
            </Link> */}
          </div>
        </div>

        {/* Dhaka Office */}
        <div>
          <ul className="space-y-3 text-gray-600 text-base">
            <li className="text-lg font-bold text-gray-900">Dhaka Office</li>
            <li>ICT Tower, 14th Floor</li>
            {/* <li>House no. 76, Road 12, Block E, Banani</li> */}
            <li>Agargaon, Dhaka 1213, Bangladesh</li>
          </ul>
        </div>
      </div>

      {/* Divider */}
      <hr className="mt-10 border-gray-300" />
    </div>
  );
};

export default Contact;


===== src/components/Careers/Footer.jsx =====
import React from "react";

const Footer = () => {
  return (
    <div className="px-2 flex md:justify-between pb-4 text-base ">
      <div>
        <ul className="md:flex hidden  gap-5 text-gray-600">
          <li>Support Center</li>
          <li>Payment Security</li>
          <li>Privacy Policy</li>
          <li>EMI</li>
        </ul>
      </div>
      <div className="text-center mx-auto md:mx-0">
        <p>
          Copyright ¬© 2024. <span className="text-pink-400">GoGirls</span> All
          rights reserved.
        </p>
      </div>
    </div>
  );
};

export default Footer;


===== src/components/Careers/JobList .jsx =====
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Footer from "../common/footer/Footer";
import { MdDateRange, MdBusiness, MdWork, MdLocationOn } from "react-icons/md";
import { FaEdit } from "react-icons/fa";
import { useSelector } from "react-redux";

let jobsCache = {
  timestamp: 0,
  data: null,
};

function useJobs() {
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;
    const now = Date.now();

    async function load() {
      // if we have cached data that's <2min old, reuse it
      if (jobsCache.data && now - jobsCache.timestamp < 120_000) {
        setJobs(jobsCache.data);
        setLoading(false);
        return;
      }

      setLoading(true);
      try {
        const res = await fetch("https://media.upfrica.com/api/jobs/", {
          method: "GET",
          credentials: "include", // send cookies if needed
        });
        const json = await res.json();
        if (!mounted) return;
        jobsCache = { data: json, timestamp: Date.now() };
        setJobs(json);
      } catch (err) {
        console.error("Failed to fetch jobs:", err);
      } finally {
        if (mounted) setLoading(false);
      }
    }

    load();
    return () => {
      mounted = false;
    };
  }, []);

  return { jobs, loading };
}

function JobSkeleton() {
  return (
    <div className="bg-gray-50 p-8 rounded-xl shadow-lg animate-pulse">
      <div className="flex flex-col md:flex-row gap-8">
        <div className="flex-1 space-y-4">
          <div className="bg-gray-200 h-8 w-1/3 rounded"></div>
          <div className="bg-gray-200 h-4 w-full rounded"></div>
          <div className="bg-gray-200 h-4 w-5/6 rounded"></div>
          <div className="bg-gray-200 h-4 w-4/6 rounded"></div>
          <div className="bg-gray-200 h-6 w-1/2 rounded mt-4"></div>
          <div className="bg-gray-200 h-4 w-full rounded"></div>
          <div className="bg-gray-200 h-6 w-1/3 rounded mt-4"></div>
          <div className="bg-gray-200 h-4 w-full rounded"></div>
        </div>
        <aside className="w-full md:w-72 space-y-4">
          <div className="bg-gray-200 h-4 w-1/2 rounded"></div>
          <div className="bg-gray-200 h-4 w-1/3 rounded"></div>
          <div className="bg-gray-200 h-4 w-2/3 rounded"></div>
          <div className="bg-gray-200 h-4 w-1/4 rounded"></div>
          <div className="bg-gray-200 h-10 w-full rounded mt-4"></div>
        </aside>
      </div>
    </div>
  );
}

function JobCard({ job, user = {} }) {
  return (
    <div className="bg-gray-50 p-8 rounded-xl shadow-lg transition-all hover:-translate-y-1 hover:shadow-2xl">
      {user?.admin == true && (
        <Link
          href={`/dashboard/edit-job/${job?.id}`}
          className="flex items-center gap-2"
        >
          <FaEdit className="h-4 w-4 text-violet-700" />
          <span className="text-violet-700 hover:underline">Edit Job</span>
        </Link>
      )}
      <div className="flex flex-col md:flex-row gap-8">
        {/* Left Side */}
        <div className="flex-1">
          <div
            className="text-gray-700 mb-6 prose max-w-none"
            dangerouslySetInnerHTML={{ __html: job.description }}
          />

          <div className="mb-6">
            <h3 className="text-2xl font-semibold text-gray-800 mb-3">
              Role Responsibilities
            </h3>
            {/* render HTML from role_details */}
            <div
              className="text-gray-700 whitespace-pre-line leading-relaxed prose max-w-none"
              dangerouslySetInnerHTML={{ __html: job.role_details }}
            />
          </div>

          <div className="mb-6">
            <h3 className="text-2xl font-semibold text-gray-800 mb-3">
              Qualifications
            </h3>
            <ul className="list-disc list-inside text-gray-700 space-y-2">
              {job.qualifications.map((qual, idx) => (
                <li key={idx}>{qual}</li>
              ))}
            </ul>
          </div>

          <div>
            <h3 className="text-2xl font-semibold text-gray-800 mb-3">
              How to Apply
            </h3>
            <p className="text-gray-700">
              {" "}
              Hit the apply button or send your resume to:{" "}
              {job.contact_email || job.contact}
            </p>
          </div>
        </div>

        {/* Sidebar */}
        <aside className="w-full md:w-72">
          <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm">
            <dl className="space-y-4">
              <div className="flex items-center">
                <MdDateRange className="mr-2 text-gray-600" />
                <div>
                  <dt className="text-sm font-medium text-gray-600">
                    Deadline
                  </dt>
                  <dd className="text-gray-900">{job.deadline}</dd>
                </div>
              </div>
              <div className="flex items-center">
                <MdBusiness className="mr-2 text-gray-600" />
                <div>
                  <dt className="text-sm font-medium text-gray-600">
                    Department
                  </dt>
                  <dd className="text-gray-900">{job.department}</dd>
                </div>
              </div>
              <div className="flex items-center">
                <MdWork className="mr-2 text-gray-600" />
                <div>
                  <dt className="text-sm font-medium text-gray-600">Type</dt>
                  <dd className="text-gray-900">
                    {job.employment_type.replace("_", " ")}
                  </dd>
                </div>
              </div>
              <div className="flex items-center">
                <MdLocationOn className="mr-2 text-gray-600" />
                <div>
                  <dt className="text-sm font-medium text-gray-600">
                    Location
                  </dt>
                  <dd className="text-gray-900">{job.location}</dd>
                </div>
              </div>
            </dl>

            <div className="mt-6">
              <Link href="/careers/apply">
                <span className="inline-block bg-white border border-[#5d2eee] text-[#5d2eee] font-semibold py-2 px-8 rounded-full hover:opacity-90 transition">
                  APPLY NOW
                </span>
              </Link>
            </div>
          </div>
        </aside>
      </div>
    </div>
  );
}

export default function JobDetails() {
  const { user } = useSelector((state) => state.auth);
  const { jobs, loading } = useJobs();

  return (
    <>
      {/* Job Listings Section */}
      <section className="min-h-screen flex flex-col bg-white">
        <div className="container mx-auto px-4 py-16 space-y-16">
          {loading
            ? // show two skeletons while loading
              [1, 2].map((n) => <JobSkeleton key={n} />)
            : jobs.map((job) => <JobCard key={job.id} job={job} user={user} />)}
        </div>
        <Footer />
      </section>
    </>
  );
}


===== src/components/Careers/JoinUpfrica.jsx =====
"use client";
import { useState } from "react";

// const joinContent = [
//     "Are you ready to make a difference in the travel industry? At Go Girls, we're not just a tech-savvy travel company; we are on a mission to empower women to explore the world with confidence and joy. Founded in 2024, we‚Äôve made it our priority to create a world where travel is fun, affordable, and secure specifically for women.",
//     "Imagine being part of a dynamic team that helps women discover amazing travel experiences with our user-friendly app and website. We offer fantastic deals on hotels, flights, and activities, making travel planning a breeze. Plus, our dedicated support team is available 24/7 across 12 different markets, ensuring our travelers have assistance whenever they need it.",
//     "At Go Girls, you will have the opportunity to connect women with trusted travel partners, create safer and more enjoyable travel experiences, and help bring our innovative ideas, like our virtual reality preview tool, to life.",
//     "If you're passionate about travel, women‚Äôs empowerment, and making a positive impact, we invite you to explore career opportunities with us. Let‚Äôs explore the world together and create unforgettable experiences for women travelers everywhere! Join us and be a part of something meaningful!"
// ];

const joinContent = [
  "Welcome to Upfrica, your ultimate destination for seamless online shopping. We are committed to bringing you a modern, trustworthy, and innovative e-commerce experience!",
  "Our platform connects you with a wide range of premium products, offering fast delivery, secure payments, and 24/7 customer support. Whether you are shopping for fashion, electronics, beauty, or lifestyle products ‚Äî we have it all under one roof!",
  "At Upfrica, we focus on quality, affordability, and customer satisfaction. With easy-to-use mobile and web platforms, we make shopping more enjoyable, smarter, and safer than ever before.",
  "If you're passionate about innovation, customer service, and building the future of e-commerce, join the Upfrica journey. Let's make shopping extraordinary together!",
];

export default function JoinUpfrica() {
  const [showMore, setShowMore] = useState(false);
  const toggleShowMore = () => setShowMore((prev) => !prev);

  return (
    <section className="px-4 py-8 bg-white">
      <div className="container mx-auto grid md:grid-cols-2 gap-12">
        {/* Left: Join Content */}
        <div className="md:hidden">
          {joinContent.slice(0, 2).map((paragraph, index) => (
            <p key={index} className="text-lg text-gray-700 mb-4">
              {paragraph}
            </p>
          ))}
          <div
            className={`transition-all duration-500 ease-in-out overflow-hidden ${
              showMore ? "max-h-screen mt-4" : "max-h-0"
            }`}
          >
            {joinContent.slice(2).map((paragraph, index) => (
              <p key={index} className="text-lg text-gray-700 mb-4">
                {paragraph}
              </p>
            ))}
          </div>
          <div className="mt-4">
            <button
              onClick={toggleShowMore}
              className="px-6 py-3 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 focus:outline-none flex items-center"
            >
              <span>{showMore ? "See Less" : "See More"}</span>
              <span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="w-5 h-5 ml-1"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <line x1="5" y1="12" x2="19" y2="12" />
                  <polyline points="12 5 19 12 12 19" />
                </svg>
              </span>
            </button>
          </div>
        </div>
        <div className="hidden md:block">
          {joinContent.slice(0, 3).map((paragraph, index) => (
            <p key={index} className="text-lg text-gray-700 mb-4">
              {paragraph}
            </p>
          ))}
          <div
            className={`transition-all duration-500 ease-in-out overflow-hidden ${
              showMore ? "max-h-screen mt-4" : "max-h-0"
            }`}
          >
            {joinContent.slice(3).map((paragraph, index) => (
              <p key={index} className="text-lg text-gray-700 mb-4">
                {paragraph}
              </p>
            ))}
          </div>
          <div className="mt-4">
            <button
              onClick={toggleShowMore}
              className="px-6 py-3 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 focus:outline-none flex items-center"
            >
              <span>{showMore ? "See Less" : "See More"}</span>
              <span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="w-5 h-5 ml-1"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <line x1="5" y1="12" x2="19" y2="12" />
                  <polyline points="12 5 19 12 12 19" />
                </svg>
              </span>
            </button>
          </div>
        </div>

        {/* Right: Image Gallery */}
        <div className="grid grid-cols-3 gap-4">
          {/* Column 1: Single Image */}
          <div className="flex flex-col space-y-4">
            <div className="relative">
              <img
                src="https://images.unsplash.com/photo-1557804506-669a67965ba0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&h=528&q=80"
                alt="Connecting people"
                className="w-full h-full object-cover rounded-lg"
              />
              <div className="absolute inset-0 bg-black opacity-10 rounded-lg"></div>
            </div>
          </div>

          {/* Column 2: Two Stacked Images */}
          <div className="flex flex-col space-y-4">
            <div className="relative">
              <img
                src="https://images.unsplash.com/photo-1485217988980-11786ced9454?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&h=528&q=80"
                alt="Team meeting"
                className="w-full h-full object-cover rounded-lg"
              />
              <div className="absolute inset-0 bg-black opacity-10 rounded-lg"></div>
            </div>
            <div className="relative">
              <img
                src="https://images.unsplash.com/photo-1559136555-9303baea8ebd?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&crop=focalpoint&fp-x=.4&w=396&h=528&q=80"
                alt="Brainstorming session"
                className="w-full h-full object-cover rounded-lg"
              />
              <div className="absolute inset-0 bg-black opacity-10 rounded-lg"></div>
            </div>
          </div>

          {/* Column 3: Two Stacked Images */}
          <div className="flex flex-col space-y-4">
            <div className="relative">
              <img
                src="https://images.unsplash.com/photo-1670272504528-790c24957dda?ixlib=rb-4.0.3&ixid=MnwxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&crop=left&w=400&h=528&q=80"
                alt="Discussion"
                className="w-full h-full object-cover rounded-lg"
              />
              <div className="absolute inset-0 bg-black opacity-10 rounded-lg"></div>
            </div>
            <div className="relative">
              <img
                src="https://images.unsplash.com/photo-1670272505284-8faba1c31f7d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&h=528&q=80"
                alt="Celebration"
                className="w-full h-full object-cover rounded-lg"
              />
              <div className="absolute inset-0 bg-black opacity-10 rounded-lg"></div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}


===== src/components/Careers/JoinUsSection.jsx =====
"use client";

import React from "react";

const JoinUsSection = () => {
  return (
    <section className="bg-gray-100 py-16 px-4">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col items-center">
          <div className="w-full sm:w-5/7 md:w-4/5 lg:w-3/5 text-center">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-800 mb-6">
              JOIN US
            </h2>
            <p className="text-gray-600 text-base md:text-lg leading-relaxed">
              At Enosis, we foster and inspire innovative ideas to support
              growth and value addition. We are passionate about the work we do.
              Following a transparent system and keeping the communication
              channels open, we commute ideas and suggestions within the team.
              We invest in our people and offer them numerous learning and
              development opportunities. Join us to be a part of a visionary
              team.
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default JoinUsSection;


===== src/components/CartModal.jsx =====
import { HiXMark } from "react-icons/hi2";
import Link from "next/link";

const CartModal = ({
  basket,
  isModalVisible,
  handleCloseModal,
  handleQuantityChange,
  QuantityControl,
}) => {
  return (
    <div
      className={`fixed inset-0 bg-black bg-opacity-50 px-5 z-50 overflow-y-auto 
        ${isModalVisible ? "opacity-100 visible" : "opacity-0 invisible"} 
        transition-opacity duration-300`}
      onClick={handleCloseModal}
    >
      <div
        className={`
          bg-white rounded-lg shadow-lg
          w-full sm:w-2/3 md:w-3/4 lg:w-2/4 xl:w-2/5 2xl:w-1/3
          max-w-3xl 
          p-6 sm:p-8
          mx-auto mt-10 
          transform 
          ${isModalVisible ? "translate-y-0" : "-translate-y-full"}
          transition-transform duration-300
        `}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Modal Header with larger font size */}
        <div className="flex justify-between items-center pb-4 border-b">
          <h3 className="text-3xl font-bold">
            {basket.length} Items added to basket
          </h3>
          <button
            onClick={handleCloseModal}
            className="text-gray-600 hover:text-gray-900"
          >
            <HiXMark className="h-8 w-8" />
          </button>
        </div>

        {/* Modal Body */}
        <div className="py-4">
          <ul className="space-y-4">
            {basket.length > 0 ? (
              basket.map((item, index) => (
                <li
                  key={index}
                  className="flex flex-col md:grid md:grid-cols-5 gap-4 items-center border-b pb-3 text-lg"
                >
                  <div className="md:col-span-1">
                    <img
                      src={
                        item?.image?.[0] ?? "https://via.placeholder.com/150"
                      }
                      alt={item.title}
                      className="h-16 w-16 object-cover rounded"
                    />
                  </div>
                  <div className="md:col-span-4 w-full">
                    <div className="font-medium text-gray-800">
                      {item.title}
                    </div>
                    <div className="flex flex-wrap gap-5 items-center mt-2">
                      <p className="text-gray-700">
                        Price: {item.price.currency_iso}{" "}
                        {(item.price.cents / 100).toFixed(2)}
                      </p>
                      <div className="flex items-center text-lg font-medium">
                        <span className="mr-2">Qty:</span>
                        <QuantityControl
                          quantity={item.quantity}
                          onDecrease={() => handleQuantityChange(index, -1)}
                          onIncrease={() => handleQuantityChange(index, 1)}
                        />
                      </div>
                    </div>
                  </div>
                </li>
              ))
            ) : (
              <p className="text-center text-gray-500">
                No items in the basket.
              </p>
            )}
          </ul>
        </div>

        {/* Modal Footer */}
        <div className="flex justify-center pt-4 space-x-4">
          <Link href="/checkout">
            <button className="bg-yellow-500 text-white px-4 py-2 rounded-3xl hover:bg-yellow-600">
              Checkout Item
            </button>
          </Link>
          <Link href="/cart">
            <button className="px-4 py-2 rounded-3xl btn-base btn-outline bg-white shadow-md">
              View Basket
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default CartModal;


===== src/components/CategoreTitle.jsx =====
import React from "react";

const CategoreTitle = ({
  id,
  name,
  type,
  value,
  onChange,
  placeholder,
  onClick,
}) => {
  return (
    <input
      id={id}
      name={name}
      type={type}
      value={value}
      onClick={onClick}
      onChange={onChange}
      className="w-full px-3 rounded-lg  border-none   focus:outline-none  focus:ring-0"
      placeholder={placeholder}
    />
  );
};

export default CategoreTitle;


===== src/components/CommonButton.jsx =====
import React from "react";

const CommonButton = ({ text, className }) => {
  return <button className={className}>{text}</button>;
};

export default CommonButton;


===== src/components/ContactSellerCard.jsx =====
// components/ContactSellerCard.jsx
'use client';

import React, { useId, useMemo, useRef } from 'react';

export default function ContactSellerCard({
  // gating + text
  canShowPhone,
  unavailableText,                 // contactReasonText(gate?.reason, gate?.allowed)
  verified = false,
  hoursText = 'Available Mon‚ÄìSat, 9am‚Äì6pm',

  // phone + actions (computed in parent)
  rawDisplay = '',
  telDigits = '',
  waLink = null,
  maskPhone,                       // optional; falls back to built-in masker
  contactRevealed = false,
  setContactRevealed,
  copyToClipboard,
  copied = false,

  // optional analytics hooks
  onReveal,
  onCall,
  onWhatsApp,
  onCopy,

  // optional styling toggles
  accentWhenVerified = true,
  verificationLabel = 'Verified seller',
  verificationTooltip = 'KYC verified',
}) {
  const titleId = useId();
  const numberId = useId();
  const actionsId = useId();
  const firedRevealOnce = useRef(false);

  // --- helpers ---
  const fallbackMask = (s) => {
    const digits = String(s || '').replace(/[^\d]/g, '');
    if (!digits) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
    if (digits.length <= 4) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
    const tail = digits.slice(-4);
    return `‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ ${tail}`;
  };

  const masked = useMemo(
    () => (contactRevealed ? rawDisplay : (maskPhone || fallbackMask)(rawDisplay)),
    [contactRevealed, rawDisplay, maskPhone]
  );

  const telHref = useMemo(() => {
    const clean = String(telDigits || '').replace(/[^\d+]/g, '');
    return clean ? `tel:${clean}` : '';
  }, [telDigits]);

  const handleReveal = () => {
    setContactRevealed?.(true);
    if (!firedRevealOnce.current) {
      onReveal?.();
      firedRevealOnce.current = true;
    }
  };

  const handleCopy = async () => {
    await copyToClipboard?.();
    onCopy?.();
  };

  // --- early exit when gated ---
  if (!canShowPhone) {
    return (
      <div className="rounded-xl p-4 border border-gray-200 dark:border-neutral-700 bg-white dark:bg-neutral-900">
        <p className="text-sm text-gray-600 dark:text-neutral-400">
          {unavailableText || 'Contact phone not available.'}
        </p>
      </div>
    );
  }

  // --- verified accent classes ---
  const baseCard = 'relative rounded-xl p-4 shadow bg-white dark:bg-neutral-900';
  const borderClass = verified && accentWhenVerified
    ? 'border border-emerald-300/70 dark:border-emerald-700/60 ring-1 ring-emerald-200/40 dark:ring-emerald-800/30'
    : 'border border-gray-200 dark:border-neutral-700';

  return (
    <section
      className={`${baseCard} ${borderClass}`}
      aria-labelledby={titleId}
      data-testid="contact-seller-card"
    >
      {/* top gradient stripe when verified */}
      {verified && accentWhenVerified && (
        <div
          aria-hidden="true"
          className="absolute -top-px inset-x-0 h-[3px] rounded-t-xl
                     bg-gradient-to-r from-emerald-400/80 via-emerald-500/80 to-teal-400/80"
        />
      )}

      <div className="flex items-center justify-between mb-2">
        <p id={titleId} className="font-semibold text-gray-900 dark:text-neutral-100">
          üìû Contact Seller
        </p>

        {verified && (
          <span
            className="inline-flex items-center gap-1 text-[11px] px-2 py-0.5 rounded-full
                       bg-emerald-50 dark:bg-emerald-900/30
                       text-emerald-700 dark:text-emerald-300
                       border border-emerald-300/60 dark:border-emerald-700/60"
            title={verificationTooltip}
            aria-label={verificationLabel}
          >
            {/* tiny shield-check icon (inline SVG, no deps) */}
            <svg viewBox="0 0 24 24" className="h-3.5 w-3.5" fill="currentColor" aria-hidden="true">
              <path d="M12 2l7 3v6c0 5-3.4 9-7 11-3.6-2-7-6-7-11V5l7-3z" />
              <path d="M10.2 12.8l-1.9-1.9-1.1 1.1 3 3c.4.4 1 .4 1.4 0l5.2-5.2-1.1-1.1-4.5 4.5z" className="text-white" />
            </svg>
            {verificationLabel}
          </span>
        )}
      </div>

      {/* Number line (masked ‚Üí revealed) */}
      <div id={numberId} className="flex items-center justify-between gap-2" aria-live="polite">
        <div
          className={`text-base font-semibold text-center flex-1 tabular-nums transition-colors ${
            contactRevealed ? 'text-gray-900 dark:text-neutral-100'
                            : 'text-gray-600 dark:text-neutral-400'
          }`}
        >
          {masked}
        </div>

        {contactRevealed && (
          <button
            type="button"
            onClick={handleCopy}
            className="shrink-0 text-xs px-3 py-1.5 rounded-full
                       border border-gray-300 dark:border-neutral-700
                       hover:bg-gray-50 dark:hover:bg-neutral-800
                       focus-visible:outline-none focus-visible:ring-2
                       focus-visible:ring-violet-400 focus-visible:ring-offset-2"
            aria-label="Copy phone number"
            data-testid="copy-number"
          >
            {copied ? '‚úì Copied' : 'Copy'}
          </button>
        )}
      </div>

      {/* Actions */}
      <div id={actionsId} className="mt-2">
        {contactRevealed ? (
          <div className="grid grid-cols-2 gap-2">
            {waLink ? (
              <a
                href={waLink}
                target="_blank"
                rel="noopener noreferrer nofollow"
                onClick={onWhatsApp}
                className="bg-green-600 text-white py-2 rounded-full text-center
                           hover:bg-green-700
                           focus-visible:outline-none focus-visible:ring-2
                           focus-visible:ring-green-400 focus-visible:ring-offset-2"
                data-testid="whatsapp-cta"
              >
                üí¨ WhatsApp
              </a>
            ) : (
              <span aria-hidden="true" />
            )}
            {telHref ? (
              <a
                href={telHref}
                onClick={onCall}
                className="py-2 rounded-full text-center text-white
                           bg-violet-600 hover:bg-violet-700
                           focus-visible:outline-none focus-visible:ring-2
                           focus-visible:ring-violet-400 focus-visible:ring-offset-2"
                data-testid="call-cta"
              >
                üìû Call Now
              </a>
            ) : (
              <button
                type="button"
                disabled
                className="py-2 rounded-full text-center text-white
                           bg-violet-400 cursor-not-allowed opacity-70"
                aria-disabled="true"
                data-testid="call-cta-disabled"
              >
                üìû Call Now
              </button>
            )}
          </div>
        ) : (
          <button
            type="button"
            aria-expanded={contactRevealed}
            aria-controls={actionsId}
            onClick={handleReveal}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault(); handleReveal();
              }
            }}
            className="w-full bg-violet-50 dark:bg-violet-950/20
                       text-violet-700 dark:text-violet-300
                       border border-violet-300 dark:border-violet-900/50
                       font-medium py-2 px-4 rounded-full
                       hover:bg-violet-100 dark:hover:bg-violet-900/30
                       focus-visible:outline-none focus-visible:ring-2
                       focus-visible:ring-violet-400 focus-visible:ring-offset-2"
            data-testid="reveal-cta"
          >
            üëÄ Reveal phone number
          </button>
        )}
      </div>

      <p className="text-[11px] text-center text-gray-500 dark:text-neutral-400 mt-2">
        {hoursText}
      </p>
    </section>
  );
}

===== src/components/ContactSheet.jsx =====
'use client';

import React, { useEffect, useId, useMemo, useRef, useState } from 'react';
import { HiXMark, HiPhone, HiChatBubbleOvalLeft, HiClipboard, HiCheck } from 'react-icons/hi2';

export default function ContactSheet({
  isOpen = false,
  open = undefined,   // alias
  onClose,
  shopName = 'Seller',
  phoneDisplay,       // e.g. "+233 24 123 4567"
  e164,               // e.g. "+233241234567" (digits only and +)
  verified = false,
  hoursText = 'Available Mon‚ÄìSat, 9am‚Äì6pm',
}) {
  const actuallyOpen = open ?? isOpen;

  const titleId = useId();
  const panelRef = useRef(null);
  const activeBeforeOpenRef = useRef(null);

  // reveal/copy
  const [revealed, setRevealed] = useState(false);
  const [copied, setCopied] = useState(false);

  // Swipe-to-close (same feel as BasketSheet)
  const [dragY, setDragY] = useState(0);
  const [dragging, setDragging] = useState(false);
  const startYRef = useRef(0);
  const startTRef = useRef(0);
  const DRAG_MAX_PX = 240;
  const DRAG_CLOSE_PX = 140;
  const VELOCITY_CLOSE = 1.0;

  const onPointerDown = (e) => {
    setDragging(true);
    startYRef.current = 'touches' in e ? e.touches[0].clientY : e.clientY;
    startTRef.current = performance.now();
  };
  const onPointerMove = (e) => {
    if (!dragging) return;
    const y = 'touches' in e ? e.touches[0].clientY : e.clientY;
    let delta = Math.max(0, y - startYRef.current);
    if (delta > DRAG_MAX_PX) delta = DRAG_MAX_PX + (delta - DRAG_MAX_PX) * 0.2;
    setDragY(delta);
  };
  const onPointerUp = () => {
    if (!dragging) return;
    const durMs = Math.max(1, performance.now() - startTRef.current);
    const velocity = dragY / durMs;
    const shouldClose = dragY > DRAG_CLOSE_PX || velocity > VELOCITY_CLOSE;
    setDragging(false);
    setDragY(0);
    if (shouldClose) onClose?.();
  };

  // focus/scroll locking
  useEffect(() => {
    if (actuallyOpen) {
      activeBeforeOpenRef.current = document.activeElement;
      document.body.style.overflow = 'hidden';
      setTimeout(() => panelRef.current?.focus(), 0);
    } else {
      document.body.style.overflow = '';
      if (activeBeforeOpenRef.current instanceof HTMLElement) {
        activeBeforeOpenRef.current.focus?.();
      }
    }
    return () => (document.body.style.overflow = '');
  }, [actuallyOpen]);

  // esc to close
  useEffect(() => {
    if (!actuallyOpen) return;
    const onKey = (e) => e.key === 'Escape' && onClose?.();
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, [actuallyOpen, onClose]);

  const telHref = useMemo(() => (e164 ? `tel:${e164.replace(/[^\d+]/g, '')}` : null), [e164]);
  const waHref  = useMemo(() => (e164 ? `https://wa.me/${e164.replace(/[^\d]/g, '')}` : null), [e164]);

  const maskPhone = (s) => {
    const digits = String(s || '').replace(/[^\d]/g, '');
    if (digits.length <= 4) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
    return `‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ ${digits.slice(-4)}`;
  };

  const copy = async () => {
    try {
      await navigator.clipboard.writeText(phoneDisplay || e164 || '');
      setCopied(true);
      setTimeout(() => setCopied(false), 1200);
    } catch {}
  };

  const onBackdrop = (e) => {
    if (e.target === e.currentTarget) onClose?.();
  };

  return (
    <div
      aria-hidden={!actuallyOpen}
      className={[
        'fixed inset-0 z-[85] transition-opacity duration-200',
        actuallyOpen ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none',
      ].join(' ')}
      onClick={onBackdrop}
    >
      {/* Backdrop */}
      <div
        className={[
          'absolute inset-0 bg-black/50 backdrop-blur-[1px] transition-opacity',
          actuallyOpen ? 'opacity-100' : 'opacity-0',
        ].join(' ')}
      />

      {/* Panel */}
      <div
        role="dialog"
        aria-modal="true"
        aria-labelledby={titleId}
        tabIndex={-1}
        ref={panelRef}
        className="absolute left-1/2 -translate-x-1/2 bottom-0 w-full max-w-[640px] outline-none"
        onMouseMove={onPointerMove}
        onMouseUp={onPointerUp}
        onTouchMove={onPointerMove}
        onTouchEnd={onPointerUp}
      >
        <div
          className={[
            'mx-auto w-full bg-white dark:bg-neutral-900 rounded-t-3xl shadow-2xl',
            'border-t border-neutral-200 dark:border-neutral-800',
            'transition-transform duration-200 will-change-transform',
          ].join(' ')}
          style={{ transform: actuallyOpen ? `translateY(${dragY}px)` : 'translateY(110%)' }}
        >
          {/* handle */}
          <div
            className="pt-3 pb-2 flex justify-center cursor-grab active:cursor-grabbing select-none touch-action-none"
            onMouseDown={onPointerDown}
            onTouchStart={onPointerDown}
          >
            <span className="h-1.5 w-12 rounded-full bg-neutral-300 dark:bg-neutral-700" />
          </div>

          {/* header */}
          <div className="px-4 sm:px-6 pb-3 flex items-center justify-between">
            <h2 id={titleId} className="text-lg sm:text-xl font-semibold">
              Contact {shopName}
            </h2>
            <button
              onClick={onClose}
              className="p-2 rounded-full hover:bg-neutral-100 dark:hover:bg-neutral-800 focus:outline-none focus-visible:ring-2 focus-visible:ring-violet-400"
              aria-label="Close"
            >
              <HiXMark className="h-6 w-6" />
            </button>
          </div>

          {/* body */}
          <div className="px-4 sm:px-6 pb-4">
            <div className="rounded-xl border border-neutral-200 dark:border-neutral-800 p-4">
              <div className="flex items-center gap-2 text-sm text-neutral-600 dark:text-neutral-400 mb-2">
                <span className="inline-flex items-center gap-1">
                  {verified ? '‚úÖ Verified seller' : 'Seller'}
                </span>
                <span aria-hidden>‚Ä¢</span>
                <span>{hoursText}</span>
              </div>

              {/* number */}
              <div className="flex items-center justify-between gap-3">
                <div className="text-xl font-semibold tabular-nums">
                  {revealed ? (phoneDisplay || e164 || '‚Äî') : maskPhone(phoneDisplay || e164)}
                </div>
                {!revealed && (
                  <button
                    onClick={() => setRevealed(true)}
                    className="rounded-full px-3 py-2 text-sm font-medium border border-neutral-300 dark:border-neutral-700 hover:bg-neutral-50 dark:hover:bg-neutral-800"
                  >
                    üëÄ Reveal number
                  </button>
                )}
              </div>
            </div>

            {/* actions */}
            <div className="mt-4 grid grid-cols-1 sm:grid-cols-3 gap-2">
              <a
                href={revealed && telHref ? telHref : undefined}
                onClick={(e) => { if (!revealed) e.preventDefault(); }}
                className={[
                  'inline-flex items-center justify-center gap-2 rounded-full py-3 font-semibold',
                  'bg-violet-600 text-white hover:bg-violet-700 text-center',
                  !revealed ? 'opacity-60 cursor-not-allowed' : '',
                ].join(' ')}
              >
                <HiPhone className="h-5 w-5" />
                Call
              </a>
              {waHref && (
                <a
                  href={waHref}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center justify-center gap-2 rounded-full py-3 font-semibold border border-neutral-300 dark:border-neutral-700 hover:bg-neutral-50 dark:hover:bg-neutral-800 text-center"
                >
                  <HiChatBubbleOvalLeft className="h-5 w-5" />
                  WhatsApp
                </a>
              )}
              <button
                onClick={copy}
                className="inline-flex items-center justify-center gap-2 rounded-full py-3 font-semibold border border-neutral-300 dark:border-neutral-700 hover:bg-neutral-50 dark:hover:bg-neutral-800"
              >
                {copied ? <HiCheck className="h-5 w-5" /> : <HiClipboard className="h-5 w-5" />}
                {copied ? 'Copied' : 'Copy number'}
              </button>
            </div>

            <p className="mt-3 text-xs text-neutral-500">
              We never share your phone. Standard carrier rates apply.
            </p>
          </div>

          {/* safe-area footer spacer */}
          <div className="h-[max(8px,env(safe-area-inset-bottom))]" />
        </div>
      </div>
    </div>
  );
}

===== src/components/CreateReview.jsx =====
import React from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";

const CreateReves = ({ slug }) => {
  const initialValues = {
    title: "",
    rating: "",
    comment: "",
    quality: "",
    value: "",
  };

  const validate = (values) => {
    const errors = {};
    if (!values.title) errors.title = "Title is required";
    if (!values.rating) errors.rating = "Rating is required";
    if (!values.comment) errors.comment = "Comment is required";
    if (!values.quality) errors.quality = "Quality answer is required";
    if (!values.value) errors.value = "Value answer is required";
    return errors;
  };

  const handleSubmit = async (values, { setSubmitting, resetForm }) => {
    const payload = {
      title: values.title,
      rating: parseInt(values.rating),
      comment: values.comment,
      questions: {
        quality: values.quality,
        value: values.value,
      },
    };

    // Token localStorage ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ
    const token = localStorage.getItem("token");
    console.log("token", token);

    try {
      const response = await fetch(
        `https://media.upfrica.com/api/products/${slug}/reviews/`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
          body: JSON.stringify(payload),
        },
      );

      if (!response.ok) {
        throw new Error("Failed to post review");
      }

      alert("Review submitted successfully!");
      resetForm();
    } catch (error) {
      console.error(error);
      alert("Something went wrong while submitting.");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <section className="mt-12">
      <h3 className="text-lg md:text-xl lg:text-2xl font-medium border-b pb-3">
        Write a Review
      </h3>

      <Formik
        initialValues={initialValues}
        validate={validate}
        onSubmit={handleSubmit}
      >
        {({ isSubmitting }) => (
          <Form className="mt-6 space-y-6">
            {/* Rating */}
            <div>
              <label className="block text-[#A435F0] mb-1 text-sm lg:text-lg">
                Rating
              </label>
              <Field
                as="select"
                name="rating"
                className="w-full border rounded p-2"
              >
                <option value="">Select rating</option>
                <option value="5">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (5/5)</option>
                <option value="4">‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ (4/5)</option>
                <option value="3">‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ (3/5)</option>
                <option value="2">‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ (2/5)</option>
                <option value="1">‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ (1/5)</option>
              </Field>
              <ErrorMessage
                name="rating"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Title */}
            <div>
              <label className="block text-[#A435F0] mb-1 text-sm lg:text-lg">
                Headline
              </label>
              <Field
                type="text"
                name="title"
                placeholder="Give your review a title"
                className="w-full border rounded p-2"
              />
              <ErrorMessage
                name="title"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Comment */}
            <div>
              <label className="block font-semibold mb-1 text-sm lg:text-lg">
                Review
              </label>
              <Field
                as="textarea"
                name="comment"
                rows="5"
                placeholder="Describe your experience"
                className="w-full border rounded p-2"
              />
              <ErrorMessage
                name="comment"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Quality Question */}
            <div>
              <label className="block mb-1 text-sm lg:text-lg font-medium">
                How was the quality?
              </label>
              <Field
                as="select"
                name="quality"
                className="w-full border rounded p-2"
              >
                <option value="">Select quality</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
              </Field>
              <ErrorMessage
                name="quality"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Value Question */}
            <div>
              <label className="block mb-1 text-sm lg:text-lg font-medium">
                Was it worth the value?
              </label>
              <Field
                as="select"
                name="value"
                className="w-full border rounded p-2"
              >
                <option value="">Select value</option>
                <option value="Excellent">Excellent</option>
                <option value="Good">Good</option>
                <option value="Fair">Fair</option>
                <option value="Poor">Poor</option>
              </Field>
              <ErrorMessage
                name="value"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Submit */}
            <button
              type="submit"
              disabled={isSubmitting}
              className="bg-[#A435F0] text-white px-6 py-2 rounded font-semibold"
            >
              {isSubmitting ? "Posting..." : "Post Review"}
            </button>
          </Form>
        )}
      </Formik>
    </section>
  );
};

export default CreateReves;


===== src/components/CreateReviews.jsx =====
import React, { use } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";

const CreateReviews = ({ slug }) => {
  const { token } = useSelector((state) => state.auth);
  const router = useRouter();
  const initialValues = {
    title: "",
    rating: "",
    comment: "",
    quality: "",
    value: "",
  };

  const validate = (values) => {
    const errors = {};
    if (!values.title) errors.title = "Title is required";
    if (!values.rating) errors.rating = "Rating is required";
    if (!values.comment) errors.comment = "Comment is required";
    if (!values.quality) errors.quality = "Quality answer is required";
    if (!values.value) errors.value = "Value answer is required";
    return errors;
  };

  const handleSubmit = async (values, { setSubmitting, resetForm }) => {
    console.log("Submitted values:", values); // üîç ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá
    if (!token) {
      router.push("/login");
      return;
    }
    const payload = {
      title: values.title,
      rating: parseInt(values.rating),
      comment: values.comment,
      questions: {
        quality: values.quality,
        value: values.value,
      },
    };

    try {
      const response = await fetch(
        "https://media.upfrica.com/api/products/redmi-power-bank-18w-fast-power-charger/reviews/",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
          body: JSON.stringify(payload),
        },
      );

      if (!response.ok) {
        throw new Error("Failed to post review");
      }

      alert("Review submitted successfully!");
      resetForm();
      console.log("revews", response);
    } catch (error) {
      console.error(error);
      alert("Something went wrong while submitting.");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <section className="mt-12">
      <h3 className="text-lg md:text-xl lg:text-2xl font-medium border-b pb-3">
        Write a Review
      </h3>

      <Formik
        initialValues={initialValues}
        validate={validate}
        onSubmit={handleSubmit}
      >
        {({ isSubmitting }) => (
          <Form className="mt-6 space-y-6">
            {/* Rating */}
            <div>
              <label className="block text-[#A435F0] mb-1 text-sm lg:text-lg">
                Rating
              </label>
              <Field
                as="select"
                name="rating"
                className="w-full border rounded p-2"
              >
                <option value="">Select rating</option>
                <option value="5">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (5/5)</option>
                <option value="4">‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ (4/5)</option>
                <option value="3">‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ (3/5)</option>
                <option value="2">‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ (2/5)</option>
                <option value="1">‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ (1/5)</option>
              </Field>
              <ErrorMessage
                name="rating"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Title */}
            <div>
              <label className="block text-[#A435F0] mb-1 text-sm lg:text-lg">
                Headline
              </label>
              <Field
                type="text"
                name="title"
                placeholder="Give your review a title"
                className="w-full border rounded p-2"
              />
              <ErrorMessage
                name="title"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Comment */}
            <div>
              <label className="block font-semibold mb-1 text-sm lg:text-lg">
                Review
              </label>
              <Field
                as="textarea"
                name="comment"
                rows="5"
                placeholder="Describe your experience"
                className="w-full border rounded p-2"
              />
              <ErrorMessage
                name="comment"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Quality Question */}
            <div>
              <label className="block mb-1 text-sm lg:text-lg font-medium">
                How was the quality?
              </label>
              <Field
                as="select"
                name="quality"
                className="w-full border rounded p-2"
              >
                <option value="">Select quality</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
              </Field>
              <ErrorMessage
                name="quality"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Value Question */}
            <div>
              <label className="block mb-1 text-sm lg:text-lg font-medium">
                Was it worth the value?
              </label>
              <Field
                as="select"
                name="value"
                className="w-full border rounded p-2"
              >
                <option value="">Select value</option>
                <option value="Excellent">Excellent</option>
                <option value="Good">Good</option>
                <option value="Fair">Fair</option>
                <option value="Poor">Poor</option>
              </Field>
              <ErrorMessage
                name="value"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Submit */}
            {!isSubmitting && (
              <button
                type="submit"
                disabled={isSubmitting}
                className="bg-[#A435F0] text-white px-6 py-2 rounded font-semibold"
              >
                {"Post Review"}
              </button>
            )}
            {isSubmitting && (
              <button
                type="button"
                disabled
                className="bg-[#A435F0] text-white px-6 py-2 rounded font-semibold"
              >
                <div className="flex space-x-2 justify-center items-center h-6">
                  <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.3s]" />
                  <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.15s]" />
                  <div className="h-2 w-2 bg-white rounded-full animate-bounce" />
                </div>
              </button>
            )}
          </Form>
        )}
      </Formik>
    </section>
  );
};

export default CreateReviews;


===== src/components/CustomerReviewsSection.jsx =====
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchReviewsStart,
  fetchReviewsSuccess,
  fetchReviewsFailure,
} from "../app/store/slices/reviewsSlice";

/* ---------------- UI bits ---------------- */
const SkeletonReview = () => (
  <div className="my-4 pb-4 border-b last:border-b-0 animate-pulse">
    <div className="flex flex-col md:flex-row gap-3">
      <div className="flex-shrink-0">
        <div className="w-16 h-16 rounded-full bg-gray-300" />
      </div>
      <div className="flex-grow relative space-y-2">
        <div className="h-4 bg-gray-300 rounded w-24" />
        <div className="h-3 bg-gray-300 rounded w-16" />
        <div className="h-4 bg-gray-300 rounded w-1/3" />
        <div className="h-4 bg-gray-300 rounded w-full" />
        <div className="h-4 bg-gray-300 rounded w-5/6" />
        <div className="h-3 bg-gray-300 rounded w-1/4" />
      </div>
    </div>
  </div>
);

const StarRating = ({ rating }) => (
  <div className="inline-block">
    {[...Array(5)].map((_, i) => (
      <span
        key={i}
        className={i < rating ? "text-yellow-500" : "text-gray-300"}
      >
        ‚òÖ
      </span>
    ))}
  </div>
);

/* ------------- helpers ------------- */
function getApiBase() {
  // Prefer public env; fallback to same-origin
  const envBase = process.env.NEXT_PUBLIC_API_BASE_URL?.replace(/\/+$/, "");
  if (envBase) return envBase;
  if (typeof window !== "undefined") {
    const { origin } = window.location;
    return origin; // same origin fallback
  }
  return ""; // server render fallback ‚Äî will be caught below
}

async function safeJson(res) {
  const text = await res.text();
  try {
    return JSON.parse(text);
  } catch {
    // Log the first part of the HTML to the console for debugging
    const snippet = text.slice(0, 300).replace(/\s+/g, " ").trim();
    console.error("Non-JSON response from reviews endpoint:", snippet);
    throw new Error(
      res.ok
        ? "Unexpected response format."
        : `HTTP ${res.status} ${res.statusText}`
    );
  }
}

export default function CustomerReviewsSection({ slug }) {
  const dispatch = useDispatch();
  const {
    reviews = [],
    summary = {},
    loading,
    error,
  } = useSelector((state) => state.reviews);

  const {
    average_rating = 0,
    review_count = 0,
    rating_percent = [0, 0, 0, 0, 0],
  } = summary;

  useEffect(() => {
    if (!slug) {
      dispatch(fetchReviewsFailure("Missing product slug."));
      return;
    }

    const API_BASE = getApiBase();
    if (!API_BASE) {
      dispatch(
        fetchReviewsFailure(
          "API base URL is not configured (NEXT_PUBLIC_API_BASE_URL)."
        )
      );
      return;
    }

    // if slug might contain slashes, encode safely
    const encoded = encodeURIComponent(String(slug));
    // NOTE: your backend path is assumed correct here
    const url = `${API_BASE}/api/products/${encoded}/reviews/`;

    const ctrl = new AbortController();
    const { signal } = ctrl;

    (async () => {
      try {
        dispatch(fetchReviewsStart());

        const res = await fetch(url, {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
          signal,
          credentials: "include", // if your API uses session/cookie auth; safe even if not
        });

        // Parse safely even if server returned HTML
        const data = await safeJson(res);

        // Expecting shape: { reviews, summary } or a flat array ‚Äî support both
        if (Array.isArray(data)) {
          dispatch(
            fetchReviewsSuccess({
              reviews: data,
              summary: {
                average_rating: 0,
                review_count: data.length,
                rating_percent: [0, 0, 0, 0, 0],
              },
            })
          );
        } else {
          dispatch(fetchReviewsSuccess(data));
        }
      } catch (e) {
        if (e.name === "AbortError") return;
        dispatch(
          fetchReviewsFailure(
            e?.message ||
              "Could not load reviews. Please try again in a moment."
          )
        );
      }
    })();

    return () => ctrl.abort();
  }, [dispatch, slug]);

  /* ---------- render ---------- */
  if (loading) {
    return (
      <>
        {[1, 2].map((i) => (
          <SkeletonReview key={i} />
        ))}
      </>
    );
  }

  if (error) {
    return (
      <p className="text-center text-red-500 py-4">
        {error}{" "}
        <span className="text-gray-400">
          (Check Network tab for the response body.)
        </span>
      </p>
    );
  }

  if (!review_count && (!reviews || reviews.length === 0)) {
    return <p className="text-center text-gray-500 py-4">No reviews found.</p>;
  }

  return (
    <div className="space-y-6">
      {/* Summary */}
      <div className="bg-gray-100 p-4 rounded-md">
        <h2 className="text-xl font-semibold mb-2">
          Verified Customer Reviews
        </h2>
        <div className="flex items-baseline mb-4">
          <span className="text-4xl font-bold mr-2">
            {Number(average_rating || 0).toFixed(1)}
          </span>
          <span className="text-gray-600">
            Based on {review_count} review{review_count > 1 ? "s" : ""}
          </span>
        </div>

        {/* 5‚Üí1‚òÖ Breakdown */}
        <div className="space-y-2">
          {rating_percent.map((pct, idx) => {
            const star = 5 - idx;
            const width = Math.max(0, Math.min(100, Number(pct) || 0));
            return (
              <div key={star} className="flex items-center text-sm md:text-base">
                <span className="w-8">{star}‚Äâ‚òÖ</span>
                <div className="flex-1 mx-2 bg-gray-200 h-3 rounded-full overflow-hidden">
                  <div className="h-full bg-yellow-400" style={{ width: `${width}%` }} />
                </div>
                <span className="w-12 text-right text-gray-600">
                  {Math.round(width)}%
                </span>
              </div>
            );
          })}
        </div>
      </div>

      {/* Individual Reviews */}
      <div className="col-sm-6 col-lg-12 mb-0 px-3 overflow-y-auto max-h-[520px]">
        <div className="card bg-transparent">
          <div className="card-body p-0">
            {(reviews || []).map((review) => (
              <div key={review.id} className="my-4 pb-4 border-b last:border-b-0">
                <div className="flex gap-3">
                  <div className="flex-shrink-0">
                    <img
                      className="w-16 h-16 rounded-full object-cover"
                      alt="Avatar"
                      src="https://d26ukeum83vx3b.cloudfront.net/assets/fallback/unknown-profile-af52c345c697846d002f6b77aa9530f87be0374f4b2b0d9ba54a2cf1d6c585e4.jpg"
                      loading="lazy"
                    />
                  </div>
                  <div className="flex-grow">
                    <h6 className="font-medium text-sm md:text-base mb-1">
                      {review.reviewer?.username || "Anonymous"}
                    </h6>
                    <div className="flex items-center gap-3 text-xs md:text-sm text-gray-600 mb-2">
                      {review.created_at
                        ? new Date(review.created_at).toLocaleString("en-GB", {
                            dateStyle: "medium",
                            timeStyle: "short",
                          })
                        : ""}
                    </div>
                    <div className="flex items-center gap-2 mb-1">
                      <StarRating rating={review.rating} />
                      {review.title && (
                        <b className="text-gray-800 text-sm md:text-base">
                          {review.title}
                        </b>
                      )}
                    </div>
                    <p className="text-sm md:text-base text-gray-800">
                      {review.comment}
                    </p>
                    <span
                      className={`text-xs md:text-sm mt-2 inline-block ${
                        review.status === 1 ? "text-green-600" : "text-red-600"
                      }`}
                    >
                      {review.status === 1 ? "published" : "unpublished"}
                    </span>
                  </div>
                </div>
              </div>
            ))}
            {(!reviews || reviews.length === 0) && (
              <p className="text-center text-gray-500 py-4">No reviews yet.</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

===== src/components/DeliveryDate.jsx =====
import React from "react";

const DeliveryDate = () => {
  const today = new Date(); // Ajker tarikh
  const futureDate = new Date(today); // Future tarikh er jonno notun date object
  futureDate.setDate(today.getDate() + 2); // Ajker date er shathe 2 din jog

  // Date ke readable format e convert korchi (dd mmm yyyy)
  const formatDate = (date) => {
    const options = { day: "numeric", month: "short" };
    return date.toLocaleDateString("en-US", options);
  };

  return (
    <div className="p-2 border border-blue-400 w-full md:w-1/2 rounded-md font-bold">
      <h1>
        Delivery date:
        <span className="text-blue-600">
          {" "}
          {formatDate(today)} - {formatDate(futureDate)}{" "}
        </span>
        if ordered today
      </h1>
    </div>
  );
};

export default DeliveryDate;


===== src/components/DescriptionAndReviews.jsx =====
"use client";

import React, { useEffect, useMemo, useState } from "react";
import Link from "next/link";
import { useParams } from "next/navigation";
import { useSelector } from "react-redux";
import { MdOutlinePhone } from "react-icons/md";
import { FaEdit, FaHeart, FaRegHeart } from "react-icons/fa";

// If you still use these elsewhere, keep the imports
// import CustomerReviewsSection from "./CustomerReviewsSection";
// import CreateReview from "./CreateReview";

const API_BASE =
  process.env.NEXT_PUBLIC_API_BASE?.replace(/\/+$/, "") ||
  "https://media.upfrica.com";

const decodeIfEscaped = (s) => {
  if (typeof s !== "string") return s;
  if (/[&]lt;|[&]gt;|&amp;/.test(s)) {
    try {
      const doc = new DOMParser().parseFromString(s, "text/html");
      return doc.documentElement.textContent || s;
    } catch {
      return s;
    }
  }
  return s;
};

export default function DescriptionAndReviews({
  details,
  condition,
  user,      // seller (optional; will be derived from product if missing)
  shop,      // optional; will be derived from product if missing
  product,   // optional; preferred path
}) {
  const params = useParams(); // expects route like /(pages)/[region]/[slug]
  const region = params?.region;
  const slug = params?.slug;

  // If parent didn‚Äôt pass product, we‚Äôll fetch it
  const [fetchedProduct, setFetchedProduct] = useState(null);
  const [fetching, setFetching] = useState(false);
  const [fetchErr, setFetchErr] = useState("");

  // Normalize product: prefer prop, else details.product, else details, else fetched
  const prod = useMemo(
    () => product ?? details?.product ?? details ?? fetchedProduct ?? null,
    [product, details, fetchedProduct]
  );

  // Derive seller/shop/condition from product if not provided
  const seller = user ?? prod?.user ?? prod?.seller ?? null;
  const shopData = shop ?? prod?.shop ?? null;
  const conditionObj = condition ?? prod?.condition ?? null;

  // Debug what arrives
  useEffect(() => {
    // eslint-disable-next-line no-console
    console.log("[DescriptionAndReviews] incoming:", { product, details });
    // eslint-disable-next-line no-console
    console.log("[DescriptionAndReviews] normalized prod:", prod);
  }, [product, details, prod]);

  // Fetch the product if it wasn't passed and we have region/slug
  useEffect(() => {
    if (prod) return;                 // already have it
    if (!region || !slug) return;     // cannot fetch without them

    const controller = new AbortController();
    const doFetch = async () => {
      try {
        setFetching(true);
        setFetchErr("");
        const res = await fetch(`${API_BASE}/api/${region}/${slug}`, {
          signal: controller.signal,
        });
        if (!res.ok) {
          throw new Error(`Failed to load product ${region}/${slug}`);
        }
        const json = await res.json();
        setFetchedProduct(json);
      } catch (e) {
        if (e.name !== "AbortError") setFetchErr(e.message || "Failed to load product");
      } finally {
        setFetching(false);
      }
    };

    doFetch();
    return () => controller.abort();
  }, [prod, region, slug]);

  // Auth / follow bits
  const { user: currentUser, token } = useSelector((s) => s.auth);
  const [showPhone, setShowPhone] = useState(false);
  const [openTab, setOpenTab] = useState("specifics");

  const [isFollowing, setIsFollowing] = useState(false);
  const [followersCount, setFollowersCount] = useState(0);
  const [sellerProducts, setSellerProducts] = useState(0);
  const [loadingFollow, setLoadingFollow] = useState(false);

  const conditionValue = conditionObj?.name || "N/A";
  const phoneText = showPhone ? seller?.phone_number : "Click to view number";
  const properties = prod?.properties || [];

  const canEditSpecifics =
    properties.length >= 1
      ? currentUser?.admin === true
      : currentUser?.username === seller?.username;

  // Fetch initial follow status/count
  useEffect(() => {
    if (!seller?.id) return;
    const headers = {};
    if (token) headers["Authorization"] = `Token ${token}`;
    fetch(`${API_BASE}/api/users/${seller.id}/follow/status/`, {
      method: "GET",
      headers,
    })
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch follow status");
        return res.json();
      })
      .then((data) => {
        setIsFollowing(data.is_following);
        setFollowersCount(data.followers_count);
        setSellerProducts(data.products_count);
      })
      .catch((err) => console.error(err));
  }, [seller?.id, token]);

  // Compute final HTML for description (first non-empty, decode if escaped)
  const descriptionHtml = useMemo(() => {
    const pick = (...vals) =>
      vals.find((v) => typeof v === "string" && v.trim().length > 0)?.trim();

    const raw = pick(
      prod?.description_html,
      prod?.rich_description_html,
      prod?.description,
      prod?.action_text?.description?.body
    );

    return decodeIfEscaped(raw) || "<p>No description provided.</p>";
  }, [
    prod?.description_html,
    prod?.rich_description_html,
    prod?.description,
    prod?.action_text?.description?.body,
  ]);

  const handleToggleFollow = async () => {
    if (!token) {
      alert("Please log in to follow sellers.");
      return;
    }
    if (!seller?.id) return;
    setLoadingFollow(true);
    try {
      const res = await fetch(`${API_BASE}/api/users/${seller.id}/follow/`, {
        method: isFollowing ? "DELETE" : "POST",
        headers: { Authorization: `Token ${token}` },
      });
      if (!res.ok) {
        const data = await res.json().catch(() => ({}));
        if (res.status === 400 && data.detail === "Can't follow yourself.") {
          alert("cant follow yourself");
        } else {
          throw new Error(data.detail || "Follow action failed");
        }
      } else {
        setIsFollowing((f) => !f);
        setFollowersCount((n) => n + (isFollowing ? -1 : 1));
      }
    } catch (err) {
      console.error(err);
      if (err.message !== "Can't follow yourself.") {
        alert("Could not update follow status.");
      }
    } finally {
      setLoadingFollow(false);
    }
  };

  // Loading / error states if we needed to fetch
  if (!prod) {
    return (
      <main className="mx-auto max-w-screen-xl py-8 text-gray-800">
        <div className="border rounded-xl p-6">
          <p className="text-sm text-gray-600">
            {fetchErr ? `Error: ${fetchErr}` : "Loading item details‚Ä¶"}
          </p>
        </div>
      </main>
    );
  }

  return (
    <main className="mx-auto max-w-screen-xl py-8 text-gray-800">
      {/* ITEM DETAILS */}
      <header className="pb-4 border-b border-gray-300">
        <h2 className="text-lg md:text-xl lg:text-2xl font-semibold">
          Item Details
        </h2>
      </header>

      <section className="mt-6 space-y-4">
        {/* specifics */}
        <div className="border rounded-xl">
          <button
            onClick={() =>
              setOpenTab(openTab === "specifics" ? "" : "specifics")
            }
            className="w-full flex justify-between items-center p-4 font-medium text-left"
          >
            Product specifics
            <span>{openTab === "specifics" ? "‚àí" : "+"}</span>
          </button>
          {openTab === "specifics" && (
            <div className="p-4 border-t text-sm text-gray-700 space-y-2">
              {canEditSpecifics && (
                <Link
                  href={`/products/edit/specifics/${prod?.id}`}
                  className="flex items-center gap-2 mb-2 text-violet-700"
                >
                  <FaEdit className="h-4 w-4" />
                  <span className="hover:underline">Edit Specifics</span>
                </Link>
              )}
              <p>
                <b>Seller location:</b> {seller?.town} ‚Äì {seller?.country}
              </p>
              <p>
                <b>Condition:</b> {conditionValue}
              </p>
              {(prod?.properties || []).map((item) => (
                <p key={item.id}>
                  <b>{item.property.label}:</b> {item.value}
                </p>
              ))}
            </div>
          )}
        </div>

        {/* description */}
        <div className="border rounded-xl">
          <button
            onClick={() =>
              setOpenTab(openTab === "description" ? "" : "description")
            }
            className="w-full flex justify-between items-center p-4 font-medium text-left"
          >
            Item description from seller
            <span>{openTab === "description" ? "‚àí" : "+"}</span>
          </button>

          {openTab === "description" && (
            <div
              className="p-4 border-t text-sm text-gray-700 leading-relaxed prose max-w-none"
              dangerouslySetInnerHTML={{ __html: descriptionHtml }}
              suppressHydrationWarning
            />
          )}
        </div>
      </section>

      {/* SELLER INFO */}
      <section className="mt-8 max-w-xl">
        <div className="p-6 bg-white rounded-xl shadow-sm space-y-4">
          <div className="flex items-center gap-4">
            {shopData?.shop_logo ? (
              <img
                src={shopData.shop_logo}
                alt={shopData?.name}
                className="w-16 h-16 rounded-full shadow"
              />
            ) : (
              <div className="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center text-gray-500">
                N/A
              </div>
            )}
            <div>
              <h6 className="text-base font-medium mb-1">{seller?.username}</h6>
              <ul className="flex items-center gap-4 text-sm text-gray-600">
                <li>
                  {followersCount} follower{followersCount === 1 ? "" : "s"}
                </li>
                <li className="text-green-600">
                  {sellerProducts ?? "‚Äî"} Items
                </li>
              </ul>
            </div>
          </div>

          <div className="flex gap-2">
            <button
              onClick={handleToggleFollow}
              disabled={loadingFollow}
              className={`
                flex-1 flex justify-center items-center gap-2
                border rounded-full px-4 py-2 text-sm font-semibold
                ${isFollowing ? "border-violet-700" : "border-gray-300"}
                ${loadingFollow ? "bg-violet-700" : "bg-white"}
                disabled:opacity-50
              `}
            >
              {loadingFollow ? (
                <div className="flex space-x-2 justify-center items-center h-6">
                  <div className="h-2 w-2 rounded-full animate-bounce [animation-delay:-0.3s] bg-violet-700" />
                  <div className="h-2 w-2 rounded-full animate-bounce [animation-delay:-0.15s] bg-violet-700" />
                  <div className="h-2 w-2 rounded-full animate-bounce bg-violet-700" />
                </div>
              ) : (
                <>
                  {React.createElement(isFollowing ? FaHeart : FaRegHeart, {
                    className: `h-5 w-5 ${
                      isFollowing ? "text-violet-700" : "text-gray-600"
                    }`,
                  })}
                  <span
                    className={`ml-2 ${
                      isFollowing ? "text-violet-700" : "text-gray-600"
                    }`}
                  >
                    {isFollowing ? "Followed" : "Not Followed"}
                  </span>
                </>
              )}
            </button>

            <Link
              href={`/shops/${shopData?.slug}`}
              className="flex-1 border border-gray-300 rounded-full px-4 py-2 text-sm font-semibold text-center"
            >
              Shop all items
            </Link>
          </div>

          <button
            onClick={() => setShowPhone(!showPhone)}
            className="w-full flex items-center justify-center gap-2 border border-purple-500 text-purple-500 rounded-full px-4 py-2 text-sm font-semibold"
          >
            <MdOutlinePhone />
            {phoneText}
          </button>
        </div>
      </section>
    </main>
  );
}

===== src/components/DirectBuyPopup.jsx =====
"use client";

import React, { useEffect, useState } from "react";
import { HiXMark } from "react-icons/hi2";
import { useRouter } from "next/navigation";
import { useSelector } from "react-redux";

/* ---------- tiny helpers ---------- */

const LoadingDots = ({ color = "white" }) => (
  <div className="flex space-x-1 justify-center items-center h-5">
    <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce [animation-delay:-0.3s]`} />
    <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce [animation-delay:-0.15s]`} />
    <div className={`h-2 w-2 bg-${color} rounded-full animate-bounce`} />
  </div>
);

// Normalize a bunch of possible product image shapes ‚Üí URL string
const coverUrlFrom = (img) => {
  if (!img) return "";
  if (Array.isArray(img)) img = img[0];
  if (typeof img === "string") return img;
  return img?.image_url || img?.url || img?.src || "";
};

/* ---------- component ---------- */

export default function DirectBuyPopup({
  selectedAddressId,
  setSelectedAddressId,     // required from parent
  isAddressLoading,
  addresses,
  product,
  isVisible,
  onClose,
  quantity,
  relatedProducts = [],
}) {
  const router = useRouter();
  const { token } = useSelector((s) => s.auth) || {};

  const [paymentMethod, setPaymentMethod] = useState("paystack");
  const [acceptedPolicy, setAcceptedPolicy] = useState(true);
  const [isConfirmLoading, setIsConfirmLoading] = useState(false);
  const [error, setError] = useState("");

  const [directBuyQuantity, setDirectBuyQuantity] = useState(quantity);
  const [selectedProduct, setSelectedProduct] = useState({
    id: product?.id,
    image: coverUrlFrom(product?.product_images),
    title: product?.title || "",
    price: product?.price_cents || 0,
    currency: product?.price_currency || "GHS",
  });

  // keep data fresh each open
  useEffect(() => {
    if (!isVisible) return;
    setDirectBuyQuantity(quantity);
    setSelectedProduct({
      id: product?.id,
      image: coverUrlFrom(product?.product_images),
      title: product?.title || "",
      price: product?.price_cents || 0,
      currency: product?.price_currency || "GHS",
    });
  }, [isVisible, quantity, product]);

  // üßä prevent background scroll + close on ESC
  useEffect(() => {
    if (!isVisible) return;
    const prev = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    const onKey = (e) => { if (e.key === "Escape") onClose?.(); };
    window.addEventListener("keydown", onKey);
    return () => {
      document.body.style.overflow = prev;
      window.removeEventListener("keydown", onKey);
    };
  }, [isVisible, onClose]);

  const decrementQuantity = () =>
    setDirectBuyQuantity((prev) => (prev > 1 ? prev - 1 : 1));
  const incrementQuantity = () => setDirectBuyQuantity((prev) => prev + 1);

  const handleConfirmPurchase = async () => {
    setError("");
    if (!acceptedPolicy) {
      setError("You must agree to the rules, guidelines, and policies to continue.");
      return;
    }
    if (!selectedAddressId) {
      setError("Please choose a shipping address.");
      return;
    }

    setIsConfirmLoading(true);
    try {
      const response = await fetch("http://127.0.0.1:8000/api/cart/direct-buy/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Token ${token}`,
        },
        body: JSON.stringify({
          product: selectedProduct.id,
          quantity: directBuyQuantity,
          address: selectedAddressId,
          payment_method_id: paymentMethod,
        }),
      });
      if (!response.ok) throw new Error(await response.text());
      const result = await response.json();
      if (result.payment_url) router.push(result.payment_url);
      else throw new Error("Payment URL not received.");
    } catch (err) {
      console.error("Direct buy error:", err);
      setError("There was an issue processing your purchase. Please try again later.");
      setIsConfirmLoading(false);
    }
  };

  if (!isVisible) return null;

  const estimatedDelivery = (() => {
    if (product?.dispatch_time_in_days) {
      const d = new Date();
      d.setDate(d.getDate() + parseInt(product.dispatch_time_in_days));
      return d.toLocaleDateString();
    }
    return "N/A";
  })();

  const totalCharge =
    (selectedProduct.price / 100) * directBuyQuantity +
    (product?.postage_fee_cents || 0) / 100;

  return (
    <div aria-modal="true" role="dialog" aria-label="Buy Now" className="fixed inset-0 z-[100]">
      {/* Overlay */}
      <button
        aria-label="Close"
        onClick={onClose}
        className="absolute inset-0 bg-black/60 backdrop-blur-[2px] transition-opacity"
      />

      {/* Sheet */}
      <div
        className="
          fixed left-0 right-0 bottom-0
          md:left-1/2 md:-translate-x-1/2 md:bottom-6 md:w-[680px]
          bg-white dark:bg-slate-900
          rounded-t-2xl md:rounded-2xl shadow-2xl
          max-h-[88vh] flex flex-col
          translate-y-0 animate-[slideUp_220ms_ease-out]
        "
        style={{ paddingBottom: "max(env(safe-area-inset-bottom), 12px)" }}
      >
        {/* drag handle */}
        <div className="flex justify-center pt-2">
          <span className="h-1.5 w-10 rounded-full bg-gray-300 dark:bg-gray-700" />
        </div>

        {/* Header */}
        <div className="flex items-center justify-between px-4 md:px-6 py-3 border-b border-gray-200 dark:border-gray-800">
          <h3 className="text-lg md:text-xl font-semibold">Buy Now</h3>
          <button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800">
            <HiXMark className="h-6 w-6" />
          </button>
        </div>

        {/* Product row */}
        <div className="px-4 md:px-6 py-3 border-b border-gray-200 dark:border-gray-800 flex gap-3">
          {/* eslint-disable-next-line @next/next/no-img-element */}
          <img
            src={selectedProduct.image || "/placeholder.png"}
            onError={(e) => { e.currentTarget.src = "/placeholder.png"; }}
            alt={selectedProduct.title}
            className="w-[84px] h-[84px] md:w-[96px] md:h-[96px] object-cover rounded"
          />
          <div className="flex-1 min-w-0">
            <p className="text-sm md:text-base font-medium line-clamp-2">{selectedProduct.title}</p>
            <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
              ‚Çµ{(selectedProduct.price / 100).toFixed(2)}
            </p>

            <div className="mt-2 inline-flex items-center rounded-md border border-gray-300 dark:border-gray-700 overflow-hidden">
              <button onClick={decrementQuantity} className="w-9 h-8 text-lg">‚àí</button>
              <div className="min-w-[2.75rem] h-8 flex items-center justify-center border-l border-r border-gray-300 dark:border-gray-700 text-sm font-semibold">
                {directBuyQuantity}
              </div>
              <button onClick={incrementQuantity} className="w-9 h-8 text-lg">+</button>
            </div>
          </div>
        </div>

        {/* Scrollable content */}
        <div className="flex-1 overflow-y-auto px-4 md:px-6 py-4 space-y-4">
          <div className="space-y-1 text-sm">
            <p>Estimated Delivery: <span className="font-medium">{estimatedDelivery}</span></p>
            <p>
              Delivery Charges:{" "}
              <span className="font-medium">
                {product?.postage_fee_cents ? `‚Çµ${(product.postage_fee_cents / 100).toFixed(2)}` : "Free"}
              </span>
            </p>
          </div>

          {product?.cancellable ? (
            <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-900 text-green-700 dark:text-green-300 px-3 py-2 rounded text-[13px]">
              Return Policy: Can be returned within {product?.secondary_data?.return_in_days || "N/A"} days
              (Cost by: {product?.secondary_data?.returns_cost_by || "N/A"}).
            </div>
          ) : (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900 text-red-700 dark:text-red-300 px-3 py-2 rounded text-[13px]">
              Return Policy: This product is not returnable.
            </div>
          )}

          {/* payment */}
          <div>
            <p className="text-sm font-medium mb-2">Payment Method</p>
            <div className="flex gap-6">
              <label className="inline-flex items-center gap-2 cursor-pointer">
                <input
                  type="radio"
                  value="stripe"
                  checked={paymentMethod === "stripe"}
                  onChange={() => setPaymentMethod("stripe")}
                />
                <span>Stripe</span>
              </label>
              <label className="inline-flex items-center gap-2 cursor-pointer">
                <input
                  type="radio"
                  value="paystack"
                  checked={paymentMethod === "paystack"}
                  onChange={() => setPaymentMethod("paystack")}
                />
                <span>Paystack</span>
              </label>
            </div>
          </div>

          <p className="text-sm">
            Total Charges: <span className="font-semibold">‚Çµ{totalCharge.toFixed(2)}</span>
          </p>

          <label className="flex items-start gap-2 text-sm">
            <input
              type="checkbox"
              checked={acceptedPolicy}
              onChange={() => setAcceptedPolicy((v) => !v)}
              className="mt-0.5"
            />
            <span>I agree to the rules, guidelines, and policies.</span>
          </label>

          {/* address */}
          {!isAddressLoading && addresses?.length > 0 && (
            <div className="overflow-hidden">
              <label className="block text-sm font-medium mb-1">Shipping Address</label>
              <select
                value={selectedAddressId ?? ""}
                onChange={(e) => setSelectedAddressId?.(e.target.value)}
                className="w-full border border-gray-300 dark:border-gray-700 rounded-md p-2 text-sm"
              >
                {addresses.map((addr) => (
                  <option key={addr.id} value={addr.id}>
                    {addr.value}
                  </option>
                ))}
              </select>
            </div>
          )}

          {error && <p className="text-red-600 text-sm">{error}</p>}

          {/* related */}
          {relatedProducts?.length > 0 && (
            <div>
              <p className="text-sm font-medium mb-2">Related Products</p>
              <div className="flex overflow-x-auto gap-3 pb-1">
                {relatedProducts
                  .filter((p) => p.image_url || p.image_objects?.[0])
                  .slice(0, 10)
                  .map((item) => {
                    const img = coverUrlFrom(item.image_url || item.image_objects);
                    return (
                      <button
                        key={item.id}
                        type="button"
                        className="flex-shrink-0 w-[96px] text-left"
                        onClick={() => {
                          setSelectedProduct({
                            id: item.id,
                            image: img,
                            title: item.title,
                            price: item.sale_price_cents || item.price_cents,
                            currency: item.price_currency || "GHS",
                          });
                          setDirectBuyQuantity(1);
                        }}
                      >
                        {/* eslint-disable-next-line @next/next/no-img-element */}
                        <img
                          src={img || "/placeholder.png"}
                          onError={(e) => { e.currentTarget.src = "/placeholder.png"; }}
                          alt={item.title}
                          className="w-[96px] h-[96px] object-cover rounded border"
                        />
                        <div className="mt-1 text-xs line-clamp-2">{item.title}</div>
                        <div className="text-[11px] font-semibold">
                          ‚Çµ{((item.sale_price_cents || item.price_cents) / 100).toFixed(2)}
                        </div>
                      </button>
                    );
                  })}
              </div>
            </div>
          )}
        </div>

        {/* Sticky footer */}
        <div className="px-4 md:px-6 pt-2">
          <button
            onClick={handleConfirmPurchase}
            disabled={isConfirmLoading || !acceptedPolicy || !selectedAddressId}
            className="w-full rounded-xl py-3 font-semibold bg-[#8710D8] text-white hover:bg-[#7610c2] disabled:opacity-60 flex items-center justify-center"
          >
            {isConfirmLoading ? <LoadingDots color="white" /> : "Confirm Purchase"}
          </button>
        </div>
      </div>

      {/* slide-up keyframes */}
      <style jsx global>{`
        @keyframes slideUp {
          from { transform: translateY(100%); }
          to   { transform: translateY(0%); }
        }
      `}</style>
    </div>
  );
}

===== src/components/EarlyDeals.jsx =====

// components/EarlyDeals.jsx"use client";
"use client"; // ‚úÖ Must be the very first line

import React, { useEffect, useState } from "react";
import axios from "@/lib/axiosInstance"; // ‚úÖ ensures token is included
import dynamic from "next/dynamic";
import Link from "next/link";
import Image from "next/image";
import { IoIosArrowRoundForward } from "react-icons/io";
import { AiOutlineShoppingCart } from "react-icons/ai";
import { FaBolt } from "react-icons/fa";

const Price = dynamic(() => import("./Price"), { ssr: false });

export default function EarlyDeals() {
  const [products, setProducts] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    axios
      .get("/api/product-list/2025/")
      .then((res) => setProducts(res.data.results))
      .catch((err) => {
        console.error("‚ùå Failed to fetch products:", err);
        setError(err);
      });
  }, []);

  if (error) return <div className="p-4 text-red-600">Failed to load products</div>;

  return (
    <div className="container bg-white py-5 mb-2 px-5">
      {/* Header */}
      <div className="flex gap-4 pb-4 items-center justify-between md:justify-start">
        <h1 className="text-xl md:text-3xl font-extrabold tracking-wide">2025 Deals</h1>
        <IoIosArrowRoundForward className="h-10 w-10 text-gray-700" />
      </div>

      {/* Products Carousel */}
      <div className="flex space-x-4 overflow-x-auto pb-4">
        {products.map((product) => {
          const {
            id,
            product_images,
            title,
            sale_end_date,
            sale_price_cents,
            on_sales,
            seller_country,
            seo_slug,
            slug,
            price_cents,
            price_currency,
          } = product;

          const isOnSaleActive =
            sale_end_date &&
            new Date(sale_end_date) > new Date() &&
            (sale_price_cents > 0 || on_sales);

          const countryCode = (seller_country || "gh").toLowerCase();
          const slugPath = seo_slug || slug;

          return (
            <div
              key={id}
              className="border shadow-lg rounded-lg overflow-hidden h-56 flex flex-col min-w-[200px]"
            >
              <div className="relative flex-grow overflow-hidden">
                {isOnSaleActive && (
                  <div className="absolute top-4 left-2 bg-red-600 text-white text-xs px-2 py-1 rounded-full flex items-center gap-1 z-10">
                    <FaBolt className="w-3 h-3" />
                    Sale
                  </div>
                )}
                <Link href={`/${countryCode}/${slugPath}/`}>
                  <Image
                    src={product_images?.[0] || "/placeholder.png"}
                    alt={title || "Product image"}
                    width={300}
                    height={300}
                    className="w-full h-full object-cover transform transition-all duration-500 hover:scale-105"
                  />
                </Link>
              </div>

              <div className="flex items-center justify-between px-2 py-1 bg-gray-100">
                <Price
                  priceCents={price_cents}
                  salePriceCents={sale_price_cents}
                  priceCurrency={price_currency}
                  saleEndDate={sale_end_date}
                  onSales={on_sales}
                />
                <button className="p-1 border border-gray-300 rounded hover:bg-gray-200">
                  <AiOutlineShoppingCart className="w-6 h-6 text-purple-500" />
                </button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

===== src/components/EarlyDealsClient.jsx =====
"use client";

import React from "react";
import Link from "next/link";
import { IoIosArrowRoundForward } from "react-icons/io";
import { AiOutlineShoppingCart } from "react-icons/ai";
import { FaBolt } from "react-icons/fa";
import { useSelector } from "react-redux";
import { selectSelectedCountry } from "@/app/store/slices/countrySlice";
import { convertPrice } from "@/app/utils/utils";

export default function EarlyDealsClient({ products }) {
  const selectedCountry = useSelector(selectSelectedCountry);
  const exchangeRates = useSelector((state) => state.exchangeRates.rates);
  const symbol = selectedCountry?.symbol || "";

  return (
    <div className="container bg-white py-5 mb-2 px-5">
      {/* Header */}
      <div className="flex gap-4 pb-4 items-center justify-between md:justify-start">
        <h1 className="text-xl md:text-3xl font-extrabold tracking-wide">
          2025 Deals
        </h1>
        <IoIosArrowRoundForward className="h-10 w-10 text-gray-700" />
      </div>

      {/* Products Carousel */}
      <div className="flex space-x-4 overflow-x-auto pb-4">
        {products.map((product) => {
          const {
            id,
            product_images,
            title,
            price_cents,
            sale_price_cents,
            price_currency,
            sale_end_date,
            on_sales,
            seller_country,
            seo_slug,
            slug,
          } = product;

          // Sale is active only if there's a future end date AND (a sale price or on_sales flag)
          const isOnSaleActive =
            sale_end_date &&
            new Date(sale_end_date) > new Date() &&
            (sale_price_cents > 0 || on_sales);

          // Convert prices (divide by 100 to get major units)
          const convertedPrice = convertPrice(
            price_cents / 100,
            price_currency,
            selectedCountry?.code,
            exchangeRates,
          );
          const convertedSalePrice =
            isOnSaleActive && sale_price_cents > 0
              ? convertPrice(
                  sale_price_cents / 100,
                  price_currency,
                  selectedCountry?.code,
                  exchangeRates,
                )
              : null;

          // Format display
          const displayPrice =
            isOnSaleActive && convertedSalePrice != null
              ? convertedSalePrice.toFixed(2)
              : convertedPrice.toFixed(2);
          const originalPriceStr = isOnSaleActive
            ? `${symbol} ${convertedPrice.toFixed(2)}`
            : null;

          // Build URL
          const countryCode = (seller_country || "gh").toLowerCase();
          const slugPath = seo_slug || slug;

          return (
            <div
              key={id}
              className="border shadow-lg rounded-lg overflow-hidden h-56 flex flex-col min-w-[200px]"
            >
              {/* Image + Sale Badge */}
              <div className="relative flex-grow overflow-hidden">
                {isOnSaleActive && (
                  <div className="absolute top-4 left-2 bg-red-600 text-white text-xs px-2 py-1 rounded-full flex items-center gap-1 z-10">
                    <FaBolt className="w-3 h-3" />
                    Sale
                  </div>
                )}
                <Link href={`/${countryCode}/${slugPath}/`}>
                  <img
                    src={
                      product_images?.[0] || "https://via.placeholder.com/150"
                    }
                    alt={title || "Product image"}
                    className="w-full h-full object-cover transform transition-all duration-500 hover:scale-105"
                  />
                </Link>
              </div>

              {/* Price + Cart */}
              <div className="flex items-center justify-between px-2 py-1 bg-gray-100">
                <div className="flex flex-col">
                  <div className="flex items-baseline gap-2">
                    <p className="text-base font-bold text-gray-800">
                      {symbol} {displayPrice}
                    </p>
                    {isOnSaleActive && originalPriceStr && (
                      <p className="text-sm text-gray-500 line-through">
                        {originalPriceStr}
                      </p>
                    )}
                  </div>
                </div>
                <button className="p-1 border border-gray-300 rounded hover:bg-gray-200">
                  <AiOutlineShoppingCart className="w-6 h-6 text-purple-500" />
                </button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


===== src/components/FeatureGate.jsx =====
// src/components/FeatureGate.jsx
'use client';
import React from 'react';
import useEntitlements from '@/hooks/useEntitlements';

export default function FeatureGate({
  feature,
  children,
  fallback = null,
  // when true, render the child but pass disabled + title if missing entitlement
  disableIfBlocked = false,
  blockedTitle = 'Upgrade your plan to use this',
}) {
  const { has, loading, error } = useEntitlements();

  if (loading) return null;          // keep the layout from flashing
  if (error)   return fallback ?? null;

  const allowed = has(feature);

  if (allowed) return children;

  if (disableIfBlocked && React.isValidElement(children)) {
    return React.cloneElement(children, {
      disabled: true,
      title: blockedTitle,
      onClick: undefined,            // avoid triggering the original handler
      className: [
        children.props.className,
        'opacity-60 cursor-not-allowed',
      ].filter(Boolean).join(' ')
    });
  }

  return fallback ?? null;
}

===== src/components/GoogleMapsLoader.jsx =====
// components/GoogleMapsLoader.jsx
'use client';

import { useEffect, useState } from 'react';

export default function GoogleMapsLoader({ onLoad }) {
  const [loaded, setLoaded] = useState(false);

  useEffect(() => {
    // Avoid double loading
    if (window.google?.maps?.places) {
      setLoaded(true);
      onLoad?.();
      return;
    }

    const existingScript = document.querySelector('#google-maps-script');
    if (existingScript) return;

    const script = document.createElement('script');
    script.id = 'google-maps-script';
    script.src = `https://maps.googleapis.com/maps/api/js?key=${
      process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY
    }&libraries=places`;
    script.async = true;
    script.defer = true;

    script.onload = () => {
      setLoaded(true);
      onLoad?.();
    };

    script.onerror = () => {
      console.error('Google Maps script failed to load');
    };

    document.body.appendChild(script);
  }, [onLoad]);

  return null;
}

===== src/components/Guard.jsx =====
//src/components/Guard.jsx
"use client";
import React from "react";

/** Simple guard. Show children if `allow`, otherwise `onBlocked()` and show `fallback`. */
export default function Guard({ allow, onBlocked, fallback = null, children }) {
  if (allow) return children;
  if (onBlocked) onBlocked();
  return fallback;
}

===== src/components/HeaderControls.jsx =====
"use client";
import React from "react";
import { LuMenu } from "react-icons/lu";
import { useDispatch, useSelector } from "react-redux";
import { clearToggle } from "../app/store/slices/toggleSlice";
import classNames from "classnames";
import { useAuth } from "@/contexts/AuthContext";

const HeaderControls = () => {
  const dispatch = useDispatch();
  const toggle = useSelector((state) => state.toggle.toggle);
  const { user } = useAuth();

  const handleToggleClick = () => {
    dispatch(clearToggle());
  };

  const accountTypeLabels = {
    buyer: "Buyer",
    seller_private: "Seller (Private)",
    seller_business: "Seller (Business)",
    agent: "Sourcing Agent",
  };

  return (
    <div className={`my-2 ${toggle ? "hidden" : "block"}`}>
      <button
        onClick={handleToggleClick}
        className="p-2 rounded hover:bg-gray-100 transition"
        aria-label="Toggle Sidebar"
      >
        <div className="flex justify-start items-center font-medium">
          <LuMenu className="w-6 h-6 text-gray-700 mr-2" />
          Dashboard
        </div>
      </button>

      {/* ‚úÖ Account type badges */}
      {user?.account_type && (
        <div className="flex flex-wrap gap-1 mt-2 ml-2">
          {[user.account_type].map((role) => (
            <span
              key={role}
              className={classNames(
                "text-[10px] font-medium px-2 py-0.5 rounded",
                {
                  "bg-green-100 text-green-800": role === "buyer",
                  "bg-yellow-100 text-yellow-800": role === "seller_private",
                  "bg-blue-100 text-blue-800": role === "seller_business",
                  "bg-purple-100 text-purple-800": role === "agent",
                },
              )}
            >
              {accountTypeLabels[role] || role}
            </span>
          ))}
        </div>
      )}
    </div>
  );
};

export default HeaderControls;


===== src/components/InfoPopover.jsx =====
"use client";

import * as Popover from "@radix-ui/react-popover";
import { Info, X } from "lucide-react";
import { useState, useEffect } from "react";

export default function InfoPopover({ content, link, linkText = "Read more" }) {
  const [open, setOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [showSheet, setShowSheet] = useState(false);

  // Detect screen size
  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth <= 768);
    checkMobile();
    window.addEventListener("resize", checkMobile);
    return () => window.removeEventListener("resize", checkMobile);
  }, []);

  // Close on scroll
  useEffect(() => {
    const closeOnScroll = () => setOpen(false);
    window.addEventListener("scroll", closeOnScroll);
    return () => window.removeEventListener("scroll", closeOnScroll);
  }, []);

  // Handle animation mount/unmount
  useEffect(() => {
    if (open) {
      setShowSheet(true);
    } else {
      const timeout = setTimeout(() => setShowSheet(false), 300);
      return () => clearTimeout(timeout);
    }
  }, [open]);

  return (
    <>
      {isMobile ? (
        <>
          <button
            onClick={() => setOpen(true)}
            className="text-gray-600 hover:text-black p-1"
            aria-label="More info"
          >
            <Info className="w-5 h-5" />
          </button>

          {showSheet && (
            <div className="fixed inset-0 z-50 bg-black/40 flex items-end justify-center">
              <div
                className={`bg-white dark:bg-zinc-900 rounded-t-2xl w-full max-w-md p-6 shadow-xl transform transition-transform duration-300 ${
                  open ? "translate-y-0" : "translate-y-full"
                }`}
              >
                <div className="flex justify-between items-start mb-4">
                  <p className="text-sm text-zinc-700 dark:text-zinc-200">
                    {content}
                  </p>
                  <button
                    onClick={() => setOpen(false)}
                    className="text-zinc-400 hover:text-zinc-600 dark:hover:text-white"
                  >
                    <X size={20} />
                  </button>
                </div>
                {link && (
                  <a
                    href={link}
                    className="text-blue-500 underline text-sm hover:text-blue-400"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {linkText}
                  </a>
                )}
              </div>
            </div>
          )}
        </>
      ) : (
        <Popover.Root open={open} onOpenChange={setOpen}>
          <Popover.Trigger asChild>
            <button
              onClick={() => setOpen(!open)}
              className="text-gray-600 hover:text-black p-1"
              aria-label="More info"
            >
              <Info className="w-5 h-5" />
            </button>
          </Popover.Trigger>

          <Popover.Portal>
            <Popover.Content
              side="top"
              align="start"
              sideOffset={8}
              className="bg-gray-800 text-white text-sm p-4 rounded-lg shadow-lg w-72 z-50"
            >
              <p className="mb-2">{content}</p>
              {link && (
                <a
                  href={link}
                  className="underline text-blue-400 hover:text-blue-300"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {linkText}
                </a>
              )}
              <Popover.Arrow className="fill-gray-800" />
            </Popover.Content>
          </Popover.Portal>
        </Popover.Root>
      )}
    </>
  );
}


===== src/components/InputField.jsx =====
// InputField.js
import React from "react";

const InputField = ({
  id,
  name,
  type,
  value,
  onChange,
  placeholder,
  onClick,
}) => {
  return (
    <input
      id={id}
      name={name}
      type={type}
      value={value}
      onClick={onClick}
      onChange={onChange}
      className="w-full px-3 rounded-lg  border border-purple-500   focus:outline-none  focus:ring-purple-500"
      placeholder={placeholder}
    />
  );
};

export default InputField;


===== src/components/LaptopDetels.jsx =====
import React from "react";

const LaptopDetails = () => {
  const laptopDetails = [
    {
      Condition: "Renewed",
      Brand: "Dell",
      Type: "Laptops",
      ModelName: "Dell Latitude 3380",
      ScreenSizeInches: 13.3,
      HardDiskSizeGB: 128,
      CpuModelGHz: 2.0,
      RamMemoryGB: 4,
      OperatingSystem: "Windows 11",
      Series: "Core i3",
      Features: ["HDMI", "Bluetooth", "Camera", "WiFi Connection", "USB Ports"],
      UpfricaItemID: "JERB7PX8",
      ItemNumber: "0000003487",
    },
  ];

  return (
    <div className="space-y-4">
      {laptopDetails.map((details, index) => (
        <div key={index} className="space-y-3">
          {Object.entries(details).map(([key, value]) => (
            <div key={key} className="flex">
              <div className="font-bold text-gray-700 w-1/3 text-right pr-2">
                {key}:
              </div>
              <div className="text-gray-900 w-2/3 pl-2">
                {Array.isArray(value) ? value.join(", ") : value.toString()}
              </div>
            </div>
          ))}
        </div>
      ))}
    </div>
  );
};

export default LaptopDetails;


===== src/components/LoaderButton.jsx =====
// components/LoaderButton.jsx
import React from "react";

export default function LoaderButton({
  loading,
  className,
  children,
  ...props
}) {
  return (
    <button
      className={className}
      disabled={loading || props.disabled}
      {...props}
    >
      {loading ? (
        <div className="flex space-x-2 justify-center items-center h-6">
          <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.3s]" />
          <div className="h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.15s]" />
          <div className="h-2 w-2 bg-white rounded-full animate-bounce" />
        </div>
      ) : (
        children
      )}
    </button>
  );
}


===== src/components/LoadingSpinner.jsx =====
import React from "react";

const LoadingSpinner = () => {
  return (
    <div className="flex justify-center items-center h-[calc(100vh-68px)]">
      <p className="text-7xl font-thin">L</p>
      <div className="w-10 h-10 md:border-8  border-4 border-dashed rounded-full animate-spin mt-5 border-blue-400"></div>
      <p className="text-7xl font-thin">ading....</p>
    </div>
  );
};

export default LoadingSpinner;


===== src/components/LocalStorageComponent.jsx =====
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { getFromStorage, removeFromStorage } from "@/app/utils/storage";

const LocalStorageComponent = () => {
  const router = useRouter();

  useEffect(() => {
    const user = getFromStorage("user");

    if (user?.token) {
      router.push("/");
    } else {
      removeFromStorage("user"); // Optional cleanup of bad data
    }
  }, [router]);

  return null; // You can return a loading spinner or null
};

export default LocalStorageComponent;


===== src/components/LocaleRedirect/LocaleRedirect.js =====
// components/LocaleRedirect/LocaleRedirect.js
"use client";
import { useEffect } from "react";
import { useRouter } from "next/navigation";

export default function LocaleRedirect() {
  const router = useRouter();

  useEffect(() => {
    (async () => {
      try {
        const res = await fetch("https://media.upfrica.com/api/user-country/");
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const { country_code } = await res.json();
        if (country_code) {
          const target = `/${country_code.toLowerCase()}`;
          if (router.asPath !== target) {
            router.replace(target);
          }
        }
      } catch {
        // silently fail‚Äîuser can still browse /
      }
    })();
  }, [router]);

  return null;
}


===== src/components/Modal/Modal.jsx =====
const Modal = ({ isOpen, onClose, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-black bg-opacity-40 flex items-center justify-center overflow-auto">
      <div className="bg-white rounded-lg shadow-lg p-6 max-w-2xl w-full relative">
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-500 hover:text-red-600 text-2xl"
        >
          &times;
        </button>
        {children}
      </div>
    </div>
  );
};

export default Modal;


===== src/components/Modal.jsx =====
import React from "react";

const Modal = () => {
  return (
    <div>
      <div
        data-twe-modal-init
        class="fixed left-0 top-0 z-[1055] hidden h-full w-full overflow-y-auto overflow-x-hidden outline-none"
        id="exampleModalTips"
        tabindex="-1"
        aria-labelledby="exampleModalTipsLabel"
        aria-hidden="true"
      >
        <div
          data-twe-modal-dialog-ref
          class="pointer-events-none relative w-auto translate-y-[-50px] opacity-0 transition-all duration-300 ease-in-out min-[576px]:mx-auto min-[576px]:mt-7 min-[576px]:max-w-[500px]"
        >
          <div class="pointer-events-auto relative flex w-full flex-col rounded-md border-none bg-white bg-clip-padding text-current shadow-4 outline-none dark:bg-surface-dark">
            <div class="flex flex-shrink-0 items-center justify-between rounded-t-md border-b-2 border-neutral-100 p-4 dark:border-white/10">
              <h5
                class="text-xl font-medium leading-normal text-surface dark:text-white"
                id="exampleModalTipsLabel"
              >
                Modal title
              </h5>
              <button
                type="button"
                class="box-content rounded-none border-none text-neutral-500 hover:text-neutral-800 hover:no-underline focus:text-neutral-800 focus:opacity-100 focus:shadow-none focus:outline-none dark:text-neutral-400 dark:hover:text-neutral-300 dark:focus:text-neutral-300"
                data-twe-modal-dismiss
                aria-label="Close"
              >
                <span class="[&>svg]:h-6 [&>svg]:w-6">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </span>
              </button>
            </div>
            <div
              class="relative flex-auto p-4 text-center"
              data-twe-modal-body-ref
            >
              <h5 class="mb-2 text-xl font-bold">Popover in a modal</h5>
              <div class="mb-4 flex items-center justify-center gap-1">
                This
                <button
                  type="button"
                  class="inline-block rounded bg-primary-100 px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-primary-700 transition duration-150 ease-in-out hover:bg-primary-accent-200 focus:bg-primary-accent-200 focus:outline-none focus:ring-0 active:bg-primary-accent-200 dark:bg-primary-300 dark:hover:bg-primary-400 dark:focus:bg-primary-400 dark:active:bg-primary-400"
                  data-twe-toggle="popover"
                  data-twe-title="Popover title"
                  data-twe-content="Popover body content is set in this attribute."
                  data-twe-ripple-init
                  data-twe-ripple-color="light"
                >
                  button
                </button>
                triggers a popover on click.
              </div>
              <hr class="my-4 dark:border-neutral-500" />
              <h5 class="mb-2 text-xl font-bold">Tooltips in a modal</h5>
              <p class="mb-4">
                <a
                  href="#"
                  class="transititext-primary text-primary transition duration-150 ease-in-out hover:text-primary-600 focus:text-primary-600 active:text-primary-700 dark:text-primary-400 dark:hover:text-primary-500 dark:focus:text-primary-500 dark:active:text-primary-600"
                  data-twe-toggle="tooltip"
                  title="Tooltip"
                >
                  This link
                </a>
                and
                <a
                  href="#"
                  class="transititext-primary text-primary transition duration-150 ease-in-out hover:text-primary-600 focus:text-primary-600 active:text-primary-700 dark:text-primary-400 dark:hover:text-primary-500 dark:focus:text-primary-500 dark:active:text-primary-600"
                  data-twe-toggle="tooltip"
                  title="Tooltip"
                >
                  that link
                </a>
                have tooltips on hover.
              </p>
            </div>
            <div class="flex flex-shrink-0 flex-wrap items-center justify-end rounded-b-md border-t-2 border-neutral-100 p-4 dark:border-white/10">
              <button
                type="button"
                class="inline-block rounded bg-primary-100 px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-primary-700 transition duration-150 ease-in-out hover:bg-primary-accent-200 focus:bg-primary-accent-200 focus:outline-none focus:ring-0 active:bg-primary-accent-200 dark:bg-primary-300 dark:hover:bg-primary-400 dark:focus:bg-primary-400 dark:active:bg-primary-400"
                data-twe-modal-dismiss
                data-twe-ripple-init
                data-twe-ripple-color="light"
              >
                Close
              </button>
              <button
                type="button"
                class="ms-1 inline-block rounded bg-primary px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-primary-accent-300 hover:shadow-primary-2 focus:bg-primary-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-primary-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong"
                data-twe-ripple-init
                data-twe-ripple-color="light"
              >
                Save changes
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Modal;


===== src/components/MultiBuySection.jsx =====
// import React, { useState } from "react";

// export default function MultiBuySection({ product, onTierSelect, selectedTier }) {
//   const { secondary_data } = product || {};
//   console.log("thrid data", secondary_data);

//   // const tiers = secondary_data?.multi_buy === "yes" ? JSON.parse(secondary_data.multi_buy_tiers) : [];

//   let tiers = [];

//   if (secondary_data?.multi_buy === "yes") {
//     const rawData = secondary_data.multi_buy_tiers;
//     try {
//       tiers = typeof rawData === "string" ? JSON.parse(rawData) : rawData;
//     } catch (e) {
//       console.warn("Failed to parse multi_buy_tiers:", e);
//       tiers = rawData; // fallback to raw if parse fails
//     }
//   }

//   // Don't render if no multi-buy tiers
//   if (!tiers?.length) {
//     return null;
//   }

import React, { useMemo } from "react";

export default function MultiBuySection({
  product,
  onTierSelect,
  selectedTier,
}) {
  const { secondary_data } = product || [];

  let tiers = [];

  if (secondary_data?.multi_buy === "yes") {
    const rawData = secondary_data.multi_buy_tiers;
    try {
      tiers = typeof rawData === "string" ? JSON.parse(rawData) : rawData;
    } catch (e) {
      console.warn("Failed to parse multi_buy_tiers:", e);
      tiers = rawData;
    }
  }

  if (!tiers?.length) return null;

  const toUnits = (cents) => (parseInt(cents, 10) / 100).toFixed(2);

  const multiBuyOptions = useMemo(() => {
    const sortedTiers = [...tiers].sort(
      (a, b) => a.min_quantity - b.min_quantity,
    );
    return sortedTiers.map(({ min_quantity, price_each }, idx, arr) => {
      const isLast = idx === arr.length - 1;
      const label = isLast
        ? `Buy ${min_quantity} and more`
        : `Buy ${min_quantity}`;
      return {
        label,
        price: toUnits(price_each),
        minQuantity: min_quantity,
      };
    });
  }, [tiers]);

  return (
    <div className="mt-4 space-y-2">
      <p className="font-medium text-base text-gray-800">Multi-buy:</p>
      <div className="flex space-x-3 overflow-x-auto scrollbar-hide">
        {multiBuyOptions.map((opt, idx) => {
          const isActive = selectedTier?.minQuantity === opt.minQuantity;
          return (
            <div
              key={idx}
              onClick={() => {
                if (selectedTier?.minQuantity !== opt.minQuantity) {
                  onTierSelect(opt);
                }
              }}
              className={`min-w-[120px] cursor-pointer border rounded-md text-center p-2 hover:bg-gray-50 transition-all
                ${isActive ? "border-black border-2 font-semibold" : "border-gray-300"}
              `}
            >
              <div className="text-sm text-gray-600">{opt.label}</div>
              <div className="text-base font-bold text-black">
                ‚Çµ{opt.price} each
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


===== src/components/MultiPriceBoxes.jsx =====
import React from "react";

const MultiPriceBoxes = () => {
  // Sample pricing data ‚Äì you can update these values as needed
  const pricingOptions = [
    { label: "Option 1", price: "$10.00" },
    { label: "Option 2", price: "$20.00" },
    { label: "Option 3", price: "$30.00" },
    { label: "Option 4", price: "$40.00" },
  ];

  return (
    <div className="">
      {/* Heading */}
      <h2 className="text-xl font-bold mb-4">Multi Buy</h2>

      {/* Grid of 4 boxes */}
      <div className="grid grid-cols-4 gap-4 ">
        {pricingOptions.map((option, index) => (
          <div
            key={index}
            className="border rounded-lg p-4 text-center shadow-sm hover:shadow-md transition-shadow font-medium"
          >
            <div className="text-base lg:text-base ">{option.label}</div>
            <div className="mt-2 text-2xl ">{option.price} each</div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MultiPriceBoxes;


===== src/components/Pagination.jsx =====
// 'use client';

// import React, { useState, useEffect } from 'react';
// import { AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';

// const Pagination = ({ currentPage, totalPages, onPageChange }) => {
//     const [isMobile, setIsMobile] = useState(false);

//     useEffect(() => {
//         const handleResize = () => setIsMobile(window.innerWidth <= 768);
//         handleResize();
//         window.addEventListener('resize', handleResize);
//         return () => window.removeEventListener('resize', handleResize);
//     }, []);

//     const handlePageClick = (page) => {
//         if (page >= 1 && page <= totalPages && page !== currentPage) {
//             onPageChange(page);
//         }
//     };

//     const getPageNumbers = () => {
//         if (isMobile) {
//             if (totalPages <= 2) {
//                 return [...Array(totalPages).keys()].map((i) => i + 1);
//             }
//             return [1, 2, '‚Ä¶'];
//         }

//         if (totalPages <= 5) {
//             return [...Array(totalPages).keys()].map((i) => i + 1);
//         }

//         if (currentPage <= 3) {
//             return [1, 2, 3, 4, '‚Ä¶', totalPages];
//         }

//         if (currentPage >= totalPages - 2) {
//             return [1, '‚Ä¶', totalPages - 3, totalPages - 2, totalPages - 1, totalPages];
//         }

//         return [1, '‚Ä¶', currentPage - 1, currentPage, currentPage + 1, '‚Ä¶', totalPages];
//     };

//     return (
//         <div className="mt-8 flex justify-center overflow-x-auto">
//             <div className="inline-flex items-center space-x-2 whitespace-nowrap px-2">
//                 <button
//                     onClick={() => handlePageClick(currentPage - 1)}
//                     disabled={currentPage === 1}
//                     className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//                 >
//                     <AiOutlineLeft className="mr-1" />
//                     Prev
//                 </button>

//                 {getPageNumbers().map((page, idx) =>
//                     typeof page === 'number' ? (
//                         <button
//                             key={idx}
//                             onClick={() => handlePageClick(page)}
//                             className={`px-3 py-1 rounded border border-gray-300 hover:bg-gray-100 ${page === currentPage ? 'bg-violet-700 text-white font-semibold' : ''
//                                 }`}
//                         >
//                             {page}
//                         </button>
//                     ) : (
//                         <span key={idx} className="px-3 py-1 text-gray-500">
//                             {page}
//                         </span>
//                     )
//                 )}

//                 <button
//                     onClick={() => handlePageClick(currentPage + 1)}
//                     disabled={currentPage === totalPages}
//                     className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
//                 >
//                     Next
//                     <AiOutlineRight className="ml-1" />
//                 </button>
//             </div>
//         </div>
//     );
// };

// export default Pagination;

"use client";

import React, { useEffect, useState } from "react";
import { AiOutlineLeft, AiOutlineRight } from "react-icons/ai";

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth <= 768);
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const handlePageClick = (page) => {
    if (page >= 1 && page <= totalPages && page !== currentPage) {
      onPageChange(page);
    }
  };

  const getPageNumbers = () => {
    if (isMobile)
      return totalPages <= 2
        ? [1, ...(totalPages === 2 ? [2] : [])]
        : [1, 2, "..."];
    if (totalPages <= 5) return [...Array(totalPages).keys()].map((i) => i + 1);
    if (currentPage <= 3) return [1, 2, 3, 4, "...", totalPages];
    if (currentPage >= totalPages - 2)
      return [
        1,
        "...",
        totalPages - 3,
        totalPages - 2,
        totalPages - 1,
        totalPages,
      ];
    return [
      1,
      "...",
      currentPage - 1,
      currentPage,
      currentPage + 1,
      "...",
      totalPages,
    ];
  };

  return (
    <div className="mt-10 flex justify-center overflow-x-auto">
      <div className="inline-flex items-center space-x-2 whitespace-nowrap px-2 overflow-x-auto scrollbar-hide">
        <button
          onClick={() => handlePageClick(currentPage - 1)}
          disabled={currentPage === 1}
          className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
        >
          <AiOutlineLeft className="mr-1" />
          Prev
        </button>
        {getPageNumbers().map((page, i) =>
          typeof page === "number" ? (
            <button
              key={i}
              onClick={() => handlePageClick(page)}
              className={`px-3 py-1 rounded border border-gray-300 hover:bg-gray-100 ${
                page === currentPage
                  ? "bg-violet-700 text-white font-semibold"
                  : ""
              }`}
            >
              {page}
            </button>
          ) : (
            <span key={i} className="px-3 py-1 text-gray-500">
              ‚Ä¶
            </span>
          ),
        )}
        <button
          onClick={() => handlePageClick(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="px-3 py-1 flex items-center rounded border border-gray-300 hover:bg-gray-100 disabled:opacity-50"
        >
          Next
          <AiOutlineRight className="ml-1" />
        </button>
      </div>
    </div>
  );
};

export default Pagination;


===== src/components/PaymentDeliveryReturns.jsx =====
// components/PaymentDeliveryReturns.js
import React from "react";

const PaymentDeliveryReturns = ({
  secondaryData,
  dispatchTime,
  seller_payment_terms = "",
}) => {
  const { cancellable, cancellation_policy } = secondaryData || {};

  const dispatchDays = parseInt(dispatchTime) || 0;

  // Compute delivery date = today + dispatchDays
  const today = new Date();
  const deliveryDate = new Date(today);
  deliveryDate.setDate(today.getDate() + dispatchDays);

  // Format as "Tue, 25 Feb"
  const deliveryDateString = deliveryDate.toLocaleDateString("en-US", {
    weekday: "short",
    day: "numeric",
    month: "short",
  });
  // 1. Define your payment methods in an array of objects
  const paymentMethods = [
    {
      name: "MTN MOMO",
      logoUrl:
        "https://uploads-eu-west-1.insided.com/mtngroup-en/attachment/96f3ec28-bc42-49ee-be5d-6ed5345e516c_thumb.png",
    },
    {
      name: "Google Pay",
      logoUrl:
        "https://lh3.googleusercontent.com/z4nOBXDSMJ2zwyW9Nd1KHYEJgbhuqnVLvAGUXh0uEUn8f9QHnPYUY_64oYwOxRsDx26SEb5PgZJzLJRU6RwToFL00Wq--pBGmAwe=s0",
    },
    {
      name: "VISA",
      logoUrl: "https://upload.wikimedia.org/wikipedia/commons/0/04/Visa.svg",
    },
    {
      name: "MasterCard",
      logoUrl:
        "https://upload.wikimedia.org/wikipedia/commons/a/a4/Mastercard_2019_logo.svg",
    },
  ];

  return (
    <div className="mt-6 w-full max-w-3xl mx-auto py-2  border-gray-200 rounded-lg space-y-0">
      {/* Title */}
      <h2 className="text-xl lg:text-2xl font-bold mb-2">
        Payment, Delivery and Returns
      </h2>

      {/* Seller's Payment Terms (full-width block) */}
      <div className="mb-8">
        <p className="text-base lg:text-lg font-semibold mb-1">
          Seller's Payment Terms:
        </p>
        {/* <ul className="space-y-1 text-base lg:text-lg">
          <li>‚úÖ Pay Online (Available at checkout)</li>
          <li>‚ùå Pay on Delivery (Not available)</li>
          <li>‚úÖ Pay &amp; Collect (Available at checkout)</li>
        </ul> */}
        <div
          className="space-y-1 text-base lg:text-lg"
          dangerouslySetInnerHTML={{ __html: seller_payment_terms }}
        />
        <div className="mt-2">
          <span className="text-blue-600 underline text-sm lg:text-base">
            See details
          </span>
          <i className="bi bi-info-circle ml-1 align-middle" />
        </div>
      </div>

      {/* Container for Delivery, Returns, and Payments */}
      <div className="space-y-6">
        {/* Delivery */}
        <div className="grid grid-cols-1 lg:grid-cols-[auto_1fr] gap-y-2 lg:gap-y-0 lg:gap-x-6">
          <p className="text-base lg:text-lg font-semibold">Delivery:</p>
          <div>
            <p className="text-base lg:text-lg">
              Fast Delivery Available:&nbsp;
              <span className="font-bold">{deliveryDateString}</span>
            </p>
            <p className="text-sm lg:text-base text-gray-500">
              if ordered today
            </p>
          </div>
        </div>

        {/* Returns */}
        <div className="grid grid-cols-1 lg:grid-cols-[auto_1fr] gap-y-2 lg:gap-y-0 lg:gap-x-6">
          <p className="text-base lg:text-lg font-semibold">Returns:</p>
          <div>
            {!cancellable && (
              <p className="text-base lg:text-lg">
                The seller won't accept returns for this item.
              </p>
            )}
            {cancellable && (
              <p className="text-base lg:text-lg">
                You can return this item within
                <span className="font-bold"> 7 days</span> of receiving it.
              </p>
            )}
          </div>
        </div>

        {/* Payments */}
        <div className="grid grid-cols-1 lg:grid-cols-[auto_1fr] gap-y-2 lg:gap-y-0 lg:gap-x-6">
          <p className="text-base lg:text-lg font-semibold">Payments:</p>
          <div className="flex items-center space-x-4 mt-2 lg:mt-0">
            {/* 2. Map over your paymentMethods array to render each payment method */}
            {paymentMethods.map((method, index) => (
              <div
                key={index}
                className="border-[2px] lg:border-[3px] border-black p-2 rounded flex items-center justify-center w-20 h-12"
              >
                <img
                  className="max-h-6"
                  src={method.logoUrl}
                  alt={method.name}
                />
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentDeliveryReturns;


===== src/components/PaymentMethod.jsx =====
import React from "react";

const PaymentMethod = () => {
  const paymentMethods = [
    {
      name: "MTN MOMO",
      logo: "https://uploads-eu-west-1.insided.com/mtngroup-en/attachment/96f3ec28-bc42-49ee-be5d-6ed5345e516c_thumb.png",
    },
    {
      name: "MTN MOMO",
      logo: "https://lh3.googleusercontent.com/z4nOBXDSMJ2zwyW9Nd1KHYEJgbhuqnVLvAGUXh0uEUn8f9QHnPYUY_64oYwOxRsDx26SEb5PgZJzLJRU6RwToFL00Wq--pBGmAwe=s0",
    },
    {
      name: "Visa",
      logo: "https://upload.wikimedia.org/wikipedia/commons/0/04/Visa.svg",
    },
    {
      name: "Mastercard",
      logo: "https://upload.wikimedia.org/wikipedia/commons/a/a4/Mastercard_2019_logo.svg",
    },
  ];
  return (
    <div className="flex">
      <span className="w-1/4 text-gray-800">Payments:</span>
      <div className="w-2/4 flex space-x-2">
        {paymentMethods.map((method, index) => (
          <div
            key={index}
            className="border-[3px] border-black p-2 rounded flex items-center justify-center w-20 h-12"
          >
            <img className="max-h-6" src={method.logo} alt={method.name} />
          </div>
        ))}
      </div>
    </div>
  );
};

export default PaymentMethod;


===== src/components/Price.jsx =====
// components/Price.jsx
"use client";

import React from "react";
import { useSelector } from "react-redux";
import { selectSelectedCountry } from "@/app/store/slices/countrySlice";
import { convertPrice } from "@/app/utils/utils";

export default function Price(props) {
  const {
    priceCents,
    salePriceCents,
    priceCurrency,
    saleEndDate,
    onSales,
    isLoading, // <-- new boolean prop
  } = props;

  const selectedCountry = useSelector(selectSelectedCountry);
  const exchangeRates = useSelector((state) => state.exchangeRates.rates);
  // if your slice tracks loading:
  // const isLoading = useSelector((state) => state.exchangeRates.loading)

  // If we‚Äôre still fetching rates (or whatever), show skeletons
  if (isLoading) {
    return (
      <div className="flex items-baseline gap-2">
        {/* main price placeholder */}
        <div className="h-6 w-20 bg-gray-200 rounded animate-pulse" />
        {/* optional sale price placeholder if on sale */}
        {salePriceCents > 0 && (
          <div className="h-4 w-16 bg-gray-200 rounded animate-pulse" />
        )}
      </div>
    );
  }

  // ‚Äî‚Äî‚Äî logic stays the same once loaded ‚Äî‚Äî‚Äî

  const symbol = selectedCountry?.symbol || "";
  const isOnSaleActive =
    saleEndDate &&
    new Date(saleEndDate) > new Date() &&
    (salePriceCents > 0 || onSales);

  const convertedPrice = convertPrice(
    priceCents / 100,
    priceCurrency,
    selectedCountry?.code,
    exchangeRates,
  );

  const convertedSalePrice =
    isOnSaleActive && salePriceCents > 0
      ? convertPrice(
          salePriceCents / 100,
          priceCurrency,
          selectedCountry?.code,
          exchangeRates,
        )
      : null;

  const displayPrice =
    isOnSaleActive && convertedSalePrice != null
      ? convertedSalePrice.toFixed(2)
      : convertedPrice.toFixed(2);

  return (
    <div className="flex items-baseline gap-2">
      <span className="text-base font-bold text-gray-800">
        {symbol} {displayPrice}
      </span>
      {isOnSaleActive && convertedSalePrice != null && (
        <span className="text-sm text-gray-500 line-through">
          {symbol} {convertedPrice.toFixed(2)}
        </span>
      )}
    </div>
  );
}


===== src/components/ProductDetailSection/Breadcrumbs.jsx =====
"use client";

import React from "react";
import Link from "next/link";

export default function Breadcrumbs({ path = [], title, base = "/categories" }) {
  return (
    <nav
      aria-label="Breadcrumb"
      className="flex items-center gap-2 mb-4 overflow-x-auto whitespace-nowrap text-sm text-gray-500 scrollbar-hide"
    >
      {/* Home link */}
      <Link href="/" className="text-blue-600 hover:underline">
        Upfrica
      </Link>

      {/* Category chain */}
      {path.map((c) => (
        <span key={c.id} className="flex items-center gap-2">
          <span className="text-gray-300">‚Ä∫</span>
          <Link
            href={`${base}/${c.path}`}
            className="text-blue-600 hover:underline"
          >
            {c.name}
          </Link>
        </span>
      ))}

      {/* Current page */}
      <span className="text-gray-300">‚Ä∫</span>
      <span className="font-semibold text-gray-700 truncate max-w-[50vw]">
        {title}
      </span>
    </nav>
  );
}

===== src/components/ProductDetailSection/DetailsTabs.jsx =====
'use client';

import React, { useEffect, useMemo, useState } from 'react';

export default function DetailsTabs({
  specificsContent,
  descriptionHtml,
  reviewsNode,
  reviewMeta = {},
}) {
  const [tab, setTab] = useState('specifics');
  const reviewCount = Number(reviewMeta?.review_count || 0);

  const [isDesktop, setIsDesktop] = useState(false);
  useEffect(() => {
    const mq = window.matchMedia('(min-width: 1024px)');
    const handler = (e) => setIsDesktop(!!e.matches);
    handler(mq);
    if (typeof mq.addEventListener === 'function') {
      mq.addEventListener('change', handler);
      return () => mq.removeEventListener('change', handler);
    } else {
      mq.addListener(handler);
      return () => mq.removeListener(handler);
    }
  }, []);

  // --- helpers ---
  const unescapeIfNeeded = (html) => {
    if (typeof html !== 'string') return '';
    let raw = html.trim();
    if (/&lt;|&gt;|&amp;/.test(raw)) {
      try {
        const doc = new DOMParser().parseFromString(raw, 'text/html');
        raw = doc.documentElement.textContent || raw;
      } catch {}
    }
    return raw;
  };

  const escapeHtml = (str) =>
    String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

  const smartListify = (html) => {
    if (!html) return '';
    if (/(<\s*(ul|ol|li)\b)/i.test(html)) return html;

    const withBreaks = html
      .replace(/<br\s*\/?>/gi, '\n')
      .replace(/<\/p>/gi, '\n')
      .replace(/<p[^>]*>/gi, '')
      .replace(/&nbsp;/gi, ' ')
      .trim();

    const plain = withBreaks.replace(/<[^>]+>/g, '');

    let lines = plain
      .split(/\n+/)
      .map((l) => l.replace(/^\s*([‚Ä¢\-\*\u2022¬∑]+)\s*/u, '').trim())
      .filter(Boolean);

    const lookedLikeBullets = /[‚Ä¢\u2022]/.test(plain);
    const manyShortLines =
      lines.length >= 4 &&
      lines.filter((l) => l.length <= 140).length >= Math.max(3, Math.floor(lines.length * 0.6));

    if (lookedLikeBullets || manyShortLines) {
      const items = lines.map((l) => `<li>${escapeHtml(l)}</li>`).join('');
      // class hooks are optional now that we hard-override in CSS below
      return `<ul class="listified">${items}</ul>`;
    }
    return html;
  };

  const finalDescriptionHtml = useMemo(() => {
    const unescaped = unescapeIfNeeded(descriptionHtml);
    return smartListify(unescaped || '<p>No description provided.</p>');
  }, [descriptionHtml]);

  // panels
const Specifics = (
  <div className="text-sm text-gray-800 space-y-4" id="specifics">
    <div>
      <p className="text-base font-semibold text-gray-900 mb-1">üìå Seller Location:</p>
      <p className="text-sm text-gray-700">Accra ‚Äî GH</p>
    </div>

    <div>
      <p className="text-base font-semibold text-gray-900 mb-1">üì¶ Condition:</p>
      <p className="text-sm text-gray-700">Brand New</p>
    </div>

    <div>
      <p className="text-base font-semibold text-gray-900">üìÑ Product Specifications</p>
      <div className="overflow-hidden rounded-lg border border-gray-200 mt-2">
        <table className="w-full border-collapse text-left text-sm" aria-label="Product specifications table">
          <tbody>
            <tr className="bg-gray-50 border-b">
              <th className="py-3 px-4 font-medium text-gray-600 w-1/3">üè∑Ô∏è Brand</th>
              <td className="py-3 px-4">Mulli</td>
            </tr>
            <tr className="border-b">
              <th className="py-3 px-4 font-medium text-gray-600">üé® Colour</th>
              <td className="py-3 px-4">Black</td>
            </tr>
            <tr className="bg-gray-50 border-b">
              <th className="py-3 px-4 font-medium text-gray-600">‚ú® Special Feature</th>
              <td className="py-3 px-4">Portable</td>
            </tr>
            <tr className="border-b">
              <th className="py-3 px-4 font-medium text-gray-600">üß™ Capacity</th>
              <td className="py-3 px-4">380 ml</td>
            </tr>
            <tr className="bg-gray-50 border-b">
              <th className="py-3 px-4 font-medium text-gray-600">üìè Product Dimensions</th>
              <td className="py-3 px-4">8D x 8W x 25H cm</td>
            </tr>
            <tr className="border-b">
              <th className="py-3 px-4 font-medium text-gray-600">üß¥ Material</th>
              <td className="py-3 px-4">
                BPA-Free Plastic <span className="text-gray-400 text-xs">(unverified)</span>
              </td>
            </tr>
            <tr className="bg-gray-50 border-b">
              <th className="py-3 px-4 font-medium text-gray-600">üîã Battery</th>
              <td className="py-3 px-4">USB Rechargeable (1200mAh est.)</td>
            </tr>
            <tr className="border-b">
              <th className="py-3 px-4 font-medium text-gray-600">üì¶ What‚Äôs in the Box</th>
              <td className="py-3 px-4">Mini Blender, USB Cable, User Manual</td>
            </tr>
            <tr className="bg-gray-50">
              <th className="py-3 px-4 font-medium text-gray-600">üçπ Ideal For</th>
              <td className="py-3 px-4">Smoothies, Protein Shakes, Baby Food</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
);

  const Description = (
    <div
      id="description"
      className="richtext prose max-w-none text-sm text-gray-800 leading-relaxed"
      dangerouslySetInnerHTML={{ __html: finalDescriptionHtml }}
      suppressHydrationWarning
    />
  );

  const Reviews = (
    <div id="reviews">
      {reviewsNode ?? <p className="text-sm text-gray-600">No reviews yet.</p>}
    </div>
  );

  // desktop tabs
  if (isDesktop) {
    const TabBtn = (key, label, extras = null) => (
      <button
        type="button"
        onClick={() => setTab(key)}
        className={[
          'w-full px-4 py-3 text-sm font-medium border-b-2 transition',
          tab === key
            ? 'border-violet-600 text-violet-700 bg-violet-50'
            : 'border-transparent text-gray-700 hover:bg-gray-50',
        ].join(' ')}
        aria-selected={tab === key}
        role="tab"
      >
        <span className="inline-flex items-center gap-2">
          {label}
          {extras}
        </span>
      </button>
    );

    return (
      <section className="mt-6 border rounded-xl bg-white" id="details-tabs">
        <div className="grid grid-cols-3 rounded-t-xl overflow-hidden" role="tablist" aria-label="Product details tabs">
          {TabBtn('specifics', 'Product specifics')}
          {TabBtn('description', 'Description')}
          {TabBtn(
            'reviews',
            'Reviews',
            reviewCount > 0 && (
              <span className="inline-flex items-center justify-center text-xs min-w-[1.25rem] h-5 px-1 rounded-full bg-gray-900 text-white">
                {reviewCount}
              </span>
            )
          )}
        </div>

        <div className="p-4 md:p-5" role="tabpanel" aria-labelledby={tab}>
          {tab === 'specifics' && Specifics}
          {tab === 'description' && Description}
          {tab === 'reviews' && Reviews}
        </div>

        {/* Scoped CSS to restore bullets/numbers inside description only */}
        <style jsx>{`
          /* strong specificity + !important to beat global reset */
          #details-tabs :global(.richtext ul),
          #details-tabs :global(.richtext ol) {
            list-style-position: outside !important;
            margin-left: 1.25rem !important; /* ~ml-5 */
            padding-left: 0.25rem !important;
          }
          #details-tabs :global(.richtext ul) { list-style-type: disc !important; }
          #details-tabs :global(.richtext ol) { list-style-type: decimal !important; }
          #details-tabs :global(.richtext li) { margin: 0.25rem 0; }
          /* If our smartListify added <ul class="listified">, make sure it shows bullets */
          #details-tabs :global(.richtext ul.listified) { list-style-type: disc !important; }
        `}</style>
      </section>
    );
  }

  // mobile accordions
  return (
    <section className="mt-6 space-y-3" id="details-accordions">
      <details className="group rounded-xl border bg-white open:shadow-sm">
        <summary className="flex items-center justify-between cursor-pointer px-4 py-3 text-sm font-medium">
          <span>Product specifics</span>
          <span className="transition group-open:rotate-180">‚ñæ</span>
        </summary>
        <div className="px-4 pb-4">{Specifics}</div>
      </details>

      <details className="group rounded-xl border bg-white open:shadow-sm">
        <summary className="flex items-center justify-between cursor-pointer px-4 py-3 text-sm font-medium">
          <span>Description</span>
          <span className="transition group-open:rotate-180">‚ñæ</span>
        </summary>
        <div className="px-4 pb-4">{Description}</div>
      </details>

      <details className="group rounded-xl border bg-white open:shadow-sm" id="reviews">
        <summary className="flex items-center justify-between cursor-pointer px-4 py-3 text-sm font-medium">
          <span className="inline-flex items-center gap-2">
            Reviews
            {reviewCount > 0 && (
              <span className="inline-flex items-center justify-center text-xs min-w-[1.25rem] h-5 px-1 rounded-full bg-gray-900 text-white">
                {reviewCount}
              </span>
            )}
          </span>
          <span className="transition group-open:rotate-180">‚ñæ</span>
        </summary>
        <div className="px-4 pb-4">{Reviews}</div>
      </details>

      {/* Same override for mobile container */}
      <style jsx>{`
        #details-accordions :global(.richtext ul),
        #details-accordions :global(.richtext ol) {
          list-style-position: outside !important;
          margin-left: 1.25rem !important;
          padding-left: 0.25rem !important;
        }
        #details-accordions :global(.richtext ul) { list-style-type: disc !important; }
        #details-accordions :global(.richtext ol) { list-style-type: decimal !important; }
        #details-accordions :global(.richtext li) { margin: 0.25rem 0; }
        #details-accordions :global(.richtext ul.listified) { list-style-type: disc !important; }
      `}</style>
    </section>
  );
}

===== src/components/ProductDetailSection/PriceBlock.jsx =====
'use client';

import React from 'react';
import { FaTruck } from 'react-icons/fa';
import TrustBadges from './TrustBadges';

export default function PriceBlock({
  symbol = '‚Çµ',
  activePrice,            // string: "123.45"
  originalPrice = null,   // string | null
  saleActive = false,
  timeRemaining = {},     // {days,hours,minutes,seconds}
  postage_fee_cents = 0,
}) {
  return (
    <div className="space-y-2">
      {/* Price */}
      <div>
        {saleActive ? (
          <div className="flex items-baseline gap-2">
            <span className="text-2xl font-bold text-green-700">
              {symbol}{activePrice}
            </span>
            {originalPrice && (
              <del className="text-gray-400">
                {symbol}{originalPrice}
              </del>
            )}
          </div>
        ) : (
          <span className="text-2xl font-bold text-green-700">
            {symbol}{activePrice}
          </span>
        )}
      </div>

      {/* Countdown */}
      {saleActive && (
        <p className="text-sm text-red-700 font-medium">
          Sale ends in{' '}
          {timeRemaining.days > 0 ? `${timeRemaining.days}d ` : ''}
          {String(timeRemaining.hours ?? 0).padStart(2, '0')}:
          {String(timeRemaining.minutes ?? 0).padStart(2, '0')}:
          {String(timeRemaining.seconds ?? 0).padStart(2, '0')}
        </p>
      )}

      {/* Delivery */}
      <div className="flex items-center gap-2 text-sm text-gray-600">
        <FaTruck className="text-lg" />
        {postage_fee_cents > 0 ? (
          <span>Postage fee: {symbol}{(postage_fee_cents / 100).toFixed(2)}</span>
        ) : (
          <span className="text-green-600 font-semibold">Free delivery</span>
        )}
      </div>

      {/* Trust badges */}
      <TrustBadges />
    </div>
  );
}

===== src/components/ProductDetailSection/ProductDetailSection.jsx =====
'use client';

import React, { useEffect, useMemo, useState, useCallback } from 'react';
import Image from 'next/image';
import { pickProductImage, fixImageUrl, FALLBACK_IMAGE } from '@/lib/image';

import Link from 'next/link';
import { useDispatch, useSelector } from 'react-redux';
import { useRouter, usePathname } from 'next/navigation';

import {
  FaHeart, FaRegHeart, FaEdit, FaTrash, FaEnvelope, FaWhatsapp, FaEyeSlash
} from 'react-icons/fa';
import { AiOutlineClose } from 'react-icons/ai';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { CountryDropdown } from 'react-country-region-selector';

import ProductSlider from './ProductSlider';
import DetailsTabs from './DetailsTabs';
import DisplayReviews from '@/components/review/DisplayReviews';
import MultiBuySection from '../MultiBuySection';
import PaymentDeliveryReturns from '../PaymentDeliveryReturns';
import DirectBuyPopup from '../DirectBuyPopup';
import RecentlyViewed from '../RecentlyViewed';
import BasketSheet from '../BasketSheet';

import PriceBlock from './PriceBlock';
import SellerCard from './SellerCard';
import StickyPriceBar from './StickyPriceBar';
import Breadcrumbs from "./Breadcrumbs";
import ContactSellerCard from '../ContactSellerCard';

import { convertPrice } from '@/app/utils/utils';
import { addToBasket, updateQuantity, removeFromBasket } from '@/app/store/slices/cartSlice';
import { selectSelectedCountry } from '@/app/store/slices/countrySlice';
import {
  fetchReviewsStart, fetchReviewsSuccess, fetchReviewsFailure,
} from '@/app/store/slices/reviewsSlice';
import { BASE_API_URL } from '@/app/constants';
import { getCleanToken } from '@/lib/getCleanToken';

import { canDisplaySellerContact, pickShopPhone, whatsappUrl } from "@/lib/seller-contact";



const DEBUG =
  typeof window !== "undefined" &&
  new URLSearchParams(window.location.search).has("debug");

// --- copy text for contact gating
const CONTACT_REASON_COPY = {
  missing_entitlement: "Seller plan doesn‚Äôt include public phone yet.",
  plan_required:       "Seller plan doesn‚Äôt include public phone yet.",
  kyc_required:        "Seller must complete KYC to show a public phone.",
  storefront_locked:   "Seller‚Äôs storefront is locked; contact phone hidden.",
  no_number:           "Seller hasn‚Äôt added a public phone yet.",
  unknown:             "Contact phone not available.",
};

function contactReasonText(reason, allowed) {
  if (allowed) return CONTACT_REASON_COPY.no_number;
  const key = String(reason || "").trim().toLowerCase();
  const alias = {
    no_phone: "no_number",
    not_entitled: "missing_entitlement",
    missing_entitlements: "missing_entitlement",
    locked: "storefront_locked",
  };
  return CONTACT_REASON_COPY[alias[key] || key] || CONTACT_REASON_COPY.unknown;
}





// --- SUPER-ROBUST related image resolver ---
function resolveRelatedImage(item) {
  if (!item) return FALLBACK_IMAGE;

  const isGood = (v) =>
    typeof v === 'string' && v.trim() && !/^(null|none|undefined)$/i.test(v);

  // Turn many shapes into an array we can scan
  const toArray = (v) => {
    if (!v) return [];
    if (Array.isArray(v)) return v;
    if (typeof v === 'string') {
      const s = v.trim();
      // JSON array string?
      if (s.startsWith('[')) {
        try { const arr = JSON.parse(s); return Array.isArray(arr) ? arr : []; } catch {}
      }
      // CSV / pipe / whitespace separated list
      return s.split(/[,\|]\s*|\s{2,}/g).filter(Boolean);
    }
    // Nested { images: [...] } / { media: [...] } / etc.
    if (typeof v === 'object') {
      for (const k of Object.keys(v)) {
        const child = v[k];
        if (Array.isArray(child)) return child;
      }
    }
    return [];
  };

  // Pull a URL-ish string from a string or object
  const pickFromOne = (x) => {
    if (typeof x === 'string') return x;
    if (x && typeof x === 'object') {
      return (
        x.image_url || x.url || x.secure_url || x.src ||
        x.thumbnail || x.image || x.path || null
      );
    }
    return null;
  };

  // 1) Array-like sources (string/array/object)
  const arrayishKeys = [
    'product_images','images','photos','image_objects','imageObjects','gallery',
    'pictures','thumbnails','media','assets','primary_media','image_urls'
  ];
  for (const k of arrayishKeys) {
    const arr = toArray(item[k]);
    for (const it of arr) {
      const u = pickFromOne(it);
      if (isGood(u)) return fixImageUrl(u);
    }
  }

  // 2) Nested containers like { media: { images: [...] } }
  for (const parentKey of ['media','assets','primary_media']) {
    const parent = item[parentKey];
    if (parent && typeof parent === 'object') {
      for (const k of Object.keys(parent)) {
        const arr = toArray(parent[k]);
        for (const it of arr) {
          const u = pickFromOne(it);
          if (isGood(u)) return fixImageUrl(u);
        }
      }
      const direct = pickFromOne(parent);
      if (isGood(direct)) return fixImageUrl(direct);
    }
  }

  // 3) Single-field sources
  const singleKeys = [
    'product_image_url','product_image','thumbnail_url','thumbnail',
    'primary_image_url','main_image','seo_image','image_url','image',
    'picture_url','picture','cover_image','preview'
  ];
  for (const k of singleKeys) {
    const v = item[k];
    if (isGood(v)) return fixImageUrl(v);
  }

  return FALLBACK_IMAGE;
}




function RelatedThumb({ item, alt }) {
  const candidate = React.useMemo(() => resolveRelatedImage(item), [item]);

  React.useEffect(() => {
    if (DEBUG) {
      console.info('[related item]', { id: item?.id, picked: candidate, raw: item });
    }
  }, [item, candidate]);

  const [broken, setBroken] = React.useState(false);
  const src = broken ? FALLBACK_IMAGE : candidate;

  return (
    <div className="relative w-full h-40">
      <Image
        key={src}
        src={src}
        alt={alt || 'Product image'}
        fill
        className="object-cover"
        sizes="(max-width: 640px) 50vw, (max-width: 1024px) 33vw, 25vw"
        quality={80}
        onError={() => setBroken(true)}
      />
    </div>
  );
}
// --- normalize phones from shop payload
function normalizeShopPhones(shop) {
  if (!shop) return [];
  if (Array.isArray(shop.phones) && shop.phones.length) return shop.phones;

  const scn = shop.seller_contact_number;
  if (!scn) return [];

  const base = {
    id: "legacy",
    uses: ["shop_public"],
    is_primary: true,
    is_verified: !!shop.seller_contact_verified,
    updated_at: shop.updated_at,
  };

  if (typeof scn === "string") {
    return [{ ...base, e164: scn, number: scn, display: scn, national: scn, local: scn }];
  }

  if (typeof scn === "object") {
    const e = scn.e164 || scn.number || scn.display || scn.national || scn.local || "";
    return [{
      ...base,
      e164: e,
      number: scn.number || e,
      display: scn.display || scn.national || scn.local || e,
      national: scn.national,
      local: scn.local,
      uses: Array.isArray(scn.uses) ? Array.from(new Set([...scn.uses, "shop_public"])) : ["shop_public"],
      is_primary: scn.is_primary ?? base.is_primary,
      is_verified: scn.is_verified ?? base.is_verified,
      updated_at: scn.updated_at || base.updated_at,
      id: scn.id || base.id,
    }];
  }

  return [];
}

function legacyPhoneFromSellerContact(scn, shopUpdatedAt, isVerified) {
  if (!scn) return null;
  const base = {
    id: "legacy",
    uses: ["shop_public"],
    is_primary: true,
    is_verified: !!isVerified,
    updated_at: shopUpdatedAt,
  };

  if (typeof scn === "string") {
    const e = scn.replace(/[^\d+]/g, "");
    if (!e) return null;
    return { ...base, e164: e, display: scn, number: scn, national: scn, local: scn };
  }

  if (typeof scn === "object") {
    const raw = scn.e164 || scn.number || scn.display || scn.national || scn.local || "";
    const e = String(raw).replace(/[^\d+]/g, "");
    if (!e) return null;
    return {
      ...base,
      id: scn.id || base.id,
      e164: e,
      number: scn.number || e,
      display: scn.display || scn.national || scn.local || e,
      national: scn.national,
      local: scn.local,
      uses: Array.isArray(scn.uses)
        ? Array.from(new Set([...scn.uses, "shop_public"]))
        : ["shop_public"],
      is_primary: scn.is_primary ?? base.is_primary,
      is_verified: scn.is_verified ?? base.is_verified,
      updated_at: scn.updated_at || base.updated_at,
    };
  }

  return null;
}

// ---------- contact phone click tracking (KEEP AT MODULE SCOPE) ----------
function hasFiredContactFor(slug) {
  try { return sessionStorage.getItem(`ccf:${slug}`) === "1"; } catch { return false; }
}
function markFiredContactFor(slug) {
  try { sessionStorage.setItem(`ccf:${slug}`, "1"); } catch {}
}
function getOrCreateSessionId() {
  try {
    const k = "upfrica_sid";
    let id = localStorage.getItem(k);
    if (!id) {
      id = Math.random().toString(36).slice(2) + Date.now().toString(36);
      localStorage.setItem(k, id);
    }
    return id;
  } catch {
    return "";
  }
}
async function postContactClick(slug, source = "pdp") {
  const url = `${BASE_API_URL}/api/products/${slug}/event/`;
  const payload = JSON.stringify({
    event: "contact_click",
    session_id: getOrCreateSessionId(),
    source,
  });

  try {
    if (navigator.sendBeacon) {
      const blob = new Blob([payload], { type: "application/json" });
      navigator.sendBeacon(url, blob);
      return;
    }
  } catch {}

  try {
    await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      keepalive: true,
      body: payload,
    });
  } catch {}
}

// ---------- address form schema ----------
const addressSchema = Yup.object().shape({
  full_name: Yup.string().required('Required'),
  street: Yup.string().required('Required'),
  city: Yup.string().required('Required'),
  state: Yup.string().required('Required'),
  zip_code: Yup.string().required('Required'),
  country: Yup.string().required('Required'),
});

export default function ProductDetailSection({ product }) {
  const dispatch = useDispatch();
  const router = useRouter();
  const currentPath = usePathname();

  const {
    id, title, price_cents, sale_price_cents,
    postage_fee_cents, price_currency, sale_end_date,
    product_video, product_images, category,
    shop, user, variants, is_published,
  } = product || {};

  const selectedCountry = useSelector(selectSelectedCountry);
  const { token, user: currentUser } = useSelector((s) => s.auth);
  const basket = useSelector((s) => s.basket.items) || [];
  const exchangeRates = useSelector((s) => s.exchangeRates.rates);

  const symbol = selectedCountry?.symbol ?? '‚Çµ';
  const currencyCode = selectedCountry?.code ?? 'GHS';

  const [quantity, setQuantity] = useState(1);
  const [isDirectBuyPopupVisible, setIsDirectBuyPopupVisible] = useState(false);
  const [showNewModal, setShowNewModal] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [loading, setLoading] = useState(false);

  // --- Contact gate (strict) ---
  const sellerEntitlements = Array.isArray(shop?.entitlements)
    ? shop.entitlements
    : undefined;

  const stateOf = useCallback(
    (name) => {
      if (name === "allow_display_seller_contact") return shop?.contact_display_state;
      if (name === "storefront_unlock") return shop?.storefront_state;
      return undefined;
    },
    [shop?.contact_display_state, shop?.storefront_state]
  );

  const gate = canDisplaySellerContact({
    entitlements: sellerEntitlements,
    stateOf,
    fallbackIfUnknown: false,
  });

  const phonesFromShop = normalizeShopPhones(shop);
  const legacyPhone = legacyPhoneFromSellerContact(
    shop?.seller_contact_number,
    shop?.updated_at,
    shop?.seller_contact_verified
  );

  const phoneToShow = useMemo(() => {
    if (!gate.allowed) return null;
    if (phonesFromShop.length) return pickShopPhone(phonesFromShop);
    return legacyPhone;
  }, [gate.allowed, phonesFromShop, legacyPhone]);

  if (DEBUG) {
    console.info("[PDP Contact Gate]", {
      entitlements: sellerEntitlements,
      contact_display_state: shop?.contact_display_state,
      storefront_state: shop?.storefront_state,
      allowed: gate.allowed,
      reason: gate.reason,
      phonePreview: phonesFromShop?.[0] || legacyPhone || null,
    });
  }

  const canShowPhone = !!phoneToShow;

// ‚Ä¶truncated‚Ä¶

===== src/components/ProductDetailSection/ProductSlider-wip.jsx =====
"use client";

import React, { useState, useEffect, useRef } from "react";
import Image from "next/image";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation } from "swiper/modules";
import { motion, AnimatePresence } from "framer-motion";
import "swiper/css";
import "swiper/css/navigation";

const ProductSliderPremium = ({ mediaItems = [] }) => {
  const items = Array.isArray(mediaItems)
    ? mediaItems.map((item) =>
        typeof item === "string" ? { type: "image", src: item } : item,
      )
    : [];

  const [selectedIndex, setSelectedIndex] = useState(0);
  const [modalIndex, setModalIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [zoomPos, setZoomPos] = useState(null);
  const [bgColor, setBgColor] = useState("#111111");
  const containerRef = useRef(null);
  const [loaded, setLoaded] = useState(false);

  const current = items[selectedIndex];
  const modalCurrent = items[modalIndex];

  useEffect(() => {
    const item = isModalOpen ? modalCurrent : current;
    if (!item || item.type !== "image") return;

    const img = new window.Image();
    img.crossOrigin = "anonymous";
    img.src = item.src;
    img.onload = () => {
      const canvas = document.createElement("canvas");
      canvas.width = 20;
      canvas.height = 20;
      const ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0, 20, 20);
      const data = ctx.getImageData(0, 0, 20, 20).data;
      let r = 0,
        g = 0,
        b = 0,
        count = 0;
      for (let i = 0; i < data.length; i += 4) {
        const [red, green, blue] = [data[i], data[i + 1], data[i + 2]];
        const isBlack = red < 25 && green < 25 && blue < 25;
        const isWhite = red > 240 && green > 240 && blue > 240;
        if (isBlack || isWhite) continue;
        r += red;
        g += green;
        b += blue;
        count++;
      }
      if (count) {
        setBgColor(
          `rgb(${Math.floor(r / count)}, ${Math.floor(
            g / count,
          )}, ${Math.floor(b / count)})`,
        );
      }
    };
  }, [current, modalCurrent, isModalOpen]);

  const onMouseMove = (e) => {
    if (
      current?.type !== "image" ||
      !containerRef.current ||
      window.innerWidth < 768
    )
      return;
    const { left, top, width, height } =
      containerRef.current.getBoundingClientRect();
    const x = Math.min(100, Math.max(0, ((e.clientX - left) / width) * 100));
    const y = Math.min(100, Math.max(0, ((e.clientY - top) / height) * 100));
    setZoomPos({ x, y });
  };

  const onMouseLeave = () => setZoomPos(null);

  const openModal = () => {
    setModalIndex(selectedIndex);
    setIsModalOpen(true);
    document.body.style.overflow = "hidden";
  };

  const closeModal = () => {
    setIsModalOpen(false);
    document.body.style.overflow = "auto";
  };

  return (
    <div className="space-y-4">
      <div
        className="relative border rounded-lg mx-auto overflow-hidden bg-black"
        style={{ width: "100%", maxWidth: 600, aspectRatio: "1/1" }}
      >
        {loaded && (
          <motion.div
            key={bgColor}
            animate={{
              background: `linear-gradient(to bottom, ${bgColor}, #000)`,
            }}
            transition={{ duration: 0.8 }}
            className="absolute inset-0 z-0"
          />
        )}
        <div
          ref={containerRef}
          className="relative z-10 h-full w-full flex items-center justify-center cursor-zoom-in"
          onMouseMove={onMouseMove}
          onMouseLeave={onMouseLeave}
          onClick={openModal}
        >
          {!loaded && (
            <div className="absolute inset-0 flex items-center justify-center z-20">
              <div className="w-10 h-10 border-4 border-t-transparent border-white border-solid rounded-full animate-spin"></div>
            </div>
          )}
          <Image
            src={current?.src}
            alt="Product"
            width={600}
            height={600}
            onLoadingComplete={() => setLoaded(true)}
            className="object-contain rounded-md"
          />
        </div>

        {selectedIndex > 0 && (
          <button
            onClick={() => {
              setSelectedIndex((prev) => prev - 1);
              setLoaded(false);
            }}
            className="absolute left-[10.5rem] top-1/2 -translate-y-1/2 z-20 p-2 bg-white/80 hover:bg-white rounded-full text-black text-xl"
          >
            ‚óÄ
          </button>
        )}
        {selectedIndex < items.length - 1 && (
          <button
            onClick={() => {
              setSelectedIndex((prev) => prev + 1);
              setLoaded(false);
            }}
            className="absolute right-[5.5rem] top-1/2 -translate-y-1/2 z-20 p-2 bg-white/80 hover:bg-white rounded-full text-black text-xl"
          >
            ‚ñ∂
          </button>
        )}

        {zoomPos && current?.type === "image" && (
          <motion.div
            className="absolute pointer-events-none rounded-full border-2 border-white backdrop-blur-sm z-30"
            style={{
              width: 140,
              height: 140,
              left: `calc(${zoomPos.x}% - 70px)`,
              top: `calc(${zoomPos.y}% - 70px)`,
              backgroundImage: `url(${current.src})`,
              backgroundSize: "1000% 1000%",
              backgroundPosition: `${zoomPos.x}% ${zoomPos.y}%`,
              boxShadow: "0 0 20px rgba(255,255,255,0.5)",
            }}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
          />
        )}
      </div>

      <div className="flex justify-center gap-3 flex-wrap mt-2">
        {items.map((item, idx) => (
          <div
            key={idx}
            className={`w-16 h-16 rounded overflow-hidden border cursor-pointer ${idx === selectedIndex ? "border-orange-500" : "border-gray-300"}`}
            onClick={() => {
              setSelectedIndex(idx);
              setLoaded(false);
            }}
          >
            <Image
              src={item.src}
              alt={`Thumb ${idx + 1}`}
              width={64}
              height={64}
              className="object-cover w-full h-full"
            />
          </div>
        ))}
      </div>

      <AnimatePresence>
        {isModalOpen && (
          <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-[rgba(0,0,0,0.8)] overflow-hidden"
            onClick={closeModal}
          >
            <div
              onClick={(e) => e.stopPropagation()}
              className="relative flex items-center justify-center w-full h-full"
            >
              <button
                onClick={closeModal}
                className="absolute top-4 right-4 text-white text-2xl bg-black bg-opacity-50 p-2 rounded-full z-50"
              >
                ‚úñ
              </button>

              {modalIndex > 0 && (
                <button
                  onClick={() => setModalIndex((prev) => prev - 1)}
                  className="absolute left-[10.5rem] top-1/2 -translate-y-1/2 text-white text-3xl p-2 z-40"
                >
                  ‚óÄ
                </button>
              )}
              {modalIndex < items.length - 1 && (
                <button
                  onClick={() => setModalIndex((prev) => prev + 1)}
                  className="absolute right-[5.5rem] top-1/2 -translate-y-1/2 text-white text-3xl p-2 z-40"
                >
                  ‚ñ∂
                </button>
              )}

              <div className="absolute left-4 top-1/2 -translate-y-1/2 space-y-2 z-40 hidden md:block">
                {items.map((item, idx) => (
                  <div
                    key={idx}
                    className={`w-16 h-16 rounded overflow-hidden cursor-pointer border ${idx === modalIndex ? "border-orange-500" : "border-transparent"}`}
                    onClick={() => setModalIndex(idx)}
                  >
                    <Image
                      src={item.src}
                      alt={`Thumb ${idx + 1}`}
                      width={64}
                      height={64}
                      className="object-cover w-full h-full"
                    />
                  </div>
                ))}
              </div>

              <div className="flex flex-col items-center justify-center">
                <div className="max-w-[90vw] max-h-[70vh]">
                  <Image
                    src={modalCurrent?.src}
                    alt="Lightbox"
                    width={1200}
                    height={900}
                    className="w-auto max-w-full max-h-[70vh] object-contain rounded-md"
                  />
                </div>
                <div className="w-full max-w-md mt-6 space-y-3 px-4 text-center">
                  <button className="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 rounded-full text-lg">
                    Buy Now
                  </button>
                  <button className="w-full border border-yellow-400 hover:bg-yellow-50 text-gray-800 font-semibold py-3 rounded-full text-lg">
                    Add to Basket
                  </button>
                  <button className="w-full border border-yellow-400 hover:bg-yellow-50 text-gray-800 font-semibold py-3 rounded-full text-lg flex items-center justify-center gap-2">
                    <span>‚ô°</span> Add to Watchlist
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ProductSliderPremium;


===== src/components/ProductDetailSection/ProductSlider.jsx =====
"use client";

import React, { useState, useEffect, useRef, Fragment } from "react";
import Image from "next/image";
import Modal from "react-modal";
import { FaPlay, FaTiktok, FaInstagram, FaYoutube, FaLink } from "react-icons/fa";
import { FiShare2 } from "react-icons/fi";
import {
  FacebookShareButton,
  TwitterShareButton,
  WhatsappShareButton,
  LinkedinShareButton,
  FacebookIcon,
  TwitterIcon,
  WhatsappIcon,
  LinkedinIcon,
} from "next-share";

/* ===========================
   Helpers: URL fixes & image utils
   =========================== */

/** One place to tweak your placeholders */
const FALLBACK_IMAGE =
  "https://d3q0odwafjkyv1.cloudfront.net/50g59dwfx74fq23f6c2p5noqotgo";

/** Preferred public bases (compile-time env for Next.js client) */
const CDN_BASE = (process.env.NEXT_PUBLIC_CDN_BASE || "").replace(/\/+$/, "");
const API_BASE =
  (process.env.NEXT_PUBLIC_MEDIA_BASE ||
    process.env.NEXT_PUBLIC_API_URL ||
    "") /* no trailing slash */.replace(/\/+$/, "");

/** Turn keys/relative or broken URLs into safe absolute URLs */
function fixImageUrl(input) {
  if (!input) return FALLBACK_IMAGE;
  let s = String(input).trim();
  if (!s) return FALLBACK_IMAGE;

  // Pass through data URLs
  if (s.startsWith("data:")) return s;

  // Fix the CloudFront glue bug: ...cloudfront.netdirect_uploads...
  s = s.replace("cloudfront.netdirect_uploads", "cloudfront.net/direct_uploads");

  // If absolute HTTP(S) already, use as-is
  if (/^https?:\/\//i.test(s)) return s;

  // Keys or relative paths
  // 1) direct_uploads/* => prefer CDN if known, else API/media
  if (s.startsWith("direct_uploads")) {
    if (CDN_BASE) return `${CDN_BASE}/${s}`;
    if (API_BASE) return `${API_BASE}/media/${s}`;
    return `/media/${s}`; // last resort (works if served by same origin)
  }

  // 2) /media/* (absolute path) => join with API base if provided
  if (s.startsWith("/media/")) {
    if (API_BASE) return `${API_BASE}${s}`;
    return s; // same-origin dev
  }

  // 3) media/* (no leading slash)
  if (s.startsWith("media/")) {
    if (API_BASE) return `${API_BASE}/${s}`;
    return `/${s}`;
  }

  // 4) Fallback: treat as relative path
  if (API_BASE) return `${API_BASE}/${s.replace(/^\/+/, "")}`;
  return `/${s.replace(/^\/+/, "")}`;
}

/** Normalize incoming media items to a consistent shape */
function normalizeMediaItems(mediaItems = []) {
  if (!Array.isArray(mediaItems)) return [];

  return mediaItems
    .map((item) => {
      const src =
        item?.image_url ||
        item?.url ||
        item?.src ||
        (typeof item === "string" ? item : null);

      if (!src) return null;

      // Extend if you ever ship videos (detect mime/extension)
      const isVideo =
        typeof item?.type === "string" && item.type.toLowerCase() === "video";

      return {
        type: isVideo ? "video" : "image",
        src: fixImageUrl(src),
        // Optional thumbnail override:
        thumbnail: item?.thumbnail ? fixImageUrl(item.thumbnail) : null,
      };
    })
    .filter(Boolean);
}

/** Safe Next.js Image wrapper with fallback on load error */
function SafeImage({
  src,
  alt,
  className,
  width,
  height,
  sizes,
  priority,
  fill,
  style,
  quality = 80,
}) {
  const [imgSrc, setImgSrc] = useState(fixImageUrl(src));
  useEffect(() => setImgSrc(fixImageUrl(src)), [src]);

  return (
    <Image
      src={imgSrc}
      alt={alt || "Image"}
      className={className}
      width={fill ? undefined : width}
      height={fill ? undefined : height}
      sizes={sizes}
      priority={priority}
      onError={() => setImgSrc(FALLBACK_IMAGE)}
      // keep optimization ON; ensure remotePatterns allow your hosts
      fill={fill}
      style={style}
      quality={quality}
    />
  );
}

/* ===========================
   Component
   =========================== */

const ProductSlider = ({
  mediaItems = [],
  inBaskets = 0,
  autoplay = true,
  autoplayDelay = 5000,

  // Optional share metadata (fallback to document/window)
  shareTitle,
  shareText,
  shareUrl,

  // Optional: brand handles for deep links (change to your actual handles)
  tiktokUrl = "https://www.tiktok.com/@upfrica.gh",
  instagramUrl = "https://www.instagram.com/upfrica",
  youtubeUrl = "https://www.youtube.com/@upfricamarketplace8512",
}) => {
  const items = normalizeMediaItems(mediaItems);

  const [selectedIndex, setSelectedIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  const [showBasketBadge, setShowBasketBadge] = useState(true);
  const [copied, setCopied] = useState(false);
  const [isShareOpen, setIsShareOpen] = useState(false);
  const [computedUrl, setComputedUrl] = useState(shareUrl || "");
  const [computedTitle, setComputedTitle] = useState(shareTitle || "Share product");
  const [computedText, setComputedText] = useState(shareText || "Check this out on Upfrica");

  const containerRef = useRef(null);
  const videoRef = useRef(null);
  const autoplayRef = useRef(null);
  const shareRef = useRef(null);

  const current = items[selectedIndex];

  // Swipe refs
  const touchStartX = useRef(null);
  const touchStartTime = useRef(null);
  const touchEndX = useRef(null);

  // Compute URL/title safely on client
  useEffect(() => {
    if (!shareUrl && typeof window !== "undefined") {
      setComputedUrl(window.location.href);
    }
    if (!shareTitle && typeof document !== "undefined") {
      setComputedTitle(document.title || "Share product");
    }
  }, [shareUrl, shareTitle]);

  // Close share on click-away
  useEffect(() => {
    const onDocClick = (e) => {
      if (!shareRef.current) return;
      if (!shareRef.current.contains(e.target)) setIsShareOpen(false);
    };
    if (isShareOpen) document.addEventListener("mousedown", onDocClick);
    return () => document.removeEventListener("mousedown", onDocClick);
  }, [isShareOpen]);

  // AUTOPLAY EFFECT: stop if modal open or video playing
  useEffect(() => {
    if (autoplay && !isModalOpen && !isVideoPlaying && items.length > 1) {
      autoplayRef.current = setInterval(() => {
        next();
      }, autoplayDelay);
    }
    return () => clearInterval(autoplayRef.current);
  }, [selectedIndex, isModalOpen, isVideoPlaying, autoplay, autoplayDelay, items.length]);

  // Reset video playing when slide changes
  useEffect(() => {
    setIsVideoPlaying(false);
    if (videoRef.current) {
      videoRef.current.pause();
    }
  }, [selectedIndex]);

  useEffect(() => {
    if (inBaskets > 0) {
      setShowBasketBadge(true);
      const timer = setTimeout(() => setShowBasketBadge(false), 5000);
      return () => clearTimeout(timer);
    }
  }, [inBaskets]);

  const openModal = () => {
    setIsModalOpen(true);
    clearInterval(autoplayRef.current);
  };
  const closeModal = () => setIsModalOpen(false);
  const next = () => setSelectedIndex((i) => (i + 1) % items.length);
  const prev = () => setSelectedIndex((i) => (i - 1 + items.length) % items.length);

  // Swipe handlers
  const onTouchStart = (e) => {
    touchStartX.current = e.changedTouches[0].clientX;
    touchStartTime.current = new Date().getTime();
  };
  const onTouchEnd = (e) => {
    touchEndX.current = e.changedTouches[0].clientX;
    const touchEndTime = new Date().getTime();
    handleSwipe(touchEndTime - touchStartTime.current);
  };
  const handleSwipe = (duration) => {
    const delta = touchStartX.current - touchEndX.current;
    const velocity = Math.abs(delta) / duration;
    if (delta > 50 || (delta > 20 && velocity > 0.3)) {
      next();
    } else if (delta < -50 || (delta < -20 && velocity > 0.3)) {
      prev();
    }
  };

  // Share: quick native share or copy fallback
  const handleQuickShare = async () => {
    try {
      if (typeof navigator !== "undefined" && navigator.share) {
        await navigator.share({ title: computedTitle, text: computedText, url: computedUrl });
      } else if (typeof navigator !== "undefined" && navigator.clipboard) {
        await navigator.clipboard.writeText(computedUrl);
        setCopied(true);
        setTimeout(() => setCopied(false), 1400);
      }
    } catch (err) {
      // user cancelled or unsupported
    }
  };

  const handleCopyLink = async () => {
    try {
      if (typeof navigator !== "undefined" && navigator.clipboard) {
        await navigator.clipboard.writeText(computedUrl);
        setCopied(true);
        setTimeout(() => setCopied(false), 1400);
      }
    } catch {}
  };

  if (items.length === 0) {
    return <p className="text-center text-gray-500">No images available</p>;
  }

  return (
    <div className="relative md:flex md:items-start">
      {/* Desktop thumbnails */}
      <div className="hidden md:flex flex-col gap-2 mr-3">
        {items.map((item, idx) => {
          const isActive = idx === selectedIndex;
          const border = isActive ? "border-2 border-green-500" : "border border-gray-300";
          return (
            <button
              type="button"
              key={idx}
              onClick={() => setSelectedIndex(idx)}
              className={`relative w-[60px] h-[60px] rounded-md overflow-hidden cursor-pointer ${border}`}
              aria-label={`Go to slide ${idx + 1}`}
            >
              {item.type === "video" ? (
                <>
                  {item.thumbnail ? (
                    <SafeImage
                      src={item.thumbnail}
                      alt={`Thumb ${idx + 1}`}
                      width={60}
                      height={60}
                      sizes="60px"
                      className="object-cover w-full h-full"
                      quality={70}
                    />
                  ) : (
                    <video
                      src={item.src}
                      muted
                      preload="metadata"
                      className="w-full h-full object-cover"
                    />
                  )}
                  <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                    <FaPlay className="text-white text-xl opacity-75" />
                  </div>
                </>
              ) : (
                <SafeImage
                  src={item.thumbnail || item.src}
                  alt={`Thumb ${idx + 1}`}
                  width={60}
                  height={60}
                  sizes="60px"
                  className="object-cover w-full h-full"
                  quality={70}
                />
              )}
            </button>
          );
        })}
      </div>

      {/* Main slider */}
      <div className="relative w-full overflow-hidden">
        {/* Top overlay controls */}
        <div className="absolute top-2 left-0 right-0 flex justify-between items-center px-3 z-10">
          {/* Left cluster */}
          <div className="flex items-center gap-2">
            <button
              onClick={(e) => {
                e.stopPropagation();
                if (typeof window !== "undefined") window.history.back();
              }}
              className="text-white text-sm bg-black/40 rounded-full px-2 py-1"
              aria-label="Back"
            >
              ‚Üê
            </button>
            {inBaskets > 0 && showBasketBadge && (
              <span className="bg-red-600 text-white text-xs font-bold px-2 py-1 rounded-full shadow ml-1">
                IN {inBaskets} BASKETS
              </span>
            )}
          </div>

          {/* Middle */}
          <span className="text-xs text-white bg-black/40 rounded-full px-2 py-0.5">
            {selectedIndex + 1} / {items.length}
          </span>

          {/* Right cluster ‚Äî Share */}
          <div className="relative" ref={shareRef}>
            <button
              onClick={(e) => {
                e.stopPropagation();
                setIsShareOpen((v) => !v);
              }}
              aria-label="Share product"
              className="bg-black/40 hover:bg-black/60 active:scale-95 transition text-white rounded-full p-2 md:p-2.5 flex items-center justify-center"
            >
              <FiShare2 className="text-base md:text-lg" />
            </button>

            {/* Popover */}
            {isShareOpen && (
              <div
                onClick={(e) => e.stopPropagation()}
                className="absolute right-0 mt-2 w-[min(92vw,360px)] rounded-xl shadow-xl border border-black/10 backdrop-blur bg-white/90 dark:bg-neutral-900/90 p-3 z-50"
              >
                <div className="flex items-center justify-between mb-2">
                  <p className="text-sm font-medium text-gray-700 dark:text-gray-200">Share</p>
                  <button
                    className="text-xs px-2 py-1 rounded-md bg.black/5 dark:bg-white/10"
                    onClick={() => setIsShareOpen(false)}
                  >
                    Close
                  </button>
                </div>

                {/* Quick Share / Copy */}
                <div className="flex items-center gap-2 mb-3">
                  <button
                    onClick={handleQuickShare}
                    className="text-xs px-3 py-1.5 rounded-md bg-black/80 text-white hover:bg-black"
                    aria-label="Quick share"
// ‚Ä¶truncated‚Ä¶

===== src/components/ProductDetailSection/ProductSliderOlds.jsx =====
"use client";

import React, { useState, useEffect, useRef } from "react";
import Image from "next/image";
import Modal from "react-modal";

const ProductSlider = ({ images = [], selectedColor }) => {
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [zoomPosition, setZoomPosition] = useState(null);
  const [bgGradient, setBgGradient] = useState(
    "linear-gradient(to bottom, #1f1f1f, #000)",
  );
  const imageContainerRef = useRef(null);

  const safeImages = Array.isArray(images)
    ? images.filter(
        (img) =>
          typeof img === "string" &&
          !img.toLowerCase().includes(".mp4") &&
          !img.toLowerCase().includes("video"),
      )
    : [];

  const safeImage = safeImages[selectedIndex] || "";

  const extractGradient = (src) => {
    const img = new window.Image();
    img.crossOrigin = "anonymous";
    img.src = src;

    img.onload = () => {
      const canvas = document.createElement("canvas");
      canvas.width = 20;
      canvas.height = 20;
      const ctx = canvas.getContext("2d");
      if (!ctx) return;

      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;

      let r = 0,
        g = 0,
        b = 0,
        count = 0;

      for (let i = 0; i < data.length; i += 4) {
        const red = data[i],
          green = data[i + 1],
          blue = data[i + 2];

        const isBlack = red < 25 && green < 25 && blue < 25;
        const isWhite = red > 240 && green > 240 && blue > 240;
        if (isBlack || isWhite) continue;

        r += red;
        g += green;
        b += blue;
        count++;
      }

      if (count > 0) {
        const avgColor = `rgb(${Math.floor(r / count)}, ${Math.floor(g / count)}, ${Math.floor(b / count)})`;
        setBgGradient(`linear-gradient(to bottom, ${avgColor}, #000)`);
      }
    };
  };

  useEffect(() => {
    if (safeImage) extractGradient(safeImage);
  }, [selectedIndex]);

  useEffect(() => {
    const listener = (e) => {
      const color = e.detail;
      const matchIndex = safeImages.findIndex((img) =>
        img.toLowerCase().includes(color),
      );
      if (matchIndex !== -1) setSelectedIndex(matchIndex);
    };

    window.addEventListener("updateSelectedColor", listener);
    return () => window.removeEventListener("updateSelectedColor", listener);
  }, [safeImages]);

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => setIsModalOpen(false);
  const nextImage = () =>
    setSelectedIndex((prev) => (prev + 1) % safeImages.length);
  const prevImage = () =>
    setSelectedIndex(
      (prev) => (prev - 1 + safeImages.length) % safeImages.length,
    );

  const handleMouseMove = (e) => {
    if (!imageContainerRef.current) return;
    const { left, top, width, height } =
      imageContainerRef.current.getBoundingClientRect();
    const x = Math.min(100, Math.max(0, ((e.clientX - left) / width) * 100));
    const y = Math.min(100, Math.max(0, ((e.clientY - top) / height) * 100));
    setZoomPosition({ x, y });
  };

  const handleMouseLeave = () => setZoomPosition(null);

  if (safeImages.length === 0) {
    return (
      <p className="text-center text-gray-500">No valid images available</p>
    );
  }

  return (
    <div className="text-center">
      <div
        ref={imageContainerRef}
        className="relative border rounded-md p-2 cursor-zoom-in flex justify-center items-center mx-auto overflow-hidden"
        style={{
          maxWidth: "588px",
          maxHeight: "588px",
          transition: "background 0.3s ease-in-out",
        }}
        onMouseMove={handleMouseMove}
        onMouseLeave={handleMouseLeave}
        onClick={openModal}
      >
        <Image
          src={safeImage}
          alt={`Product Image ${selectedIndex + 1}`}
          width={588}
          height={588}
          className="rounded-md object-contain w-full h-full"
          priority
        />

        {zoomPosition && (
          <div
            className="absolute pointer-events-none border-2 border-white rounded-full"
            style={{
              width: "120px",
              height: "120px",
              left: `calc(${zoomPosition.x}% - 60px)`,
              top: `calc(${zoomPosition.y}% - 60px)`,
              backgroundImage: `url(${safeImage})`,
              backgroundSize: "900% 900%",
              backgroundPosition: `${zoomPosition.x}% ${zoomPosition.y}%`,
              backgroundRepeat: "no-repeat",
              boxShadow: "0px 0px 10px rgba(255,255,255,0.5)",
              transform: "scale(1.1)",
              transition: "transform 0.1s ease-out",
            }}
          />
        )}
      </div>

      <div className="flex mt-2 justify-center space-x-2">
        {safeImages.map((img, i) => (
          <Image
            key={i}
            src={img}
            alt={`Thumb ${i + 1}`}
            width={60}
            height={60}
            className={`cursor-pointer rounded-md ${
              selectedIndex === i
                ? "border-2 border-green-500"
                : "border border-gray-300"
            }`}
            onClick={() => setSelectedIndex(i)}
          />
        ))}
      </div>

      <Modal
        isOpen={isModalOpen}
        onRequestClose={closeModal}
        contentLabel="Product Image Lightbox"
        className="fixed inset-0 flex items-center justify-center z-50"
        overlayClassName="fixed inset-0 backdrop-blur-md bg-black/30"
        ariaHideApp={false}
      >
        <div className="relative flex w-full h-full">
          <div className="hidden md:flex flex-col items-center space-y-2 p-4">
            {safeImages.map((img, i) => (
              <Image
                key={i}
                src={img}
                alt={`Thumb ${i + 1}`}
                width={60}
                height={60}
                className={`cursor-pointer rounded-md ${
                  selectedIndex === i
                    ? "border-2 border-orange-500"
                    : "opacity-60"
                }`}
                onClick={() => setSelectedIndex(i)}
              />
            ))}
          </div>

          <div className="flex-grow flex items-center justify-center relative">
            <button
              className="absolute top-4 right-4 text-white text-3xl bg-black bg-opacity-50 p-2 rounded-full"
              onClick={closeModal}
            >
              ‚úñ
            </button>
            <button
              className="absolute left-4 top-1/2 -translate-y-1/2 text-white text-3xl bg-black bg-opacity-50 p-3 rounded-full"
              onClick={prevImage}
            >
              ‚óÄ
            </button>
            <div className="flex justify-center items-center w-full h-full">
              <Image
                src={safeImage}
                alt={`Product Image ${selectedIndex + 1}`}
                width={1200}
                height={900}
                className="rounded-md object-contain"
                style={{ maxWidth: "90vw", maxHeight: "90vh" }}
                priority
              />
            </div>
            <button
              className="absolute right-4 top-1/2 -translate-y-1/2 text-white text-3xl bg-black bg-opacity-50 p-3 rounded-full"
              onClick={nextImage}
            >
              ‚ñ∂
            </button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default ProductSlider;


===== src/components/ProductDetailSection/ReviewsPreview.jsx =====
"use client";

function Stars({ n }) {
  const full = Math.floor(n);
  const empty = 5 - full;
  return (
    <div className="text-yellow-500 text-sm">
      {"‚òÖ".repeat(full)}
      {"‚òÜ".repeat(empty)}
    </div>
  );
}

export default function ReviewsPreview({ reviews, onSeeAll }) {
  const top = reviews.slice(0, 2);

  return (
    <div className="rounded-xl border border-gray-200 p-4 space-y-3">
      {top.length === 0 ? (
        <p className="text-sm text-gray-600">No reviews yet.</p>
      ) : (
        top.map((r) => (
          <article
            key={r.id}
            className="border-b last:border-b-0 pb-3 last:pb-0"
          >
            <div className="flex items-center gap-2">
              <Stars n={r.rating} />
              <span className="text-xs text-gray-500">{r.date}</span>
            </div>
            <div className="text-sm font-medium text-gray-900">{r.author}</div>
            <p className="text-sm text-gray-700 mt-1 line-clamp-3">{r.text}</p>
          </article>
        ))
      )}

      <button
        onClick={onSeeAll}
        className="text-sm font-medium text-[#8710D8] hover:underline"
      >
        See all reviews
      </button>
    </div>
  );
}

===== src/components/ProductDetailSection/SellerCard.jsx =====
'use client';

import React from 'react';
import Link from 'next/link';

export default function SellerCard({
  shop,          // { slug, name }
  user,          // { username, town, country }
  secondaryData, // { sold_count }
  reviewStats,   // { average_rating, review_count }
}) {
  const sold = secondaryData?.sold_count;
  const rating = Number(reviewStats?.average_rating || 0);
  const count  = Number(reviewStats?.review_count || 0);

  return (
    <div className="p-4 border rounded-xl bg-white space-y-1">
      <div className="text-sm text-gray-600">
        {sold > 0 && <b>{sold} sold</b>} {sold > 0 && ' ‚Äî '}
        {shop ? (
          <>Visit <Link className="text-[#8710D8] font-semibold hover:underline" href={`/shops/${shop.slug}`}>{shop.name}</Link></>
        ) : (
          <b className="text-[#8710D8]">{user?.username}</b>
        )}{' '}
        ‚Äî {user?.town}, {user?.country}
      </div>

      {count > 0 && (
        <a href="#reviews" className="inline-flex items-center gap-1 text-sm text-gray-700 hover:underline">
          <span className="text-yellow-500">
            {'‚≠ê'.repeat(Math.floor(rating))}
            {rating % 1 >= 0.5 && '‚òÜ'}
          </span>
          <span className="font-medium">{rating.toFixed(1)}</span>
          <span className="text-gray-500">({count} reviews)</span>
        </a>
      )}
    </div>
  );
}

===== src/components/ProductDetailSection/SpecificsTableWithIcons.jsx =====
"use client";

export default function SpecificsTableWithIcons({ rows }) {
  return (
    <div className="rounded-xl border border-gray-200 overflow-hidden">
      <table className="w-full text-sm">
        <tbody>
          {rows.map((r, i) => (
            <tr key={i} className="border-b last:border-b-0">
              <th className="w-44 md:w-56 bg-gray-50 px-3 py-3 text-gray-600 font-medium text-left">
                <div className="flex items-center gap-2">
                  {r.icon}
                  <span>{r.label}</span>
                </div>
              </th>
              <td className="px-3 py-3 text-gray-900">{r.value ?? "‚Äî"}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

===== src/components/ProductDetailSection/StickyPriceBar.jsx =====
'use client';

import React from 'react';

export default function StickyPriceBar({
  symbol = '‚Çµ',
  activePrice,     // string e.g. "129.99"
  onBuyNow,        // () => void
}) {
  if (!activePrice) return null;
  return (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg p-3 flex items-center justify-between md:hidden z-50">
      <div className="text-lg font-bold">{symbol}{activePrice}</div>
      <button
        onClick={onBuyNow}
        className="px-5 py-2 rounded-full bg-violet-600 text-white font-semibold"
      >
        Buy Now
      </button>
    </div>
  );
}

===== src/components/ProductDetailSection/TrustBadges.jsx =====
'use client';

import React from 'react';
import { FaCcVisa, FaCcMastercard, FaShieldAlt } from 'react-icons/fa';
import { SiGooglepay } from 'react-icons/si';

export default function TrustBadges() {
  return (
    <div className="pt-2 flex items-center gap-3 text-gray-700">
      <FaShieldAlt className="text-xl" title="Buyer Protection" />
      <SiGooglepay className="text-2xl" title="Google Pay" />
      <FaCcVisa className="text-2xl" title="Visa" />
      <FaCcMastercard className="text-2xl" title="Mastercard" />
    </div>
  );
}

===== src/components/ProductDetailSection/UnavailableProduct.jsx =====
// components/ProductDetailSection/UnavailableProduct.jsx
export default function UnavailableProduct({ statusCode = 404 }) {
  return (
    <div className="w-full max-w-3xl mx-auto py-12 px-4 text-center">
      <div className="bg-yellow-100 border border-yellow-300 rounded-md p-6">
        <p className="text-yellow-800 text-xl font-semibold flex items-center justify-center gap-2">
          ‚ö†Ô∏è This product is currently unavailable on Upfrica
        </p>
        <p className="mt-2 text-gray-700">
          Due to platform or policy guidelines, this product cannot be displayed or purchased at this time.
        </p>
        <div className="mt-6">
          <a
            href="/"
            className="inline-block bg-white border border-gray-300 rounded-lg px-5 py-2 text-purple-600 font-medium hover:underline"
          >
            Continue shopping
          </a>
        </div>
        <p className="text-sm text-gray-400 mt-4">Error code: {statusCode}</p>
      </div>
    </div>
  );
}

===== src/components/ProductList.server.jsx =====


===== src/components/RatingSection.jsx =====
import React from "react";
// Import arrow, full star, half star, and empty star icons from react-icons
import { FaArrowRight, FaStar, FaStarHalfAlt, FaRegStar } from "react-icons/fa";

const RatingSection = ({ rating = 4.5 }) => {
  // Create an array of 5 stars based on the rating value
  const stars = [];
  for (let i = 1; i <= 5; i++) {
    if (rating >= i) {
      // Full star
      stars.push(<FaStar key={i} className="text-yellow-300" />);
    } else if (rating >= i - 0.5) {
      // Half star
      stars.push(<FaStarHalfAlt key={i} className="text-yellow-300" />);
    } else {
      // Empty star
      stars.push(<FaRegStar key={i} className="text-yellow-300" />);
    }
  }

  return (
    <div className="flex items-center space-x-2">
      {/* Right arrow icon */}
      <FaArrowRight className="text-gray-500" />

      {/* Rating value */}
      <span className="text-lg font-semibold text-gray-800">{rating}</span>

      {/* Five star icons */}
      <div className="flex space-x-1">{stars}</div>

      {/* Reviews text */}
      <span className="text-base lg:text-lg text-blue-600 underline">
        245 Reviews
      </span>
    </div>
  );
};

export default RatingSection;


===== src/components/RecentlyViewed.js =====
"use client";

import { useEffect } from "react";

const RECENTLY_VIEWED_KEY = "upfricaRecentlyViewed";

const RecentlyViewed = ({ product }) => {
  // console.log("new recently vew product", product);
  useEffect(() => {
    if (!product?.id || typeof window === "undefined") return;

    console.log("new recently viewed product", product);

    const safeProduct = {
      id: product.id,
      title: product.title,
      slug: product.slug,
      seo_slug: product.seo_slug,
      category: product.category ? { slug: product.category.slug } : null,
      product_images: product.product_images,
      price_cents: product.price_cents,
      price_currency: product.price_currency,
      sale_price_cents: product.sale_price_cents,
      sale_end_date: product.sale_end_date,
      seller_country: product.seller_country,
      seller_town: product.seller_town,
      on_sales: product.on_sales,
    };

    try {
      const stored = localStorage.getItem(RECENTLY_VIEWED_KEY);
      let viewedItems = stored ? JSON.parse(stored) : [];

      viewedItems = viewedItems.filter((item) => item.id !== safeProduct.id);
      viewedItems.unshift(safeProduct);

      if (viewedItems.length > 10) {
        viewedItems = viewedItems.slice(0, 10);
      }

      localStorage.setItem(RECENTLY_VIEWED_KEY, JSON.stringify(viewedItems));
    } catch (e) {
      console.warn("Failed to update recently viewed:", e);
    }
  }, [product?.id]); // Only trigger when product ID changes

  return null;
};

export default RecentlyViewed;


===== src/components/SalesEndSection/SalesEndSection.jsx =====
import React from "react";
import { AiFillThunderbolt } from "react-icons/ai";

const SalesEndSection = ({ days, seconds, minutes }) => {
  return (
    <div className="flex  items-center gap-2 text-base text-[#CC0C39] font-bold">
      <div className="flex items-center bg-[#CC0C39] rounded-md px-2">
        <AiFillThunderbolt className="text-white" />
        <button className="  text-white">Sales</button>
      </div>
      <span>
        {" "}
        <span></span>ends in
      </span>
      <span>{days}</span>
      <span>days</span>
      <span>{minutes}</span> :<span>{seconds}</span>
    </div>
  );
};

export default SalesEndSection;


===== src/components/SellectedItem.jsx =====
// import React from 'react';
// import ProductCard from './home/ProductList/ProductCard';

// const SellectedItem = async () => {
//   try {
//     const res = await fetch("https://media.upfrica.com/api/product-list/trending-machines/", {
//       next: { revalidate: 120 }, // Revalidate every 2 minutes
//     });

//     // Handle HTTP errors
//     if (!res.ok) {
//       console.error("HTTP error:", res.status);
//       const errorText = await res.text();
//       console.error("Error details:", errorText);
//       return (
//         <div className="container mx-auto px-6 py-12 text-center">
//           <h1 className="text-2xl font-bold text-red-600">Error fetching products</h1>
//           <p className="text-gray-700">Status Code: {res.status}</p>
//           <pre className="bg-gray-100 p-4 rounded-md text-gray-600">{errorText}</pre>
//         </div>
//       );
//     }

//     // Parse JSON response
//     const text = await res.text();
//     console.log("text product",text);

//     let productsData;
//     try {
//       productsData = JSON.parse(text);
//     } catch (error) {
//       console.error("Error parsing JSON:", error);
//       return (
//         <div className="container mx-auto px-6 py-12 text-center">
//           <h1 className="text-2xl font-bold text-red-600">Error parsing product data</h1>
//           <p className="text-gray-700">{error.message}</p>
//         </div>
//       );
//     }

//     // Handle case where there are no products
//     // if (!productsData?.products || productsData.products.length === 0) {
//     //   return (
//     //     <div className="container mx-auto px-6 py-12 text-center">
//     //       <h1 className="text-2xl font-bold text-gray-900">Selected for you</h1>
//     //       <p className="text-gray-600">No products available at the moment.</p>
//     //     </div>
//     //   );
//     // }

//     return (
//       <div className="container mx-auto px-6 py-12 bg-white rounded-lg">
//         {/* Section Title */}
//         <div className="mb-6">
//           <h1 className="text-xl md:text-3xl font-extrabold tracking-wide text-gray-900">
//             Selected for You
//           </h1>
//         </div>

//         {/* Product Grid */}
//         <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-6 gap-6">
//           {productsData.products.map((product) => (
//             <ProductCard key={product.id} product={product} />
//           ))}
//         </div>
//       </div>
//     );
//   } catch (error) {
//     console.error("Unexpected error:", error);
//     return (
//       <div className="container mx-auto px-6 py-12 text-center">
//         <h1 className="text-2xl font-bold text-red-600">Unexpected Error</h1>
//         <p className="text-gray-700">{error.message}</p>
//       </div>
//     );
//   }
// };

// export default SellectedItem;

import React from "react";
import ProductCard from "./home/ProductList/ProductCard";
import { IoIosArrowRoundForward } from "react-icons/io";

const SellectedItem = async () => {
  try {
    //const res = await fetch("https://media.upfrica.com/api/product-list/trending-machines/", {
    const res = await fetch(
      "http://127.0.0.1:8000/api/product-list/trending-machines/",
      {
        next: { revalidate: 120 }, // Revalidate every 2 minutes
      },
    );

    // Handle HTTP errors
    if (!res.ok) {
      console.error("HTTP error:", res.status);
      const errorText = await res.text();
      console.error("Error details:", errorText);
      return (
        <div className="container mx-auto px-6 py-12 text-center">
          <h1 className="text-2xl font-bold text-red-600">
            Error fetching products
          </h1>
          <p className="text-gray-700">Status Code: {res.status}</p>
          <pre className="bg-gray-100 p-4 rounded-md text-gray-600">
            {errorText}
          </pre>
        </div>
      );
    }

    // Parse JSON response
    const text = await res.text();
    // console.log("text product", text);

    let productsData;
    try {
      productsData = JSON.parse(text);
    } catch (error) {
      console.error("Error parsing JSON:", error);
      return (
        <div className="container mx-auto px-6 py-12 text-center">
          <h1 className="text-2xl font-bold text-red-600">
            Error parsing product data
          </h1>
          <p className="text-gray-700">{error.message}</p>
        </div>
      );
    }

    // Handle case where there are no products in results
    if (!productsData?.results || productsData.results.length === 0) {
      return (
        <div className="container mx-auto px-6 py-12 text-center">
          <h1 className="text-2xl font-bold text-gray-900">Selected for You</h1>
          <p className="text-gray-600">No products available at the moment.</p>
        </div>
      );
    }

    return (
      <div className="container   py-12 bg-white rounded-lg">
        {/* Section Title */}
        <div className="mb-4 lg:mb-8">
          <div className=" pb-2 lg:pb-4">
            <h1 className="text-xl md:text-3xl font-extrabold text-gray-900 tracking-wide">
              Trending in <br className="hidden lg:inline" />
              <span className="flex gap-2 lg:gap-4 items-center justify-between md:justify-start">
                Machines Today
                <IoIosArrowRoundForward className="h-10 w-10 text-gray-700" />
              </span>
            </h1>
          </div>
          {/* <p className="text-xl font-normal text-gray-500">All with Free Delivery</p> */}
        </div>

        {/* Product Grid */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-6 gap-3 lg:gap-5">
          {productsData.results.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </div>
      </div>
    );
  } catch (error) {
    console.error("Unexpected error:", error);
    return (
      <div className="container mx-auto px-6 py-12 text-center">
        <h1 className="text-2xl font-bold text-red-600">Unexpected Error</h1>
        <p className="text-gray-700">{error.message}</p>
      </div>
    );
  }
};

export default SellectedItem;


===== src/components/Selling.jsx =====
import Link from "next/link";
import React from "react";

const Selling = ({ color }) => {
  return (
    <div
      className={`container mx-auto   grid md:grid-cols-3 items-center py-8 lg:py-12  px-6 lg:px-14 text-white rounded-[40px]  md:my-10 gap-6 ${
        color ? "bg-[#0A8800]" : "bg-black"
      }`}
    >
      {/* Text Section */}
      <div className="md:col-span-2 space-y-4 text-center md:text-left">
        <h1 className="text-2xl md:text-4xl font-extrabold leading-snug text-gray-200">
          Selling Locally? List for Free!
        </h1>
        <p className="text-lg md:text-2xl font-medium leading-relaxed">
          No sale, no fee. From electronics and tech to fashion, start making
          money across various categories today.
        </p>
      </div>

      {/* Button Section */}
      <div className="flex md:justify-end justify-center">
        <Link href="/products/new">
          <button className="font-semibold text-black bg-white px-8 md:px-10 py-3 md:py-4 rounded-full text-base md:text-lg transition-transform transform hover:scale-105 hover:shadow-lg">
            Start Selling
          </button>
        </Link>
      </div>
    </div>
  );
};

export default Selling;


===== src/components/ShopFAQSection.jsx =====
// components/ShopFAQSection.jsx
"use client";

import React, { useEffect, useMemo, useState } from "react";
import { HiChevronDown } from "react-icons/hi";
import { BASE_API_URL } from "@/app/constants";

/** Strip simple HTML and parse Q:/A: blocks into [{question, answer}] */
function parseQAFromRichText(text = "") {
  if (!text) return [];
  const plain = text.replace(/<[^>]*>/g, "\n").replace(/\n{2,}/g, "\n").trim();
  const lines = plain.split("\n").map((l) => l.trim());
  const out = [];
  let cur = null;

  for (const line of lines) {
    if (/^Q[:Ôºö]/i.test(line)) {
      if (cur && cur.question && cur.answer) out.push(cur);
      cur = { question: line.replace(/^Q[:Ôºö]\s*/i, "").trim(), answer: "" };
    } else if (/^A[:Ôºö]/i.test(line) && cur) {
      cur.answer = line.replace(/^A[:Ôºö]\s*/i, "").trim();
    } else if (cur) {
      cur.answer = (cur.answer ? cur.answer + " " : "") + line;
    }
  }
  if (cur && cur.question && cur.answer) out.push(cur);
  return out.filter((f) => f.question && f.answer);
}

function normalizeFaqArray(arr) {
  const seen = new Set();
  return (Array.isArray(arr) ? arr : [])
    .map((f) => ({
      question: String(f?.question ?? "").trim(),
      answer: String(f?.answer ?? "").trim(),
    }))
    .filter((f) => f.question && f.answer)
    .filter((f) => {
      const key = f.question.toLowerCase();
      if (seen.has(key)) return false;
      seen.add(key);
      return true;
    })
    .slice(0, 10);
}

export default function ShopFAQSection({
  shop,
  faqs: faqsFromApi,           // optional, from server
  faqSchema: faqSchemaFromApi, // optional, from server
  className = "",
  emitSchema = false,          // üî∏ NEW: default off to avoid duplicate JSON-LD
}) {
  const [remoteFaqs, setRemoteFaqs] = useState(null);
  const [remoteSchema, setRemoteSchema] = useState(null);

  const slug = shop?.slug;

  // If not provided by the page, fetch the public FAQs endpoint on the client.
  useEffect(() => {
    let cancelled = false;
    async function go() {
      if (faqsFromApi?.length || !slug) return;
      try {
        const res = await fetch(`${BASE_API_URL}/api/shops/${slug}/faqs/`, {
          cache: "no-store",
        });
        if (!res.ok) return;
        const json = await res.json();
        if (!cancelled) {
          setRemoteFaqs(normalizeFaqArray(json?.faqs));
          setRemoteSchema(json?.faq_schema || null);
        }
      } catch {
        // ignore ‚Äî fallbacks will handle it
      }
    }
    go();
    return () => {
      cancelled = true;
    };
  }, [slug, faqsFromApi]);

  const shopName = shop?.name || "This Shop";
  const town = shop?.user?.town || "your town";
  const country = shop?.user?.country_name || shop?.user?.country || "your country";
  const shopType = shop?.shoptype?.name || "store";

  const deliveryWindow =
    shop?.shop_attributes?.delivery_window ||
    shop?.shop_attributes?.delivery_time ||
    "1‚Äì5 days";

  const faqs = useMemo(() => {
    // 1) prefer incoming server FAQs (SSR) or client-fetched FAQs
    const api = normalizeFaqArray(faqsFromApi ?? remoteFaqs);
    if (api.length) return api;

    // 2) JSON attributes saved on the Shop
    const fromJson = normalizeFaqArray(shop?.shop_attributes?.faqs);
    if (fromJson.length) return fromJson;

    // 3) Rich text Q:/A:
    const fromRT = parseQAFromRichText(shop?.answers || "");
    if (fromRT.length) return fromRT;

    // 4) sensible SEO-friendly defaults
    return [
      {
        question: `How long does delivery take from ${shopName} in ${town}?`,
        answer: `Delivery from ${shopName} usually takes ${deliveryWindow} within ${town}, ${country}. We partner with reliable logistics companies to ensure timely delivery.`,
      },
      {
        question: `Does ${shopName} offer returns or exchanges?`,
        answer: `Yes. ${shopName} accepts returns or exchanges within 7 days if the item is defective or not as described.`,
      },
      {
        question: `Is payment on delivery available at ${shopName}?`,
        answer: `${shopName} supports secure online payments. Some products may allow pay-on-delivery, depending on your location in ${country}.`,
      },
      {
        question: `What kind of products does ${shopName} sell?`,
        answer: `${shopName} is a trusted ${shopType} in ${town}, offering authentic, high-quality items at competitive prices.`,
      },
      {
        question: `Can I contact ${shopName} for wholesale or bulk orders?`,
        answer: `Absolutely. ${shopName} offers wholesale pricing and bulk deals. Contact us via the "Contact Seller" button above.`,
      },
    ];
  }, [faqsFromApi, remoteFaqs, shop, shopName, town, country, shopType, deliveryWindow]);

  const faqSchema = useMemo(() => {
    // prefer schema returned by API (SSR or client) else build from final list
    const provided = faqSchemaFromApi || remoteSchema;
    if (provided && provided.mainEntity?.length) return provided;

    const top = faqs.slice(0, 6);
    return {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      mainEntity: top.map((f) => ({
        "@type": "Question",
        name: f.question,
        acceptedAnswer: { "@type": "Answer", text: f.answer },
      })),
    };
  }, [faqSchemaFromApi, remoteSchema, faqs]);

  if (!faqs.length) return null;

  return (
    <section className={`mt-12 ${className}`} id="shop-faq" aria-labelledby="shop-faq-title">
      <h2 id="shop-faq-title" className="text-2xl font-bold mb-6">
        Frequently Asked Questions
      </h2>

      <div className="space-y-4">
        {faqs.map((faq, idx) => (
          <details
            key={`${idx}-${faq.question.slice(0, 24)}`}
            className="group border border-gray-300 rounded-md p-4 bg-white shadow-sm"
          >
            <summary className="flex justify-between items-center cursor-pointer font-medium text-gray-800">
              <span className="pr-3">{faq.question}</span>
              <HiChevronDown className="w-5 h-5 shrink-0 transform group-open:rotate-180 transition-transform duration-200" />
            </summary>
            <p className="mt-2 text-sm text-gray-700">{faq.answer}</p>
          </details>
        ))}
      </div>

      {/* JSON-LD Schema Markup (optional) */}
      {emitSchema && (
        <script
          type="application/ld+json"
          // compact to reduce hydration noise
          dangerouslySetInnerHTML={{ __html: JSON.stringify(faqSchema) }}
        />
      )}
    </section>
  );
}

===== src/components/ShopRichArticle.jsx =====
// components/ShopRichArticle.jsx
"use client";

import React, { useMemo, useState } from "react";

function slugify(txt) {
  return String(txt || "")
    .toLowerCase()
    .replace(/<\/?[^>]+(>|$)/g, "")       // strip tags
    .replace(/&[a-z]+;/g, "-")            // entities
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)/g, "")
    .slice(0, 80);
}

/** Inject ids into h2/h3 so TOC links work */
function addHeadingIds(html) {
  const used = new Set();
  return (html || "").replace(
    /<h([23])([^>]*)>([\s\S]*?)<\/h\1>/gi,
    (_m, lvl, attrs, inner) => {
      let idMatch = attrs.match(/\sid=["']([^"']+)["']/i);
      let id = idMatch?.[1] || slugify(inner);
      while (used.has(id)) id = `${id}-x`;
      used.add(id);
      const newAttrs = attrs.includes(" id=") ? attrs : `${attrs} id="${id}"`;
      return `<h${lvl}${newAttrs}>${inner}</h${lvl}>`;
    }
  );
}

/** Extract [ {id, text, level} ] from H2/H3 for a mini TOC */
function extractToc(html) {
  const out = [];
  const re = /<h([23])[^>]*id=["']([^"']+)["'][^>]*>([\s\S]*?)<\/h\1>/gi;
  let m;
  while ((m = re.exec(html))) {
    const [, level, id, inner] = m;
    const text = inner.replace(/<[^>]+>/g, "").trim();
    if (text) out.push({ id, text, level: Number(level) });
  }
  return out;
}

export default function ShopRichArticle({
  html,
  schema,
  className = "",
  collapsed = true,           // start collapsed
  maxHeight = 560,            // px height when collapsed
  showToc = true,
}) {
  const [open, setOpen] = useState(!collapsed);

  // Ensure headings have ids for in-page anchors
  const htmlWithIds = useMemo(() => addHeadingIds(html || ""), [html]);

  // Build TOC once ids are present
  const toc = useMemo(() => extractToc(htmlWithIds), [htmlWithIds]);

  if (!html) return null;

  return (
    <section
      className={`mt-10 ${className}`}
      itemScope
      itemType="https://schema.org/Article"
    >
      {/* Optional mini Table of Contents */}
      {showToc && toc.length > 0 && (
        <nav
          aria-label="Table of contents"
          className="mx-auto max-w-4xl mb-4 rounded-lg border bg-white p-3 text-sm shadow-sm"
        >
          <div className="font-semibold mb-2">On this page</div>
          <ul className="list-disc pl-5 space-y-1">
            {toc.map(({ id, text, level }) => (
              <li key={id} className={level === 3 ? "ml-4 list-[circle]" : ""}>
                <a
                  href={`#${id}`}
                  className="text-violet-700 hover:underline"
                >
                  {text}
                </a>
              </li>
            ))}
          </ul>
        </nav>
      )}

      {/* Article body: FULL HTML is rendered for SEO */}
      <div className="mx-auto max-w-4xl">
        <div
          className={`prose prose-lg dark:prose-invert max-w-none relative transition-[max-height] duration-300 border rounded-md bg-white shadow-sm p-5`}
          style={
            open
              ? undefined
              : { maxHeight, overflow: "hidden" }
          }
          // eslint-disable-next-line react/no-danger
          dangerouslySetInnerHTML={{ __html: htmlWithIds }}
        />

        {/* Gradient & button only when clamped */}
        {!open && (
          <div className="relative -mt-24 pt-24">
            <div className="pointer-events-none absolute inset-x-0 -top-24 h-24 bg-gradient-to-b from-transparent to-white dark:to-slate-950" />
            <div className="flex justify-center">
              <button
                type="button"
                onClick={() => setOpen(true)}
                className="px-4 py-2 rounded-full bg-neutral-900 text-white dark:bg-white dark:text-neutral-900 text-sm font-medium shadow"
                aria-expanded={open}
              >
                Read more
              </button>
            </div>
          </div>
        )}

        {open && (
          <div className="flex justify-center mt-3">
            <button
              type="button"
              onClick={() => setOpen(false)}
              className="px-3 py-1.5 rounded-full text-sm border hover:bg-gray-50"
              aria-expanded={open}
            >
              Show less
            </button>
          </div>
        )}
      </div>

      {/* JSON-LD */}
      {schema && (
        <script
          type="application/ld+json"
          suppressHydrationWarning
          // eslint-disable-next-line react/no-danger
          dangerouslySetInnerHTML={{ __html: JSON.stringify(schema) }}
        />
      )}
    </section>
  );
}

===== src/components/Sidebar/Sidebar.jsx =====
// components/Sidebar.tsx
import Link from "next/link";
import { BiPerson, BiBookmarkHeart, BiGear } from "react-icons/bi"; // react-icons

export default function Sidebar() {
  return (
    <div
      className="card"
      style={{ width: "100%", background: "#f8f9fa", borderRadius: "10px" }}
    >
      <div className="card-body p-3">
        <div className="text-center mb-3">
          <div
            className="avatar rounded-circle mb-2"
            style={{
              width: "60px",
              height: "60px",
              backgroundColor: "#dee2e6",
              margin: "0 auto",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              borderRadius: "50%",
              // fontSize: '28px',
            }}
          >
            <BiPerson />
          </div>
          <h6 className="mb-0">Srikanto</h6>
          <span className="text-muted small">Welcome back</span>
          <hr />
        </div>

        <ul className="nav flex-column">
          <li className="nav-item mb-2">
            <Link
              href="/dashboard"
              className="nav-link d-flex align-items-center text-dark"
            >
              <BiPerson className="me-2" /> Dashboard
            </Link>
          </li>
          <li className="nav-item mb-2">
            <Link
              href="/users/srikanto/collection"
              className="nav-link d-flex align-items-center text-dark"
            >
              <BiBookmarkHeart className="me-2" /> My Saved Items
            </Link>
          </li>
          <li className="nav-item">
            <Link
              href="/edit.srikanto"
              className="nav-link d-flex align-items-center text-dark"
            >
              <BiGear className="me-2" /> Profile Settings
            </Link>
          </li>
        </ul>
      </div>
    </div>
  );
}


===== src/components/Slider.jsx =====
// 'use client';
// import React, { useState } from "react";
// import "react-image-lightbox/style.css";
// import Lightbox from "react-image-lightbox";
// // import Slider from 'react-slick';
// // import ReactImageMagnify from 'react-image-magnify';
// // import 'slick-carousel/slick/slick.css';
// // import 'slick-carousel/slick/slick-theme.css';

// const ImageSliderWithMagnify = ({ product_images }) => {
//   const [isOpen, setIsOpen] = useState(false);
//   const [photoIndex, setPhotoIndex] = useState(0);
//   // const [currentImageIndex, setCurrentImageIndex] = useState(0);

//   // const sliderSettings = {
//   //   dots: true,
//   //   infinite: true,
//   //   speed: 500,
//   //   slidesToShow: 3, // ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶õ‡ßã‡¶ü ‡¶á‡¶Æ‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
//   //   slidesToScroll: 1,
//   //   centerMode: true,
//   //   centerPadding: '10px',
//   // };

//   return (
//     <div className="flex flex-col items-center mt-5  w-full">
//       {/* Main Image */}
//       {product_images && product_images.length > 0 && (
//         <div className="mb-4">
//           <img
//             className="lg:h-[700px] w-full object-cover cursor-pointer rounded-md"
//             src={product_images[photoIndex]}
//             alt={`Product ${photoIndex}`}
//             onClick={() => setIsOpen(true)}
//           />
//         </div>
//       )}

//       {/* Thumbnail Images */}
//       {product_images && product_images.length > 1 && (
//         <div className="grid grid-cols-4 gap-2">
//           {product_images.map((img, index) => (
//             <img
//               key={index}
//               className={`h-[75px] w-[75px] object-cover rounded-md cursor-pointer border-2 ${photoIndex === index ? "border-purple-500" : "border-gray-300"
//                 }`}
//               src={img}
//               alt={`Thumbnail ${index}`}
//               onClick={() => setPhotoIndex(index)}
//             />
//           ))}
//         </div>
//       )}

//       {/* Lightbox */}
//       {isOpen && (
//         <Lightbox
//           mainSrc={product_images[photoIndex]}
//           nextSrc={product_images[(photoIndex + 1) % product_images.length]}
//           prevSrc={
//             product_images[
//             (photoIndex + product_images.length - 1) % product_images.length
//             ]
//           }
//           onCloseRequest={() => setIsOpen(false)}
//           onMovePrevRequest={() =>
//             setPhotoIndex(
//               (photoIndex + product_images.length - 1) % product_images.length
//             )
//           }
//           onMoveNextRequest={() =>
//             setPhotoIndex((photoIndex + 1) % product_images.length)
//           }
//         />
//       )}
//     </div>
//   );
// };

// export default ImageSliderWithMagnify;
// // 'use client'
// // import React, { useState } from 'react';

// // const ProductGallery = ({ images = [] }) => {
// //   // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶á‡¶Æ‡ßá‡¶ú‡¶ü‡¶ø ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶≠ ‡¶π‡¶¨‡ßá
// //   const [activeImage, setActiveImage] = useState(images[0]);
// //   // ‡¶π‡ßã‡¶≠‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ú‡ßÅ‡¶Æ ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶á‡¶´‡ßá‡¶ï‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø state
// //   const [isHovered, setIsHovered] = useState(false);
// //   // ‡¶Æ‡ßá‡¶á‡¶® ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶Æ‡¶æ‡¶â‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® (‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂‡ßá) ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø state
// //   const [zoomPos, setZoomPos] = useState({ x: 50, y: 50 });

// //   // ‡¶Æ‡ßá‡¶á‡¶® ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶Ç‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞ (bounding box) ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Æ‡¶æ‡¶â‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® (‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂‡ßá) ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º
// //   const handleMouseMove = (e) => {
// //     const rect = e.currentTarget.getBoundingClientRect();
// //     const x = ((e.clientX - rect.left) / rect.width) * 100;
// //     const y = ((e.clientY - rect.top) / rect.height) * 100;
// //     setZoomPos({ x, y });
// //   };

// //   return (
// //     <div className="flex flex-col items-center">
// //       {/* ‡¶Æ‡ßá‡¶á‡¶® ‡¶á‡¶Æ‡ßá‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶ú‡ßÅ‡¶Æ ‡¶¨‡¶ï‡ßç‡¶∏ ‡¶è‡¶ï‡¶á ‡¶∞‡ßã‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá */}
// //       <div className="flex flex-row items-center gap-4">
// //         {/* ‡¶Æ‡ßá‡¶á‡¶® ‡¶á‡¶Æ‡ßá‡¶ú ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‚Äì ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ ‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶• ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶° (w-80 h-80) */}
// //         <div
// //           className="relative w-80 h-80 overflow-hidden border rounded shadow-sm"
// //           onMouseEnter={() => setIsHovered(true)}
// //           onMouseLeave={() => setIsHovered(false)}
// //           onMouseMove={handleMouseMove}
// //         >
// //           <img
// //             src={activeImage}
// //             alt="Product"
// //             className="w-full h-full object-contain"
// //           />
// //         </div>

// //         {/* ‡¶ú‡ßÅ‡¶Æ ‡¶¨‡¶ï‡ßç‡¶∏: ‡¶è‡¶ï‡¶á ‡¶∏‡¶æ‡¶á‡¶ú‡ßá‡¶∞ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶° ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞, ‡¶Ø‡¶æ ‡¶°‡¶æ‡¶® ‡¶™‡¶æ‡¶∂‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá */}
// //         <div className="w-80 h-80 border rounded shadow-sm">
// //           {isHovered && (
// //             <div
// //               className="w-full h-full"
// //               style={{
// //                 backgroundImage: `url(${activeImage})`,
// //                 backgroundSize: '200%', // 200% ‡¶Æ‡¶æ‡¶®‡ßá ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ 2 ‡¶ó‡ßÅ‡¶£ ‡¶ú‡ßÅ‡¶Æ
// //                 backgroundPosition: `${zoomPos.x}% ${zoomPos.y}%`,
// //                 transition: 'background-position 0.15s ease',
// //               }}
// //             />
// //           )}
// //         </div>
// //       </div>

// //       {/* ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤‡¶∏ */}
// //       <div className="flex space-x-2 mt-4">
// //         {images.map((img, idx) => (
// //           <button
// //             key={idx}
// //             onClick={() => setActiveImage(img)}
// //             className={`border rounded focus:outline-none ${
// //               activeImage === img ? 'border-blue-500' : 'border-transparent'
// //             }`}
// //           >
// //             <img
// //               src={img}
// //               alt={`Thumbnail ${idx}`}
// //               className="w-16 h-16 object-cover"
// //             />
// //           </button>
// //         ))}
// //       </div>
// //     </div>
// //   );
// // };

// // export default ProductGallery;

"use client";
import React, { useState } from "react";

const ProductGallery = ({ images = [] }) => {
  // The first image is active by default.
  const [activeImage, setActiveImage] = useState(images[0]);
  // State for handling zoom (hover effect)
  const [isZoomed, setIsZoomed] = useState(false);
  const [zoomPos, setZoomPos] = useState({ x: 0, y: 0 });

  // When the mouse moves over the main image, calculate the percentage position
  const handleMouseMove = (e) => {
    const { left, top, width, height } =
      e.currentTarget.getBoundingClientRect();
    const x = ((e.clientX - left) / width) * 100;
    const y = ((e.clientY - top) / height) * 100;
    setZoomPos({ x, y });
  };

  return (
    <div className="flex flex-col items-center ">
      {/* Main Image Container */}
      <div
        className="relative w-full lg:max-w-xl  overflow-hidden border rounded shadow-sm"
        onMouseEnter={() => setIsZoomed(true)}
        onMouseLeave={() => setIsZoomed(false)}
        onMouseMove={handleMouseMove}
      >
        {/* Main image */}
        <img
          src={activeImage}
          alt="Product"
          className="w-full object-contain"
        />
        {/* Zoom overlay (only visible on hover) */}
        {isZoomed && (
          <div
            className="absolute inset-0 pointer-events-none"
            style={{
              backgroundImage: `url(${activeImage})`,
              backgroundSize: "200%",
              backgroundPosition: `${zoomPos.x}% ${zoomPos.y}%`,
              opacity: 0.8,
              transition: "opacity 0.15s ease",
            }}
          />
        )}
      </div>

      {/* Thumbnails */}
      <div className="flex space-x-2 mt-4">
        {images.map((img, idx) => (
          <button
            key={idx}
            onClick={() => setActiveImage(img)}
            className={`border rounded focus:outline-none ${
              activeImage === img ? "border-blue-500" : "border-transparent"
            }`}
          >
            <img
              src={img}
              alt={`Thumbnail ${idx}`}
              className="w-16 h-16 object-cover"
            />
          </button>
        ))}
      </div>
    </div>
  );
};

export default ProductGallery;


===== src/components/TextSection.jsx =====
// 'use client';
// import { useRouter } from 'next/navigation';
// import React, { useEffect, useState } from 'react';
// import { FaLocationPin, FaEdit, FaMinus, FaPlus, FaTrash, FaWhatsapp } from 'react-icons/fa';
// import { HiXMark } from 'react-icons/hi2';
// import SalesEndSection from './SalesEndSection/SalesEndSection';
// import DeliveryDate from './DeliveryDate';
// import { FaArrowRight, FaStar } from 'react-icons/fa';
// import Image from 'next/image';
// import Link from 'next/link';
// import LaptopDetels from './LaptopDetels';
// import RatingSection from './RatingSection';
// import MultiPriceBoxes from './MultiPriceBoxes';

// const QuantityControl = ({ quantity, onDecrease, onIncrease }) => (
//   <div className="flex items-center text-base md:text-lg">
//     <button onClick={onDecrease} className="px-2 py-1 md:font-extrabold" aria-label="Decrease quantity">
//       <FaMinus />
//     </button>
//     <span className="md:font-mediam py-1 px-2">{quantity}</span>
//     <button onClick={onIncrease} className="px-2 py-1 font-extrabold" aria-label="Increase quantity">
//       <FaPlus />
//     </button>
//   </div>
// );

// const TextSection = ({ product }) => {
//   const [isModalVisible, setIsModalVisible] = useState(false);
//   const [basket, setBasket] = useState([]);

//   const { id, title, price, postage_fee, sale_end_date, sale_start_date, product_images } = product;
//   const [timeRemaining, setTimeRemaining] = useState({
//     days: 0,
//     hours: 0,
//     minutes: 0,
//     seconds: 0,
//   });

//   useEffect(() => {
//     const saleStartDate = new Date(sale_start_date);
//     const saleEndDate = new Date(sale_end_date);
//     const currentDate = new Date();
//     const timeRemaining = saleEndDate - currentDate;

//     setTimeRemaining({
//       days: Math.floor(timeRemaining / (1000 * 60 * 60 * 24)),
//       hours: Math.floor((timeRemaining / (1000 * 60 * 60)) % 24),
//       minutes: Math.floor((timeRemaining / (1000 * 60)) % 60),
//       seconds: Math.floor((timeRemaining / 1000) % 60),
//     });
//   }, [sale_start_date, sale_end_date]);

//   useEffect(() => {
//     const storedBasket = JSON.parse(localStorage.getItem('basket')) || [];
//     setBasket(storedBasket);
//   }, []);

//   const handleAddToBasket = () => {
//     const productData = { id, title, price, quantity: 1, image: product_images };
//     const basket = JSON.parse(localStorage.getItem('basket')) || [];
//     const existingProductIndex = basket.findIndex((item) => item.id === productData.id);

//     if (existingProductIndex >= 0) basket[existingProductIndex].quantity += 1;
//     else basket.push(productData);

//     localStorage.setItem('basket', JSON.stringify(basket));
//     setBasket(basket);
//     setIsModalVisible(true);
//   };

//   const handleCloseModal = () => setIsModalVisible(false);

//   const handleQuantityChange = (index, change) => {
//     const newBasket = [...basket];
//     newBasket[index].quantity = Math.max(1, newBasket[index].quantity + change);
//     setBasket(newBasket);
//     localStorage.setItem('basket', JSON.stringify(newBasket));
//   };

//   return (
//     <div className="space-y-4 p-4 lg:ml-4 text-lg ">
//       <div className='space-y-3'>
//         {/* Product Title */}
//         <div className="text-xl font-mediam">{title}</div>

//         {/* seller info  */}
//         <div className='text-base lg:text:lg font-[400px] text-purple-500 leading-relaxed'>
//           {/* Seller info and shop link */}
//           <a
//             itemProp="name"
//             content="Online Shopping Accra Shop"
//             href="/shops/online-shopping-accra"
//             className="space-x-2 "
//           >
//             <span className="font-normal space-x-2">
//               <b className="text-black">5633 sold&nbsp;</b>Visit the
//             </span>{" "}
//             <b className="font-extrabold text-blue-600">Upfrica GH Shop</b>{" "}
//             <span className="">
//               Shop</span>
//           </a>
//           {/* Location */}
//           <b className="">
//             &nbsp;
//             <i className="fa fa-map-marker m-0 p-0 mr-1" />
//             <a
//               href="/products?utf8=‚úì&town=Osu"
//               className="  hover:underline"
//             >
//               Osu
//             </a>
//             ,{" "}
//             <a
//               href="/products?utf8=‚úì&country=GH"
//               className=" hover:underline"
//             >
//               GH
//             </a>
//           </b>

//           {/* ratting  */}
//         </div>
//         <RatingSection />

//         <hr />
//       </div>

//       {/* Review Button */}
//       {/* <button className="border py-1 px-2 md:px-4 hover:bg-purple-500 hover:text-white font-mediam tracking-wide text-purple-500 border-purple-500 rounded-lg">
//         Write a review
//       </button> */}

//       {/* Edit, Delete, Published */}
//       {/* <div className="flex gap-4 items-center text-base xl:text-lg flex-col sm:flex-row">
//         <div className="flex items-center space-x-2 text-[#a435f0] w-full sm:w-auto">
//           <FaEdit className="w-4 h-4" />
//           <span>Edit</span>
//         </div>
//         <div className="border-l h-6 border-gray-300 sm:block hidden"></div>
//         <p className="text-[#747579] font-mediam w-full sm:w-auto">Last update: 19 Nov, 2024</p>
//         <div className="border-l h-6 border-gray-300 sm:block hidden"></div>
//         <div className="flex items-center space-x-4 w-full sm:w-auto">
//           <div className="flex items-center space-x-1 text-[#a435f0]">
//             <FaTrash className="w-4 h-4" />
//             <span>Delete</span>
//           </div>
//           <div className="border-l h-6 border-gray-300 sm:block hidden"></div>
//           <span className="text-[#a435f0]">Published</span>
//         </div>
//       </div> */}

//       {/* Email and WhatsApp Section */}
//       {/* <div className="flex gap-4 items-center text-lg">
//         <div className="text-gray-500 font-medium">example@gmail.com</div>
//         <div className="border-l h-6 border-gray-300"></div>
//         <div className="flex items-center text-[#a435f0] space-x-2">
//           <FaWhatsapp className="w-6 h-6 text-green-400" />
//           <span>WhatsApp</span>
//         </div>
//       </div> */}

//       {/* Price Information */}
//       {/* <p className="text-lg text-[#0CBC87] font-mediam">Last Price Update: 19 Nov, 2024 </p> */}
//       <div className='space-y-3'>
//         <p className="text-base lg:text-lg font-mediam">
//           Price: <span className="text-xl lg:text-3xl">${(price?.cents / 100).toFixed(2)}</span> each
//         </p>
//         <p className="text-gray-600 text-lg leading-relaxed">
//           was <span className="line-through">${(price?.cents / 100).toFixed(2)}</span> You
//           Save: $6.39 (3%)
//         </p>

//         {/* Sale End Timer */}
//         <SalesEndSection days={timeRemaining.days} minutes={timeRemaining.minutes} seconds={timeRemaining.seconds} />

//         <p className='text-base lg:text-xl font-mediam'>Condition: used</p>

//         <MultiPriceBoxes/>
//       </div>

//       {/* Free Delivery */}
//       {/* <p className="text-xl font-extrabold py-1 px-2 bg-[#0A8800] text-white w-2/3 rounded-md">Free Delivery for you within Accra</p>
//       <p><b>Collection:</b> Click &amp; Collect - Select option at checkout</p>
//       <h1>Delivery: $ {(postage_fee?.cents / 100).toFixed(2)}</h1> */}

//       {/* Delivery Date */}
//       {/* <DeliveryDate /> */}
//       {/* <p>Get a $1.41 credit for late delivery</p> */}

//       {/* Add to Basket Button */}
//       <div className="pb-4 space-y-4">
//         <button onClick={handleAddToBasket} className="bg-[#F7C32E] w-full  p-2 rounded-3xl text-base font-mediam">
//           Add to Basket
//         </button>
//         <button onClick={handleAddToBasket} className=" w-full  p-2 rounded-3xl text-base font-mediam border border-yellow-300">
//          Buy Now
//         </button>
//         {/* <hr className="my-4" /> */}
//         {/* <LaptopDetels /> */}
//         <div>
//         <p>Pickup:</p>
//         <p>Delivery</p>
//         <p>Delivery data: </p>
//         <p>Returens:</p>
//         <p>payment:</p>
//         <p>Buy now pay later.</p>
//         </div>

//         {/* Modal */}
//         <div
//           className={`fixed inset-0 bg-black bg-opacity-50 px-5 z-50 overflow-y-auto ${isModalVisible ? 'opacity-100 visible' : 'opacity-0 invisible'
//             } transition-opacity duration-300`}
//           onClick={handleCloseModal}
//         >
//           <div
//             className={`bg-gray-50 rounded-lg shadow-lg  w-full md:w-2/3 lg:w-2/4 xl:w-1/4 p-4 mx-auto mt-10 transform ${isModalVisible ? 'translate-y-0' : '-translate-y-full'
//               } transition-transform duration-300`}
//             onClick={(e) => e.stopPropagation()}
//           >
//             {/* Modal Header */}
//             <div className="flex justify-between items-center p-4 border-b">
//               <h3 className="text-xl md:text-2xl font-mediam">
//                 {basket.length} Items added to basket
//               </h3>
//               <button
//                 onClick={handleCloseModal}
//                 className="text-gray-600 hover:text-gray-900"
//               >
//                 <HiXMark className="h-8 w-8" />
//               </button>
//             </div>

//             {/* Modal Body */}
//             <div className="p-4">
//               <ul className="mt-4">
//                 {basket.length > 0 ? (
//                   basket.map((item, index) => (
//                     <li
//                       key={index}
//                       className="md:grid md:grid-cols-5 flex gap-4 md:items-center justify-between border-b py-3 text-base md:text-xl"
//                     >
//                       {/* Product Image */}
//                       <div className="md:col-span-1">
//                         <img
//                           src={
//                             item?.image?.[0] ??
//                             'https://via.placeholder.com/150'
//                           }
//                           alt={item.title}
//                           className="h-14 w-14 object-cover rounded mr-3"
//                         />
//                       </div>

//                       <div className="md:col-span-4">
//                         {/* Product Title */}
//                         <span>{item.title}</span>
//                         {/* Product Price */}
//                         <div className="md:flex gap-5 items-center mt-2">
//                           <p>
//                             Price : {item.price.currency_iso}{' '}
//                             {(item.price.cents / 100).toFixed(2)}
//                           </p>
//                           <p className="flex gap-2 text-base md:text-lg font-mediam items-center">
//                             <span>Qty:</span>
//                             <QuantityControl
//                               quantity={item.quantity}
//                               onDecrease={() =>
//                                 handleQuantityChange(index, -1)
//                               }
//                               onIncrease={() =>
//                                 handleQuantityChange(index, 1)
//                               }
//                             />
//                           </p>
//                         </div>
//                       </div>
//                     </li>
//                   ))
//                 ) : (
//                   <p className="text-center text-gray-500">
//                     No items in the basket.
//                   </p>
//                 )}
//               </ul>
//             </div>

//             {/* Modal Footer */}
//             <div className="flex justify-center p-4 space-x-2">
//               <Link href="/checkout">
//                 <button className="bg-[#F7C32E] text-white px-4 py-2 rounded-3xl hover:bg-yellow-600">
//                   Checkout Item
//                 </button>
//               </Link>
//               <Link href="/cart">
//                 <button className="px-4 py-2 rounded-3xl border bg-white shadow-md">View Basket</button>
//               </Link>
//             </div>
//           </div>
//         </div>
//         {/* End of Modal */}
//       </div>
//     </div>

//   );
// };

// export default TextSection;

// // 'use client'
// // import React, { useEffect } from 'react';

// // const ProductDetails = () => {
// //   // Countdown timer effect
// //   useEffect(() => {
// //     function countdown() {
// //       const now = new Date();
// //       const eventDate = new Date("2024-12-31T12:00:00Z");
// //       const currentTime = now.getTime();
// //       const eventTime = eventDate.getTime();
// //       const remTime = eventTime - currentTime;

// //       let s = Math.floor(remTime / 1000);
// //       let m = Math.floor(s / 60);
// //       let h = Math.floor(m / 60);
// //       let d = Math.floor(h / 24);

// //       h %= 24;
// //       m %= 60;
// //       s %= 60;

// //       h = h < 10 ? "0" + h : h;
// //       m = m < 10 ? "0" + m : m;
// //       s = s < 10 ? "0" + s : s;

// //       const daysEl = document.getElementById("days");
// //       const hoursEl = document.getElementById("hours");
// //       const minutesEl = document.getElementById("minutes");
// //       const secondsEl = document.getElementById("seconds");

// //       if (daysEl) daysEl.textContent = d;
// //       if (hoursEl) hoursEl.textContent = h;
// //       if (minutesEl) minutesEl.textContent = m;
// //       if (secondsEl) secondsEl.textContent = s;

// //       setTimeout(countdown, 1000);
// //     }
// //     if (
// //       document.getElementById("days") &&
// //       document.getElementById("hours") &&
// //       document.getElementById("minutes") &&
// //       document.getElementById("seconds")
// //     ) {
// //       countdown();
// //     }
// //   }, []);

// //   return (
// //     <div className="col-sm-6 col-lg-6 mb-0">
// //       <div className="card card-body pt-2" style={{ borderRadius: "0px", padding: "0px" }}>
// //         {/* Place Schema */}
// //         <div itemScope itemType="http://schema.org/Place">
// //           <h1 className="up-product-title up-title-h1 text-capitalize">
// //             Microwave Oven &amp; Grill. Ailyons Smart Life, Your Choice
// //             <br />
// //             <a href="#customer-reviews">
// //               <button
// //                 type="button"
// //                 className="btn btn-outline-primary"
// //                 style={{ height: "30px", lineHeight: "0px" }}
// //               >
// //                 Write a Review
// //               </button>
// //             </a>
// //           </h1>
// //           <div>
// //             <a
// //               itemProp="name"
// //               content="Online Shopping Accra Shop"
// //               className="pple"
// //               href="/shops/online-shopping-accra"
// //             >
// //               <span className="fw-normal">
// //                 <b className="blk-no-size">5533 sold &nbsp;</b> Visit the
// //               </span>{" "}
// //               <b style={{ fontWeight: 800 }} className="blu-no-size">
// //                 Online Shopping Accra
// //               </b>{" "}
// //               <span className="fw-normal">Shop</span>
// //             </a>
// //             <b>
// //               &nbsp;
// //               <i className="fa fa-map-marker m-0 p-0 me-1"></i>
// //               <a className="pple-no-size" href="/products?utf8=‚úì&town=Osu">
// //                 Osu
// //               </a>
// //               ,{" "}
// //               <a className="pple-no-size" href="/products?utf8=‚úì&country=GH">
// //                 GH
// //               </a>
// //             </b>
// ‚Ä¶truncated‚Ä¶

===== src/components/TitleFrom.jsx =====
import { Editor } from "@tinymce/tinymce-react";
import React, { useState } from "react";
import { FaAngleDown, FaAngleUp } from "react-icons/fa";
import { MdOutlineArrowDropDown, MdOutlineArrowDropUp } from "react-icons/md";
import ImageUploading from "react-images-uploading";
import { Editor } from "@tinymce/tinymce-react";

const TitleFrom = ({ formik, categories }) => {
  const [categoryDropdownOpen, setCategoryDropdownOpen] = useState(false); // To control category dropdown
  const [conditionDropdownOpen, setConditionDropdownOpen] = useState(false); // To control condition dropdown
  const [arrowshowDropdown, setArrowShowDropdown] = useState(false);
  const [brandArrow, setBrandArrow] = useState(false);
  const [approVal, setApproVal] = useState(false); // Dropdown visibility state
  const [selectedValue, setSelectedValue] = useState(""); // Selected value state
  const [brand, setBrand] = useState(false);
  return (
    <div className="my-4 bg-white shadow-md  rounded-md p-4 space-y-2">
      {/* title  */}
      <div>
        <h2 className="text-2xl font-bold mb-2">Your Title Here</h2>

        <p className="text-gray-600 mb-4">This is your paragraph text here.</p>

        <hr className="border-gray-300 mb-4" />

        <input
          id="title"
          name="title"
          type="text"
          value={formik.values.title}
          onChange={formik.handleChange}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
          placeholder="Type something here..."
        />
        <p className="text-gray-500 mt-2">{formik.values.title.length} / 80</p>
      </div>

      {/* *Item description */}
      <div>
        <h2 className="text-2xl font-bold mb-2">*Item description</h2>

        <p className="text-gray-600 mb-4">
          Usually in bullet points{" "}
          <span className="text-red-500">
            {" "}
            Phone numbers or external links are not allowed in the decription
          </span>
        </p>

        <hr className="border-gray-300 mb-4" />
        <Editor
          apiKey="wlfjcowajns1o44b16c3vyk0lmxnctw5pehcbmo9070i2f4x"
          onInit={(_evt, editor) => (editorRef.current = editor)}
          value={formik.values.description}
          onEditorChange={(description) => formik.setFieldValue(description)}
          // initialValue=""
          init={{
            height: 200,
            menubar: false,
            plugins: [
              "advlist",
              "autolink",
              "lists",
              "link",
              "product_images",
              "charmap",
              "preview",
              "anchor",
              "searchreplace",
              "visualblocks",
              "code",
              "fullscreen",
              "insertdatetime",
              "media",
              "table",
              "code",
              "help",
              "wordcount",
            ],
            toolbar:
              "undo redo | blocks | " +
              "bold italic forecolor | alignleft aligncenter " +
              "alignright alignjustify | bullist numlist outdent indent | " +
              "removeformat | help",
            content_style:
              "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
          }}
        />

        <p className="">Add accurate and concise details of your product</p>
      </div>

      {/* *Category */}
      <div className="py-4">
        <h2 className="text-2xl font-bold mb-2">*Category</h2>

        <hr className="border-gray-300 mb-4" />
        <div className="relative flex items-center justify-between border rounded-md group focus-within:border-purple-500">
          <input
            className="w-full border-none focus:outline-none focus:ring-0 py-2 ps-3 hover:cursor-pointer"
            type="text"
            placeholder="Search Upfrica BD"
            value={formik.values.category_name} // Formik value
            onClick={() => setCategoryDropdownOpen(!categoryDropdownOpen)} // Toggle dropdown on click
            onChange={formik.handleChange} // Handle input change
            name="category_name" // Set the name for formik
          />
          <button
            type="button"
            className="bg-purple-500 text-white h-[45px] px-6 rounded-tr-md rounded-br-md"
          >
            More
          </button>

          {/* Dropdown list */}
          {categoryDropdownOpen && (
            <div className="absolute top-full left-0 w-full bg-white border rounded shadow-lg mt-2 z-10">
              <ul className="py-2">
                {categories.length > 0 ? (
                  categories.map((category) => (
                    <li
                      key={category.id} // Assuming each category has an id
                      className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                      onClick={() => {
                        formik.setFieldValue("category_id", category.id); // Set the selected value to Formik field
                        formik.setFieldValue("category_name", category.name); // Set the selected value to Formik field
                        setCategoryDropdownOpen(false); // Hide dropdown after selection
                      }}
                    >
                      {category.name}
                    </li>
                  ))
                ) : (
                  <li className="px-4 py-2 text-gray-500">Loading...</li>
                )}
              </ul>
            </div>
          )}
        </div>

        <p className="">Select or tap on more</p>
      </div>

      {/* *Condition */}
      <div className="py-4">
        <h2 className="text-2xl font-bold mb-2">*Condition</h2>
        <p>
          Use keywords people would search for when looking for your item.
          Include details such as colour, size, brand & model.
        </p>
        <hr className="border-gray-300 mb-4" />

        <div className="relative flex items-center justify-between border rounded-md group focus-within:border-purple-500">
          <input
            id="condition_id"
            className="w-full border-none focus:outline-none focus:ring-0 py-2 ps-3 hover:cursor-pointer"
            type="text"
            placeholder="Search Upfrica BD"
            value={formik.values.condition_name} // Set Formik value
            onChange={formik.handleChange}
            readOnly // Input is read-only to prevent typing
            onClick={() => setConditionDropdownOpen(!conditionDropdownOpen)} // Toggle dropdown on click
            name="condition_name"
          />
          {arrowshowDropdown ? (
            <button className="h-[45px] px-6 rounded-tr-md rounded-br-md">
              <MdOutlineArrowDropUp />
            </button>
          ) : (
            <button className="h-[45px] px-6 rounded-tr-md rounded-br-md">
              <MdOutlineArrowDropDown />
            </button>
          )}

          {/* Dropdown list */}
          {conditionDropdownOpen && (
            <div className="absolute top-full left-0 w-full bg-white border rounded shadow-lg mt-2 z-10">
              <ul className="py-2">
                {conditions.length > 0 ? (
                  conditions.map((condision) => (
                    <li
                      key={condision.id} // Assuming each category has an id
                      className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                      onClick={() => {
                        formik.setFieldValue("condition_id", condision.id); // Set the selected value to Formik field
                        formik.setFieldValue("condition_name", condision.name); // Set the selected value to Formik field
                        setConditionDropdownOpen(false); // Hide dropdown after selection
                      }}
                    >
                      {condision.name}
                    </li>
                  ))
                ) : (
                  <li className="px-4 py-2 text-gray-500">Loading...</li>
                )}
              </ul>
            </div>
          )}
        </div>
      </div>

      {/* Brand  */}
      <div className="py-4">
        <h2 className="text-2xl font-bold mb-2">*Brand</h2>
        <p>
          Use keywords people would search for when looking for your item.
          Include details such as colour, size, brand & model.
        </p>
        <hr className="border-gray-300 mb-4" />

        <div className="relative flex items-center justify-between border rounded-md group focus-within:border-purple-500">
          <input
            id="brand"
            name="brand"
            className="w-full border-none focus:outline-none focus:ring-0 py-2 ps-3"
            type="text"
            placeholder="Search Upfrica BD"
            value={formik.values.brand} // Set Formik value
            onChange={formik.handleChange}
            readOnly // Input is read-only to prevent typing
            onClick={() => setArrowShowDropdown(!arrowshowDropdown)} // Toggle dropdown
          />
          {brand ? (
            <button className="h-[45px] px-6 rounded-tr-md rounded-br-md">
              <MdOutlineArrowDropUp />
            </button>
          ) : (
            <button className="h-[45px] px-6 rounded-tr-md rounded-br-md">
              <MdOutlineArrowDropDown />
            </button>
          )}

          {/* Dropdown list */}
          {arrowshowDropdown && (
            <div className="absolute top-full left-0 w-full bg-white border rounded shadow-lg mt-2 z-10">
              <ul className="py-2">
                <li
                  className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                  onClick={() => {
                    formik.setFieldValue("brand", "Option 1"); // Set selected value
                    setArrowShowDropdown(false); // Hide dropdown after selection
                  }}
                >
                  Option 1
                </li>
                <li
                  className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                  onClick={() => {
                    formik.setFieldValue("brand", "Option 2"); // Set selected value
                    setArrowShowDropdown(false); // Hide dropdown after selection
                  }}
                >
                  Option 2
                </li>
                <li
                  className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                  onClick={() => {
                    formik.setFieldValue("brand", "Option 3"); // Set selected value
                    setArrowShowDropdown(false); // Hide dropdown after selection
                  }}
                >
                  Option 3
                </li>
              </ul>
            </div>
          )}
        </div>
      </div>

      {/* *Photos & Video */}
      <div>
        <div className="space-y-2 py-4">
          <h1 className="text-2xl font-bold">*Photos & Video</h1>
          <p>Phone numbers are not allowed on photos</p>
        </div>
        <hr />
        <div className="space-y-4 m-4">
          <p>Supported files: *.jpg and *.png</p>
          <div className="App">
            <ImageUploading
              multiple
              value={images}
              onChange={onChange}
              maxNumber={maxNumber}
              dataURLKey="data_url"
            >
              {({
                imageList,
                onImageUpload,
                onImageRemoveAll,
                onImageUpdate,
                onImageRemove,
                isDragging,
                dragProps,
              }) => (
                // write your building UI
                <div className="upload__image-wrapper">
                  <button
                    type="button"
                    className="h-40 w-40 border"
                    style={isDragging ? { color: "red" } : undefined}
                    onClick={onImageUpload}
                    {...dragProps}
                  >
                    <span>
                      <IoMdPhotos className="h-8 w-8 mx-auto" />
                    </span>
                    Add Photos
                  </button>
                  &nbsp;
                  {/* <button onClick={onImageRemoveAll}>
                        Remove all images
                      </button> */}
                  {imageList.map((image, index) => (
                    <div key={index} className="image-item">
                      <img src={image["data_url"]} alt="" width="100" />
                      <div className="image-item__btn-wrapper">
                        <button onClick={() => onImageUpdate(index)}>
                          Update
                        </button>
                        <button onClick={() => onImageRemove(index)}>
                          Remove
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </ImageUploading>
          </div>
        </div>
        <hr />

        <div className="py-6 space-y-2">
          <p>YouTube video link - optional</p>
          <input
            id="youTubeLink"
            name="youTubeLink"
            type="text"
            onChange={formik.handleChange}
            value={formik.values.youTubeLink}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="https://www.youtube.com/watch?v=nLl0z0YC6hk"
          />
        </div>
        <div className="space-y-2">
          <p className="text-base font-bold">
            Upload mp4 product video - <small>optional</small>
          </p>
          <div className="App">
            <ImageUploading
              multiple
              value={files}
              onChange={onFilesChange}
              maxNumber={maxNumber}
              dataURLKey="data_url"
            >
              {({
                imageList,
                onImageUpload,
                onImageRemoveAll,
                onImageUpdate,
                onImageRemove,
                isDragging,
                dragProps,
              }) => (
                // write your building UI
                <div className="upload__image-wrapper flex space-x-4 items-center">
                  <button
                    className="px-4 py-2 border font-bold rounded"
                    style={isDragging ? { color: "red" } : undefined}
                    onClick={onImageUpload}
                    {...dragProps}
                  >
                    Choose File
                  </button>
                  <p>No file Chosen</p>
                  &nbsp;
                  {imageList.map((image, index) => (
                    <div key={index} className="image-item">
                      <img src={image["data_url"]} alt="" width="100" />
                      <div className="image-item__btn-wrapper">
                        <button onClick={() => onImageUpdate(index)}>
                          Update
                        </button>
                        <button onClick={() => onImageRemove(index)}>
                          Remove
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </ImageUploading>
          </div>
        </div>

        {/* Pricing */}

        <div className="my-6">
// ‚Ä¶truncated‚Ä¶

===== src/components/ToastEditor.jsx =====
import React from "react";

function ToastEditor() {
  return <div>ToastEditor</div>;
}

export default ToastEditor;


===== src/components/User.jsx =====
// "use client"
// import React, { useEffect, useState } from 'react';
// import Link from 'next/link'; // Link component is missing in your code
// import useAuth from './useAuth';

// const User = () => {

//     const user = null;
//     // const [user, setUser] = useState(null);

//     // useEffect   (() => {
//     //     setUser(localStorage.getItem("user"));
//     // }, []);
//     // const user = useAuth();
//     // const user = localStorage.getItem("user");
//     // Check if the user does not exist, then return the sign-in section
//     if (!user) {
//         return (
//             <div className="fixed bottom-0 left-0 right-0 bg-black bg-opacity-95 shadow-lg text-white">
//                 <div className="flex items-center justify-center mx-auto py-4 px-6">
//                     <p className="text-lg">Sign in for the best experience</p>
//                     <button className="ml-4 px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-full font-semibold transition duration-300">
//                         <Link href={"/login"}>Sign in</Link>
//                     </button>
//                 </div>
//             </div>
//         );
//     }

//     // If user exists, return null or any other content
//     return null;
// };

// export default User;

"use client";
import React from "react";
import Link from "next/link";
import { useSelector } from "react-redux";
// import { setUser } from '../app/store/slices/userSlice';

const User = () => {
  const { user } = useSelector((state) => state.auth);

  if (!user) {
    return (
      <div className="fixed bottom-0 left-0 right-0 bg-black bg-opacity-95 shadow-lg text-white z-50">
        <div className="flex items-center justify-center mx-auto py-2 lg:py-3 ">
          <p className="text-sm lg:text-base">
            Sign in for the best experience
          </p>
          <Link
            href="/login"
            className="ml-4 px-4 lg:px-6 py-1  bg-purple-500 hover:bg-purple-600 text-white rounded-full lg:font-medium transition duration-300"
          >
            Sign in
          </Link>
        </div>
      </div>
    );
  }

  // If user exists, show nothing
  return null;
};

export default User;


===== src/components/WomenFasion.jsx =====

// components/WomenFashion.jsx
"use client";

import React, { useEffect, useState } from "react";
import axios from "@/lib/axiosInstance"; // ‚úÖ Injects auth token
import dynamic from "next/dynamic";
import Link from "next/link";
import Image from "next/image";
import { FaShoppingCart } from "react-icons/fa";

// Only the price widget runs on the client
const Price = dynamic(() => import("./Price"), { ssr: false });

export default function WomenFashion({ title }) {
  const [products, setProducts] = useState([]);
  const [error, setError] = useState(null);

useEffect(() => {
  if (typeof window === "undefined") return;

  const token = localStorage.getItem("token");
  console.log("üîç Token from localStorage:", token);

  if (!token) return;

  axios
    .get("/api/product-list/women/")
    .then((res) => setProducts(res.data.results))
    .catch((err) => {
      console.error("‚ùå Failed to load women products:", err.response?.data || err);
      setError(err);
    });
}, []);

  if (error) return <div className="p-4 text-red-600">Failed to load products</div>;

  return (
    <div className="container mx-auto bg-white shadow-md py-10 mb-2 p-5 rounded-lg">
      {/* Header */}
      <div className="text-xl md:text-3xl font-extrabold tracking-wide pb-4">
        <h1>{title}</h1>
      </div>

      {/* Horizontal Scroll Container */}
      <div className="overflow-x-auto pb-4">
        <div className="flex space-x-4">
          {products.map((product) => {
            const {
              id,
              title: prodTitle,
              product_images,
              seller_country,
              seo_slug,
              slug,
              price_cents,
              sale_price_cents,
              price_currency,
              sale_end_date,
              on_sales,
            } = product;

            const countryCode = (seller_country || "gh").toLowerCase();
            const pathSlug = seo_slug || slug;

            return (
              <div
                key={id}
                className="border shadow-lg rounded-lg overflow-hidden flex flex-col min-w-[200px] h-[220px]"
              >
                <div className="flex-grow overflow-hidden">
                  <Link href={`/${countryCode}/${pathSlug}/`}>
                    <Image
                      src={product_images?.[0] || "/placeholder.png"}
                      alt={prodTitle}
                      width={300}
                      height={300}
                      className="w-full h-full object-cover transform transition-all duration-1000 ease-in-out hover:scale-110 hover:-translate-y-2"
                    />
                  </Link>
                </div>

                <div className="flex items-center justify-between px-2 py-1 bg-gray-100">
                  <Price
                    priceCents={price_cents}
                    salePriceCents={sale_price_cents}
                    priceCurrency={price_currency}
                    saleEndDate={sale_end_date}
                    onSales={on_sales}
                  />
                  <button className="p-1 border-2 border-black rounded">
                    <FaShoppingCart className="text-purple-500" size={20} />
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}


===== src/components/addresses/AddressForm.jsx =====
// src/components/addresses/AddressForm.jsx
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { parsePhoneNumberFromString, getCountryCallingCode } from 'libphonenumber-js/min';
import { BASE_API_URL } from '@/app/constants';
import GoogleAddressInput from '@/components/addresses/GoogleAddressInput';
import GoogleMapsLoader from '@/components/GoogleMapsLoader';
import PhoneInput from '@/components/input/phoneInput';

export default function AddressForm({
  token,
  onSave,
  initialData = null,
  editId = null,
  onCancel,
  defaultCountry = 'GH', // <-- NEW: prefer page‚Äôs defaultCountry
}) {
  const [formData, setFormData] = useState({
    full_name: '',
    address_line_1: '',
    address_line_2: '',
    town: '',
    state_or_region: '',
    country: '', // ISO-2 for address
    postcode: '',
    default: false,
  });

  const [errors, setErrors] = useState({});
  const [submitting, setSubmitting] = useState(false);
  const [scriptLoaded, setScriptLoaded] = useState(false);
  const [countries, setCountries] = useState([]);

  // --- Phone state (internationalized) ---
  const [phoneIso, setPhoneIso] = useState('');   // ISO-2 chosen in the phone selector
  const [phoneVal, setPhoneVal] = useState('');   // raw typed value (digits/pretty)
  const [hasFocus, setHasFocus] = useState(false);
  const [touched, setTouched] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const phoneIsoTouchedRef = useRef(false);

  const fullNamePrefilledRef = useRef(false);
  const priorityOrder = ['GB', 'GH', 'NG'];





  /* ---------------- helpers ---------------- */
  const toIso2 = (val) => {
    if (!val) return '';
    const v = String(val).trim().toUpperCase();
    return v === 'UK' ? 'GB' : v;
  };

  const isGhanaGps = (s) => {
    if (!s) return false;
    const v = s.trim().toUpperCase();
    return /^[A-Z]{2}-?\d{3}-?\d{4}$/.test(v);
  };

  const phoneMetaForIso = (iso) => {
    const code = toIso2(iso);
    const row = countries.find((c) => toIso2(c.code) === code);
    const dial = (row?.phone_code || '').toString().replace(/[^\d]/g, '');
    return { dial, flag: row?.flag_emoji || '', name: row?.name || code, iso: code };
  };

  const guessIsoFromE164 = (e164) => {
    if (!e164?.startsWith('+')) return '';
    const digits = e164.slice(1).replace(/[^\d]/g, '');
    const allDials = countries
      .map((c) => ({ iso: toIso2(c.code), dial: (c.phone_code || '').toString().replace(/[^\d]/g, '') }))
      .filter((x) => x.dial);
    let best = '', bestLen = 0;
    for (const x of allDials) {
      if (digits.startsWith(x.dial) && x.dial.length > bestLen) {
        best = x.iso; bestLen = x.dial.length;
      }
    }
    return best;
  };

  /* --------- prefill from initialData/user --------- */
  useEffect(() => {
    if (initialData) {
      const iso = toIso2(
        initialData.country || initialData.country_code || initialData.country_fk?.code
      );
      setFormData((prev) => ({ ...prev, ...initialData, country: iso }));

      // seed phone fields
      const pn = (initialData.phone_number || initialData.phone_e164 || '').toString().trim();
      if (pn) {
        const guessedIso = guessIsoFromE164(pn) || iso || toIso2(defaultCountry) || 'GH';
        setPhoneIso(guessedIso);
        // let the PhoneInput display raw value; we pass pn to validate later
        setPhoneVal(pn);
      }
      return;
    }

    (async () => {
      try {
        let res = await fetch(`${BASE_API_URL}/api/me/`, { headers: { Authorization: `Token ${token}` } });
        if (!res.ok) res = await fetch(`${BASE_API_URL}/api/users/me/`, { headers: { Authorization: `Token ${token}` } });
        if (!res.ok) return;

        const user = await res.json();

        const code = toIso2(
          user?.country_fk?.code || user?.country || user?.country_code || user?.listing_country_code || defaultCountry
        );

        const firstName = user.first_name?.trim() || '';
        const lastName = user.last_name?.trim() || '';
        const joined = [firstName, lastName].filter(Boolean).join(' ').trim();
        const fullName =
          !joined || (user.username && joined.toLowerCase().includes(user.username.toLowerCase()))
            ? user.username
            : joined;

        setFormData((prev) => ({
          ...prev,
          country: code || prev.country,
          full_name: !fullNamePrefilledRef.current ? (fullName || prev.full_name) : prev.full_name,
        }));

        const upn = (user.phone_number || '').toString().trim();
        if (upn) {
          const guessed = guessIsoFromE164(upn) || code || toIso2(defaultCountry) || 'GH';
          setPhoneIso(guessed);
          setPhoneVal(upn);
        } else {
          setPhoneIso(code || toIso2(defaultCountry) || 'GH');
        }
      } catch {}
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, initialData, countries.length, defaultCountry]);

  /* --------- load countries + sensible defaults --------- */
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/countries/`, {
          headers: { Authorization: `Token ${token}` },
        });
        const data = await res.json();
        if (!Array.isArray(data)) return;

        setCountries(data);

        if (!formData.country) {
          const apiDefault = data.find((c) => c.is_default) || null;
          setFormData((prev) => ({ ...prev, country: toIso2(apiDefault?.code || defaultCountry || 'GH') }));
        }
        if (!phoneIso) {
          const addrIso =
            formData.country ||
            toIso2((data.find((c) => c.is_default)?.code) || defaultCountry || 'GH');
          setPhoneIso(addrIso);
        }
      } catch {
        if (!formData.country) setFormData((p) => ({ ...p, country: toIso2(defaultCountry) || 'GH' }));
        if (!phoneIso) setPhoneIso(toIso2(defaultCountry) || 'GH');
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, defaultCountry]);

  // Keep phone ISO synced to address country until user touches phone selector
  useEffect(() => {
    if (!phoneIsoTouchedRef.current && formData.country && !phoneIso) {
      setPhoneIso(formData.country);
    }
  }, [formData.country, phoneIso]);

  // Sort country dropdown
  const sortedCountries = useMemo(() => {
    const list = [...countries];
    return list.sort((a, b) => {
      const A = toIso2(a.code), B = toIso2(b.code);
      const ia = priorityOrder.indexOf(A), ib = priorityOrder.indexOf(B);
      if (ia !== -1 || ib !== -1) {
        if (ia === -1) return 1;
        if (ib === -1) return -1;
        return ia - ib;
      }
      return a.name.localeCompare(b.name);
    });
  }, [countries]);

  // Feed <PhoneInput> a non-empty list (maps API shape ‚Üí component shape)
const phoneCountries = useMemo(() => {
  if (sortedCountries.length) {
    return sortedCountries.map(c => ({
      code: toIso2(c.code),
      name: c.name,
      flag_emoji: c.flag_emoji || '',
    }));
  }
  // Fallback so the dropdown isn't blank before /api/countries loads
  return [
    { code: 'GH', name: 'Ghana',          flag_emoji: 'üá¨üá≠' },
    { code: 'NG', name: 'Nigeria',        flag_emoji: 'üá≥üá¨' },
    { code: 'GB', name: 'United Kingdom', flag_emoji: 'üá¨üáß' },
    { code: 'US', name: 'United States',  flag_emoji: 'üá∫üá∏' },
  ];
}, [sortedCountries]);


  const inputClass = (field) =>
    `w-full p-2 rounded border ${
      errors[field] ? 'border-red-500' : 'border-gray-300'
    } bg-white dark:bg-gray-900 dark:border-gray-700`;

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name === 'full_name') fullNamePrefilledRef.current = true;
    setFormData((prev) => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
  };

  /* --------- phone validation (same logic style as Seller sheet) --------- */
  const SOFT_MIN_DIGITS = { GH: 7, NG: 7, KE: 7, ZA: 7, GB: 7, US: 7 };
  const validatePhone = (raw, iso) => {
    const s0 = String(raw || '').trim();
    let digits = s0.replace(/\D/g, '');
    const ccISO = toIso2(iso) || 'GH';

    if (!digits) return { state: 'empty' };

    try {
      const cc = getCountryCallingCode(ccISO); // "233"
      if (!s0.startsWith('+') && digits.startsWith(cc)) {
        digits = digits.slice(cc.length);
      }
    } catch {}

    const min = SOFT_MIN_DIGITS[ccISO] ?? 7;
    if (digits.length < min) return { state: 'typing' };

    try {
      const pn = parsePhoneNumberFromString(digits, ccISO); // treat as national
      if (!pn) return { state: 'typing' };
      if (pn.isValid()) {
        return { state: 'valid', e164: pn.format('E.164'), national: pn.formatNational() };
      }
      return pn.isPossible() ? { state: 'typing' } : { state: 'invalid' };
    } catch {
      return { state: 'typing' };
    }
  };

  const v = validatePhone(phoneVal, phoneIso || formData.country || defaultCountry);
  const digits = (phoneVal || '').replace(/\D/g, '');
  const minLen = SOFT_MIN_DIGITS[toIso2(phoneIso || formData.country || defaultCountry)] ?? 7;

  const showError = !hasFocus && (touched || submitted) && digits.length >= minLen && v.state === 'invalid';
  const showHint  =  hasFocus && digits.length > 0 && digits.length <  minLen;
  const phoneOk   = v.state === 'valid';

  /* --------- postcode/Ghana GPS helpers (unchanged) --------- */
  const handlePostcodeChange = async (e) => {
    const value = e.target.value.toUpperCase().trim();
    setFormData((prev) => ({ ...prev, postcode: value }));

    if (formData.country === 'GB' && value.length >= 5) {
      try {
        const res = await fetch(`https://api.postcodes.io/postcodes/${encodeURIComponent(value)}`);
        const data = await res.json();
        if (data.status === 200) {
          setFormData((prev) => ({
            ...prev,
            town: data.result.admin_district || prev.town || '',
            state_or_region: data.result.region || prev.state_or_region || '',
          }));
        }
      } catch {}
    }

    if (formData.country === 'GH' && isGhanaGps(value)) {
      try {
        const url = new URL(`${BASE_API_URL}/api/ghana-gps/resolve/`);
        url.searchParams.set('code', value);
        const res = await fetch(url, { headers: { Authorization: `Token ${token}` } });
        if (res.ok) {
          const d = await res.json();
          setFormData((prev) => ({
            ...prev,
            address_line_1:
              (d.address_line_1 && d.address_line_1.toLowerCase() !== 'ghana')
                ? d.address_line_1
                : (prev.address_line_1 || value),
            town: d.town || prev.town,
            state_or_region: d.state_or_region || prev.state_or_region,
            postcode: d.postcode || prev.postcode || value,
            country: prev.country || 'GH',
          }));
        }
      } catch {}
    }
  };

  useEffect(() => {
    const v = formData.address_line_1?.trim();
    if (formData.country !== 'GH' || !isGhanaGps(v)) return;
    (async () => {
      try {
        const url = new URL(`${BASE_API_URL}/api/ghana-gps/resolve/`);
        url.searchParams.set('code', v.toUpperCase());
        const res = await fetch(url, { headers: { Authorization: `Token ${token}` } });
        if (res.ok) {
          const d = await res.json();
          setFormData((prev) => ({
            ...prev,
            address_line_1:
              (d.address_line_1 && d.address_line_1.toLowerCase() !== 'ghana')
                ? d.address_line_1
                : prev.address_line_1,
            town: d.town || prev.town,
            state_or_region: d.state_or_region || prev.state_or_region,
            postcode: d.postcode || prev.postcode || v.toUpperCase(),
            country: prev.country || 'GH',
          }));
        }
      } catch {}
    })();
  }, [formData.address_line_1, formData.country, token]);

  /* --------- validation + submit --------- */
  const validate = () => {
    const newErrors = {};
    const { country, full_name, address_line_1, town, state_or_region, postcode } = formData;

    if (!country) newErrors.country = 'Country is required';
    if (!full_name) newErrors.full_name = 'Full name is required';
    if (!address_line_1) newErrors.address_line_1 = 'Address Line 1 is required';
    if (!town) newErrors.town = 'Town / City is required';
    if (!state_or_region) newErrors.state_or_region = 'Region / State is required';
    if (!postcode) newErrors.postcode = 'Postcode is required';

    if (v.state === 'empty' || v.state === 'invalid') {
      newErrors.phone_number = v.state === 'empty'
        ? 'Phone number is required'
        : 'Number doesn‚Äôt look valid for this country';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitted(true);
    if (!validate()) return;

    setSubmitting(true);
    try {
      // Build E.164 (prefer parsed)
      let e164 = v.e164;
      if (!e164) {
        const { dial } = phoneMetaForIso(phoneIso || formData.country || defaultCountry || 'GH');
        const digitsOnly = String(phoneVal || '').replace(/[^\d]/g, '');
        e164 = dial ? `+${dial}${digitsOnly}` : digitsOnly;
      }

      const method = editId ? 'PATCH' : 'POST';
      const url = editId
        ? `${BASE_API_URL}/api/addresses/${editId}/`
        : `${BASE_API_URL}/api/addresses/`;

      // Send country_code for address + phone_number (E.164) + phone_region (ISO-2)
      const payload = {
        ...formData,
        country_code: formData.country,
        phone_number: e164,
        phone_region: toIso2(phoneIso || formData.country || defaultCountry || 'GH'),
      };

      const res = await fetch(url, {
        method,
        headers: {
          Authorization: `Token ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!res.ok) throw new Error('Failed to save address');

      // reset
      setFormData({
        full_name: '',
        address_line_1: '',
        address_line_2: '',
        town: '',
        state_or_region: '',
        country: '',
// ‚Ä¶truncated‚Ä¶

===== src/components/addresses/GoogleAddressInput.jsx =====
// components/addresses/GoogleAddressInput.jsx
// components/addresses/GoogleAddressInput.jsx
import { useEffect, useRef } from 'react';

export default function GoogleAddressInput({ onSelect, initialValue = '', country = '' }) {
  const inputRef = useRef(null);

  const normalizeCountry = (countryNameOrCode) => {
    const map = { 'United Kingdom': 'GB', UK: 'GB' };
    const v = (countryNameOrCode || '').toString();
    return map[v] || v;
  };

  useEffect(() => {
    if (inputRef.current && initialValue) inputRef.current.value = initialValue;
  }, [initialValue]);

  useEffect(() => {
    if (!window.google?.maps) return;

    const ac = new window.google.maps.places.Autocomplete(inputRef.current, {
      types: ['address'],
      componentRestrictions: country
        ? { country: normalizeCountry(country).toLowerCase() } // üëà dynamic
        : undefined,
    });

    ac.setFields(['address_components', 'formatted_address']);

    const listener = ac.addListener('place_changed', () => {
      const place = ac.getPlace();
      if (!place.address_components) return;

      const get = (type) =>
        place.address_components.find((c) => c.types.includes(type))?.long_name || '';

      onSelect({
        address_line_1: `${get('street_number')} ${get('route')}`.trim(),
        town: get('postal_town') || get('locality'),
        state_or_region: get('administrative_area_level_1'),
        postcode: get('postal_code'),
        country: normalizeCountry(get('country')),
      });
    });

    return () => {
      if (listener?.remove) listener.remove();
    };
  }, [country]);

  return (
    <input
      ref={inputRef}
      type="text"
      placeholder="Address Line 1"
      autoComplete="off"
      className="w-full p-2 rounded border bg-white dark:bg-gray-900 dark:border-gray-700"
    />
  );
}

===== src/components/affiliate/CreateReferralDrawer.jsx =====
// components/affiliate/CreateReferralDrawer.jsx
"use client";

import React, { useState, useEffect, Fragment } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";
import { Loader2, Link2 } from "lucide-react";

export default function CreateReferralDrawer({ open, onClose }) {
  const { token } = useAuth();
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [linkGenerated, setLinkGenerated] = useState(null);
  const [creating, setCreating] = useState(false);
  const [search, setSearch] = useState("");

  useEffect(() => {
    if (!token || !open) return;

    const fetchProducts = async () => {
      setLoading(true);
      try {
        const res = await fetch(`${BASE_API_URL}/affiliate/products/recent/`, {
          headers: { Authorization: `Token ${token}` },
        });
        const data = await res.json();
        setProducts(data.results || []);
      } catch (err) {
        console.error("Error loading products:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [token, open]);

  const handleCreateLink = async (productId) => {
    if (!token) return;
    setCreating(true);
    try {
      const res = await fetch(`${BASE_API_URL}/affiliate/create-link/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Token ${token}`,
        },
        body: JSON.stringify({ product_id: productId }),
      });
      const data = await res.json();
      if (data.link) {
        setLinkGenerated(data.link);
      }
    } catch (err) {
      console.error("Failed to create link:", err);
    } finally {
      setCreating(false);
    }
  };

  const filteredProducts = products.filter((p) =>
    p.title.toLowerCase().includes(search.toLowerCase()),
  );

  return (
    <Transition.Root show={open} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-hidden">
          <div className="flex min-h-full items-end justify-center p-4 sm:p-6 text-center">
            <Transition.Child
              as={Fragment}
              enter="transform transition ease-in-out duration-300"
              enterFrom="translate-y-full"
              enterTo="translate-y-0"
              leave="transform transition ease-in-out duration-200"
              leaveFrom="translate-y-0"
              leaveTo="translate-y-full"
            >
              <Dialog.Panel className="w-full max-w-lg bg-white dark:bg-gray-900 rounded-t-2xl shadow-xl transform overflow-hidden">
                <div className="pt-3 px-4 max-h-[80vh] overflow-y-auto">
                  {/* Drag Indicator */}
                  <div className="w-12 h-1.5 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-2" />

                  <Dialog.Title className="text-lg font-semibold mb-3 text-center">
                    Create Referral Link
                  </Dialog.Title>

                  {loading ? (
                    <div className="flex justify-center py-10">
                      <Loader2 className="animate-spin w-6 h-6 text-gray-400" />
                    </div>
                  ) : linkGenerated ? (
                    <div className="bg-green-100 text-green-800 p-4 rounded text-sm text-left">
                      ‚úÖ Link created:
                      <br />
                      <a
                        href={linkGenerated}
                        className="text-blue-600 underline break-all"
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        {linkGenerated}
                      </a>
                    </div>
                  ) : products.length === 0 ? (
                    <div className="flex flex-col items-center justify-center text-center py-12 text-gray-500">
                      <img
                        src="https://www.svgrepo.com/show/506800/box.svg"
                        alt="No products"
                        className="w-24 h-24 mb-4 opacity-70"
                      />
                      <p className="text-sm">
                        No products available to refer yet.
                      </p>
                    </div>
                  ) : (
                    <>
                      <input
                        type="text"
                        value={search}
                        onChange={(e) => setSearch(e.target.value)}
                        placeholder="Search products..."
                        className="w-full px-3 py-2 mb-3 text-sm border rounded-md focus:outline-none focus:ring focus:border-blue-500 dark:bg-gray-800 dark:border-gray-700"
                      />

                      <ul className="space-y-3">
                        {filteredProducts.map((product) => (
                          <li
                            key={product.id}
                            className="border border-gray-200 dark:border-gray-700 rounded p-3 flex items-center justify-between"
                          >
                            <span className="text-sm font-medium line-clamp-1">
                              {product.title}
                            </span>
                            <button
                              onClick={() => handleCreateLink(product.id)}
                              className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-xs flex items-center gap-1"
                              disabled={creating}
                            >
                              <Link2 className="w-4 h-4" /> Create Link
                            </button>
                          </li>
                        ))}
                      </ul>
                    </>
                  )}
                </div>

                {/* Bottom Close Button */}
                <div className="border-t border-gray-200 dark:border-gray-700 p-4">
                  <button
                    onClick={onClose}
                    className="w-full text-center text-sm font-medium text-gray-700 dark:text-gray-300 hover:underline"
                  >
                    Close
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition.Root>
  );
}


===== src/components/api/data.js =====
// useCategories.js
import { useEffect, useState } from "react";

const useCategories = () => {
  const [categories, setCategories] = useState([]); // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
  const [conditions, setConditions] = useState([]);
  const [loading, setLoading] = useState(true); // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
  const [error, setError] = useState(null); // ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü

  useEffect(() => {
    const fetchCategories = async () => {
      setLoading(true);
      try {
        const response = await fetch(
          "https://media.upfrica.com/api/categories/",
        ); // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ API URL ‡¶è‡¶ñ‡¶æ‡¶®‡ßá
        const data = await response.json();
        setCategories(data.results); // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      } catch (error) {
        setError("Error fetching categories: " + error.message); // ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ
      } finally {
        setLoading(false); // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∂‡ßá‡¶∑
      }
    };

    const fetchConditions = async () => {
      setLoading(true);
      try {
        const response = await fetch(
          "https://media.upfrica.com/api/conditions/",
        ); // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ API URL ‡¶è‡¶ñ‡¶æ‡¶®‡ßá
        const data = await response.json();
        setConditions(data); // ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      } catch (error) {
        setError("Error fetching conditions: " + error.message); // ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ
      } finally {
        setLoading(false); // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∂‡ßá‡¶∑
      }
    };

    fetchCategories();
    fetchConditions(); // ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ
  }, []); // ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶°‡¶ø‡¶™‡ßá‡¶®‡ßç‡¶°‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶ö‡¶≤‡¶¨‡ßá

  return { categories, conditions, loading, error }; // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø, ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶®, ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
};

export default useCategories;


===== src/components/api/useBrands.js =====
// useBrands.js
import { useEffect, useState } from "react";

const useBrands = () => {
  const [brands, setBrands] = useState([]); // ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
  const [loading, setLoading] = useState(true); // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
  const [error, setError] = useState(null); // ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü

  useEffect(() => {
    const fetchBrands = async () => {
      setLoading(true);
      try {
        const response = await fetch("https://media.upfrica.com/api/brands/"); // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° API URL
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setBrands(data); // ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (assumes `results` field)
      } catch (err) {
        setError("Error fetching brands: " + err.message); // ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ
      } finally {
        setLoading(false); // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∂‡ßá‡¶∑
      }
    };

    fetchBrands(); // ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ
  }, []); // ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶°‡¶ø‡¶™‡ßá‡¶®‡ßç‡¶°‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶ö‡¶≤‡¶¨‡ßá

  return { brands, loading, error }; // ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°, ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
};

export default useBrands;


===== src/components/auth/AccessDeniedScreen.jsx =====
//src/components/auth/AccessDeniedScreen.jsx
export default function AccessDeniedScreen() {
  return (
    <div className="min-h-screen flex items-center justify-center px-4">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-red-600">Access Denied</h1>
        <p className="mt-3 text-gray-600">
          You do not have permission to view this page.
        </p>
      </div>
    </div>
  );
}


===== src/components/auth/LoginForm.jsx =====
// src/components/auth/LoginForm.jsx
"use client";

import React, { useEffect } from "react";
import { useFormik } from "formik";
import PasswordInput from "@/components/ui/PasswordInput";
import { useRouter, useSearchParams } from "next/navigation";
import { useDispatch } from "react-redux";
import { setUser } from "@/app/store/slices/userSlice";
import Link from "next/link";
import { FcGoogle } from "react-icons/fc";
import { FaFacebookF } from "react-icons/fa";
import { BASE_API_URL } from "@/app/constants";
import { useAuth } from "@/contexts/AuthContext"; // ‚úÖ server-driven onboarding + storage

export default function LoginForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const dispatch = useDispatch();
  const { login } = useAuth(); // ‚úÖ use AuthContext.login()

  useEffect(() => {
    // eslint-disable-next-line no-console
    console.log("‚úÖ BASE_API_URL:", BASE_API_URL);
  }, []);

  const formik = useFormik({
    initialValues: { email: "", password: "" },
    onSubmit: async (values, { setSubmitting, setErrors }) => {
      try {
        // üîê Hit the new backend login endpoint
        const response = await fetch(`${BASE_API_URL}/api/login/`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(values),
        });

        const data = await response.json().catch(() => ({}));

        if (!response.ok) {
          setErrors({ email: data?.detail || data?.message || "Login failed" });
          return;
        }

        if (!data?.user || !data?.token) {
          setErrors({ email: "Invalid response from server." });
          return;
        }

        // üåü Let AuthContext handle setting token, header, and hydrating /users/me
        const ob = await login(data); // returns backend onboarding block

        // (optional) Keep Redux in sync for existing components that rely on it
        const cleanToken = String(data.token).replace(/^"|"$/g, "").trim();
        try {
          // AuthContext stored the fresh /users/me payload in localStorage
          const storedUser = JSON.parse(localStorage.getItem("user") || "null") || data.user;
          dispatch(setUser({ user: storedUser, token: cleanToken }));
        } catch {
          dispatch(setUser({ user: data.user, token: cleanToken }));
        }

        // üéØ Redirect logic:
        // - If onboarding incomplete, ALWAYS go to server target
        // - Else, honor ?next=... if present
        // - Else, fall back to your dashboard
        const nextParam = searchParams.get("next");
        const target =
          (ob && ob.complete === false && ob.target) ? ob.target :
          (nextParam || (ob?.first_time && ob?.target) || "/new-dashboard");

        router.replace(target);
      } catch (err) {
        // eslint-disable-next-line no-console
        console.error("‚ùå Login error:", err);
        setErrors({ email: "An unexpected error occurred. Please try again." });
      } finally {
        setSubmitting(false);
      }
    },
  });

  return (
    <div className="flex items-center justify-center">
      <div className="max-w-md w-full bg-white p-4 rounded-lg shadow">
        <h2 className="text-center text-xl font-extrabold text-gray-900">
          Sign in to your account
        </h2>

        <div className="mt-4 flex space-x-4">
          <a
            href="https://media.upfrica.com/accounts/google/login/"
            className="flex-1 flex items-center justify-center border border-gray-300 py-2 rounded-lg hover:bg-gray-100 transition"
          >
            <FcGoogle className="text-2xl" />
            <span className="ml-2 text-gray-700 font-medium">Google</span>
          </a>
          <a
            href="#"
            onClick={(e) => e.preventDefault()}
            className="flex-1 flex items-center justify-center border border-gray-300 py-2 rounded-lg hover:bg-gray-100 transition"
          >
            <FaFacebookF className="text-2xl text-blue-600" />
            <span className="ml-2 text-gray-700 font-medium">Facebook</span>
          </a>
        </div>

        <div className="relative mt-6">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-gray-200" />
          </div>
          <div className="relative flex justify-center">
            <span className="px-2 bg-white text-gray-500 text-sm">
              or continue with
            </span>
          </div>
        </div>

        <form onSubmit={formik.handleSubmit} className="mt-6 space-y-4">
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700 text-left"
            >
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              onChange={formik.handleChange}
              value={formik.values.email}
              required
              className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
            />
            {formik.errors.email && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.email}</p>
            )}
          </div>

          <div>
            <PasswordInput
              id="password"
              name="password"
              value={formik.values.password}
              onChange={formik.handleChange}
              placeholder="Enter your password"
            />
            {formik.errors.password && (
              <p className="mt-1 text-sm text-red-600">
                {formik.errors.password}
              </p>
            )}
          </div>

          <div className="flex items-center justify-between">
            <label className="flex items-center text-sm text-gray-600">
              <input
                type="checkbox"
                name="rememberMe"
                className="h-4 w-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
              />
              <span className="ml-2">Remember me</span>
            </label>
            <Link
              href="/password/new"
              className="text-sm text-purple-600 hover:underline"
            >
              Forgot password?
            </Link>
          </div>

          <div>
            <button
              type="submit"
              disabled={formik.isSubmitting}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md bg-purple-600 text-white font-medium hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
            >
              {formik.isSubmitting ? (
                <svg
                  className="animate-spin h-5 w-5 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  />
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8v8H4z"
                  />
                </svg>
              ) : (
                "Log In"
              )}
            </button>
          </div>
        </form>

        <div className="mt-4 text-center">
          <button className="text-sm text-gray-500 hover:underline">
            Need help?
          </button>
        </div>
      </div>
    </div>
  );
}

===== src/components/auth/RoleGuard.jsx =====
// src/components/auth/RoleGuard.jsx
"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import { useRouter, usePathname } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import { useRoleView } from "@/contexts/RoleViewContext";
import AccessDeniedScreen from "./AccessDeniedScreen";

const SELLER_ANY = ["seller", "seller_private", "seller_business"];

const normalizeAllowed = (allowed) =>
  Array.isArray(allowed) ? allowed : allowed ? [allowed] : [];

const hasField = (obj, key) =>
  !!obj && Object.prototype.hasOwnProperty.call(obj, key);

const userHasPlan = (user) =>
  !!(user?.seller_plan && (user.seller_plan.id ?? user.seller_plan));

const matchRole = (userRoles = [], role) => {
  if (!Array.isArray(userRoles)) return false;
  if (role === "seller") return SELLER_ANY.some((r) => userRoles.includes(r));
  return userRoles.includes(role);
};

const pickBestRoleForUser = (userRoles = []) => {
  if (userRoles.some((r) => SELLER_ANY.includes(r))) return "seller";
  if (userRoles.includes("buyer")) return "buyer";
  if (userRoles.includes("agent")) return "agent";
  if (userRoles.includes("affiliate")) return "affiliate";
  return null;
};

export default function RoleGuard({ allowed = [], requirePlan = false, children }) {
  const router = useRouter();
  const pathname = usePathname();
  const { user, hydrated, refreshUser } = useAuth();
  const { roleView, setRoleView } = useRoleView();

  const [checking, setChecking] = useState(true);
  const [granted, setGranted] = useState(false);
  const didRedirectRef = useRef(false);
  const didTryRefreshRef = useRef(false);

  const allowedList = useMemo(() => normalizeAllowed(allowed), [allowed]);
  const rolesReady = hasField(user, "account_type");
  const planFieldReady = !requirePlan || hasField(user, "seller_plan");

  const userRoles = useMemo(
    () => (Array.isArray(user?.account_type) ? user.account_type : []),
    [user?.account_type]
  );

  const okByRole = useMemo(
    () => (allowedList.length === 0 ? true : allowedList.some((r) => matchRole(userRoles, r))),
    [allowedList, userRoles]
  );

  const isSeller = useMemo(
    () => userRoles.some((r) => SELLER_ANY.includes(r)),
    [userRoles]
  );

  const needsPlanDecision =
    hydrated && !!user && requirePlan && isSeller && planFieldReady && !userHasPlan(user);

  const shouldAttemptRefresh =
    hydrated && !!user && requirePlan && isSeller && !didTryRefreshRef.current &&
    (!planFieldReady || !userHasPlan(user));

  useEffect(() => {
    if (!hydrated) return;

    if (!user) {
      if (!didRedirectRef.current) {
        didRedirectRef.current = true;
        router.replace(`/login?next=${encodeURIComponent(pathname)}`);
      }
      setGranted(false);
      setChecking(false);
      return;
    }

    if (shouldAttemptRefresh && typeof refreshUser === "function") {
      didTryRefreshRef.current = true;
      (async () => { try { await refreshUser(); } catch {} })();
      setChecking(true);
      setGranted(false);
      return;
    }

    const roleCheckPending = allowedList.length > 0 && !rolesReady;
    const planCheckPending = requirePlan && isSeller && !planFieldReady;
    if (roleCheckPending || planCheckPending) {
      setChecking(true);
      setGranted(false);
      return;
    }

    if (allowedList.length === 0) {
      setGranted(true);
      setChecking(false);
      return;
    }

    if (!okByRole) {
      const best = pickBestRoleForUser(userRoles);
      if (best && roleView !== best) setRoleView(best);
      if (!didRedirectRef.current) {
        didRedirectRef.current = true;
        router.replace("/unauthorized");
      }
      setGranted(false);
      setChecking(false);
      return;
    }

    if (needsPlanDecision) {
      if (!didRedirectRef.current) {
        didRedirectRef.current = true;
        router.replace("/onboarding/account-type");
      }
      setGranted(false);
      setChecking(false);
      return;
    }

    if (roleView && !allowedList.includes(roleView)) {
      const fallback = allowedList.find((r) => matchRole(userRoles, r));
      if (fallback) setRoleView(fallback);
    }

    setGranted(true);
    setChecking(false);
  }, [
    hydrated,
    user,
    pathname,
    allowedList,
    rolesReady,
    planFieldReady,
    okByRole,
    isSeller,
    needsPlanDecision,
    shouldAttemptRefresh,
    roleView,
    userRoles,
    router,
    setRoleView,
    refreshUser,
  ]);

  if (checking) {
    return (
      <div className="w-full h-64 flex items-center justify-center text-gray-600 dark:text-gray-300">
        <span className="animate-pulse">
          {requirePlan ? "Checking plan‚Ä¶" : "Checking access‚Ä¶"}
        </span>
      </div>
    );
  }

  return granted ? children : <AccessDeniedScreen />;
}

===== src/components/badges/BadgePill.jsx =====
// src/components/badges/BadgePill.jsx
'use client';
import React from 'react';

export default function BadgePill({
  type, asButton = false, onClick, className = '',
}) {
  const labelMap = {
    verified: 'Verified seller',
    contactVerified: 'Contact verified',
    officialStore: 'Official store',
    secureSeller: 'Secure seller',
  };
  const label = labelMap[type] ?? 'Badge';

  const base =
    'inline-flex items-center gap-2 rounded-full border px-3 py-1.5 text-sm ' +
    'border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-900';

  const intent = {
    verified: 'ring-1 ring-green-200/70',
    contactVerified: 'ring-1 ring-cyan-200/70',
    officialStore: 'ring-1 ring-neutral-200/70',
    secureSeller: 'ring-1 ring-indigo-200/70',
  }[type] ?? '';

  const buttonish = asButton
    ? 'cursor-pointer hover:bg-neutral-50 dark:hover:bg-neutral-800 ' +
      'focus:outline-none focus-visible:ring-2 focus-visible:ring-violet-400'
    : '';

  const props = asButton
    ? {
        role: 'button',
        tabIndex: 0,
        onClick,
        onKeyDown: (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            onClick?.(e);
          }
        },
      }
    : {};

  return (
    <span
      aria-label={label}
      className={[base, intent, buttonish, className].join(' ')}
      {...props}
    >
      {/* simple emoji glyphs for now */}
      {type === 'verified' && <span>‚úÖ</span>}
      {type === 'contactVerified' && <span>üìû</span>}
      {type === 'officialStore' && <span>üè¨</span>}
      {type === 'secureSeller' && <span>üõ°Ô∏è</span>}
      <span className="whitespace-nowrap">{label}</span>
    </span>
  );
}

===== src/components/badges/BadgeStrip.jsx =====
'use client';
import React from 'react';
import BadgePill from './BadgePill';

export default function BadgeStrip({ keys = [], className = '', onContactClick }) {
  if (!Array.isArray(keys) || !keys.length) return null;

  return (
    <div
      className={[
        // one horizontal row that can scroll; never wrap on md+
        'min-w-0 flex flex-nowrap whitespace-nowrap gap-2 md:gap-3',
        'overflow-x-auto',
        '[-ms-overflow-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden',
        'snap-x snap-mandatory',
        className,
      ].join(' ')}
      role="list"
      aria-label="Shop badges"
    >
      {keys.map((k) => (
        <div key={k} role="listitem" className="shrink-0 snap-start">
          <BadgePill
            type={k}
            asButton={k === 'contactVerified'}
            onClick={k === 'contactVerified' ? onContactClick : undefined}
          />
        </div>
      ))}
    </div>
  );
}

===== src/components/badges/TrustBadge.jsx =====
// src/components/badges/TrustBadge.jsx
'use client';

import React from 'react';
import {
  FaCheckCircle, FaShieldAlt, FaBolt, FaStar, FaFire, FaLeaf,
  FaTruck, FaUndoAlt, FaCrown, FaMedal, FaPhoneAlt, FaStoreAlt,
} from 'react-icons/fa';

const ICONS = {
  verified: FaCheckCircle,
  contactVerified: FaPhoneAlt,
  sponsored: FaBolt,
  upfricaChoice: FaCrown,
  topRated: FaStar,
  bestSeller: FaMedal,
  limited: FaFire,
  eco: FaLeaf,
  fastDispatch: FaTruck,
  freeShipping: FaTruck,
  freeReturns: FaUndoAlt,
  officialStore: FaStoreAlt,
  secureSeller: FaShieldAlt,
};

const COLOR = {
  // bg / text colors are Tailwind classes
  verified:      { bg: 'bg-emerald-100 dark:bg-emerald-900/30', text: 'text-emerald-700 dark:text-emerald-300', ring: 'ring-emerald-200/60 dark:ring-emerald-800' },
  contactVerified:{ bg: 'bg-teal-100 dark:bg-teal-900/30',      text: 'text-teal-700 dark:text-teal-300',         ring: 'ring-teal-200/60 dark:ring-teal-800' },
  sponsored:     { bg: 'bg-amber-100 dark:bg-amber-900/30',     text: 'text-amber-800 dark:text-amber-300',       ring: 'ring-amber-200/60 dark:ring-amber-800' },
  upfricaChoice: { bg: 'bg-violet-100 dark:bg-violet-900/30',   text: 'text-violet-800 dark:text-violet-300',     ring: 'ring-violet-200/60 dark:ring-violet-800' },
  topRated:      { bg: 'bg-yellow-100 dark:bg-yellow-900/30',   text: 'text-yellow-800 dark:text-yellow-300',     ring: 'ring-yellow-200/60 dark:ring-yellow-800' },
  bestSeller:    { bg: 'bg-fuchsia-100 dark:bg-fuchsia-900/30', text: 'text-fuchsia-800 dark:text-fuchsia-300',   ring: 'ring-fuchsia-200/60 dark:ring-fuchsia-800' },
  limited:       { bg: 'bg-rose-100 dark:bg-rose-900/30',       text: 'text-rose-800 dark:text-rose-300',         ring: 'ring-rose-200/60 dark:ring-rose-800' },
  eco:           { bg: 'bg-lime-100 dark:bg-lime-900/30',       text: 'text-lime-800 dark:text-lime-300',         ring: 'ring-lime-200/60 dark:ring-lime-800' },
  fastDispatch:  { bg: 'bg-sky-100 dark:bg-sky-900/30',         text: 'text-sky-800 dark:text-sky-300',           ring: 'ring-sky-200/60 dark:ring-sky-800' },
  freeShipping:  { bg: 'bg-sky-100 dark:bg-sky-900/30',         text: 'text-sky-800 dark:text-sky-300',           ring: 'ring-sky-200/60 dark:ring-sky-800' },
  freeReturns:   { bg: 'bg-cyan-100 dark:bg-cyan-900/30',       text: 'text-cyan-800 dark:text-cyan-300',         ring: 'ring-cyan-200/60 dark:ring-cyan-800' },
  officialStore: { bg: 'bg-neutral-100 dark:bg-neutral-800',    text: 'text-neutral-800 dark:text-neutral-200',   ring: 'ring-neutral-200/60 dark:ring-neutral-700' },
  secureSeller:  { bg: 'bg-blue-100 dark:bg-blue-900/30',       text: 'text-blue-800 dark:text-blue-300',         ring: 'ring-blue-200/60 dark:ring-blue-800' },
};

const LABEL = {
  verified: 'Verified seller',
  contactVerified: 'Contact verified',
  sponsored: 'Sponsored',
  upfricaChoice: "Upfrica‚Äôs Choice",
  topRated: 'Top rated',
  bestSeller: 'Best seller',
  limited: 'Limited stock',
  eco: 'Eco friendly',
  fastDispatch: 'Fast dispatch',
  freeShipping: 'Free shipping',
  freeReturns: 'Free returns',
  officialStore: 'Official store',
  secureSeller: 'Secure seller',
};

export default function TrustBadge({ kind, label, className = '', compact = false, as = 'span', ...rest }) {
  const Tag = as;
  const Icon = ICONS[kind] ?? FaShieldAlt;
  const palette = COLOR[kind] ?? COLOR.secureSeller;
  const text = label ?? LABEL[kind] ?? 'Badge';

  return (
    <Tag
      className={[
        'inline-flex items-center gap-1.5 rounded-full',
        'px-2.5 py-1 text-[11px] font-semibold ring-1',
        palette.bg, palette.text, palette.ring,
        compact ? 'px-2 py-0.5 text-[10px]' : '',
        className,
      ].join(' ')}
      aria-label={text}
      {...rest}
    >
      <Icon className="h-3.5 w-3.5 shrink-0" aria-hidden />
      <span className="leading-none">{text}</span>
    </Tag>
  );
}

===== src/components/bigcommerce/AIMachineTypes.jsx =====
import React from "react";

const AIMachineTypes = () => {
  return (
    <section id="ai-machine-types" className="py-12 px-6 max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">
        Types of AI Machines
      </h2>

      {/* Reactive Machines */}
      <div className="mb-8">
        <h3 className="text-xl font-semibold text-gray-800 mb-2">
          Reactive machines
        </h3>
        <p className="text-gray-700 text-base">
          Reactive machines react to their environment with pre-programmed
          responses. These machines can be used in anything from smart
          thermostats to chess-playing computers.
        </p>
      </div>

      {/* Limited Memory Machines */}
      <div className="mb-8">
        <h3 className="text-xl font-semibold text-gray-800 mb-2">
          Limited memory machines
        </h3>
        <p className="text-gray-700 text-base">
          Limited memory machines use information from past experiences to make
          decisions or create an output. These machines are a bit more advanced
          than reactive counterparts. Think about the spam filter in your email.
          The filter has some sort of initial training to identify spam, and it
          keeps track of things like sender addresses, keywords, and suspicious
          attachments. It uses this training and short-term memory to send new
          emails either to the spam folder or to your inbox.
        </p>
      </div>

      <div className="bg-blue-50 border-l-4 border-blue-500 p-4 text-gray-800">
        <p>
          All of the AI systems we know of today are either reactive or limited
          memory machines. While they might seem simple on paper, they are
          revolutionizing the way that brands do business online.
        </p>
        <p className="mt-2">
          Let‚Äôs look at some of the practical implications of these machines,
          and how they‚Äôre impacting fashion ecommerce.
        </p>
      </div>
    </section>
  );
};

export default AIMachineTypes;


===== src/components/bigcommerce/AuthorCard.jsx =====
import React from "react";

const AuthorCard = () => {
  return (
    <div className="text-center space-y-3">
      <img
        className="w-24 h-24 rounded-full object-cover mx-auto"
        src="https://images.ctfassets.net/wowgx05xsdrr/2NikpkcEp1a6ck0pDOFyE7/da5149e9031c924e555c540ce2d8cd5b/577.png"
        alt="Reed Hartman"
      />
      <a
        href="https://www.bigcommerce.com/blog/author/reed-hartman/"
        className="text-blue-600 hover:underline text-sm"
      >
        Reed Hartman
      </a>
      <p className="text-sm text-gray-600">
        Content Marketing Manager at BigCommerce, helping ecommerce businesses
        grow.
      </p>
    </div>
  );
};

export default AuthorCard;


===== src/components/bigcommerce/BlogHeader.jsx =====
import React from "react";

const AiBlogHeader = () => {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-left text-gray-900 leading-tight">
        AI Is Reshaping How Fashion Brands Do Business Online
      </h1>

      <a
        href="https://www.bigcommerce.com/blog/author/reed-hartman/"
        className="text-blue-600 hover:underline"
      >
        Reed Hartman
      </a>

      <img
        src="https://images.ctfassets.net/wowgx05xsdrr/WowDjiP6bGhiSInKMNgGB/0acce55c9a00bbf3c66fa3e5061211cf/blog-header-2.png?fm=webp&amp;w=3840&amp;q=75"
        alt="Fashion Series - AI Blog"
        className="w-full h-auto rounded-md object-cover"
      />

      <div className="flex flex-wrap gap-3">
        <a
          href="https://www.bigcommerce.com/blog/category/fashion-apparel/"
          className="inline-block border border-gray-900 text-gray-400 rounded-md py-1 px-3 text-sm hover:bg-gray-200 transition-colors"
        >
          Fashion & Apparel
        </a>
        <a
          href="https://www.bigcommerce.com/blog/category/ecommerce-news-insights/"
          className="inline-block border border-gray-900 text-gray-400 rounded-md py-1 px-3 text-sm hover:bg-gray-200 transition-colors"
        >
          Ecommerce News & Insights
        </a>
      </div>
    </div>
  );
};

export default AiBlogHeader;


===== src/components/bigcommerce/BlogPage.jsx =====
import React from "react";
import TableOfContents from "./TableOfContents";
import ShareButtons from "./ShareButtons";
import BlogHeader from "./BlogHeader";
import PdfDownloadCard from "./PdfDownloadCard";
import AuthorCard from "./AuthorCard";
import WhatIsAI from "./WhatIsAI";
import AIMachineTypes from "./AIMachineTypes";
import FashionAIImpact from "./FashionAIImpact";

// import BlogContent from "./components/BlogContent";

const BlogPage = () => {
  return (
    <div className="max-w-6xl mx-auto px-4 py-10 grid grid-cols-1 md:grid-cols-4 gap-10">
      <aside className="md:col-span-1 space-y-8">
        <TableOfContents />
        {/* <ShareButtons /> */}
      </aside>
      <main className="md:col-span-3 space-y-10">
        <BlogHeader />
        <PdfDownloadCard />
        {/* <BlogContent /> */}
        <WhatIsAI />
        <AIMachineTypes />
        <FashionAIImpact />
        <AuthorCard />
      </main>
    </div>
  );
};

export default BlogPage;


===== src/components/bigcommerce/Breadcrumbs.jsx =====
import React from "react";

const Breadcrumbs = () => {
  const items = [
    { name: "Blog Home", href: "https://www.bigcommerce.com/blog/" },
    {
      name: "Fashion & Apparel",
      href: "https://www.bigcommerce.com/blog/category/fashion-apparel/",
    },
    { name: "AI Is Reshaping How Fashion Brands Do Business Online" },
  ];

  return (
    <nav
      aria-label="Breadcrumb"
      className="text-gray-600 [&_a]:text-bc-blue [&_a:hover]:text-bc-black flex w-full text-xs"
    >
      <ul className="flex w-full">
        {items.map((item, index) => (
          <li
            key={index}
            className="min-w-0 items-center font-medium flex shrink-auto md:shrink-0 first:shrink-0"
          >
            {index !== 0 && (
              <svg
                className="w-2 h-2 fill-current mx-2 shrink-0"
                viewBox="0 0 8 15"
              >
                <path d="M5.605 7.943.277 13.322a.988.988 0 0 0 .032 1.403c.398.379 1.03.364 1.411-.032l6.003-6.08a.988.988 0 0 0-.015-1.387l-6.003-6.13a1.003 1.003 0 0 0-1.413 0 .988.988 0 0 0 0 1.404l5.313 5.443Z" />
              </svg>
            )}
            <span className="truncate flex-1">
              {item.href ? (
                <a href={item.href} className="hover:text-bc-black">
                  {item.name}
                </a>
              ) : (
                <span className="hidden md:flex">{item.name}</span>
              )}
            </span>
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default Breadcrumbs;


===== src/components/bigcommerce/FashionAIImpact.jsx =====
import React from "react";

const FashionAIImpact = () => (
  <section className="py-12 px-6 max-w-5xl mx-auto">
    <h2 className="text-2xl font-bold text-gray-900 mb-4">
      How fashion brands are using AI to sell more online
    </h2>
    <p className="text-gray-700 text-base mb-4">
      While AI has become a buzzword in the last couple of years, online
      retailers have actually been leveraging AI for well over a decade...
    </p>

    <h3 className="text-xl font-semibold text-gray-800 mb-2">
      Customer-facing AI technologies
    </h3>
    <p className="text-gray-700 text-base mb-4">
      Customer-facing AI technologies have grown vastly over the last few
      years...
    </p>

    <blockquote className="border-l-4 border-blue-400 pl-4 italic text-gray-600 mb-4">
      ‚ÄúThese tools create a curated experience for customers, sometimes on an
      individual level...‚Äù
      <br />‚Äì Heather Nigro, CEO, Moxxii Consulting
    </blockquote>

    <h4 className="text-lg font-medium text-gray-700 mb-2">Chatbots</h4>
    <p className="text-gray-700 text-base mb-4">
      AI chatbots are one of the most popular (and longest running) uses of AI
      online...
    </p>

    <h4 className="text-lg font-medium text-gray-700 mb-2">
      Product discovery and recommendations
    </h4>
    <p className="text-gray-700 text-base mb-4">
      Product recommendations are something we‚Äôre all familiar with...
    </p>

    <h4 className="text-lg font-medium text-gray-700 mb-2">Personalization</h4>
    <p className="text-gray-700 text-base mb-4">
      In addition to serving up personalized product recommendations...
    </p>

    <h4 className="text-lg font-medium text-gray-700 mb-2">
      Sizing assistants, AR/VR technology
    </h4>
    <p className="text-gray-700 text-base mb-4">
      Returns are one of the biggest challenges when it comes to the fashion
      ecommerce industry...
    </p>

    <h3 className="text-xl font-semibold text-gray-800 mb-2">
      Operational AI technologies
    </h3>
    <p className="text-gray-700 text-base mb-4">
      Operational AI technologies are those that assist in day-to-day
      operations...
    </p>

    <h4 className="text-lg font-medium text-gray-700 mb-2">
      Inventory management
    </h4>
    <p className="text-gray-700 text-base mb-4">
      No matter what industry you‚Äôre in, there‚Äôs bound to be overage and
      waste...
    </p>

    <h4 className="text-lg font-medium text-gray-700 mb-2">Dynamic pricing</h4>
    <p className="text-gray-700 text-base mb-4">
      While customers benefit from dynamic pricing, businesses can, too...
    </p>

    <h4 className="text-lg font-medium text-gray-700 mb-2">
      Trend forecasting
    </h4>
    <p className="text-gray-700 text-base mb-4">
      AI is especially powerful when it comes to trend forecasting...
    </p>

    <h4 className="text-lg font-medium text-gray-700 mb-2">
      Product development
    </h4>
    <p className="text-gray-700 text-base mb-4">
      Perhaps one of the most interesting uses of AI in fashion and apparel
      product development...
    </p>

    <h2 className="text-2xl font-bold text-gray-900 mt-10 mb-4">
      Harnessing the power of AI on BigCommerce
    </h2>

    <h3 className="text-xl font-semibold text-gray-800 mb-2">
      BigAI Copywriter
    </h3>
    <p className="text-gray-700 text-base mb-4">
      Allows brands to craft compelling, SEO-optimized product descriptions...
    </p>

    <h3 className="text-xl font-semibold text-gray-800 mb-2">
      Google BigQuery
    </h3>
    <p className="text-gray-700 text-base mb-4">
      Leverages predictive analytics to offer insights on the future lifetime
      value...
    </p>

    <h3 className="text-xl font-semibold text-gray-800 mb-2">Klevu Moi</h3>
    <p className="text-gray-700 text-base mb-4">
      Conversational search tool enhancing the product discovery experience...
    </p>

    <h3 className="text-xl font-semibold text-gray-800 mb-2">
      Bloomreach Loomi
    </h3>
    <p className="text-gray-700 text-base mb-4">
      Offers AI-driven personalization, product discovery, and more...
    </p>

    <h3 className="text-xl font-semibold text-gray-800 mb-2">
      Searchspring AI
    </h3>
    <p className="text-gray-700 text-base mb-4">
      Helps boost AOV with product bundles and personalized experiences...
    </p>

    <h2 className="text-2xl font-bold text-gray-900 mt-10 mb-4">
      The final word
    </h2>
    <p className="text-gray-700 text-base mb-4">
      AI is revolutionizing how fashion brands operate ‚Äî from customer
      engagement to backend optimization. BigCommerce continues to stay at the
      forefront of innovation.
    </p>
  </section>
);

export default FashionAIImpact;


===== src/components/bigcommerce/HeaderSection.jsx =====
import React from "react";
import Breadcrumbs from "./Breadcrumbs";
import SearchBar from "./SearchBar";

const HeaderSection = () => {
  return (
    <div className="max-w-6xl mx-auto grid md:gap-4 md:grid-cols-3 py-10 p-4 ">
      <div className="col-span-2">
        <Breadcrumbs />
      </div>
      <div className="mt-8 md:mt-0">
        <SearchBar />
      </div>
    </div>
  );
};

export default HeaderSection;


===== src/components/bigcommerce/PdfDownloadCard.jsx =====
import React from "react";

const PdfDownloadCard = () => {
  return (
    <div className="flex flex-col md:flex-row gap-12 p-8 bg-gray-100">
      <div className="hidden md:block w-36 shrink-0">
        <div className="flex flex-col shadow-md bg-white">
          <img
            src="https://images.ctfassets.net/wowgx05xsdrr/WowDjiP6bGhiSInKMNgGB/0acce55c9a00bbf3c66fa3e5061211cf/blog-header-2.png"
            alt="Blog Header"
            className="aspect-video object-cover h-10"
          />
          <p className="text-[10px] text-gray-400 text-center p-2.5">
            AI Is Reshaping Fashion
          </p>
          <div className="grow px-6 pb-3 space-y-1">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="h-[3px] rounded bg-gray-300"></div>
            ))}
          </div>
        </div>
      </div>
      <div className="space-y-6">
        <div>
          <p className="text-lg font-bold">Get The Print Version</p>
          <p className="text-gray-600">
            Tired of scrolling? Download a PDF version for easier offline
            reading.
          </p>
        </div>
        <button className="bg-blue-600 text-white uppercase text-xs px-6 py-2 rounded hover:bg-blue-700 transition">
          Download PDF
        </button>
      </div>
    </div>
  );
};

export default PdfDownloadCard;


===== src/components/bigcommerce/SearchBar.jsx =====
import React from "react";

const SearchBar = () => {
  return (
    <div className="relative focus-within:drop-shadow-lg z-20">
      <input
        type="search"
        placeholder="Search for..."
        className="w-full rounded-md border-0 bg-white py-3 pl-6 pr-14 text-bc-black ring-1 ring-gray-1000 focus:ring-gray-1000 sm:text-sm sm:leading-6 peer"
      />
      <button
        type="button"
        className="absolute inset-y-0 right-6 focus:outline-none pointer-events-none peer-focus:hidden"
      >
        <svg
          className="h-4 w-4 text-gray-900"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fillRule="evenodd"
            d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z"
            clipRule="evenodd"
          />
        </svg>
      </button>
    </div>
  );
};

export default SearchBar;


===== src/components/bigcommerce/ShareButtons.jsx =====
import React from "react";

const ShareButtons = () => {
  const links = [
    {
      href: "https://twitter.com/intent/tweet?text=AI%20Is%20Reshaping...",
      icon: "fa-brands fa-twitter",
      label: "Twitter",
    },
    {
      href: "https://www.linkedin.com/shareArticle?url=https://...",
      icon: "fa-brands fa-linkedin",
      label: "LinkedIn",
    },
    {
      href: "https://www.facebook.com/sharer/sharer.php?u=https://...",
      icon: "fa-brands fa-facebook",
      label: "Facebook",
    },
  ];

  return (
    <div className="sticky top-[150px] mt-10">
      <span className="text-xs uppercase text-bc-black font-medium">
        Share this article
      </span>
      <ul className="flex flex-wrap gap-2 mt-3">
        {links.map((item, index) => (
          <li key={index}>
            <a
              href={item.href}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 hover:text-blue-800"
              title={item.label}
            >
              <i className={`${item.icon} text-2xl`}></i>
            </a>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ShareButtons;


===== src/components/bigcommerce/TableOfContents.jsx =====
import React from "react";

const TableOfContents = () => {
  return (
    <aside className="w-full md:w-64 sticky top-[150px] h-max min-h-[200px]">
      <div className="space-y-8">
        {/* Table of Contents */}
        <div className="space-y-2">
          <h6 className="uppercase text-xs tracking-wider text-gray-500 mb-5">
            Table of Contents
          </h6>
          <ul className="space-y-5">
            <li>
              <a
                href="#h2_what_is_ai__"
                className="text-base text-gray-600 hover:border-b-2 border-blue-500"
              >
                What is AI?
              </a>
            </li>
            <li>
              <a
                href="#h2_how_fashion_brands_are_using_ai_to_sell_more_online"
                className="text-base text-gray-600 hover:border-b-2 border-blue-500"
              >
                How fashion brands are using AI to sell more online
              </a>
            </li>
            <li>
              <a
                href="#h2_harnessing_the_power_of_ai_on_bigcommerce"
                className="text-base text-gray-600 hover:border-b-2 border-blue-500"
              >
                Harnessing the power of AI on BigCommerce
              </a>
            </li>
            <li>
              <a
                href="#h2_the_final_word"
                className="text-base text-gray-600 hover:border-b-2 border-blue-500"
              >
                The final word
              </a>
            </li>
          </ul>
        </div>

        {/* Share this article */}
        <div>
          <span className="uppercase text-xs font-medium text-gray-900">
            Share this article
          </span>
          <ul className="flex flex-wrap gap-2 mt-3 text-blue-600">
            <li>
              <a
                href="https://twitter.com/intent/tweet?text=AI%20Is%20Reshaping%20How%20Fashion%20Brands%20Do%20Business%20Online%20&url=https%3A%2F%2Fwww.bigcommerce.com%2Fblog%2Fai-reshaping-fashion-industry"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="Share on Twitter"
              >
                <svg
                  className="w-8 h-8"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 20c5.523 0 10-4.477 10-10S15.523 0 10 0 0 4.477 0 10s4.477 10 10 10Zm5.957-14.217a2.42 2.42 0 0 1-1 1.35 4.31 4.31 0 0 0 1.307-.384 4.81 4.81 0 0 1-1.136 1.264c.004.104.005.21.005.316 0 3.226-2.289 6.946-6.478 6.946a6.139 6.139 0 0 1-3.49-1.097 4.378 4.378 0 0 0 3.371-1.011c-.997-.019-1.838-.726-2.127-1.695.138.029.282.043.428.043.209 0 .41-.029.6-.086-1.042-.223-1.827-1.21-1.827-2.393v-.03a2.17 2.17 0 0 0 1.032.305c-.61-.439-1.013-1.186-1.013-2.032 0-.447.112-.867.308-1.228C7.061 7.529 8.74 8.499 10.631 8.6a2.594 2.594 0 0 1-.058-.556c0-1.348 1.018-2.44 2.276-2.44.655 0 1.247.296 1.662.77a4.375 4.375 0 0 0 1.446-.592Z"
                    clipRule="evenodd"
                  />
                </svg>
              </a>
            </li>

            {/* Repeat other social icons the same way: LinkedIn, Facebook, Email, Reddit, WhatsApp */}

            {/* Example LinkedIn */}
            <li>
              <a
                href="https://www.linkedin.com/shareArticle?url=https%3A%2F%2Fwww.bigcommerce.com%2Fblog%2Fai-reshaping-fashion-industry"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="Share on LinkedIn"
              >
                <svg
                  className="w-8 h-8"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 20c5.523 0 10-4.477 10-10S15.523 0 10 0 0 4.477 0 10s4.477 10 10 10ZM7.623 7.826H5.738v6.569h1.885V7.826ZM6.62 7.004h.014c.708 0 1.15-.504 1.15-1.14-.014-.648-.442-1.139-1.137-1.139-.696 0-1.151.493-1.151 1.141 0 .636.442 1.138 1.124 1.138Zm6.409 7.392h2.137v-3.654c0-2.034-1.053-2.979-2.392-2.979-1.08 0-1.756.643-1.882 1.094v-1.03H8.774c.027.546 0 6.569 0 6.569h2.117V10.77c0-.174-.002-.342.046-.466.146-.396.459-.805 1.021-.805.735 0 1.07.607 1.07 1.497v3.4Z"
                    clipRule="evenodd"
                  />
                </svg>
              </a>
            </li>
          </ul>
        </div>
      </div>
    </aside>
  );
};

export default TableOfContents;


===== src/components/bigcommerce/WhatIsAI.jsx =====
import React from "react";

const WhatIsAI = () => {
  return (
    <section id="what-is-ai" className="py-12 px-6 max-w-4xl mx-auto">
      <h2 className="text-3xl font-bold text-gray-900 mb-6">What is AI?</h2>
      <p className="text-lg text-gray-700 mb-4">
        When you think of AI ‚Äî if you‚Äôre a nerd like me ‚Äî your mind probably
        turns to Isaac Asimov: stories of robots, sentient metal beings, and
        science-fiction fantasy. But that‚Äôs still a few years off. Instead, the
        AI of today instead deals with autonomous learning systems that can
        perform tasks that would otherwise require some sort of human operation.
      </p>
      <p className="text-lg text-gray-700 mb-4">
        There are a variety of practical uses for AI. You‚Äôre probably most
        familiar with generative AI, images or text created after a person asked
        for, say, a picture of a frog playing the trumpet. This specific use
        case is having huge impacts across a variety of industries.
      </p>
      <div className="border-l-4 border-blue-600 pl-4 italic text-gray-800 mb-4">
        ‚ÄúGenerative AI is already playing a huge role in tech, and it will only
        continue to get better and more powerful as time goes on,‚Äù said{" "}
        <strong>Troy Cox</strong>, Chief Product Officer at{" "}
        <strong>BigCommerce</strong>. ‚ÄúWithin ecommerce specifically, there are
        huge possibilities, like search engine optimization, language chat
        services, translations, and image and content creation.‚Äù
      </div>
      <blockquote className="bg-gray-100 border-l-4 border-blue-500 p-4 text-gray-800 text-sm">
        ‚ÄúGenerative AI is already playing a huge role in tech, and it will only
        continue to get better and more powerful as time goes on. Within
        ecommerce specifically, there are huge possibilities, like search engine
        optimization, language chat services, translations, and image and
        content creation."
        <br />
        <span className="block mt-2 font-semibold">
          - Troy Cox, Chief Product Officer, BigCommerce
        </span>
      </blockquote>
    </section>
  );
};

export default WhatIsAI;


===== src/components/common/AccessDeniedScreen.jsx =====
//src/components/common/AccessDeniedScreen.jsx
"use client";

import React from "react";
import Link from "next/link";

export default function AccessDeniedScreen() {
  return (
    <div className="min-h-[60vh] flex flex-col items-center justify-center text-center space-y-4">
      <h1 className="text-2xl font-bold text-red-600">Access Denied</h1>
      <p className="text-gray-600">
        You don‚Äôt have permission to view this dashboard.
      </p>
      <Link href="/new-dashboard">
        <button className="btn-base btn-primary">Go Back to Dashboard</button>
      </Link>
    </div>
  );
}


===== src/components/common/AccountTypeBadge.jsx =====
//src/common/AccountTypeBadge.jsx
"use client";

import React from "react";
import { useRouter, usePathname } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import { useRoleView } from "@/contexts/RoleViewContext";
import classNames from "classnames";

const roleMap = {
  buyer: "Buyer",
  seller_private: "Seller (Private)",
  seller_business: "Seller (Business)",
  agent: "Sourcing Agent",
  affiliate: "Affiliate",
};

const badgeStyles = {
  buyer: "bg-green-100 text-green-800",
  seller_private: "bg-yellow-100 text-yellow-800",
  seller_business: "bg-blue-100 text-blue-800",
  agent: "bg-purple-100 text-purple-800",
  affiliate: "bg-pink-100 text-pink-800",
};

const activeStyles = {
  buyer: "bg-green-600 text-white",
  seller_private: "bg-yellow-600 text-white",
  seller_business: "bg-blue-600 text-white",
  agent: "bg-purple-600 text-white",
  affiliate: "bg-pink-600 text-white",
};

// Normalize for switching logic
const normalizeRole = (role) =>
  role === "seller_private" || role === "seller_business" ? "seller" : role;

// Safe parse helper
function parseAccountType(value) {
  if (!value) return [];

  if (
    Array.isArray(value) &&
    value.length > 1 &&
    typeof value[0] === "string" &&
    value.join("").startsWith("{") &&
    value.join("").endsWith("}")
  ) {
    const joined = value.join("");
    return joined
      .slice(1, -1)
      .split(",")
      .map((s) => s.trim().replace(/^"|"$/g, ""));
  }

  if (Array.isArray(value)) return value;

  if (typeof value === "string") {
    if (value.startsWith("{") && value.endsWith("}")) {
      return value
        .slice(1, -1)
        .split(",")
        .map((s) => s.trim().replace(/^"|"$/g, ""));
    }

    try {
      const parsed = JSON.parse(value);
      if (Array.isArray(parsed)) return parsed;
    } catch (e) {}

    return [value];
  }

  return [];
}

export default function AccountTypeBadge() {
  const router = useRouter();
  const { user } = useAuth();
  const { roleView, setRoleView } = useRoleView();

  const roles = parseAccountType(user?.account_type);
  const pathname = usePathname();

  const handleSwitchRole = (role) => {
    const normalized = normalizeRole(role);

    if (roleView === normalized) return;

    setRoleView(normalized);
    localStorage.setItem("roleView", normalized);

    // üß† Determine correct redirect
    if (normalized === "buyer") {
      if (
        pathname.startsWith("/new-dashboard/seller") ||
        pathname.includes("products")
      ) {
        router.push("/new-dashboard/buyer");
      } else {
        router.push("/new-dashboard");
      }
    }

    if (normalized === "seller") {
      if (!pathname.startsWith("/new-dashboard/seller")) {
        router.push("/new-dashboard/seller");
      }
    }

    if (normalized === "agent") {
      if (!pathname.startsWith("/new-dashboard/agent")) {
        router.push("/new-dashboard/agent");
      }
    }

    if (normalized === "affiliate") {
      if (!pathname.startsWith("/new-dashboard/affiliate")) {
        router.push("/new-dashboard/affiliate");
      }
    }
  };

  return (
    <div className="flex flex-wrap gap-2 items-center">
      {roles.map((role) => {
        const normalized = normalizeRole(role);
        const isActive = roleView === normalized;

        return (
          <button
            key={role}
            onClick={() => handleSwitchRole(role)}
            className={classNames(
              "text-xs font-semibold px-3 py-1 rounded transition-all duration-150 shadow-sm",
              isActive
                ? activeStyles[role]
                : badgeStyles[role] || "bg-gray-100 text-gray-700",
            )}
          >
            {roleMap[role] || role}
          </button>
        );
      })}
    </div>
  );
}


===== src/components/common/ConfirmModal.jsx =====
//src/components/common/ConfirmModal.jsx
"use client";

import { Dialog } from "@headlessui/react";

export default function ConfirmModal({
  isOpen,
  title,
  message,
  onClose,
  onConfirm,
}) {
  return (
    <Dialog
      open={isOpen}
      onClose={onClose}
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
    >
      <Dialog.Panel className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-xl max-w-sm w-full">
        <Dialog.Title className="text-lg font-bold text-black dark:text-white">
          {title}
        </Dialog.Title>
        <p className="mt-2 text-sm text-gray-700 dark:text-gray-300">
          {message}
        </p>
        <div className="mt-4 flex justify-end gap-2">
          <button
            onClick={onClose} // ‚úÖ updated from onCancel
            className="px-3 py-1.5 text-sm bg-gray-200 dark:bg-gray-700 rounded-md"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="px-3 py-1.5 text-sm bg-red-600 text-white rounded-md"
          >
            Yes, Undo
          </button>
        </div>
      </Dialog.Panel>
    </Dialog>
  );
}


===== src/components/common/New arrivals/NewArrivals.jsx =====
// components/NewArrivals.jsx
import React from "react";
import dynamic from "next/dynamic";
import Link from "next/link";
import Image from "next/image";
import { IoIosArrowRoundForward } from "react-icons/io";
import { FaShoppingCart } from "react-icons/fa";

// only the price widget runs in the browser
const Price = dynamic(() => import("../../Price"), { ssr: false });

export default async function NewArrivals({ title }) {
  const res = await fetch(
    //'https://media.upfrica.com/api/product-list/recent/',
    "http://127.0.0.1:8000/api/product-list/recent/",
    { next: { revalidate: 120 } },
  );

  if (!res.ok) {
    throw new Error(`Failed to fetch products: ${res.status}`);
  }

  const { results: products } = await res.json();

  return (
    <div className="container mx-auto bg-white shadow-md py-10 mb-2 p-5 rounded-lg">
      {/* Header */}
      <div className="flex gap-4 pb-4 items-center justify-between md:justify-start">
        <h1 className="text-xl md:text-3xl font-extrabold tracking-wide">
          {title}
        </h1>
        <IoIosArrowRoundForward className="h-8 w-8 text-gray-700" />
      </div>

      {/* Horizontal Scroll Container */}
      <div className="overflow-x-auto pb-4">
        <div className="flex space-x-4">
          {products.map((product) => {
            const {
              id,
              title: prodTitle,
              product_images,
              seller_country,
              seo_slug,
              slug,
              price_cents,
              sale_price_cents,
              price_currency,
              sale_end_date,
              on_sales,
            } = product;

            const countryCode = (seller_country || "gh").toLowerCase();
            const pathSlug = seo_slug || slug;

            return (
              <div
                key={id}
                className="border shadow-lg rounded-lg overflow-hidden flex flex-col min-w-[200px] h-[220px]"
              >
                {/* Image */}
                <div className="flex-grow overflow-hidden">
                  <Link href={`/${countryCode}/${pathSlug}/`}>
                    <Image
                      src={product_images?.[0] || "/placeholder.png"}
                      alt={prodTitle}
                      width={300}
                      height={300}
                      className="w-full h-full object-cover transform transition-all duration-1000 ease-in-out hover:scale-110 hover:-translate-y-2"
                    />
                  </Link>
                </div>

                {/* Price + Cart (client) */}
                <div className="flex items-center justify-between px-2 py-1 bg-gray-100">
                  <Price
                    priceCents={price_cents}
                    salePriceCents={sale_price_cents}
                    priceCurrency={price_currency}
                    saleEndDate={sale_end_date}
                    onSales={on_sales}
                  />
                  <button className="p-1 border-2 border-black rounded">
                    <FaShoppingCart className="text-purple-500" size={20} />
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}


===== src/components/common/StarRating.jsx =====
import React from "react";
import { Star } from "lucide-react";

export default function StarRating({ rating = 0 }) {
  const maxStars = 5;
  const filledStars = Math.round(rating);

  return (
    <div className="flex items-center gap-0.5">
      {[...Array(maxStars)].map((_, i) => (
        <Star
          key={i}
          size={16}
          fill={i < filledStars ? "#facc15" : "none"}
          stroke="#facc15"
        />
      ))}
    </div>
  );
}

===== src/components/common/footer/Footer.jsx =====
// src/components/Footer.tsx
import Image from "next/image";
import Link from "next/link";
import { FaCartPlus, FaWhatsapp } from "react-icons/fa";
import { MdOutlineEmail, MdSell } from "react-icons/md";

export default function Footer() {
  return (
    <div className="bg-black">
      <footer className="container mx-auto py-10 px-4 2xl:px-0 text-white">
        {/* Main Footer Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-5 gap-10">
          {/* Branding & Contact Section */}
          <div className="space-y-4">
            <h2 className="text-2xl font-bold text-gray-50">
              Upfrica - Global
            </h2>
            <p className="text-sm text-gray-300">
              Online Shopping in Ghana, Nigeria, UK for quality items at
              discounted prices. Sell, deliver, process payments, and grow your
              business. Buy &amp; sell African products, electronics, machines
              &amp; related products.
            </p>
            <div className="space-y-2">
              <p className="flex items-center gap-2 text-sm text-gray-300 hover:text-purple-500 cursor-pointer">
                <FaWhatsapp className="w-5 h-5" /> +44 7466800672
              </p>
              <p className="flex items-center gap-2 text-sm text-gray-300 hover:text-purple-500 cursor-pointer">
                <MdOutlineEmail className="w-5 h-5" /> email us
              </p>
            </div>
          </div>

          {/* Navigation Sections */}
          <div className="lg:col-span-4 grid grid-cols-2 md:grid-cols-4 gap-10">
            {/* Page Section */}
            <div className="space-y-4">
              <h3 className="text-xl font-bold tracking-wide text-gray-50">
                Page
              </h3>
              <ul className="space-y-2 text-sm">
                <li className="hover:text-purple-500">
                  <Link href="/deals">Deals</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/listings">Listings</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/about">About Us</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/contact">Contact Us</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/blog">News &amp; Blog</Link>
                </li>
              </ul>
            </div>

            {/* Links Section */}
            <div className="space-y-4">
              <h3 className="text-xl font-bold tracking-wide text-gray-50">
                Links
              </h3>
              <ul className="space-y-2 text-sm">
                <li className="hover:text-purple-500">
                  <Link href="/signup">Sign up</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/login">Sign in</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/privacy-policy">Privacy Policy</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/terms">Terms</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/support">Support</Link>
                </li>
              </ul>
            </div>

            {/* Countries Section */}
            <div className="space-y-4">
              <h3 className="text-xl font-bold tracking-wide text-gray-50">
                Countries
              </h3>
              <ul className="space-y-2 text-sm">
                <li className="hover:text-purple-500">
                  <Link href="/ghana">Ghana</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/united-kingdom">United Kingdom</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/nigeria">Nigeria</Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/global">Global</Link>
                </li>
              </ul>
            </div>

            {/* Quick Links Section */}
            <div className="space-y-4">
              <h3 className="text-xl font-bold tracking-wide text-gray-50">
                Quick Links
              </h3>
              <ul className="space-y-2 text-sm">
                <li className="hover:text-purple-500">
                  <Link href="/sales" className="flex items-center">
                    <MdSell className="mr-2 w-5 h-5" /> Sales on Upfrica
                  </Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/orders" className="flex items-center">
                    <FaCartPlus className="mr-2 w-5 h-5" /> Orders
                  </Link>
                </li>
                <li className="hover:text-purple-500">
                  <Link href="/dashboard">Dashboard</Link>
                </li>
              </ul>
            </div>
          </div>
        </div>

        {/* Payment & Security Section */}
        <div className="mt-10 border-t border-gray-700 pt-6">
          <div className="flex flex-col md:flex-row md:justify-between items-start md:items-center">
            <div className="mb-4 md:mb-0">
              <h3 className="text-xl font-bold text-gray-50">Ghana HQ</h3>
              <p className="text-sm text-gray-400">
                Upfrica - African Marketplace BD. All rights reserved.
              </p>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-2 text-gray-50">
                Payment &amp; Security
              </h3>
              <div className="flex gap-4">
                <Image
                  className="rounded"
                  src="https://d26ukeum83vx3b.cloudfront.net/assets/momo-f05ddc4de74168553b74a880e7f960a1a9854e3110b5696256500f4d8f3ee1fa.jpeg"
                  alt="Mobile Money"
                  width={56}
                  height={40}
                />
                <Image
                  className="rounded"
                  src="https://d26ukeum83vx3b.cloudfront.net/assets/visa-d303de42ebf4fbc0e8fd0e3b7f92f203822cdbbc123bc27214283acdd1fdafa7.svg"
                  alt="Visa"
                  width={56}
                  height={40}
                />
                <Image
                  className="rounded"
                  src="https://d26ukeum83vx3b.cloudfront.net/assets/mastercard-23b4badc9b2f83763ca268da7a89378d3a9732066d23f7683ecf24b5bde0f06f.svg"
                  alt="Mastercard"
                  width={56}
                  height={40}
                />
                <Image
                  className="rounded"
                  src="https://d26ukeum83vx3b.cloudfront.net/assets/expresscard-95d23c429de33f9f60a52390d788eae22f1f625648b4e587e87449c8304bd357.svg"
                  alt="ExpressCard"
                  width={56}
                  height={40}
                />
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}


===== src/components/common/header/Cover.jsx =====
import Link from "next/link";
import React from "react";

const Cover = () => {
  return (
    <Link href={"/deals"}>
      <img
        src="https://d26ukeum83vx3b.cloudfront.net/assets/blackfriday-long-a1f324588543075e71b91f6cfc8ce7e49fc41334fd5f13d721e6efb8b356ed95.jpg?w=auto&qlt=50&fmt=auto&noiser=0&fmt.jpeg.interlaced=true&fmt.jp2.qlt=40&"
        alt=""
      />
    </Link>
  );
};

export default Cover;


===== src/components/common/header/CustomSlider.jsx =====
import React from "react";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const ResponsiveSlider = () => {
  const settings = {
    dots: true,
    infinite: false,
    speed: 300,
    slidesToShow: 4,
    slidesToScroll: 4,
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 3,
          infinite: true,
          dots: true,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };

  return (
    <div className="w-full">
      <Slider {...settings}>
        <div>
          <h3>1</h3>
        </div>
        <div>
          <h3>2</h3>
        </div>
        <div>
          <h3>3</h3>
        </div>
        <div>
          <h3>4</h3>
        </div>
        <div>
          <h3>5</h3>
        </div>
        <div>
          <h3>6</h3>
        </div>
      </Slider>
    </div>
  );
};

export default ResponsiveSlider;


===== src/components/common/header/Header.jsx =====
"use client";

import React, { useState } from "react";
import { BiUser } from "react-icons/bi";
import { FaWhatsapp } from "react-icons/fa";
import { IoMdMenu } from "react-icons/io";
import { IoClose } from "react-icons/io5";
import { useSelector, useDispatch } from "react-redux";
import Navbar from "./Nav"; // Adjust paths as needed
import Link from "next/link";
import UserMenu from "./UserMenu";
import UserName from "./UserName";
import ShopingCart from "./ShopingCart";
import SearchBox from "./SearchBox";
import PhoneSlider from "./PhoneSlider";
import NavTitle from "./NavTitle";
import {
  selectCountryList,
  selectSelectedCountry,
  setSelectedCountry,
} from "@/app/store/slices/countrySlice";

export default function Header() {
  const dispatch = useDispatch();
  const countries = useSelector(selectCountryList);
  const selectedCountry = useSelector(selectSelectedCountry);
  console.log("selected country", selectedCountry);

  const [showMenu, setShowMenu] = useState(false);
  const toggleMenu = () => setShowMenu(!showMenu);

  const handleCountryChange = (e) => {
    const code = e.target.value;
    const country = countries.find((c) => c.code === code);
    if (country) dispatch(setSelectedCountry(country));
  };

  return (
    <header className="bg-white">
      <div className="px-4 py-3 xl:py-1">
        <div className="relative">
          <div className="flex items-center justify-between xl:hidden">
            <Link href="/">
              <img
                className="h-auto w-[100px]  ml-4"
                src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp"
                alt="Upfrica Logo"
              />
            </Link>
            <Link href="/products/new">
              <button className="bg-purple-500 text-white text-sm font-semibold px-3 py-1 rounded-md">
                Sell
              </button>
            </Link>
            <div className="flex items-center space-x-3">
              <ShopingCart />
              <UserMenu />
              {showMenu ? (
                <IoClose
                  onClick={toggleMenu}
                  className="h-6 w-6 cursor-pointer"
                />
              ) : (
                <IoMdMenu
                  onClick={toggleMenu}
                  className="h-6 w-6 cursor-pointer"
                />
              )}
            </div>
          </div>

          {/* Mobile nav titles */}
          {showMenu && (
            <div className="px-0">
              <NavTitle isOpen={showMenu} />
            </div>
          )}
        </div>

        {/* Mobile: Search, PhoneSlider, Country Dropdown & WhatsApp */}
        <div className="mt-3 xl:hidden space-y-2">
          <SearchBox />
          <PhoneSlider />

          <div className="flex items-center justify-between">
            {/* Country selector */}
            <div className="flex justify-center">
              <select
                value={selectedCountry?.code || ""}
                onChange={handleCountryChange}
                className="border border-violet-700 rounded-md px-3 py-2 ring-0 focus:ring-0 focus:border-violet-700"
              >
                <option value="" disabled>
                  Select Country
                </option>
                {countries.map((c) => (
                  <option key={c.code} value={c.code}>
                    {c.name}
                  </option>
                ))}
              </select>
            </div>

            {/* WhatsApp join */}
            <div className=" ml-5 flex-1 flex items-center justify-center bg-gray-100 p-2 rounded-md">
              <FaWhatsapp className="text-green-500 h-6 w-6" />
              <span className="text-purple-500 text-sm font-medium ml-2">
                Join the WhatsApp Group
              </span>
            </div>
          </div>
        </div>

        {/* Desktop Header */}
        <div className="hidden xl:flex items-center justify-between w-full gap-5">
          <div className="flex items-center">
            <Link href="/">
              <img
                className="h-10 w-auto"
                src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp"
                alt="Upfrica Logo"
              />
            </Link>
            <div className="w-auto">
              <SearchBox />
            </div>
          </div>

          <div className="flex items-center justify-between space-x-3">
            {/* Country selector */}
            <div>
              <select
                value={selectedCountry?.code || ""}
                onChange={handleCountryChange}
                className="border border-gray-300 rounded-md px-3 py-2 ring-0 focus:ring-0 focus:border-violet-700"
              >
                <option value="" disabled>
                  Select Country
                </option>
                {countries.map((c) => (
                  <option key={c.code} value={c.code}>
                    {c.name}
                  </option>
                ))}
              </select>
            </div>

            {/* WhatsApp join */}
            <div className="flex items-center bg-gray-50 py-2 px-3 rounded-md">
              <FaWhatsapp className="text-green-500 h-6 w-6" />
              <span className="text-purple-500 text-sm font-medium ml-2">
                Join WhatsApp Group
              </span>
            </div>

            <ShopingCart />
            <Link href="/products/new">
              <button className="border border-gray-400 rounded-md px-2 py-1 text-purple-500 font-bold text-sm">
                Sell
              </button>
            </Link>

            <div className="flex items-center space-x-2">
              <UserMenu />
              <UserName />
            </div>
          </div>
        </div>
      </div>

      <Navbar />
    </header>
  );
}


===== src/components/common/header/LogoutButton.jsx =====
"use client";
import { useRouter } from "next/navigation";
import React from "react";

const LogoutButton = () => {
  const router = useRouter();
  const user = JSON.parse(localStorage.getItem("user")) || {};

  const logOut = () => {
    localStorage.removeItem("user");
    router.push("/");
  };

  return (
    <div>
      {!user && (
        <Link href="/signup">
          <button className="px-4 py-1 bg-purple-500 text-white rounded text-xl font-bold">
            Join
          </button>
        </Link>
      )}
      {user && (
        <button
          className="px-2 py-1 bg-purple-500 text-white rounded  font-bold"
          onClick={logOut}
        >
          Logout
        </button>
      )}
    </div>
  );
};

export default LogoutButton;


===== src/components/common/header/Nav.jsx =====
import Link from "next/link";

const Navbar = () => {
  const datas = [
    { title: "Home", id: 1, url: "/" },
    { title: "Browse", id: 2, url: "/browse" },
    { title: "Deals", id: 3, url: "/todays-deals" },
    { title: "Shops", id: 4, url: "/shops" },
    { title: "Categories", id: 5, url: "/categories" },
    { title: "Help", id: 6, url: "/help" },
    { title: "UK Site", id: 7, url: "/uk-site" },
    { title: "Careers", id: 7, url: "/careers" },
  ];

  return (
    <div className="hidden lg:flex justify-center py-4 border-t border-b">
      <ul className=" text-base font-medium flex gap-6 tracking-wide text-gray-800">
        {datas.map((data) => (
          <li key={data.id} className="hover:text-purple-500">
            <Link href={data.url}>{data.title}</Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Navbar;


===== src/components/common/header/NavTitle.jsx =====
// import Link from 'next/link';
// import React from 'react';

// const NavTitle = () => {
//   return (
//     <div className="absolute  left-0 w-full h-[400px] bg-white z-50 shadow-md 2xl:hidden ">
//       {/* <ul className="flex flex-col items-center justify-center gap-4 py-10 text-black">
//         <li className="nav-item">
//           <Link href="/" className="nav-link">Home</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/products" className="nav-link">Browse</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/todays-deals" className="nav-link">Deals</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/shops" className="nav-link">Shops</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/categories" className="nav-link">Categories</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/how-it-works" className="nav-link">How It Works</Link>
//         </li>
//         <li className="nav-item">
//           <a
//             href="https://upfrica.co.uk"
//             target="_blank"
//             rel="noopener noreferrer"
//             className="nav-link"
//           >
//             UK Site
//           </a>
//         </li>
//       </ul> */}
//       <ul className="flex flex-col  gap-8 text-black navbar-nav nav-active-line navbar-nav-scroll ">
//         <li className="nav-item">
//           <Link href="/" className="nav-link">Home</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/products" className="nav-link">Browse</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/todays-deals" className="nav-link">Deals</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/shops" className="nav-link">Shops</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/categories" className="nav-link">Categories</Link>
//         </li>
//         <li className="nav-item">
//           <Link href="/how-it-works" className="nav-link">How It Works</Link>
//         </li>
//         <li className="nav-item">
//           <a
//             href="https://upfrica.co.uk"
//             target="_blank"
//             rel="noopener noreferrer"
//             className="nav-link"
//           >
//             UK Site
//           </a>
//         </li>
//       </ul>
//     </div>
//   );
// };

// export default NavTitle;

// import Link from 'next/link';
// import React from 'react';

// const navItems = [
//   { name: 'Home', href: '/' },
//   { name: 'Browse', href: '/products' },
//   { name: 'Deals', href: '/todays-deals' },
//   { name: 'Shops', href: '/shops' },
//   { name: 'Categories', href: '/categories' },
//   { name: 'How It Works', href: '/how-it-works' },
//   { name: 'UK Site', href: 'https://upfrica.co.uk', external: true },
// ];

// const NavTitle = () => {
//   return (
//     <div className="absolute left-0 w-full h-auto bg-white z-50 shadow-md 2xl:hidden">
//       <ul className="flex flex-col text-black">
//         {navItems.map((item, index) => (
//           <li
//             key={index}
//             className="nav-item border-t border-b px-6 py-4 text-left"
//           >
//             {item.external ? (
//               <a
//                 href={item.href}
//                 target="_blank"
//                 rel="noopener noreferrer"
//                 className="nav-link"
//               >
//                 {item.name}
//               </a>
//             ) : (
//               <Link href={item.href} className="nav-link">
//                 {item.name}
//               </Link>
//             )}
//           </li>
//         ))}
//       </ul>
//     </div>
//   );
// };

// export default NavTitle;

import Link from "next/link";
import React from "react";

const navItems = [
  { name: "Home", href: "/" },
  { name: "Browse", href: "/products" },
  { name: "Deals", href: "/todays-deals" },
  { name: "Shops", href: "/shops" },
  { name: "Categories", href: "/categories" },
  { name: "How It Works", href: "/how-it-works" },
  { name: "UK Site", href: "https://upfrica.co.uk", external: true },
  { name: "Careers", href: "/careers", external: true },
];

const NavTitle = ({ isOpen }) => {
  return (
    // <div
    //   className={`absolute  left-0 w-full  bg-white z-50 top-40 transition-all duration-200 ease-in-out transform
    //     ${isOpen ? 'translate-y-0 opacity-100' : '-translate-y-full opacity-0'}
    //     2xl:hidden`}
    // >
    //   <ul className="flex flex-col text-black py-4 ">
    //     {navItems.map((item, index) => (
    //       <li
    //         key={index}
    //         className="nav-item border-t border-b border-gray-200 px-4 py-3 text-left text-base"
    //       >
    //         {item.external ? (
    //           <a
    //             href={item.href}
    //             target="_blank"
    //             rel="noopener noreferrer"
    //             className="nav-link"
    //           >
    //             {item.name}
    //           </a>
    //         ) : (
    //           <Link href={item.href} className="nav-link">
    //             {item.name}
    //           </Link>
    //         )}
    //       </li>
    //     ))}
    //   </ul>
    // </div>

    <>
      {/* BACKDROP */}
      <div
        className={`fixed 2xl:hidden inset-0 bg-white transition-opacity duration-300 ease-in-out top-10 z-40 ${
          isOpen ? "opacity-80 visible" : "opacity-0 invisible"
        }`}
      />

      {/* MENU */}
      <div
        className={`absolute left-0 w-full  bg-white z-50 top-24 lg:top-40 transition-all duration-300 ease-in-out transform 
          ${isOpen ? "bg-opacity-100 " : "-translate-y-full opacity-0"} 
          2xl:hidden`}
      >
        <ul className="flex flex-col text-black py-4">
          {navItems.map((item, index) => (
            <li
              key={index}
              className="nav-item border-t border-b border-gray-200 px-4 py-3 text-left text-base"
            >
              {item.external ? (
                <a
                  href={item.href}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="nav-link"
                >
                  {item.name}
                </a>
              ) : (
                <Link href={item.href} className="nav-link">
                  {item.name}
                </Link>
              )}
            </li>
          ))}
        </ul>
      </div>
    </>
  );
};

export default NavTitle;


===== src/components/common/header/PhoneSlider.jsx =====
import Link from "next/link";
import React from "react";
// https://api.whatsapp.com/send/?phone=233533675791&text&type=phone_number&app_absent=0

const PhoneSlider = () => {
  const categories = [
    { id: 1, slug: "my-listings", url: "/categories/my-listings" },
    {
      id: 2,
      slug: "help-support",
      url: "https://api.whatsapp.com/send/?phone=233533675791&text&type=phone_number&app_absent=0",
    },
    { id: 3, slug: "our-location", url: "/categories/our-location" },
    { id: 4, slug: "uk-site", url: "/categories/uk-site" },
    { id: 5, slug: "all-listings", url: "/product" },
    {
      id: 6,
      slug: "deals-up-to-50-off",
      url: "/categories/deals-up-to-50-off",
    },
    { id: 7, slug: "shops", url: "/shops" },
    { id: 8, slug: "affiliate-jobs", url: "/dropship" },
    { id: 9, slug: "how-to-sell", url: "/categories/how-to-sell" },
    {
      id: 10,
      slug: "help",
      url: "https://api.whatsapp.com/send/?phone=233533675791&text&type=phone_number&app_absent=0",
    },
    { id: 11, slug: "blenders", url: "/categories/blenders" },
    { id: 12, slug: "women-bags", url: "/categories/women-bags" },
    { id: 13, slug: "rice-cooker", url: "/categories/rice-cooker" },
    { id: 14, slug: "machines", url: "/categories/machines" },
    { id: 15, slug: "my-purchases", url: "/categories/my-purchases" },
    { id: 16, slug: "my-sales", url: "/categories/my-sales" },
    { id: 17, slug: "sellplus", url: "/categories/sellplus" },
    { id: 18, slug: "projectors", url: "/categories/projectors" },
    { id: 19, slug: "help-centre", url: "/support" },
  ];

  return (
    <div className="xl:hidden overflow-x-auto py-3 scrollbar-hide">
      <div className="flex gap-4 whitespace-nowrap ">
        {categories.map((data) => (
          <div key={data.id}>
            <Link href={data.url}>
              <p className="border border-black py-1 px-4 rounded-3xl text-sm font-bold">
                {data.slug}
              </p>
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PhoneSlider;


===== src/components/common/header/SearchBox.jsx =====
"use client";

import { useState, useEffect } from "react";
import { IoMdSearch, IoMdClose } from "react-icons/io";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useSelector } from "react-redux";
import { convertPrice } from "@/app/utils/utils";
import { selectSelectedCountry } from "@/app/store/slices/countrySlice";

// Animated skeleton loader for when results are loading
const SkeletonLoader = () => (
  <div className="space-y-2 p-3">
    {[1, 2, 3, 4].map((i) => (
      <div key={i} className="flex items-center space-x-4 animate-pulse">
        <div className="w-12 h-12 bg-gray-300 rounded" />
        <div className="flex-1 space-y-2">
          <div className="h-4 bg-gray-300 rounded w-3/4" />
          <div className="h-3 bg-gray-300 rounded w-1/2" />
        </div>
      </div>
    ))}
  </div>
);

export default function SearchBox() {
  const [searchText, setSearchText] = useState("");
  const [debouncedSearchText, setDebouncedSearchText] = useState("");
  const [results, setResults] = useState([]);
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [loading, setLoading] = useState(false);

  const router = useRouter();
  const selectedCountry = useSelector(selectSelectedCountry);
  const exchangeRates = useSelector((state) => state.exchangeRates.rates);

  // Debounce the search input
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchText(searchText);
    }, 400);
    return () => clearTimeout(timer);
  }, [searchText]);

  // Show loader immediately when user types
  useEffect(() => {
    if (searchText) {
      setLoading(true);
    } else {
      setLoading(false);
      setDropdownVisible(false);
      setResults([]);
    }
  }, [searchText]);

  // Fetch search results
  useEffect(() => {
    const fetchResults = async () => {
      if (!debouncedSearchText) {
        setResults([]);
        setDropdownVisible(false);
        setLoading(false);
        return;
      }
      try {
        const res = await fetch(
          `https://media.upfrica.com/api/products/search/?q=${encodeURIComponent(debouncedSearchText)}`,
        );
        const data = await res.json();
        setResults(data.results || []);
        setDropdownVisible((data.results || []).length > 0);
      } catch (err) {
        console.error(err);
        setResults([]);
        setDropdownVisible(false);
      }
      setLoading(false);
    };
    fetchResults();
  }, [debouncedSearchText]);

  const clearSearch = () => {
    setSearchText("");
    setResults([]);
    setDropdownVisible(false);
    setLoading(false);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const q = searchText.trim();
      if (q) router.push(`/filter?q=${encodeURIComponent(q)}`);
    }
  };

  return (
    <div className="relative w-full xl:w-[50vw]">
      {/* Search Icon */}
      <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
        <IoMdSearch className="h-7 w-7 text-purple-500" />
      </div>

      <input
        type="text"
        value={searchText}
        onChange={(e) => setSearchText(e.target.value)}
        onKeyDown={handleKeyDown}
        onFocus={() => results.length > 0 && setDropdownVisible(true)}
        placeholder="Search for products..."
        className="w-full pl-10 pr-12 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-500 tracking-wide text-lg"
      />

      {/* Clear Button */}
      {searchText && (
        <button
          onClick={clearSearch}
          className="absolute inset-y-0 right-0 flex items-center pr-4 text-gray-500 hover:text-gray-700"
        >
          <IoMdClose className="h-7 w-7" />
        </button>
      )}

      {(dropdownVisible || loading) && (
        <div className="absolute top-full mt-1 w-full z-20">
          <div className="bg-white border shadow-lg rounded-md max-h-[450px] overflow-y-auto">
            {loading ? (
              <SkeletonLoader />
            ) : (
              results.map((item) => {
                // Destructure and normalize
                const {
                  id,
                  product_images,
                  title,
                  price_cents,
                  price_currency,
                  sale_price_cents,
                  sale_end_date,
                  on_sales,
                  seller_country,
                  seo_slug,
                  slug,
                } = item;

                // Determine routing slug
                const countryCode = seller_country?.toLowerCase() || "gh";
                const linkSlug = seo_slug || slug;

                // Convert prices
                const regular = convertPrice(
                  price_cents / 100,
                  price_currency,
                  selectedCountry?.code,
                  exchangeRates,
                );
                const saleActive =
                  (sale_end_date &&
                    new Date(sale_end_date) > new Date() &&
                    sale_price_cents > 0) ||
                  on_sales;
                const sale =
                  saleActive && sale_price_cents
                    ? convertPrice(
                        sale_price_cents / 100,
                        price_currency,
                        selectedCountry?.code,
                        exchangeRates,
                      )
                    : null;

                return (
                  <Link
                    href={`/${countryCode}/${linkSlug}/`}
                    key={id}
                    className="block hover:bg-gray-100 p-3"
                    onClick={() => setDropdownVisible(false)}
                  >
                    <div className="flex items-center gap-4">
                      <img
                        src={product_images?.[0] || "/placeholder.jpg"}
                        alt={title}
                        className="w-12 h-12 object-cover rounded"
                      />
                      <div className="flex flex-col">
                        <p className="font-medium text-sm text-gray-800 truncate w-[200px]">
                          {title}
                        </p>
                        <div className="text-sm text-gray-900 flex items-baseline gap-2">
                          <span>
                            {selectedCountry?.symbol}{" "}
                            {(sale ?? regular).toFixed(2)}
                          </span>
                          {sale && (
                            <span className="line-through text-gray-500">
                              {selectedCountry?.symbol} {regular.toFixed(2)}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </Link>
                );
              })
            )}
          </div>
        </div>
      )}
    </div>
  );
}


===== src/components/common/header/ShopingCart.jsx =====
// "use client"
// import React, { useEffect, useState } from 'react';
// import Link from 'next/link';
// import { FaShoppingCart, FaWhatsapp } from 'react-icons/fa';
// import { IoMdSearch } from 'react-icons/io';
// import UserName from './UserName';
// import UserMenu from './UserMenu';
// import { AiOutlineShoppingCart } from 'react-icons/ai';

// const ShopingCart = () => {
//     const [hasProductsInCart, setHasProductsInCart] = useState(false);
//     const [basketCount, setBasketCount] = useState(0);

//     useEffect(() => {
//         // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá 'basket' ‡¶®‡¶æ‡¶Æ‡¶ï ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//         const basket = JSON.parse(localStorage.getItem('basket') || '[]');

//         // ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá 'basket' ‡¶è ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
//         if (basket.length > 0) {
//             setHasProductsInCart(true); // ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßç‡¶ü‡ßá‡¶ü true ‡¶π‡¶¨‡ßá
//             setBasketCount(basket.length); // ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//         } else {
//             setHasProductsInCart(false); // ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá false
//         }
//     }, []);

//     return (
//         <div>
//              {hasProductsInCart && (
//                 <Link href='/cart'>

//                     <div className="relative flex items-center mx-4">
//                         <AiOutlineShoppingCart className="w-8 h-8 text-purple-500" />

//                         {/* ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 0 ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶® */}
//                         {basketCount > 0 && (
//                             <span className="absolute top-[-8px] right-[-12px] bg-purple-500 text-white rounded-full text-xs w-5 h-5 flex items-center justify-center">
//                                 {basketCount}
//                             </span>
//                         )}
//                     </div>
//                 </Link>
//             )}
//         </div>
//     );
// }

// export default ShopingCart;

// ShopingCart.jsx
"use client";
import React from "react";
import Link from "next/link";
import { AiOutlineShoppingCart } from "react-icons/ai";
import { useSelector } from "react-redux";

const ShopingCart = () => {
  const basketItems = useSelector((state) => state.basket.items);
  const basketCount = basketItems.reduce(
    (total, item) => total + item.quantity,
    0,
  );

  return (
    <div>
      {basketCount > 0 && (
        <Link href="/cart">
          <div className="relative flex items-center mx-4">
            <AiOutlineShoppingCart className="w-8 h-8 text-purple-500" />
            <span className="absolute top-[-8px] right-[-12px] bg-purple-500 text-white rounded-full text-xs w-5 h-5 flex items-center justify-center">
              {basketCount}
            </span>
          </div>
        </Link>
      )}
    </div>
  );
};

export default ShopingCart;


===== src/components/common/header/UserEmail.jsx =====
"use client";
import React, { useEffect, useState } from "react";
import { FaRegUser } from "react-icons/fa";
import { FiUserPlus } from "react-icons/fi";
import UserName from "./UserName";
import { useSelector } from "react-redux";

const UserEmail = () => {
  const [user, setUser] = useState(null);
  const { user: userData, token } = useSelector((state) => state.auth);
  // const token = useSelector((state) => state.user.token);
  useEffect(() => {
    const user = localStorage.getItem("user");
    setUser(user);
  }, []);
  return (
    <div className="flex gap-3">
      <div className="flex items-center">
        <FaRegUser className="h-5 lg:h-7 w-5 lg:w-7 text-purple-500 cursor-pointer text-lg lg:text-xl" />
        {!userData && <span className="ml-2 font-bold">Please login!</span>}
        {userData && <span className="ml-2 font-bold">{userData?.name}</span>}
      </div>
      <UserName />
    </div>
  );
};

export default UserEmail;


===== src/components/common/header/UserMenu.jsx =====
"use client";

import { useState, useRef, useEffect } from "react";
import { FaRegUser, FaShoppingBag, FaHeart, FaStore } from "react-icons/fa";
import { AiOutlineDashboard } from "react-icons/ai";
import { FiSettings } from "react-icons/fi";
import { CiPower } from "react-icons/ci";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useDispatch } from "react-redux";
import { clearUser } from "../../../app/store/slices/userSlice";
import UserEmail from "./UserEmail";

export default function UserMenu() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const modalRef = useRef(null);
  const triggerRef = useRef(null);
  const router = useRouter();
  const dispatch = useDispatch();

  const toggleModal = () => setIsModalOpen((prev) => !prev);

  useEffect(() => {
    if (isModalOpen) {
      modalRef.current?.focus();
    } else {
      triggerRef.current?.focus();
    }

    const handleKeyDown = (e) => {
      if (e.key === "Escape" && isModalOpen) {
        setIsModalOpen(false);
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [isModalOpen]);

  const logOut = () => {
    dispatch(clearUser());
    if (typeof window !== "undefined") {
      localStorage.removeItem("user");
    }
    router.push("/");
  };

  return (
    <div onClick={toggleModal}>
      {/* User Icon Toggle */}
      <div ref={triggerRef}>
        <FaRegUser
          className="h-5 w-5 text-purple-500 cursor-pointer"
          aria-haspopup="true"
          aria-expanded={isModalOpen}
          aria-controls="user-menu"
        />
      </div>

      {/* Modal */}
      {isModalOpen && (
        <div
          className="fixed inset-0 z-30 flex justify-end items-start"
          role="dialog"
          aria-modal="true"
          id="user-menu"
        >
          <div
            className="bg-white w-64 2xl:w-80 p-4 shadow-2xl mt-12 lg:mt-16 mr-4 rounded-md border text-base lg:text-lg"
            ref={modalRef}
            tabIndex={-1}
          >
            {/* User Info */}
            <UserEmail />
            <hr className="my-2" />

            {/* Menu Items */}
            <div className="flex flex-col space-y-1">
              <Link href="/new-dashboard">
                <div className="flex items-center py-2 px-2 hover:bg-gray-100 rounded">
                  <AiOutlineDashboard className="h-5 w-5 text-gray-500" />
                  <span className="ml-2">Dashboard</span>
                </div>
              </Link>

              <Link href="/settings">
                <div className="flex items-center py-2 px-2 hover:bg-gray-100 rounded">
                  <FiSettings className="h-5 w-5 text-gray-500" />
                  <span className="ml-2">Profile Settings</span>
                </div>
              </Link>

              <Link href="/dashboard/all-orders">
                <div className="flex items-center py-2 px-2 hover:bg-gray-100 rounded">
                  <FaShoppingBag className="h-5 w-5 text-gray-500" />
                  <span className="ml-2">My Purchases</span>
                </div>
              </Link>

              <Link href="/dashboard/wishlist">
                <div className="flex items-center py-2 px-2 hover:bg-gray-100 rounded">
                  <FaHeart className="h-5 w-5 text-gray-500" />
                  <span className="ml-2">Wishlist Items</span>
                </div>
              </Link>

              <Link href="/dashboard/stores">
                <div className="flex items-center py-2 px-2 hover:bg-gray-100 rounded">
                  <FaStore className="h-5 w-5 text-gray-500" />
                  <span className="ml-2">Saved Sellers</span>
                </div>
              </Link>
            </div>

            <hr className="my-2" />

            {/* Sign Out */}
            <div
              className="flex items-center py-2 px-2 hover:bg-gray-100 rounded cursor-pointer"
              onClick={logOut}
            >
              <CiPower className="h-5 w-5 text-red-500" />
              <span className="ml-2 text-red-500">Sign Out</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


===== src/components/common/header/UserName.jsx =====
// 'use client'
// import React from 'react';
// import { useSelector } from 'react-redux';
// import Link from 'next/link';

// const UserName = () => {
//   // Redux store theke user data anchi
//   const user = useSelector((state) => state.auth.user);

//   return (
//     <div>
//       {!user ? (
//         <Link href="/login">
//           <span className="text-purple-500 text-base">Sign in</span>
//         </Link>
//       ) : (
//         <>
//           <p className="text-purple-500  text-base font-medium">{user?.first_name}</p>
//           <p className='text-base font-medium'>Welcome back</p>
//         </>
//       )}
//     </div>
//   );
// };

// export default UserName;

"use client";

import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import Link from "next/link";

const UserName = () => {
  const user = useSelector((state) => state.auth.user);
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    // useEffect ‡¶∂‡ßÅ‡¶ß‡ßÅ Client ‡¶è ‡¶ö‡¶≤‡¶¨‡ßá
    setIsClient(true);
  }, []);

  if (!isClient) {
    // Server Render ‡¶è‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á render ‡¶ï‡¶∞‡¶¨‡ßã ‡¶®‡¶æ
    return null;
  }

  return (
    <div>
      {!user ? (
        <Link href="/login">
          <span className="text-purple-500 text-base">Sign in</span>
        </Link>
      ) : (
        <>
          <p className="text-purple-500 text-base font-medium">
            {user?.first_name}
          </p>
          <p className="text-base font-medium">Welcome back</p>
        </>
      )}
    </div>
  );
};

export default UserName;


===== src/components/dashboard/Dashboard.jsx =====
"use client";
import Head from "next/head";
import { useState } from "react";
// import SalesOverTime from "@/app/components/revenue/SalesOverTime";
// import RevenueByDestination from "@/app/components/revenue/RevenueByDestination";
// import TopPerformingTours from "@/app/components/revenue/TopPerformingTours";
// import MonthlyRevenue from "@/app/components/revenue/MonthlyRevenue";
// import BookingsVsCancellations from "@/app/components/revenue/BookingsVsCancellations";
// import BookingsBySource from "@/app/components/revenue/BookingsBySource"; // if implemented
import { FaChevronRight } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { clearToggle } from "@/app/store/slices/toggleSlice";

const Dashboard = () => {
  const currentYear = new Date().getFullYear();
  const currentMonth = new Date().getMonth() + 1; // JavaScript months are 0-indexed
  const [period, setPeriod] = useState("year"); // options: "all", "year", "month"
  const [year, setYear] = useState(currentYear);
  const [month, setMonth] = useState(currentMonth);

  const toggle = useSelector((state) => state.toggle.toggle);
  const dispatch = useDispatch();

  const handleClick = () => {
    dispatch(clearToggle());
  };

  const handlePeriodChange = (e) => {
    setPeriod(e.target.value);
  };

  const handleYearChange = (e) => {
    setYear(e.target.value);
  };

  const handleMonthChange = (e) => {
    setMonth(e.target.value);
  };

  return (
    <>
      <Head>
        <title>Dashboard - Online Travel Agency</title>
        <meta
          name="description"
          content="Sales and Revenue Dashboard for your Online Travel Agency"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-6 bg-gray-100 dark:bg-gray-900 flex-1">
        {/* <div className="flex justify-between items-center mb-6">
                    <div>
                        <div className="flex gap-2">
                            <button
                                onClick={handleClick}
                                className="lg:hidden bg-blue-600 text-white p-3 rounded-full shadow-md"
                            >
                                <FaChevronRight size={14} />
                            </button>
                            <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                                Dashboard
                            </h1>
                        </div>
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                            Sales and Revenue Insights
                        </p>
                    </div>
                    <div className="flex items-center gap-4">
                        <label
                            htmlFor="period-select"
                            className="text-gray-900 dark:text-white"
                        >
                            Period:
                        </label>
                        <select
                            id="period-select"
                            value={period}
                            onChange={handlePeriodChange}
                            className="p-2 border rounded"
                        >
                            <option value="all">All Time</option>
                            <option value="year">Yearly</option>
                            <option value="month">This Month</option>
                        </select>
                        {(period === "year" || period === "month") && (
                            <>
                                <label
                                    htmlFor="year-select"
                                    className="text-gray-900 dark:text-white"
                                >
                                    Year:
                                </label>
                                <select
                                    id="year-select"
                                    value={year}
                                    onChange={handleYearChange}
                                    className="p-2 border rounded"
                                >
                                    {Array.from({ length: 10 }, (_, i) => {
                                        const y = currentYear - i;
                                        return (
                                            <option key={y} value={y}>
                                                {y}
                                            </option>
                                        );
                                    })}
                                </select>
                            </>
                        )}
                        {period === "month" && (
                            <>
                                <label
                                    htmlFor="month-select"
                                    className="text-gray-900 dark:text-white"
                                >
                                    Month:
                                </label>
                                <select
                                    id="month-select"
                                    value={month}
                                    onChange={handleMonthChange}
                                    className="p-2 border rounded"
                                >
                                    {Array.from({ length: 12 }, (_, i) => {
                                        const m = i + 1;
                                        return (
                                            <option key={m} value={m}>
                                                {m}
                                            </option>
                                        );
                                    })}
                                </select>
                            </>
                        )}
                    </div>
                </div> */}

        {/* header  */}

        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
          {/* Left Section */}
          <div className="w-full md:w-auto">
            <div className="flex items-center gap-2 mb-1">
              <button
                onClick={handleClick}
                className="xl:hidden bg-blue-600 text-white p-3 rounded-full shadow-md"
              >
                <FaChevronRight size={14} />
              </button>
              <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">
                Dashboard
              </h1>
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Sales and Revenue Insights
            </p>
          </div>

          {/* Right Section - Filters */}
          <div className="flex flex-wrap items-center gap-3 md:gap-4">
            <div className="flex items-center gap-2">
              <label
                htmlFor="period-select"
                className="text-gray-900 dark:text-white text-sm"
              >
                Period:
              </label>
              <select
                id="period-select"
                value={period}
                onChange={handlePeriodChange}
                className="p-2 border rounded text-sm"
              >
                <option value="all">All Time</option>
                <option value="year">Yearly</option>
                <option value="month">This Month</option>
              </select>
            </div>

            {(period === "year" || period === "month") && (
              <div className="flex items-center gap-2">
                <label
                  htmlFor="year-select"
                  className="text-gray-900 dark:text-white text-sm"
                >
                  Year:
                </label>
                <select
                  id="year-select"
                  value={year}
                  onChange={handleYearChange}
                  className="p-2 border rounded text-sm"
                >
                  {Array.from({ length: 10 }, (_, i) => {
                    const y = currentYear - i;
                    return (
                      <option key={y} value={y}>
                        {y}
                      </option>
                    );
                  })}
                </select>
              </div>
            )}

            {period === "month" && (
              <div className="flex items-center gap-2">
                <label
                  htmlFor="month-select"
                  className="text-gray-900 dark:text-white text-sm"
                >
                  Month:
                </label>
                <select
                  id="month-select"
                  value={month}
                  onChange={handleMonthChange}
                  className="p-2 border rounded text-sm"
                >
                  {Array.from({ length: 12 }, (_, i) => {
                    const m = i + 1;
                    return (
                      <option key={m} value={m}>
                        {m}
                      </option>
                    );
                  })}
                </select>
              </div>
            )}
          </div>
        </div>

        {/* Grid Layout for first row */}
        {/* <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> */}
        {/* <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6 ">
                    <SalesOverTime period={period} year={year} month={month} />
                    <RevenueByDestination period={period} year={year} month={month} />
                    
                </div> */}

        {/* Second row */}
        {/* <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
                    <TopPerformingTours period={period} year={year} month={month} />
                    <MonthlyRevenue period={period} year={year} month={month} />
                </div> */}

        {/* Third row */}
        {/* <div className="mt-6">
                    <BookingsVsCancellations period={period} year={year} month={month} />
                </div> */}
      </main>
    </>
  );
};

export default Dashboard;


===== src/components/dashboard/DashbordSearchBar.jsx =====
// "use client";

// import React, { useState } from "react";
// import Link from "next/link";
// import { usePathname } from "next/navigation";
// import { useDispatch } from "react-redux";
// import { clearToggle } from "@/app/store/slices/toggleSlice";
// import { RxCross2 } from "react-icons/rx";
// import { FaChevronRight } from "react-icons/fa";
// import { menuItems } from "@/components/menuItems";

// const DashbordSearchBar = () => {
//   const [openMenu, setOpenMenu] = useState(null);
//   const pathname = usePathname();
//   const dispatch = useDispatch();

//   const handleToggleMenu = (index) => {
//     setOpenMenu(openMenu === index ? null : index);
//   };

//   const handleSidebarClose = () => {
//     dispatch(clearToggle());
//   };

//   return (
//     <>
//       <aside className="w-64 min-h-screen bg-white shadow-lg px-4 pt-10">
//         {/* Logo & Close Button */}
//         <div className="flex justify-between items-center mb-6">
//           <Link href="/">
//             <img
//               src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp"
//               alt="Upfrica Logo"
//               className="w-[80px] md:w-[100px] h-auto"
//             />
//           </Link>
//           <RxCross2
//             onClick={handleSidebarClose}
//             size={22}                   // larger icon
//             strokeWidth={1}             // bolder stroke
//             className="close-icon cursor-pointer text-gray-600 hover:text-gray-900 transition-colors duration-300 mr-4"
//           />
//         </div>

//         {/* Navigation Menu */}
//         <ul className="space-y-5">
//           {menuItems.map((item, index) => {
//             const isOpen = openMenu === index;

//             return (
//               <li key={index}>
//                 <div
//                   className={`flex items-center justify-between px-4 py-2 cursor-pointer transition rounded-md ${isOpen
//                       ? "bg-blue-100 font-semibold text-blue-400"
//                       : ""
//                     }`}
//                   onClick={() => handleToggleMenu(index)}
//                 >
//                   <div className="flex items-center gap-3">
//                     <item.icon />
//                     <span>{item.label}</span>
//                   </div>
//                   {item.children && (
//                     <FaChevronRight
//                       className={`transition-transform duration-200 ${isOpen ? "rotate-90" : ""
//                         }`}
//                     />
//                   )}
//                 </div>

//                 {/* Submenu */}
//                 {item.children && isOpen && (
//                   <ul className="ml-8 mt-1 space-y-1 text-gray-600">
//                     {item.children.map((child, childIdx) => {
//                       const isChildActive = pathname === child.route;
//                       return (
//                         <li
//                           key={childIdx}
//                           className={` ${isChildActive
//                               ? "text-blue-600 font-medium"
//                               : ""
//                             }`}
//                         >
//                           <Link
//                             href={child.route}
//                             className="block px-2 py-1 rounded hover:bg-gray-200"
//                           >
//                             {child.label}
//                           </Link>
//                         </li>
//                       );
//                     })}
//                   </ul>
//                 )}
//               </li>
//             );
//           })}
//         </ul>
//       </aside>

//       {/* Styled JSX for bold icon & reverse spin */}
//       <style jsx>{`
//         .close-icon {
//           animation: spinReverse 5s linear infinite;
//         }
//         @keyframes spinReverse {
//           from {
//             transform: rotate(0deg);
//           }
//           to {
//             transform: rotate(-360deg);
//           }
//         }
//       `}</style>
//     </>
//   );
// };

// export default DashbordSearchBar;

// src/components/DashboardSearchBar.jsx
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useDispatch } from "react-redux";
import { clearToggle } from "@/app/store/slices/toggleSlice";
import { RxCross2 } from "react-icons/rx";
import { FaChevronRight } from "react-icons/fa";
import { menuItems } from "@/components/menuItems";

const DashbordSearchBar = () => {
  // 1) Dashboard menu open by default
  const [openMenu, setOpenMenu] = useState(0);
  const pathname = usePathname();
  const dispatch = useDispatch();

  const handleToggleMenu = (index) => {
    setOpenMenu(openMenu === index ? null : index);
  };

  const handleSidebarClose = () => {
    dispatch(clearToggle());
  };

  return (
    <>
      <aside className="w-64 min-h-screen bg-white shadow-lg px-4 pt-10">
        {/* Logo & Close Button */}
        <div className="flex justify-between items-center mb-6">
          <Link href="/">
            <img
              src="https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp"
              alt="Upfrica Logo"
              className="w-[80px] md:w-[100px] h-auto"
            />
          </Link>
          <RxCross2
            onClick={handleSidebarClose}
            size={22}
            strokeWidth={1}
            className="close-icon cursor-pointer text-gray-600 hover:text-gray-900 transition-colors duration-300 mr-4"
          />
        </div>

        {/* Navigation Menu */}
        <ul className="space-y-5">
          {menuItems.map((item, index) => {
            const isOpen = openMenu === index;
            return (
              <li key={index}>
                {/* Parent item */}
                <div
                  className={`
                    flex items-center justify-between
                    px-4 py-2 cursor-pointer transition rounded-md
                    ${isOpen ? "bg-blue-100 font-semibold text-blue-400" : ""}
                  `}
                  onClick={() => handleToggleMenu(index)}
                >
                  <div className="flex items-center gap-3">
                    <item.icon />
                    <span>{item.label}</span>
                  </div>
                  {item.children && (
                    <FaChevronRight
                      className={`
                        transition-transform duration-200
                        ${isOpen ? "rotate-90" : ""}
                      `}
                    />
                  )}
                </div>

                {/* Submenu (no bullets, with active bg) */}
                {item.children && isOpen && (
                  <ul className="ml-8 mt-1 space-y-1 text-gray-600 list-none">
                    {item.children.map((child, childIdx) => {
                      const isChildActive = pathname === child.route;
                      return (
                        <li key={childIdx}>
                          <Link
                            href={child.route}
                            className={`
                              block px-2 py-1 rounded hover:bg-gray-200
                              ${isChildActive ? "bg-gray-300" : ""}
                            `}
                          >
                            {child.label}
                          </Link>
                        </li>
                      );
                    })}
                  </ul>
                )}
              </li>
            );
          })}
        </ul>
      </aside>

      {/* reverse-spin close icon */}
      <style jsx>{`
        .close-icon {
          animation: spinReverse 5s linear infinite;
        }
        @keyframes spinReverse {
          from {
            transform: rotate(0deg);
          }
          to {
            transform: rotate(-360deg);
          }
        }
      `}</style>
    </>
  );
};

export default DashbordSearchBar;


===== src/components/dashboard/Sidebar.jsx =====
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";

// React Icons (Font Awesome)
import {
  FaHome,
  FaRegEdit,
  FaThLarge,
  FaSignInAlt,
  FaCalendarAlt,
  FaUserCircle,
  FaChevronRight,
  FaTable,
  FaCog,
  FaEllipsisH,
  FaChartBar,
} from "react-icons/fa";
import { FaChevronUp } from "react-icons/fa6";
import { useDispatch, useSelector } from "react-redux";
import { FiArrowLeft } from "react-icons/fi";
import { motion, AnimatePresence } from "framer-motion"; // Framer Motion import
import { clearToggle } from "@/app/store/slices/toggleSlice";

export default function Sidebar() {
  const pathname = usePathname();
  const toggle = useSelector((state) => state.toggle.toggle);
  const dispatch = useDispatch();

  // ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡ßá ‡¶∏‡¶æ‡¶¨‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ü‡¶õ‡ßá, ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  const [openDropdown, setOpenDropdown] = useState("");

  // ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
  const menuItems = [
    {
      label: "Dashboard",
      route: "/dashboard/chart",
      icon: FaHome,
      children: [
        { label: "Sales & Revenue", route: "/dashboard/revenue" },
        { label: "Live Tour Items", route: "/dashboard/live-tour-items" },
        { label: "Live Hotel Items", route: "/dashboard/live-hotel-items" },
        { label: "All Bookings", route: "/dashboard/all-bookings" },
        { label: "All Payments", route: "/dashboard/all-payments" },
        { label: "Visa manament", route: "/dashboard/visa-management" },
        { label: "All Users", route: "/dashboard/all-users" },
        { label: "All Stories", route: "/dashboard/stories" },
        { label: "All Videos", route: "/dashboard/videos" },
      ],
    },

    {
      label: "Profile",
      route: "/profile",
      icon: FaUserCircle,
    },
    {
      label: "Create Itineraries",
      route: "#",
      icon: FaRegEdit,
      children: [
        {
          label: "Create Tour Itinerary",
          route: "/dashboard/create-tour-itienrary",
        },
        { label: "Add new Hotel", route: "/dashboard/create-hotel-itienrary" },
        { label: "Add new Story", route: "/dashboard/add-new-story" },
        { label: "Add new Video", route: "/dashboard/add-new-video" },
      ],
    },

    {
      label: "Settings",
      route: "/settings",
      icon: FaCog,
    },
    {
      label: "Others",
      route: "/others",
      icon: FaEllipsisH,
    },
    {
      label: "Analytics",
      route: "/dashboard/chart",
      icon: FaChartBar,
    },
    {
      label: "Upadte Pages UI",
      route: "#",
      icon: FaThLarge,
      // children: [
      //   { label: "Buttons", route: "/ui/buttons" },
      //   { label: "Alerts", route: "/ui/alerts" },
      // ],
    },
    {
      label: "Sign Out",
      route: "#",
      icon: FaSignInAlt,
    },
  ];

  // Dropdown ‡¶ü‡¶ó‡¶≤
  const handleDropdown = (label) => {
    setOpenDropdown((prev) => (prev === label ? "" : label));
  };

  // Route active ‡¶ö‡ßá‡¶ï
  const isActive = (route) => {
    return pathname === route;
  };

  // ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶°‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
  const handleCloseSidebar = () => {
    dispatch(clearToggle());
  };

  return (
    <>
      {/* Small & Medium Device Sidebar (toggle===true ‡¶π‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá) */}
      <AnimatePresence>
        {toggle && (
          <motion.aside
            initial={{ x: "-100%" }}
            animate={{ x: 0 }}
            exit={{ x: "-100%" }}
            transition={{ duration: 0.4, ease: "easeInOut" }}
            className="w-64 fixed min-h-screen top-0 bg-gray-50 border-r border-gray-200 shadow-md xl:hidden flex flex-col"
          >
            {/* Sidebar Header */}
            <div className="flex justify-between items-center p-4">
              <div className="text-xl font-semibold">My Sidebar</div>
              {/* Close Button */}
              <div onClick={handleCloseSidebar}>
                <FiArrowLeft className="h-5 w-5 cursor-pointer" />
              </div>
            </div>

            {/* Sidebar Menu */}
            <nav className="flex-1 p-4 space-y-2 overflow-y-auto">
              {menuItems.map((item, index) => {
                const hasChildren = !!item.children;
                const isDropdownOpen = openDropdown === item.label;

                return (
                  <div key={index}>
                    {/* ‡¶Ø‡¶¶‡¶ø children ‡¶•‡¶æ‡¶ï‡ßá: ‡¶è‡¶ï‡¶ü‡¶æ button ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßã; ‡¶®‡ßá‡¶á ‡¶§‡ßã ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Link */}
                    {hasChildren ? (
                      <button
                        onClick={() => handleDropdown(item.label)}
                        className={`w-full flex items-center justify-between
                          px-3 py-3 rounded-md text-gray-700 hover:bg-gray-200 
                          transition-colors ${
                            isActive(item.route) && !hasChildren
                              ? "bg-gray-200 font-bold py-2"
                              : ""
                          }`}
                      >
                        <div className="flex items-center gap-4">
                          <item.icon className="w-5 h-5" />
                          <span>{item.label}</span>
                        </div>
                        <FaChevronUp
                          className={`w-3 h-3 transition-transform ${
                            isDropdownOpen ? "rotate-180" : "rotate-180"
                          }`}
                        />
                      </button>
                    ) : (
                      /* children ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Link ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá, 
                         ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá onClick={() => handleCloseSidebar()} */
                      <Link
                        href={item.route}
                        onClick={handleCloseSidebar}
                        className={`flex items-center gap-4 px-3 py-3 
                          rounded-md text-gray-700 hover:bg-gray-200 
                          transition-colors ${
                            isActive(item.route) ? "bg-gray-200 font-bold" : ""
                          }`}
                      >
                        <item.icon className="w-5 h-5" />
                        {item.label}
                      </Link>
                    )}

                    {/* ‡¶∏‡¶æ‡¶¨‡¶Æ‡ßá‡¶®‡ßÅ (dropdown) */}
                    {hasChildren && isDropdownOpen && (
                      <div className="ml-7 mt-1 space-y-3">
                        {item.children.map((child, cIndex) => (
                          <Link
                            key={cIndex}
                            href={child.route}
                            // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá onClick={handleCloseSidebar} ‡¶¶‡¶ø‡¶≤‡ßá
                            // ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá‡¶á ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶°‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶¨‡ßá
                            onClick={handleCloseSidebar}
                            className={`
                              block px-3 py-1 rounded-md text-sm 
                              text-gray-600 hover:bg-gray-100 hover:text-gray-900 
                              ${
                                isActive(child.route)
                                  ? "bg-gray-100 font-semibold py-2"
                                  : ""
                              }
                            `}
                          >
                            {child.label}
                          </Link>
                        ))}
                      </div>
                    )}
                  </div>
                );
              })}
            </nav>
          </motion.aside>
        )}
      </AnimatePresence>

      {/* Large Device Sidebar */}
      <aside
        className={`w-64 fixed min-h-screen top-0 bg-gray-50 border-r border-gray-200 hidden xl:flex flex-col`}
      >
        {/* Sidebar Header (optional) */}
        {/* <div className="p-4 border-b text-xl font-semibold">My Sidebar</div> */}

        <nav className="flex-1 p-4 space-y-2 overflow-y-auto">
          {menuItems.map((item, index) => {
            const hasChildren = !!item.children;
            const isDropdownOpen = openDropdown === item.label;

            return (
              <div key={index}>
                {/* ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶á ‡¶≤‡¶ú‡¶ø‡¶ï, ‡¶¨‡ßú ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø */}
                {hasChildren ? (
                  <button
                    onClick={() => handleDropdown(item.label)}
                    className={`w-full flex items-center justify-between
                      px-3 py-3 rounded-md text-gray-700 hover:bg-gray-200 
                      transition-colors ${
                        isActive(item.route) && !hasChildren
                          ? "bg-gray-200 font-bold py-2"
                          : ""
                      }`}
                  >
                    <div className="flex items-center gap-4">
                      <item.icon className="w-5 h-5" />
                      <span>{item.label}</span>
                    </div>
                    <FaChevronUp
                      className={`w-3 h-3 transition-transform ${
                        isDropdownOpen ? "rotate-180" : "rotate-180"
                      }`}
                    />
                  </button>
                ) : (
                  <Link
                    href={item.route}
                    className={`flex items-center gap-4 px-3 py-3 
                      rounded-md text-gray-700 hover:bg-gray-200 
                      transition-colors ${
                        isActive(item.route) ? "bg-gray-200 font-bold" : ""
                      }`}
                  >
                    <item.icon className="w-5 h-5" />
                    {item.label}
                  </Link>
                )}

                {/* ‡¶∏‡¶æ‡¶¨‡¶Æ‡ßá‡¶®‡ßÅ (‡¶°‡ßç‡¶∞‡¶™‡¶°‡¶æ‡¶â‡¶®) */}
                {hasChildren && isDropdownOpen && (
                  <div className="ml-7 mt-1 space-y-3">
                    {item.children.map((child, cIndex) => (
                      <Link
                        key={cIndex}
                        href={child.route}
                        className={`
                          block px-3 py-1 rounded-md text-sm 
                          text-gray-600 hover:bg-gray-100 hover:text-gray-900 
                          ${
                            isActive(child.route)
                              ? "bg-gray-100 font-semibold py-2"
                              : ""
                          }
                        `}
                      >
                        {child.label}
                      </Link>
                    ))}
                  </div>
                )}
              </div>
            );
          })}
        </nav>
      </aside>
    </>
  );
}


===== src/components/e-commerce/checkout/CheckoutPage.jsx =====
"use client";
import { useState } from "react";
import { FaTrash, FaLock } from "react-icons/fa";

const initialCart = [
  {
    id: 1,
    title: "Apple MacBook Pro",
    color: "Dark Red",
    price: 100,
    oldPrice: 129.99,
    image:
      "https://images.unsplash.com/photo-1541099649105-f69ad21f3246?auto=format&fit=crop&w=400&q=80",
    quantity: 1,
  },
  {
    id: 2,
    title: "Apple MacBook Pro",
    color: "Dark Red",
    price: 100,
    oldPrice: 129.99,
    image:
      "https://images.unsplash.com/photo-1585386959984-a4155224c34d?auto=format&fit=crop&w=400&q=80",
    quantity: 1,
  },
  {
    id: 3,
    title: "Apple MacBook Pro",
    color: "Dark Red",
    price: 100,
    oldPrice: 129.99,
    image:
      "https://images.unsplash.com/photo-1595950658703-ec8b0c22f5d3?auto=format&fit=crop&w=400&q=80",
    quantity: 1,
  },
];

export default function CheckoutPage() {
  const [cart, setCart] = useState(initialCart);
  const [coupon, setCoupon] = useState("");

  const updateQuantity = (id, type) => {
    const updated = cart.map((item) =>
      item.id === id
        ? {
            ...item,
            quantity:
              type === "inc"
                ? item.quantity + 1
                : Math.max(0, item.quantity - 1),
          }
        : item,
    );
    setCart(updated);
  };

  const removeItem = (id) => {
    setCart(cart.filter((item) => item.id !== id));
  };

  const subtotal = cart.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0,
  );

  return (
    <div className="p-6 bg-[#f9fbfd] min-h-screen">
      {/* Top Nav */}
      <div className="flex gap-10 text-sm font-medium mb-6 border-b pb-2">
        <span className="text-blue-500 border-b-2 border-blue-500">
          Cart Details
        </span>
        <span className="text-gray-400">Shipping Information</span>
        <span className="text-gray-400">Payment</span>
      </div>

      <div className="flex flex-col lg:flex-row gap-6">
        {/* Left: Cart Items */}
        <div className="flex-1 bg-white p-4 rounded shadow">
          <h3 className="font-semibold text-lg mb-4">
            Cart Item{" "}
            <span className="text-sm text-gray-400">({cart.length})</span>
          </h3>
          <table className="w-full text-sm">
            <thead className="border-b text-gray-500 text-left">
              <tr>
                <th className="py-2">Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              {cart.map((item) => (
                <tr key={item.id} className="border-b">
                  <td className="py-4 flex items-center gap-3">
                    <img
                      src={item.image}
                      className="w-14 h-14 rounded object-cover"
                    />
                    <div>
                      <p>{item.title}</p>
                      <p className="text-xs text-gray-400">{item.color}</p>
                    </div>
                  </td>
                  <td>
                    <div>
                      ${item.price.toFixed(2)}
                      <br />
                      <span className="text-xs line-through text-gray-400">
                        ${item.oldPrice}
                      </span>
                    </div>
                  </td>
                  <td>
                    <div className="flex items-center border rounded w-fit">
                      <button
                        onClick={() => updateQuantity(item.id, "dec")}
                        className="px-2"
                      >
                        ‚àí
                      </button>
                      <span className="px-2">{item.quantity}</span>
                      <button
                        onClick={() => updateQuantity(item.id, "inc")}
                        className="px-2"
                      >
                        +
                      </button>
                    </div>
                  </td>
                  <td>${(item.price * item.quantity).toFixed(2)}</td>
                  <td>
                    <button
                      onClick={() => removeItem(item.id)}
                      className="text-red-500"
                    >
                      <FaTrash />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          <div className="mt-4 text-sm text-blue-500 cursor-pointer">
            &larr; Back to Shopping
          </div>
        </div>

        {/* Right: Summary & Coupon */}
        <div className="w-full lg:w-96 flex flex-col gap-4">
          {/* Coupon Code */}
          <div className="bg-white p-4 rounded shadow">
            <p className="text-sm font-medium mb-2">Have a coupon code?</p>
            <div className="flex">
              <input
                type="text"
                value={coupon}
                onChange={(e) => setCoupon(e.target.value)}
                placeholder="Discount Coupon"
                className="flex-1 border px-3 py-2 rounded-l text-sm"
              />
              <button className="px-4 bg-gray-100 border border-l-0 rounded-r text-sm">
                Apply
              </button>
            </div>
          </div>

          {/* Summary */}
          <div className="bg-white p-4 rounded shadow text-sm">
            <p className="font-medium mb-2">Order Summary</p>
            <div className="flex justify-between mb-1">
              <span>Sub Total</span>
              <span>${subtotal.toFixed(2)}</span>
            </div>
            <div className="flex justify-between mb-1">
              <span>Estimated Delivery</span>
              <span>-</span>
            </div>
            <div className="flex justify-between mb-2">
              <span>Voucher</span>
              <span>-</span>
            </div>
            <hr />
            <div className="flex justify-between font-semibold text-base mt-2">
              <span>Total</span>
              <span>${subtotal.toFixed(2)}</span>
            </div>
          </div>

          {/* Security Note */}
          <div className="bg-white p-4 rounded shadow flex items-center gap-2 text-xs text-gray-500">
            <FaLock className="text-blue-500" />
            Safe & Secure Payment. Easy returns. 100% Authentic products.
          </div>

          {/* Place Order Button */}
          <button className="w-full bg-blue-500 text-white py-3 text-sm rounded hover:bg-blue-600 transition">
            Place an Order
          </button>
        </div>
      </div>
    </div>
  );
}


===== src/components/e-commerce/product-detail/ProductDetail.jsx =====
"use client";
import { useState } from "react";
import { FaStar } from "react-icons/fa";
import ProductFeatures from "./ProductFeatures";
import RelatedProducts from "./RelatedProducts";

const product = {
  title: "Apple Watch SE Smartwatch (GPS, 40mm)",
  description: [
    "Care Instructions: Hand Wash Only",
    "Fit Type: Regular",
    "Dark Blue Regular Women Jeans",
    "Fabric: 100% Cotton",
  ],
  price: 299,
  oldPrice: 399,
  rating: 4.0,
  colors: ["#000", "#f00", "#0f0", "#00f", "#aaa"],
  sizes: ["Small", "Medium", "Large"],
  images: [
    "https://images.unsplash.com/photo-1611254383609-0e7d4bd5a87d?auto=format&fit=crop&w=400&q=80",
    "https://images.unsplash.com/photo-1585386954356-1a6c7309f0d9?auto=format&fit=crop&w=400&q=80",
    "https://images.unsplash.com/photo-1585386958629-1fc26617362b?auto=format&fit=crop&w=400&q=80",
  ],
};

export default function ProductDetail() {
  const [mainImage, setMainImage] = useState(product.images[0]);
  const [quantity, setQuantity] = useState(1);
  const [activeTab, setActiveTab] = useState("features");

  return (
    <div className="mt-5 bg-gray-50 text-gray-700 space-y-4 ">
      {/* Top section */}
      <div className="flex bg-white shadow-md flex-col lg:flex-row gap-8 p-4">
        {/* Image section */}
        <div className="flex-1">
          <img
            src={mainImage}
            alt="Main"
            className="w-full h-[600px] object-cover rounded border"
          />
          <div className="flex gap-2 mt-4">
            {product.images.map((img, idx) => (
              <img
                key={idx}
                src={img}
                alt=""
                onClick={() => setMainImage(img)}
                className={`w-16 h-16 rounded border cursor-pointer ${
                  img === mainImage ? "ring-2 ring-blue-500" : ""
                }`}
              />
            ))}
          </div>
        </div>

        {/* Info section */}
        <div className="flex-1 space-y-4">
          <span className="text-xs text-green-600 font-medium bg-green-100 px-2 py-1 rounded">
            In stock
          </span>
          <h2 className="text-xl font-semibold">{product.title}</h2>

          <div className="flex items-center gap-2 text-yellow-500 text-sm">
            <FaStar />
            <span>{product.rating}</span>/5
          </div>

          {/* Offers */}
          <div>
            <p className="font-semibold mb-2">Offer</p>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs">
              <label className="border p-3 rounded cursor-pointer">
                <input type="radio" name="offer" defaultChecked />
                <p className="font-bold">No Cost EMI</p>
                <p>Upto ‚Çπ2,252 EMI interest savings...</p>
              </label>
              <label className="border p-3 rounded cursor-pointer">
                <input type="radio" name="offer" />
                <p className="font-bold">Bank Offer</p>
                <p>Upto ‚Çπ1,250.00 discount on select...</p>
              </label>
            </div>
          </div>

          {/* About */}
          <div>
            <p className="font-semibold mb-2">About this item</p>
            <ul className="list-disc list-inside text-sm space-y-1">
              {product.description.map((desc, i) => (
                <li key={i}>{desc}</li>
              ))}
            </ul>
          </div>

          {/* Color */}
          <div>
            <p className="font-semibold text-sm">Colors</p>
            <div className="flex gap-2 mt-1">
              {product.colors.map((color, i) => (
                <div
                  key={i}
                  className="w-6 h-6 rounded-full border"
                  style={{ backgroundColor: color }}
                ></div>
              ))}
            </div>
          </div>

          {/* Size */}
          <div>
            <p className="font-semibold text-sm">Size</p>
            <div className="flex gap-2 mt-1">
              {product.sizes.map((size) => (
                <button
                  key={size}
                  className="border px-3 py-1 rounded text-sm hover:border-blue-500"
                >
                  {size}
                </button>
              ))}
            </div>
          </div>

          {/* Quantity + Price */}
          <div className="flex items-center gap-4 mt-3">
            <div className="flex items-center border rounded px-2">
              <button onClick={() => setQuantity((q) => Math.max(1, q - 1))}>
                ‚àí
              </button>
              <span className="px-4">{quantity}</span>
              <button onClick={() => setQuantity((q) => q + 1)}>+</button>
            </div>
            <div>
              <p className="text-2xl font-bold">${product.price.toFixed(2)}</p>
              <p className="text-sm line-through text-gray-400">
                ${product.oldPrice}
              </p>
            </div>
          </div>

          {/* Buttons */}
          <div className="flex gap-4 mt-3">
            <button className="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600">
              Buy Now
            </button>
            <button className="border px-6 py-2 rounded">Add to Cart</button>
          </div>
        </div>
      </div>

      <ProductFeatures />
      <RelatedProducts />
    </div>
  );
}


===== src/components/e-commerce/product-detail/ProductFeatures.jsx =====
// components/ProductFeatures.jsx
export default function ProductFeatures() {
  const features = [
    { label: "Band", value: "Smart Band" },
    { label: "Compatible Devices", value: "Smartphones" },
    { label: "Ideal For", value: "Unisex" },
    {
      label: "Lifestyle",
      value: "Fitness | Indoor | Sports | Swimming | Outdoor",
    },
    {
      label: "Basic Features",
      value: "Calendar | Date & Time | Timer/Stop Watch",
    },
    {
      label: "Health Tracker",
      value: "Heart Rate | Exercise Tracker",
    },
  ];

  return (
    <div className="p-6 bg-white rounded-lg shadow-md mt-5">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-y-4 gap-x-12">
        {features.map((item, idx) => (
          <div key={idx} className="flex">
            <div className="w-48 text-gray-500 font-medium">{item.label}:</div>
            <div className="text-gray-700">{item.value}</div>
          </div>
        ))}
      </div>
    </div>
  );
}


===== src/components/e-commerce/product-detail/RelatedProducts.jsx =====
import ProductCard from "../products/ProductCard";

// components/RelatedProducts.jsx
export default function RelatedProducts() {
  const products = [
    {
      id: 1,
      title: "Apple Watch - 4",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-1.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 30,
    },
    {
      id: 2,
      title: "Black Heels",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-2.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 20,
    },
    {
      id: 3,
      title: "Green Loafers",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-3.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 0,
    },
    {
      id: 4,
      title: "Nike Air Jordan",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-4.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 30,
    },
    // {
    //     id: 5,
    //     title: "Yellow Heels",
    //     image: "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-5.jpg",
    //     price: 299,
    //     oldPrice: 399,
    //     rating: 4.5,
    //     discount: 0,
    // },
    // {
    //     id: 6,
    //     title: "Golden Shoes",
    //     image: "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-6.jpg",
    //     price: 299,
    //     oldPrice: 399,
    //     rating: 4.5,
    //     discount: 30,
    // },
    // {
    //     id: 7,
    //     title: "Red Sneakers",
    //     image: "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-7.jpg",
    //     price: 299,
    //     oldPrice: 399,
    //     rating: 4.5,
    //     discount: 10,
    // },
    // {
    //     id: 8,
    //     title: "White Wedding Heels",
    //     image: "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-8.jpg",
    //     price: 299,
    //     oldPrice: 399,
    //     rating: 4.5,
    //     discount: 50,
    // },
    // {
    //     id: 9,
    //     title: "Pink Boots",
    //     image: "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-9.jpg",
    //     price: 299,
    //     oldPrice: 399,
    //     rating: 4.5,
    //     discount: 0,
    // },
  ];

  return (
    <div className="mt-8 bg-white shadow-md p-8">
      <h2 className="text-lg font-semibold text-gray-800 mb-4">
        Related Products
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-6">
        {products.map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
}


===== src/components/e-commerce/products/Product.jsx =====
import React from "react";
import ProductCard from "./ProductCard";

const Product = () => {
  // data/products.js
  const products = [
    {
      id: 1,
      title: "Apple Watch - 4",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-1.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 30,
    },
    {
      id: 2,
      title: "Black Heels",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-2.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 20,
    },
    {
      id: 3,
      title: "Green Loafers",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-3.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 0,
    },
    {
      id: 4,
      title: "Nike Air Jordan",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-4.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 30,
    },
    {
      id: 5,
      title: "Yellow Heels",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-5.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 0,
    },
    {
      id: 6,
      title: "Golden Shoes",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-6.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 30,
    },
    {
      id: 7,
      title: "Red Sneakers",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-7.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 10,
    },
    {
      id: 8,
      title: "White Wedding Heels",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-8.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 50,
    },
    {
      id: 9,
      title: "Pink Boots",
      image:
        "https://html.phoenixcoded.net/light-able/bootstrap/assets/images/application/img-prod-9.jpg",
      price: 299,
      oldPrice: 399,
      rating: 4.5,
      discount: 0,
    },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2  lg:grid-cols-3 xl:grid-cols-4 gap-6 p-6">
      {products.map((product) => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
};

export default Product;


===== src/components/e-commerce/products/ProductCard.jsx =====
// components/ProductCard.jsx
import { FaStar, FaRegHeart, FaRegEye } from "react-icons/fa";

export default function ProductCard({ product }) {
  return (
    <div className="bg-white rounded-xl shadow border border-gray-100 hover:shadow-md transition duration-200 overflow-hidden">
      {/* Image + wishlist icon */}
      <div className="relative">
        <img
          src={product.image}
          alt={product.title}
          className="w-full h-[240px] object-contain p-4"
        />
        <button className="absolute top-2 right-2 text-gray-400 hover:text-red-500">
          <FaRegHeart />
        </button>
        {product.discount > 0 && (
          <span className="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded">
            -{product.discount}%
          </span>
        )}
      </div>

      {/* Title + Price + Rating */}
      <div className="px-4 py-2">
        <h3 className="text-sm text-gray-700 mb-1">{product.title}</h3>
        <div className="flex items-center space-x-2">
          <span className="text-lg font-bold text-gray-800">
            ${product.price.toFixed(2)}
          </span>
          <span className="line-through text-sm text-gray-400">
            ${product.oldPrice.toFixed(2)}
          </span>
        </div>
        <div className="flex items-center text-sm text-yellow-500 mt-1">
          <FaStar className="mr-1" /> {product.rating} / 5
        </div>
      </div>

      {/* Footer buttons */}
      <div className="px-4 pb-4 pt-2 flex items-center justify-between">
        <button className="flex items-center justify-center w-10 h-10 border border-gray-300 rounded hover:bg-gray-100 transition">
          <FaRegEye />
        </button>
        <button className="flex-1 ml-3 py-2 text-sm font-medium bg-white border border-gray-300 text-gray-700 rounded hover:bg-gray-100 transition">
          Add to cart
        </button>
      </div>
    </div>
  );
}


===== src/components/e-commerce/products/ProductFilterBar.jsx =====
// components/ProductFilterBar.jsx
import { FaSearch, FaFilter } from "react-icons/fa";

export default function ProductFilterBar({
  searchTerm,
  setSearchTerm,
  sortOrder,
  setSortOrder,
}) {
  return (
    <div className="w-full flex flex-col md:flex-row md:items-center md:justify-between gap-4 bg-[#f9fbfd] p-4 rounded-lg mb-6">
      {/* Search Input */}
      <div className="relative w-full md:max-w-sm">
        <FaSearch className="absolute top-3 left-3 text-gray-400" />
        <input
          type="text"
          placeholder="Search Products"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full border border-gray-300 rounded-md pl-10 pr-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* Sort and Filter */}
      <div className="flex items-center gap-4">
        <select
          value={sortOrder}
          onChange={(e) => setSortOrder(e.target.value)}
          className="border border-gray-300 text-sm rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="high">Price: High To Low</option>
          <option value="low">Price: Low To High</option>
          <option value="rating">Rating</option>
        </select>

        <button className="flex items-center gap-1 text-sm text-gray-600 hover:text-blue-600 transition">
          <FaFilter />
          Filter
        </button>
      </div>
    </div>
  );
}


===== src/components/e-commerce/products/ProductsPage.jsx =====
"use client";
import { useState } from "react";

import Product from "./Product";
import ProductFilterBar from "./ProductFilterBar";

export default function ProductsPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOrder, setSortOrder] = useState("high");

  return (
    <div className="pt-5">
      <ProductFilterBar
        searchTerm={searchTerm}
        setSearchTerm={setSearchTerm}
        sortOrder={sortOrder}
        setSortOrder={setSortOrder}
      />

      {/* Optional: You can pass filtered/sorted products to grid */}
      <Product />
    </div>
  );
}


===== src/components/e-commerce/products-list/ProductList.jsx =====
"use client";

import { useRouter } from "next/navigation";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { FaEye, FaEdit, FaTrash } from "react-icons/fa";
import { FiSearch } from "react-icons/fi";
import Pagination from "@/components/Pagination";

const DEFAULT_PAGE_SIZE = 10;
const SKELETON_ROWS = 10;
const DEBOUNCE_DELAY = 500;

export default function ProductList() {
  const { user, token } = useSelector((state) => state.auth);
  const router = useRouter();

  // pagination & search
  const [perPage, setPerPage] = useState(DEFAULT_PAGE_SIZE);
  const [searchInput, setSearchInput] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  // data & loading
  const [products, setProducts] = useState([]);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);

  // alerts
  const [alert, setAlert] = useState({ type: "", message: "" });
  const [deletingId, setDeletingId] = useState(null);

  // Debounce the input before committing to searchQuery
  useEffect(() => {
    const handler = setTimeout(() => {
      setSearchQuery(searchInput.trim());
      setCurrentPage(1);
    }, DEBOUNCE_DELAY);
    return () => clearTimeout(handler);
  }, [searchInput]);

  // Fetch (or search) whenever token, page, perPage or searchQuery changes
  useEffect(() => {
    if (!token) return;

    setLoading(true);

    const myHeaders = new Headers();
    myHeaders.append("Authorization", `Token ${token}`);

    const requestOptions = {
      method: "GET",
      headers: myHeaders,
      redirect: "follow",
    };

    const base = "https://media.upfrica.com/api/seller/products";
    const params = new URLSearchParams({
      page: String(currentPage),
      page_size: String(perPage),
    });

    let url;
    if (searchQuery) {
      params.append("q", searchQuery);
      url = `${base}/search/?${params.toString()}`;
    } else {
      url = `${base}/?${params.toString()}`;
    }

    fetch(url, requestOptions)
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch products");
        return res.json();
      })
      .then((data) => {
        setProducts(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / perPage));
      })
      .catch((err) => {
        console.error(err);
        setAlert({ type: "error", message: "Could not load products." });
      })
      .finally(() => setLoading(false));
  }, [token, currentPage, perPage, searchQuery]);

  // navigation & delete handlers
  const handleView = (slug) => router.push(`/products/${slug}`);
  const handleEdit = (slug) => router.push(`/products/edit/${slug}`);

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this product?"))
      return;

    setDeletingId(id);
    try {
      const res = await fetch(
        `https://media.upfrica.com/api/seller/products/${id}/`,
        {
          method: "DELETE",
          headers: { Authorization: `Token ${token}` },
        },
      );
      if (!res.ok) throw new Error("Failed to delete product");
      setProducts((prev) => prev.filter((p) => p.id !== id));
      setAlert({ type: "success", message: "Product deleted successfully." });
    } catch (err) {
      console.error(err);
      setAlert({ type: "error", message: "Could not delete product." });
    } finally {
      setDeletingId(null);
    }
  };

  return (
    <div className="min-h-screen px-4 py-6 bg-gray-50">
      <div className="bg-white shadow-md rounded-lg p-6">
        {/* Header + Search */}
        <header className="flex items-center space-x-6 mb-6">
          <div>
            <h1 className="text-3xl font-semibold">Hi {user?.username}</h1>
            <p className="text-gray-600">Welcome to seller dashboard</p>
          </div>
          <div className="relative flex-1 max-w-full">
            <FiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search products‚Ä¶"
              className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none"
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
            />
          </div>
        </header>

        {/* Alert */}
        {alert.message && (
          <div
            className={`mb-4 px-4 py-3 border rounded ${
              alert.type === "success"
                ? "bg-green-100 border-green-400 text-green-700"
                : "bg-red-100 border-red-400 text-red-700"
            }`}
          >
            <span>{alert.message}</span>
            <button
              onClick={() => setAlert({ type: "", message: "" })}
              className="float-right font-bold"
            >
              √ó
            </button>
          </div>
        )}

        {/* Table */}
        <div className="bg-white p-4 rounded-lg shadow-sm">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">All Products</h2>
            {totalPages > 1 && (
              <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={setCurrentPage}
              />
            )}
          </div>

          <table className="w-full table-fixed text-left">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="w-[35%] pb-2">Product Info</th>
                <th className="w-[10%] pb-2">Date Added</th>
                <th className="w-[10%] pb-2">Price</th>
                <th className="w-[10%] pb-2">Status</th>
                <th className="w-[10%] pb-2">Viewed</th>
                <th className="w-[10%] pb-2">Sold</th>
                <th className="w-[15%] pb-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                Array.from({ length: SKELETON_ROWS }).map((_, idx) => (
                  <tr key={idx} className="even:bg-gray-50 animate-pulse">
                    <td className="py-3">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-gray-200 rounded" />
                        <div className="flex-1 max-w-[40%]">
                          <div className="h-4 bg-gray-200 mb-2 rounded w-3/4" />
                          <div className="h-3 bg-gray-200 rounded w-1/2" />
                        </div>
                      </div>
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-24 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-16 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-12 mx-auto" />
                    </td>
                    <td className="py-3">
                      <div className="h-4 bg-gray-200 rounded w-20 mx-auto" />
                    </td>
                  </tr>
                ))
              ) : products.length > 0 ? (
                products.map((p) => (
                  <tr key={p.id} className="even:bg-gray-50">
                    <td className="py-3">
                      <div className="flex items-center space-x-3">
                        {p.product_images?.[0] && (
                          <img
                            src={p.product_images[0]}
                            alt={p.title}
                            className="w-20 h-20 object-cover rounded"
                          />
                        )}
                        <div className="flex-1">
                          <div>{p.title}</div>
                          <div className="text-gray-500 text-sm">
                            SKU: {p.u_pid}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3">
                      {new Date(p.created_at).toLocaleDateString()}
                    </td>
                    <td className="py-3">
                      {(p.price_cents / 100).toFixed(2)} {p.price_currency}
                    </td>
                    <td className="py-3">
                      <span
                        className={
                          p.status === 1 ? "text-green-600" : "text-red-600"
                        }
                      >
                        {p.status === 1 ? "In Stock" : "Out of Stock"}
                      </span>
                    </td>
                    <td className="py-3">{p.impressions_count ?? 0}</td>
                    <td className="py-3">{p.likes ?? 0}</td>
                    <td className="py-3 space-x-4">
                      <button onClick={() => handleView(p.slug)} title="View">
                        <FaEye className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                      <button onClick={() => handleEdit(p.slug)} title="Edit">
                        <FaEdit className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                      <button
                        onClick={() => handleDelete(p.id)}
                        disabled={deletingId === p.id}
                        title="Delete"
                        className={`transition duration-300 ${
                          deletingId === p.id
                            ? "opacity-50 cursor-not-allowed"
                            : ""
                        }`}
                      >
                        <FaTrash className="h-4 w-4 text-[#2B3F6C]" />
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={7} className="py-4 text-center text-gray-500">
                    No products found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}


===== src/components/help/HelpCenterPage.jsx =====
"use client";
import React, { useState, useEffect, useRef } from "react";
import Link from "next/link";
import Script from "next/script";

import { FaEdit } from "react-icons/fa";

import { FaSearch, FaBars } from "react-icons/fa";
import Footer from "@/components/common/footer/Footer";
import { useSelector } from "react-redux";

import dynamic from "next/dynamic";

// const Viewer = dynamic(() => import('@toast-ui/react-editor').then((mod) => mod.Viewer), { ssr: false });

// Dark Mode Toggle Hook
const useDarkMode = () => {
  const [enabled, setEnabled] = useState(false);
  useEffect(() => {
    const saved = localStorage.getItem("theme") === "dark";
    if (saved) {
      document.documentElement.classList.add("dark");
      setEnabled(true);
    }
  }, []);

  const toggle = () => {
    const isDark = !enabled;
    localStorage.setItem("theme", isDark ? "dark" : "light");
    document.documentElement.classList.toggle("dark", isDark);
    setEnabled(isDark);
  };
  return [enabled, toggle];
};

// Dark mode toggle button
const DarkModeToggle = () => {
  const [enabled, toggle] = useDarkMode();
  return (
    <button
      onClick={toggle}
      className="ml-4 px-3 py-2 border border-white text-white rounded-full hover:bg-white hover:text-black transition"
    >
      {enabled ? "üåô Dark" : "‚òÄÔ∏è Light"}
    </button>
  );
};

// A card skeleton for search results
const CardSkeleton = () => (
  <div className="animate-pulse p-4 bg-white dark:bg-gray-800 rounded shadow">
    <div className="h-6 bg-gray-300 dark:bg-gray-700 rounded w-5/6 mb-2"></div>
    <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-full mb-2"></div>
    <div className="h-3 bg-gray-300 dark:bg-gray-700 rounded w-4/6"></div>
  </div>
);

// Main Page Component with Search Features
export default function HelpCenterPage({ slug }) {
  // üöÄ Accept slug directly
  const { user, token } = useSelector((state) => state.auth);

  // Article Data States
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Static header, breadcrumbs, and sidebar information
  const staticHeader = {
    title: "Help Centre",
    backgroundImage:
      "https://images.pexels.com/photos/6214476/pexels-photo-6214476.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    searchPlaceholder: "Type your question",
  };

  const staticBreadcrumbs = [
    { label: "Help home", href: "/help" },
    { label: "Listings", href: "/help/listings" },
    { label: "Creating a Listing", href: "/help/creating-a-listing" },
  ];

  const staticSidebar = {
    helpTopics: [
      { name: "Shop Management", href: "/help/shop-management" },
      { name: "Orders & Shipping", href: "/help/orders-shipping" },
      { name: "Listings", href: "/help/listings" },
      { name: "Finances", href: "/help/finances" },
      { name: "Marketing & Promotions", href: "/help/marketing-promotions" },
      { name: "Start Selling on Etsy", href: "/help/start-selling" },
      { name: "Your Etsy Account", href: "/help/your-account" },
    ],
    articleNavigation: [
      { title: "Introduction", id: "introduction" },
      { title: "Postage Pricing", id: "postage-pricing" },
      { title: "Delivery Profile Highlight", id: "delivery-profile-highlight" },
      { title: "Sample Pricing Table", id: "sample-pricing-table" },
      { title: "Additional Resources", id: "additional-resources" },
    ],
  };

  // Fetch article data based on slug
  useEffect(() => {
    const requestOptions = {
      method: "GET",
      redirect: "follow",
      headers: {
        "Cache-Control": "no-cache",
        Pragma: "no-cache",
      },
    };

    fetch(`https://media.upfrica.com/api/helpblogs/${slug}/`, requestOptions)
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then((result) => {
        setData(result);
        setLoading(false);
      })
      .catch((err) => {
        console.error(err);
        setError(err);
        setLoading(false);
      });
  }, [slug]);

  // --- Search States and Debounce Logic ---
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const debounceTimeout = useRef(null);
  const [isFocused, setIsFocused] = useState(false);

  useEffect(() => {
    // Clear any existing debounce timer
    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);

    // Clear results if query is empty
    if (!searchQuery.trim()) {
      setSearchResults([]);
      setSearchLoading(false);
      return;
    }

    setSearchLoading(true);
    // Set debounce delay: 400ms
    debounceTimeout.current = setTimeout(() => {
      const encodedQuery = encodeURIComponent(searchQuery.trim());
      fetch(`https://media.upfrica.com/api/helpblogs/search/?q=${encodedQuery}`)
        .then((response) => response.json())
        .then((data) => {
          setSearchResults(data);
          setSearchLoading(false);
        })
        .catch((error) => {
          console.error("Search fetch error:", error);
          setSearchLoading(false);
        });
    }, 400);

    return () => clearTimeout(debounceTimeout.current);
  }, [searchQuery]);

  if (loading) {
    return <SkeletonLoader />;
  }
  if (error) {
    return <div>Error loading data: {error?.message}</div>;
  }

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <Header
        data={staticHeader}
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        isFocused={isFocused}
        setIsFocused={setIsFocused}
        searchResults={searchResults}
        searchLoading={searchLoading}
      />
      <div className="absolute top-6 right-6 z-50">
        <DarkModeToggle />
      </div>

      <Breadcrumbs data={staticBreadcrumbs} />
      <div className="container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-8 ">
        <Sidebar data={staticSidebar} />
        <main className="lg:col-span-3 space-y-8 ">
          <ArticleContent data={data} />
        </main>
      </div>
      <VoteSection />
      <Footer />
      <Scripts />
    </div>
  );
}

/* --------------------------------------------------
   SkeletonLoader Component ‚Äì Mimics the page layout while data loads.
-------------------------------------------------- */
const SkeletonLoader = () => (
  <div className="min-h-screen bg-gray-100 animate-pulse ">
    {/* Header Skeleton */}
    <div className="h-24 bg-gray-300 relative">
      <div className="absolute inset-0 bg-gray-400 opacity-50"></div>
    </div>
    {/* Breadcrumbs Skeleton */}
    <div className="py-3 bg-white shadow-sm">
      <div className="container mx-auto px-4">
        <div className="h-4 w-1/2 bg-gray-300 rounded"></div>
      </div>
    </div>
    <div className="container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-8">
      {/* Sidebar Skeleton */}
      <aside className="space-y-8">
        <div className="bg-white shadow rounded p-4">
          <div className="h-6 w-1/3 bg-gray-300 mb-4"></div>
          <ul className="space-y-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <li key={i} className="h-4 bg-gray-300 rounded"></li>
            ))}
          </ul>
        </div>
        <div className="bg-white shadow rounded p-4">
          <div className="h-6 w-1/3 bg-gray-300 mb-4"></div>
          <ul className="space-y-2">
            {[1, 2, 3].map((i) => (
              <li key={i} className="h-4 bg-gray-300 rounded"></li>
            ))}
          </ul>
        </div>
      </aside>
      {/* Main Article Skeleton */}
      <main className="lg:col-span-3 space-y-8  dark:bg-gray-900 text-gray-900 dark:text-gray-100">
        <div className="space-y-4">
          <div className="h-8 w-3/4 bg-gray-300 rounded"></div>
          <div className="h-4 w-full bg-gray-300 rounded"></div>
          <div className="h-4 w-full bg-gray-300 rounded"></div>
        </div>
        {Array.from({ length: 3 }).map((_, index) => (
          <div key={index} className="space-y-4 border-t pt-4">
            <div className="h-6 w-1/2 bg-gray-300 rounded"></div>
            <div className="h-4 w-full bg-gray-300 rounded"></div>
            <div className="h-4 w-5/6 bg-gray-300 rounded"></div>
          </div>
        ))}
      </main>
    </div>
    <footer className="bg-gray-800 py-6 mt-12">
      <div className="container mx-auto text-center">
        <div className="h-4 w-1/3 bg-gray-400 rounded mx-auto"></div>
      </div>
    </footer>
  </div>
);

/* --------------------------------------------------
   Header Component ‚Äì Now includes integrated search functionality.
-------------------------------------------------- */
const Header = ({
  data,
  searchQuery,
  setSearchQuery,
  isFocused,
  setIsFocused,
  searchResults,
  searchLoading,
}) => {
  return (
    <header className="relative h-24">
      <div
        className="absolute inset-0 bg-cover bg-center"
        style={{ backgroundImage: `url("${data?.backgroundImage}")` }}
      ></div>
      <div className="absolute inset-0 bg-gradient-to-r from-black via-transparent to-black opacity-70"></div>
      <div className="absolute inset-0 flex items-center justify-between container mx-auto px-4">
        <Link href={"/help"} className="text-white text-xl font-bold">
          Help
        </Link>
        <div className="w-full max-w-md relative">
          <div className="relative">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="search"
              name="query"
              placeholder={data?.searchPlaceholder}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onFocus={() => setIsFocused(true)}
              onBlur={() => setTimeout(() => setIsFocused(false), 150)}
              className="w-full rounded-full border border-violet-700 py-2 pl-10 pr-10 focus:outline-none focus:ring-2 focus:ring-violet-700 text-gray-500"
            />
          </div>
          {/* Floating Search Results Panel */}
          {isFocused && searchQuery.trim() && (
            <div className="absolute z-20 left-0 right-0 mt-2 bg-white rounded shadow-lg p-4 max-h-96 overflow-y-auto">
              {searchLoading ? (
                <div className="grid grid-cols-1 gap-4">
                  {Array.from({ length: 6 }).map((_, i) => (
                    <CardSkeleton key={i} />
                  ))}
                </div>
              ) : (
                <>
                  {searchResults?.length > 0 ? (
                    <div className="grid grid-cols-1 gap-4">
                      {searchResults.map((post) => (
                        <Link key={post.id} href={`/help/${post.slug}/`}>
                          <div className="block p-4 bg-white rounded shadow hover:shadow-lg transition">
                            <h3 className="text-lg font-bold text-gray-900 mb-2">
                              {post.title}
                            </h3>
                            <p className="text-gray-700">
                              {post.summary?.length > 150
                                ? post.summary.substring(0, 150) + "..."
                                : post.summary}
                            </p>
                          </div>
                        </Link>
                      ))}
                    </div>
                  ) : (
                    <p className="p-4 text-center text-gray-400">
                      No results found.
                    </p>
                  )}
                </>
              )}
            </div>
          )}
        </div>
        <div>
          <Link href="/login">
            <button className="px-3 py-2 border border-white text-white rounded-full hover:bg-white hover:text-gray-900 transition">
              Sign in
            </button>
          </Link>
        </div>
      </div>
    </header>
  );
};

/* --------------------------------------------------
   Breadcrumbs Component ‚Äì Renders navigation links.
-------------------------------------------------- */
const Breadcrumbs = ({ data }) => (
  <nav className="bg-white py-3 shadow-sm">
    <div className="container mx-auto px-4">
      <ol className="flex space-x-2 text-gray-600 items-center">
        {data?.map((crumb, index) => (
          <React.Fragment key={index}>
            <li>
              <Link href={crumb.href} className="hover:text-violet-700">
                {crumb.label}
              </Link>
            </li>
            {index < data.length - 1 && <li>/</li>}
          </React.Fragment>
        ))}
      </ol>
    </div>
  </nav>
);

/* --------------------------------------------------
   Sidebar Component ‚Äì Renders the help topics and article navigation.
-------------------------------------------------- */
// Sidebar toggle button for mobile
const SidebarToggleButton = ({ onClick }) => (
  <button
    onClick={onClick}
    className="block lg:hidden mb-4 px-4 py-2 border border-gray-300 rounded-md bg-white dark:bg-zinc-800 dark:text-white"
  >
    <FaBars className="inline-block mr-2" /> Menu
  </button>
);

// Modified Sidebar to include collapsible logic
const Sidebar = ({ data }) => {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <aside className="space-y-8  dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <SidebarToggleButton onClick={() => setIsOpen(!isOpen)} />
      <div className={`${isOpen ? "block" : "hidden"} lg:block space-y-8 `}>
        <Card title="Help Topics">
          <ul className="list-disc pl-4 text-gray-700 dark:text-dark">
            {data?.helpTopics?.map((link) => (
              <li key={link.name}>
                <Link href={link.href} className="hover:underline">
                  {link.name}
                </Link>
              </li>
            ))}
          </ul>
// ‚Ä¶truncated‚Ä¶

===== src/components/help/MainArticle.jsx =====
import Link from "next/link";

const MainArticle = () => {
  return (
    <article className="lg:w-3/4">
      <div className="">
        <header>
          <h1 className="text-2xl font-bold mb-4">
            How to Set Up Delivery Information for your Listings
          </h1>
        </header>
        <section className="prose max-w-none">
          <p>
            Etsy offers many delivery tools to help you set postage rates in
            your shop.
          </p>
          <ul>
            <li>
              Use delivery profiles if you have multiple listings with the same
              delivery settings.
            </li>
            <li>
              Offer discounted postage when buyers purchase multiple items.
            </li>
            <li>Offer buyers the option to pay more for faster delivery.</li>
          </ul>
          <div>
            <strong>Jump to a section:</strong>
            <ul>
              <li>
                <a href="#postage-charge" className="hover:underline">
                  How much should I charge for postage?
                </a>
              </li>
              <li>
                <a href="#add-postage" className="hover:underline">
                  How do I add postage rates?
                </a>
              </li>
              <li>
                <a href="#delivery-profile" className="hover:underline">
                  How do I create a delivery profile?
                </a>
              </li>
              <li>
                <a href="#free-delivery" className="hover:underline">
                  How do I offer free delivery?
                </a>
              </li>
              <li>
                <a href="#multiple-items" className="hover:underline">
                  What if someone purchases multiple items from my shop?
                </a>
              </li>
              <li>
                <a href="#delivery-upgrade" className="hover:underline">
                  How do I add delivery upgrade?
                </a>
              </li>
            </ul>
          </div>
          <h2 id="postage-charge">How much should I charge for postage?</h2>
          <p>
            We‚Äôve updated how postage price is factored into Etsy search for US
            domestic listings for physical items only. This means that listings
            with postage prices lower than $6 will be prioritised in Etsy
            search, with some exceptions.
          </p>
          <p>
            To see which types of listings are exempt from this, and to learn
            how to edit your domestic listing postage prices in bulk, view our
            article on postage price search visibility.
          </p>
          <p>
            US sellers can use the Etsy Postage Calculator to determine rates
            with USPS or FedEx.
          </p>
          <p>
            US or Canada sellers can use calculated postage if you dispatch with
            USPS or Canada Post. Enter the weight and dimensions of the item and
            select the delivery services you want to offer. When a buyer enters
            their address and chooses a service, Etsy will calculate the postage
            and add it to the cost of the order.
          </p>
          <p>
            If you live in another country or don‚Äôt want to use calculated
            postage, you can add your own postage rates to your listings.
          </p>
          <p>
            You determine your own postage rates, but the Seller Handbook can
            help guide you.
          </p>
          <p>
            Get tips and advice from other sellers in the All About Delivery
            section of the Etsy Forums.
          </p>
          <h2 id="bulky-items">What if I sell very bulky or heavy items?</h2>
          <p>
            If you sell very heavy items, like furniture, consider mentioning in
            your listing descriptions that postage prices vary. Ask buyers to
            contact you before checking out for a postage quote. Then, create a
            custom listing for your buyer.
          </p>
          <p>Learn how to create a custom listing.</p>
          <h2 id="add-postage">How do I add postage rates?</h2>
          <p>
            If you don't want to use calculated postage, add postage rates when
            creating or editing a listing. Be sure to set a rate for each
            country where you'd like to deliver items. Many buyers only see Etsy
            listings that are delivered to their country.
          </p>
          <p>
            <strong>To add delivery when creating a listing:</strong>
          </p>
          <h2 id="delivery-profile">How do I create a delivery profile?</h2>
          <p>
            To reuse the same delivery settings on multiple items, apply a
            delivery profile. If you edit a delivery profile, it will update on
            every listing you‚Äôve applied it to.
          </p>
          <p>
            Save a delivery profile after adding postage rates to a listing, or
            use the Delivery profiles page to create and manage your profiles.
          </p>
          <p>
            <strong>To create a delivery profile:</strong>
          </p>
          <p>
            <strong>To add a delivery profile to a listing:</strong>
          </p>
          <h2 id="free-delivery">How do I offer free delivery?</h2>
          <p>
            Free delivery can be an important tactic to entice buyers to
            complete a purchase. Learn more about offering free delivery.
          </p>
          <p>
            If you use calculated postage, scroll down to the Free delivery
            section of a delivery profile. Specify whether you'd like to offer
            domestic or international free delivery by checking the appropriate
            boxes.
          </p>
          <p>
            For delivery profiles, select Free delivery from the What you‚Äôll
            charge dropdown.
          </p>
          <h2 id="multiple-items">
            What if someone purchases multiple items from my shop?
          </h2>
          <p>
            When you set fixed postage rates, you can offer discounted postage
            for multiple items when you add a rate for One item and an
            Additional item.
          </p>
          <p>
            <strong>One item price:</strong> The cost of delivering the item
            alone.
          </p>
          <p>
            <strong>Additional item price:</strong> The cost of delivering this
            item when added to an additional item in your shop. This could be
            either a different listing in your shop or more than one of the same
            item.
          </p>
          <p>
            To calculate the postage rate, Etsy takes the listing with the most
            expensive One item price and then adds each Additional item price.
          </p>
          <table className="table-auto border-collapse border border-gray-300 my-4">
            <thead>
              <tr>
                <th className="border border-gray-300 px-2 py-1">One item</th>
                <th className="border border-gray-300 px-2 py-1">
                  Additional item
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border border-gray-300 px-2 py-1">
                  Item A: 2.00 USD
                </td>
                <td className="border border-gray-300 px-2 py-1">0.50 USD</td>
              </tr>
              <tr>
                <td className="border border-gray-300 px-2 py-1">
                  Item B: 1.00 USD
                </td>
                <td className="border border-gray-300 px-2 py-1">0.75 USD</td>
              </tr>
            </tbody>
          </table>
          <p>
            If a buyer purchases Item A and Item B, the total postage is 2.75
            USD. We‚Äôll take Item A‚Äôs One item price of 2.00 USD, since it‚Äôs most
            expensive, and Item B‚Äôs Additional item price of 0.75 USD.
          </p>
          <p>
            If three Item A are purchased, the total postage would be 3.00 USD.
            We‚Äôll take the One item cost of 2.00 USD and add two Additional item
            costs of 0.50 USD each.
          </p>
          <h2 id="calculated-postage">If you offer calculating postage</h2>
          <p>
            It isn't possible to set discounted rates for listings with
            calculated postage. For fixed rate items, the discounted rates are
            helpful because you can approximate what it would cost to deliver
            multiple items. You don‚Äôt need that with calculated postage, because
            the precise cost of delivering multiple items is calculated for you.
          </p>
          <p>
            If some of your listings have fixed rates and others have calculated
            postage, we first add the calculated postage on those listings in
            the order as normal. For the fixed rate listings, we‚Äôll add your
            Additional item rates.
          </p>
          <h2 id="delivery-upgrade">How do I add delivery upgrade?</h2>
          <p>
            You can offer your buyers delivery upgrade so they can opt for
            faster delivery at checkout.
          </p>
          <p>
            If you‚Äôre in the US or Canada and offer calculated postage, delivery
            upgrades are available based on which delivery services you‚Äôve
            chosen to offer in your calculated postage settings.
          </p>
          <p>
            Otherwise you can enable delivery upgrades as part of setting fixed
            rates.
          </p>
          <p>
            <strong>To enable delivery upgrades from your Shop Manager:</strong>
          </p>
          <p>
            <strong>To add delivery upgrades to a delivery profile:</strong>
          </p>
          <h2 id="charge-upgrade">
            How are buyers charged for delivery upgrades?
          </h2>
          <p>The upgrade price is added to the initial item cost you set.</p>
          <p>
            When adding delivery upgrades, you can enter either a Domestic
            upgrade, an International upgrade, or both.
          </p>
          <p>
            In an order for multiple items, if a delivery upgrade is available
            on one item, it will be available for the buyer to select. The cost
            will apply to every item in the order, even for items whose delivery
            profiles don't offer the upgrade.
          </p>
          <p>
            <strong>Did this resolve the issue?</strong>
          </p>
        </section>
      </div>

      {/* Related Articles Section */}
      <section className="mt-8">
        <div className="">
          <h3 className="text-xl font-bold mb-4">Related articles</h3>
          <ul className="list-disc list-inside space-y-2 text-gray-700 text-sm">
            <li>
              <Link
                href="/hc/articles/how-to-set-up-calculated-postage"
                className="hover:underline"
              >
                How to Set Up Calculated Postage
              </Link>
            </li>
            <li>
              <Link
                href="/hc/articles/how-to-deliver-your-items"
                className="hover:underline"
              >
                How to Deliver Your Items on Etsy
              </Link>
            </li>
            <li>
              <Link
                href="/hc/articles/how-to-offer-free-delivery"
                className="hover:underline"
              >
                How to Offer Free Delivery
              </Link>
            </li>
            <li>
              <Link
                href="/hc/articles/what-is-a-payment-account-reserve"
                className="hover:underline"
              >
                What is a Payment Account Reserve?
              </Link>
            </li>
            <li>
              <Link
                href="/hc/articles/customs-information-for-international-delivery"
                className="hover:underline"
              >
                Customs Information for International Delivery
              </Link>
            </li>
          </ul>
        </div>
      </section>
    </article>
  );
};

export default MainArticle;


===== src/components/help/Sidebar.jsx =====
"use client";

import Link from "next/link";
import { useState } from "react";

const links = [
  { href: "/shop-management", label: "Shop Management" },
  { href: "/orders-shipping", label: "Orders & Shipping" },
  { href: "/listings", label: "Listings" },
  { href: "/finances", label: "Finances" },
  { href: "/marketing-promotions", label: "Marketing & Promotions" },
  { href: "/start-selling", label: "Start Selling on Etsy" },
  { href: "/your-etsy-account", label: "Your Etsy Account" },
];

const Sidebar = () => {
  const [activeLink, setActiveLink] = useState("/shop-management");

  const handleClick = (href) => {
    setActiveLink(href);
  };

  return (
    <aside className="lg:w-1/4" id="sect-sidebar">
      <div className="cat-sidebar list-unstyled ">
        <ul className="space-y-3 sidebar-list" id="sidebar-ul">
          {links.map((link) => {
            const isActive = activeLink === link.href;

            return (
              <li
                key={link.href}
                className={`pl-4 mb-3 border-l-2 ${
                  isActive ? "border-violet-700" : "border-transparent"
                }`}
              >
                <Link
                  href={link.href}
                  onClick={() => handleClick(link.href)}
                  className={`transition ${
                    isActive
                      ? "font-semibold text-violet-700"
                      : "text-gray-700 hover:text-violet-700"
                  }`}
                >
                  {link.label}
                </Link>
              </li>
            );
          })}
        </ul>
      </div>
    </aside>
  );
};

export default Sidebar;


===== src/components/home/About/About.jsx =====
import React from "react";
import { FaHandHolding, FaHandHoldingHeart } from "react-icons/fa";

export default function AboutSection() {
  return (
    <div className="xl:flex justify-center">
      <div className="container grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 ">
        <div className=" py-6 px-8  bg-green-100 border-2">
          <span>
            <FaHandHoldingHeart className="h-10 w-10" />
          </span>
          <div>
            <h4 className="text-xl font-medium">Buy & sell everywhere</h4>
            <p className="text-lg text-gray-500">
              One-stop shop for quality items at low prices: electronics,
              fashion, machines and more
            </p>
          </div>
        </div>
        <div className=" py-6 px-8  bg-pink-100 border-2">
          <span>
            <FaHandHoldingHeart className="h-10 w-10" />
          </span>
          <div>
            <h4 className="text-xl font-medium">Build an online storefront</h4>
            <p className="text-lg text-gray-500">
              Sell online, in person, Ghana and around the world with Upfrica
              marketing tools
            </p>
          </div>
        </div>
        <div className=" py-6 px-8  bg-yellow-100 border-2">
          <span>
            <FaHandHoldingHeart className="h-10 w-10" />
          </span>
          <div>
            <h4 className="text-xl font-medium">24x7 Help</h4>
            <p className="text-lg text-gray-500">
              We are here to help. 24x7 support to buyers and sellers
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}


===== src/components/home/Categories/Categories.jsx =====
import React from "react";
import { IoIosArrowRoundForward } from "react-icons/io";
import CategoryItem from "./CategoryItem";

const Categories = async () => {
  const res = await fetch("https://upfrica.com/api/v1/categories", {
    next: { revalidate: 300 }, // Cache for 5 minutes
  });

  if (!res.ok) {
    throw new Error("Failed to fetch categories");
  }

  const data = await res.json();
  let categories = data.categories;

  // Filter out categories that don't have an image
  categories = categories.filter((category) => category.image);

  if (!categories || categories.length === 0) {
    return (
      <p className="text-center text-lg font-medium">
        No categories available.
      </p>
    );
  }

  return (
    <div className="container mx-auto px-6 md:px-10 py-12 bg-white shadow-md rounded-lg">
      {/* Header Section */}
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl md:text-4xl font-bold tracking-tight text-gray-900">
          Shop by Category
        </h1>
        <IoIosArrowRoundForward className="h-12 w-12 text-gray-700" />
      </div>

      {/* Horizontal Scrollable Categories */}
      <div className="overflow-x-auto whitespace-nowrap py-4">
        <div className="flex gap-4 md:gap-6" style={{ scrollbarWidth: "none" }}>
          {categories.map((data) => (
            <div
              key={data.id}
              className="min-w-[180px] md:min-w-[220px] h-[180px] md:h-[220px] flex flex-col items-center justify-center bg-gray-100 rounded-lg shadow-md p-4"
            >
              {/* Category Image */}
              <img
                src={data.image}
                alt={data.name}
                className="w-full h-[120px] md:h-[150px] object-cover rounded-lg"
              />

              {/* Truncated Category Name */}
              <p className="text-sm md:text-base font-medium text-center mt-2 truncate w-full">
                {data.name}
              </p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Categories;


===== src/components/home/Categories/CategoryItem.jsx =====
import React from "react";
import Link from "next/link";

export default function CategoryItem({ data }) {
  const { image, name, slug } = data;
  if (!image) return;

  return (
    <div className="min-w-32">
      <Link href={`/categories/${slug}`}>
        <div className="flex flex-col items-center">
          {/* <Link href='/categories'> */}
          <img
            className="h-24 2xl:h-28 w-24 2xl:w-28 rounded-full"
            src={
              image ||
              "https://images.pexels.com/photos/46216/sunflower-flowers-bright-yellow-46216.jpeg?cs=srgb&dl=bloom-blossom-flora-46216.jpg&fm=jpg"
            }
            alt=""
          />
          {/* </Link> */}
          <p className="text-sm lg:text-base tracking-wide">{name}</p>
        </div>
      </Link>
    </div>
  );
}


===== src/components/home/Faq/Faq.jsx =====
"use client";

import React, { useState } from "react";
import { IoIosArrowDown } from "react-icons/io";

const FAQ = () => {
  const [selectedTab, setSelectedTab] = useState("selling");
  const [openIndex, setOpenIndex] = useState(null);

  const faqData = {
    selling: [
      {
        question: "Is there a setup fee or a subscription fee?",
        answer:
          "There are no setup fees or subscription fees. You will only pay a 5% handling fee when your item is sold. No sale, no fee.",
      },
      {
        question: "How will I know when my item is sold?",
        answer:
          "You will receive an email notification providing the order details so you can process and dispatch the order.",
      },
      {
        question: "How will I get paid when my item is sold?",
        answer:
          "We will pay to your momo/bank account immediately after the customer has received their item.",
      },
    ],
    buying: [
      {
        question: "How do I place an order?",
        answer:
          "Simply add the item to your cart, proceed to checkout, and complete your payment to place an order.",
      },
      {
        question: "What payment methods do you accept?",
        answer:
          "We accept mobile money, credit/debit cards, and other secure payment options available at checkout.",
      },
      {
        question: "How long does delivery take?",
        answer:
          "Delivery times vary by location, but most orders are delivered within 3-5 business days.",
      },
    ],
  };

  const handleTabClick = (tab) => {
    setSelectedTab(tab);
    setOpenIndex(null); // Reset open FAQ when switching tabs
  };

  const handleToggle = (index) => {
    setOpenIndex((prevIndex) => (prevIndex === index ? null : index));
  };

  return (
    <div className="container mx-auto px-6 py-12 w-full lg:w-3/5">
      {/* Tab Selector */}
      <div className="flex justify-center items-center gap-6 font-semibold text-lg md:text-xl border-b border-gray-300 pb-4">
        <button
          onClick={() => handleTabClick("selling")}
          className={`px-4 py-2 rounded-md transition ${
            selectedTab === "selling"
              ? "text-black font-bold border-b-2 border-black"
              : "text-gray-500"
          }`}
        >
          Selling
        </button>
        <button
          onClick={() => handleTabClick("buying")}
          className={`px-4 py-2 rounded-md transition ${
            selectedTab === "buying"
              ? "text-black font-bold border-b-2 border-black"
              : "text-gray-500"
          }`}
        >
          Buying
        </button>
      </div>

      {/* FAQ Section */}
      <div className="mt-6 space-y-4">
        {faqData[selectedTab].map((item, index) => (
          <div key={index} className="border rounded-lg shadow-sm p-4">
            <button
              onClick={() => handleToggle(index)}
              className="flex justify-between items-center w-full text-left text-lg font-medium text-gray-900 focus:outline-none"
            >
              {item.question}
              <IoIosArrowDown
                className={`w-6 h-6 transition-transform transform ${
                  openIndex === index ? "rotate-180" : ""
                }`}
              />
            </button>
            <div
              className={`overflow-hidden transition-max-height duration-300 ${
                openIndex === index ? "max-h-40 mt-2" : "max-h-0"
              }`}
            >
              <p className="text-gray-700 text-base">{item.answer}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default FAQ;


===== src/components/home/Faq/FaqItem.jsx =====
// components/home/Questions/QuestionItem.tsx
"use client";

import React, { useState } from "react";
import { IoIosArrowDown, IoIosArrowUp } from "react-icons/io";

const FaqItem = ({ question, answer }) => {
  const [isOpen, setIsOpen] = useState(false);

  const toggleOpen = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className="w-full  space-y-4  divide-slate-200">
      <hr />
      <div
        className="flex justify-between items-center cursor-pointer"
        onClick={toggleOpen}
        aria-expanded={isOpen}
        role="button"
        tabIndex={0}
        onKeyPress={(e) => {
          if (e.key === "Enter" || e.key === " ") {
            toggleOpen();
          }
        }}
      >
        <span className="text-base md:text-xl">{question}</span>
        <span>
          {isOpen ? (
            <IoIosArrowUp
              className="text-2xl text-gray-500"
              aria-hidden="true"
            />
          ) : (
            <IoIosArrowDown
              className="text-2xl text-gray-500"
              aria-hidden="true"
            />
          )}
        </span>
      </div>
      <div
        className={`transition-max-height duration-500 ease-in-out overflow-hidden ${
          isOpen ? "max-h-96" : "max-h-0"
        }`}
      >
        <div className="mt-4 text-lg">{answer}</div>
      </div>
    </div>
  );
};

export default FaqItem;


===== src/components/home/ProductList/PriceRefinements.jsx =====
import React, { useState } from "react";

/**
 * This component replicates the Price Refinements section,
 * including a pair of sliders for minimum/maximum price
 * and a "Go" button that would submit a form.
 */
const PriceRefinements = () => {
  // For demonstration, store the lower/upper in local state
  const [minPrice, setMinPrice] = useState(0);
  const [maxPrice, setMaxPrice] = useState(8900);

  // Example range for the slider in steps
  const minSliderVal = 0;
  const maxSliderVal = 170; // Based on the snippet, 170 steps => $8900

  // Convert our local "step" scale to actual dollar amounts
  const stepToPrice = (step) => {
    // For example, 170 steps -> 8900 => ratio is ~52.35
    return Math.round(step * (8900 / maxSliderVal));
  };

  // Helpers to handle slider changes
  const onChangeMin = (e) => {
    const stepValue = parseInt(e.target.value);
    setMinPrice(stepToPrice(stepValue));
  };

  const onChangeMax = (e) => {
    const stepValue = parseInt(e.target.value);
    setMaxPrice(stepToPrice(stepValue));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // In a real app, you might navigate or do something
    // with minPrice and maxPrice. For now, just log them.
    console.log("Submitting price range:", { minPrice, maxPrice });
  };

  return (
    <div className="mb-6 bg-white " role="group">
      {/* Price title */}
      <h2
        className="font-semibold text-base lg:text-lg text-gray-700"
        id="p_36-title"
      >
        Price
      </h2>

      {/* The range form */}
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Hidden fields (optional, if you want to mimic the snippet) */}
        <input type="hidden" name="k" value="gaming keyboard" />
        <input type="hidden" name="_encoding" value="UTF8" />
        <input type="hidden" name="content-id" value="amzn1.sym..." />
        {/* ... etc. ... */}

        {/* Display the min and max labels */}
        <div className="flex items-center justify-between text-base lg:text-lg font-bold">
          <label aria-label="Minimum" htmlFor="price-min">
            ${minPrice}
          </label>
          <span>‚Äì</span>
          <label aria-label="Maximum" htmlFor="price-max">
            ${maxPrice}+
          </label>
        </div>

        {/* Range sliders */}
        <div className="flex flex-col space-y-2">
          {/* Lower bound slider */}
          <input
            id="price-min"
            type="range"
            min={minSliderVal}
            max={maxSliderVal}
            value={Math.round((minPrice / 8900) * maxSliderVal)}
            onChange={onChangeMin}
            className="w-full cursor-pointer"
          />

          {/* Upper bound slider */}
          <input
            id="price-max"
            type="range"
            min={minSliderVal}
            max={maxSliderVal}
            value={Math.round((maxPrice / 8900) * maxSliderVal)}
            onChange={onChangeMax}
            className="w-full cursor-pointer"
          />
        </div>

        {/* "Go" button */}
        <button
          type="submit"
          aria-label="Go - Submit price range"
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-500 rounded"
        >
          Go
        </button>
      </form>
    </div>
  );
};

export default PriceRefinements;


===== src/components/home/ProductList/ProductCard.jsx =====
"use client";

import Image from "next/image";
import { AiOutlineShoppingCart } from "react-icons/ai";
import { FaBolt } from "react-icons/fa";
import Link from "next/link";
import { convertPrice } from "@/app/utils/utils";
import { useSelector } from "react-redux";
import { selectSelectedCountry } from "@/app/store/slices/countrySlice";

export default function ProductCard({ product }) {
  const selectedCountry = useSelector(selectSelectedCountry);
  const exchangeRates = useSelector((state) => state.exchangeRates.rates);

  const {
    product_images,
    title,
    sale_end_date,
    price_cents,
    sale_price_cents,
    price_currency,
    slug,
    seller_country,
    seller_town,
    condition,
  } = product;

  if (!product_images || product_images.length === 0) return null;

  const country = seller_country?.toLowerCase() || "gh";
  const conditionSlug = condition?.slug || "brand-new";
  const citySlug = seller_town
    ? seller_town.trim().toLowerCase().replace(/\s+/g, "-")
    : "accra";

  const finalSlug = `${slug}-${conditionSlug}-${citySlug}`;

  const basePrice = price_cents ? price_cents / 100 : 0;
  const salePrice = sale_price_cents ? sale_price_cents / 100 : 0;

  const convertedPrice = convertPrice(
    basePrice,
    price_currency,
    selectedCountry?.code,
    exchangeRates,
  );

  const isSaleActive =
    sale_end_date && new Date(sale_end_date) > new Date() && salePrice > 0;

  const convertedSalePrice = isSaleActive
    ? convertPrice(
        salePrice,
        price_currency,
        selectedCountry?.code,
        exchangeRates,
      )
    : null;

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden flex flex-col justify-between w-full h-[300px] lg:h-[370px] font-sans">
      {/* Image Section */}
      <div className="relative w-full ">
        <Link href={`/${country}/${finalSlug}/`}>
          <span className="block relative w-full h-[200px] lg:h-[250px] overflow-hidden">
            <Image
              src={product_images[0]}
              alt={title}
              fill
              className="object-cover transition-transform duration-500 ease-in-out hover:scale-105"
            />
          </span>
        </Link>

        {isSaleActive && (
          <div className="absolute bottom-2 left-2">
            <button className="bg-red-600 text-white text-sm px-3 py-1 rounded-full flex items-center gap-1">
              <FaBolt className="w-4 h-4" />
              Sale
            </button>
          </div>
        )}
      </div>

      {/* Product Details */}
      <div className="px-2 lg:px-4 py-2 lg:py-3">
        <h2 className="text-base lg:text-lg font-medium lg:font-semibold text-gray-900 truncate">
          {title}
        </h2>
      </div>

      {/* Price & Cart Section */}
      <div className="border-t">
        <div className="flex items-center justify-between px-2 lg:px-4 py-2 lg:py-3">
          <div className="flex items-baseline gap-2">
            {isSaleActive ? (
              <>
                <span className="text-base lg:text-lg font-bold text-gray-900">
                  {selectedCountry?.symbol} {convertedSalePrice?.toFixed(2)}
                </span>
                <span className="text-sm text-gray-500 line-through">
                  {convertedPrice?.toFixed(2)}
                </span>
              </>
            ) : (
              <span className="text-base lg:text-lg font-bold text-gray-900">
                {selectedCountry?.symbol} {convertedPrice?.toFixed(2)}
              </span>
            )}
          </div>
          <Link href={`/${country}/${finalSlug}/`}>
            <span className="p-1">
              <AiOutlineShoppingCart className="w-5 lg:w-6 h-5 lg:h-6 text-purple-500" />
            </span>
          </Link>
        </div>
      </div>
    </div>
  );
}


===== src/components/home/ProductList/ProductList.jsx =====
// app/components/ProductList.jsx
import ProductListClient from "./ProductListClient";
import { BASE_API_URL } from "@/app/constants";

export default async function ProductList({ title }) {
  try {
    const res = await fetch(`${BASE_API_URL}/api/products/`, {
      next: { revalidate: 120 }, // ISR: revalidate every 2 mins
    });

    if (!res.ok) {
      const errorText = await res.text();
      return (
        <div className="container mx-auto p-4">
          <h1 className="text-xl font-bold text-red-600">
            Error fetching products
          </h1>
          <p className="text-base">Status Code: {res.status}</p>
          <pre className="text-sm bg-gray-100 p-2">{errorText}</pre>
        </div>
      );
    }

    const data = await res.json();
    return <ProductListClient title={title} productsData={data} />;
  } catch (err) {
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-xl font-bold text-red-600">Network Error</h1>
        <p className="text-base">Unable to fetch products.</p>
        <pre className="text-sm bg-gray-100 p-2">{err.message}</pre>
      </div>
    );
  }
}


===== src/components/home/ProductList/ProductListClient.jsx =====
// /app/components/ProductListClient.jsx
"use client";
import React, { useEffect } from "react";
import { useDispatch } from "react-redux";
import ProductCard from "./ProductCard";
import { setExchangeRates } from "@/app/store/slices/exchangeRatesSlice";
import { IoIosArrowRoundForward } from "react-icons/io";

export default function ProductListClient({ title, productsData }) {
  // console.log("product data", productsData.results);

  const dispatch = useDispatch();

  useEffect(() => {
    if (productsData && productsData.exchange_rates) {
      dispatch(setExchangeRates(productsData.exchange_rates));
    }
  }, [productsData, dispatch]);

  return (
    <div className="container bg-white  py-5 md:py-10 font-sans ">
      {/* Header */}
      <div className="md-4 lg:mb-8">
        <div className="flex gap-4 pb-4 items-center justify-between md:justify-start">
          <h1 className="text-xl md:text-3xl font-extrabold tracking-wide">
            {title}
          </h1>
          <IoIosArrowRoundForward className="h-10 w-10 text-gray-700" />
        </div>
      </div>

      {/* Products Grid */}
      <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6  gap-3 lg:gap-5">
        {productsData?.results && productsData.results.length > 0 ? (
          productsData.results
            .slice(0, 20)
            .map((product) => (
              <ProductCard
                key={product.id}
                product={product}
                listProduct={product}
              />
            ))
        ) : (
          <div className="col-span-full text-center text-gray-500">
            No products found.
          </div>
        )}
      </div>
    </div>
  );
}


===== src/components/home/ProductList/RealtedProduct.jsx =====
"use client";
import React from "react";
import RelatedProductCard from "./RelatedProductCard";
import RelatedProductCardSkeleton from "./RelatedProductCardSkeleton";

// const RealtedProduct = ({ productSlug, productTitle,relatedProducts, location = "Ghana" }) => {
//   const [products, setProducts] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);

//   console.log("related product component data",relatedProducts);

//   // Truncate product title for SEO heading
//   const truncateTitle = (str, max = 50) => {
//     if (!str || typeof str !== "string") return "";
//     if (str.length <= max) return str;
//     const truncated = str.slice(0, max);
//     return truncated.slice(0, truncated.lastIndexOf(" ")) + "‚Ä¶";
//   };

//   const seoTitle = truncateTitle(productTitle);

//   useEffect(() => {
//     const url = `https://media.upfrica.com/api/products/${productSlug}/related/`;
//     console.log(url);

//     const requestOptions = {
//       method: "GET",
//       headers: {
//         "Content-Type": "application/json",
//       },
//     };

//     fetch(url, requestOptions)
//       .then((response) => {
//         if (!response.ok) {
//           throw new Error(`HTTP error! Status: ${response.status}`);
//         }
//         return response.json();
//       })
//       .then((result) => {
//         // console.log("data related product",result?.results);
//         setProducts(result?.results || []);
//         setLoading(false);
//       })
//       .catch((error) => {
//         console.error("Error fetching product data:", error);
//         setError(error);
//         setLoading(false);
//       });
//   }, [productSlug]);

//   if (loading) {
//     return (
//       <div className="grid md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 py-10 gap-4">
//         {Array.from({ length: 4 }).map((_, index) => (
//           <RelatedProductCardSkeleton key={index} />
//         ))}
//       </div>
//     );
//   }

//   if (error) {
//     return <p>Error fetching product details: {error.message}</p>;
//   }

//   if (!products.length) {
//     return <p>No related items found.</p>;
//   }

//   // console.log('products',products);

//   return (
//     <div className="py-10">
//       <h3 className="text-lg md:text-lg lg:text-xl font-medium border-b pb-2 mb-4">
//         Items related to this {seoTitle} and their Price in {location} ‚Äì{" "}
//         <a href="#" className="text-blue-600 underline hover:text-blue-800">
//           See more
//         </a>
//       </h3>
//       <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6  gap-3 lg:gap-5">
//         {products.map((product) => (
//           <RelatedProductCard key={product.id} product={product} />
//           // <ProductCard key={product.id} product={product} />
//         ))}
//       </div>
//     </div>
//   );
// };

const RealtedProduct = ({
  productSlug,
  productTitle,
  relatedProducts,
  location = "Ghana",
}) => {
  // 1. SEO Title
  const truncateTitle = (str, max = 50) => {
    if (!str || typeof str !== "string") return "";
    if (str.length <= max) return str;
    const truncated = str.slice(0, max);
    return truncated.slice(0, truncated.lastIndexOf(" ")) + "‚Ä¶";
  };

  const seoTitle = truncateTitle(productTitle);

  // 2. Loading state
  if (relatedProducts === undefined) {
    return (
      <div className="grid md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 py-10 gap-4">
        {Array.from({ length: 4 }).map((_, index) => (
          <RelatedProductCardSkeleton key={index} />
        ))}
      </div>
    );
  }

  // 3. Error state
  if (relatedProducts === null) {
    return <p className="text-red-500">‚ùå Error loading related products.</p>;
  }

  // 4. Empty state
  if (!relatedProducts.length) {
    return <p className="text-gray-500">No related items found.</p>;
  }

  // 5. Success state
  return (
    <div className="py-10">
      <h3 className="text-lg md:text-lg lg:text-xl font-medium border-b pb-2 mb-4">
        Items related to this {seoTitle} and their Price in {location} ‚Äì{" "}
        <a href="#" className="text-blue-600 underline hover:text-blue-800">
          See more
        </a>
      </h3>
      <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-3 lg:gap-5">
        {relatedProducts.map((product) => (
          <RelatedProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

export default RealtedProduct;


===== src/components/home/ProductList/RecentProductCard.jsx =====
"use client";
import Image from "next/image";
import { AiOutlineShoppingCart } from "react-icons/ai";
import { FaBolt, FaHeart } from "react-icons/fa";
import Link from "next/link";
import { convertPrice } from "@/app/utils/utils";
import { useSelector } from "react-redux";

export default function RecentProductCard({ product }) {
  const {
    product_images,
    title,
    price_cents,
    price_currency,
    category,
    slug,
    seo_slug,
    seller_country,
    condition,
    seller_town,
  } = product;
  const country = seller_country?.toLowerCase() || "gh";
  const town = seller_town?.toLowerCase() || "accra";
  const exchangeRates = useSelector((state) => state.exchangeRates.rates);
  const convertedPrice = convertPrice(
    price_cents / 100,
    price_currency,
    "GHS",
    exchangeRates,
  );
  // console.log('Converted Price:', convertedPrice);

  if (!product_images) return null;

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden flex flex-col justify-between h-[270px] font-sans">
      {/* Image Section */}
      <div className="relative w-full h-[160px]">
        {product_images.length > 0 && (
          <Link href={`/${country}/${seo_slug}/`}>
            {/* Wrapping with an anchor tag for accessibility */}
            <span className="block relative w-[160px] h-[160px]">
              <img
                src={product_images[0]}
                alt={title}
                width={160}
                height={160}
                className="w-full h-full object-cover transition-transform duration-500 ease-in-out hover:scale-105"
              />
            </span>
          </Link>
        )}

        {/* Favorite Icon */}
        <div className="absolute top-2 right-2 bg-gray-100 border p-2 rounded-full">
          <FaHeart className="w-6 h-6 text-gray-600" />
        </div>
        <div className="px-4 py-3">
          <h2 className="text-lg font-semibold text-gray-900 truncate w-full overflow-hidden">
            {title}
          </h2>
        </div>
      </div>

      {/* Price & Cart Section */}
      <div className="border-t">
        <div className="flex items-center justify-between px-4 py-3">
          <div className="flex items-center gap-2">
            {/* <p className="text-lg font-bold text-gray-900">
              {price_currency}{parseInt(price_cents) / 100}
            </p> */}
            <p className="text-lg font-bold text-gray-900">
              GHS {convertedPrice?.toFixed(2)}
            </p>
            {/* <p className="text-sm text-gray-500 line-through">
              {"GHS"}{"0.00"}
            </p> */}
          </div>
          <Link href={`/${country}/${category?.slug}/${slug}/`}>
            <div className="p-2 border rounded-full bg-gray-100 hover:bg-gray-200 transition-colors">
              <AiOutlineShoppingCart className="w-6 h-6 text-purple-500" />
            </div>
          </Link>
        </div>
      </div>
    </div>
  );
}


===== src/components/home/ProductList/RecentlyViewedList.jsx =====
// components/RecentlyViewedList.js
"use client";
import { useEffect, useState } from "react";

import ProductCard from "./ProductCard";
// import RecentProductCard from './RecentProductCard';
import { IoIosArrowRoundForward } from "react-icons/io";

const RECENTLY_VIEWED_KEY = "upfricaRecentlyViewed";

const RecentlyViewedList = ({ title }) => {
  const [items, setItems] = useState([]);

  useEffect(() => {
    if (typeof window !== "undefined") {
      const stored = localStorage.getItem(RECENTLY_VIEWED_KEY);
      if (stored && stored.length > 0) {
        const parsedItems = JSON.parse(stored);
        setItems(parsedItems);
        console.log("recently preview product", parsedItems); // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá log ‡¶ï‡¶∞‡ßã
      }
    }
  }, []);

  if (items.length === 0) return null;

  return (
    <div className="container bg-white p-5 md:py-6 font-sans  my-2">
      {/* Header */}
      <div className="mb-4 lg:mb-8">
        <div className="flex gap-4 pb-4 items-end justify-between md:justify-start">
          <h1 className="text-xl md:text-3xl font-extrabold tracking-wide">
            {title}
          </h1>
          <IoIosArrowRoundForward className="h-10 w-10 text-gray-700" />
        </div>
      </div>

      <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-3 lg:gap-5">
        {items.map((item) => (
          // <RecentProductCard key={item.id} product={item} />

          <ProductCard key={item.id} product={item} />
        ))}
      </div>
      {/* Optionally, add a link to view all if the list is long */}
      {/* {items.length > 5 && (
                <Link href="/recently-viewed">
                    <span>View All</span>
                </Link>
            )} */}
    </div>
  );
};

export default RecentlyViewedList;


===== src/components/home/ProductList/RelatedProductCard.jsx =====
"use client";
import React from "react";
import Link from "next/link";
import { AiOutlineShoppingCart } from "react-icons/ai";
import { FaBolt, FaHeart } from "react-icons/fa";
import { useSelector } from "react-redux";
import { convertPrice } from "@/app/utils/utils";
import { selectSelectedCountry } from "@/app/store/slices/countrySlice";

export default function RelatedProductCard({ product }) {
  const selectedCountry = useSelector(selectSelectedCountry);
  const exchangeRates = useSelector((state) => state.exchangeRates.rates);

  const {
    image_url,
    title,
    price_cents,
    price_currency,
    slug,
    seo_slug,
    sale_end_date,
    sale_price_cents,
  } = product;

  if (!image_url) return null;

  // build country‚Äêcode for URL and currency settings
  const countryCode = selectedCountry?.code || "GHS";
  const countryPath = selectedCountry?.code?.toLowerCase() || "gh";
  const currencySym = selectedCountry?.symbol || "GHS";

  // convert regular price
  const convertedPrice = convertPrice(
    price_cents / 100,
    price_currency,
    countryCode,
    exchangeRates,
  );

  // is there a valid, ongoing sale?
  const isOnSaleActive =
    sale_end_date &&
    new Date(sale_end_date) > new Date() &&
    sale_price_cents > 0;

  // convert sale price if active
  const convertedSalePrice =
    isOnSaleActive && sale_price_cents
      ? convertPrice(
          sale_price_cents / 100,
          price_currency,
          countryCode,
          exchangeRates,
        )
      : null;

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden flex flex-col justify-between h-[370px] font-sans">
      {/* Image Section */}
      <div className="relative w-full h-[230px]">
        <Link href={`/${countryPath}/${seo_slug || slug}/`}>
          <span className="block relative w-full h-[230px]">
            <img
              src={image_url}
              alt={title}
              width={230}
              height={230}
              className="w-full h-full object-cover transition-transform duration-500 ease-in-out hover:scale-105"
            />
          </span>
        </Link>

        {/* Favorite Icon */}
        <div className="absolute top-2 right-2 bg-gray-100 border p-2 rounded-full">
          <FaHeart className="w-6 h-6 text-gray-600" />
        </div>

        {/* Sales Badge */}
        {isOnSaleActive && (
          <div className="absolute bottom-2 left-2">
            <button className="bg-red-600 text-white text-sm px-3 py-1 rounded-full flex items-center gap-1">
              <FaBolt className="w-4 h-4" />
              Sales
            </button>
          </div>
        )}
      </div>

      {/* Product Details */}
      <div className="px-4 py-3">
        <h2 className="text-base lg:text-lg font-semibold text-gray-900 truncate w-full overflow-hidden">
          {title}
        </h2>
        <p className="text-sm text-gray-500">1083+ sold recently</p>
      </div>

      {/* Price & Cart Section */}
      <div className="border-t">
        <div className="flex items-center justify-between px-2 lg:px-4 py-3">
          <div className="flex items-center gap-2">
            {isOnSaleActive ? (
              <>
                <p className="text-base lg:text-lg font-medium text-gray-900">
                  {currencySym} {convertedSalePrice?.toFixed(2)}
                </p>
                <p className="text-sm text-gray-500 line-through">
                  {convertedPrice?.toFixed(2)}
                </p>
              </>
            ) : (
              <p className="text-base lg:text-lg font-bold text-gray-900">
                {currencySym} {convertedPrice?.toFixed(2)}
              </p>
            )}
          </div>
          <Link href={`/${countryPath}/${seo_slug || slug}/`}>
            <div className="p-1 border rounded-sm bg-gray-100 hover:bg-gray-200 transition-colors">
              <AiOutlineShoppingCart className="w-5 lg:w-6 h-5 lg:h-6 text-purple-500" />
            </div>
          </Link>
        </div>
      </div>
    </div>
  );
}


===== src/components/home/ProductList/RelatedProductCardSkeleton.jsx =====
"use client";
import React from "react";

export default function RelatedProductCardSkeleton() {
  return (
    <div className="bg-white rounded-lg shadow overflow-hidden flex flex-col justify-between h-[370px] font-sans animate-pulse">
      {/* Image Section */}
      <div className="relative w-full h-[230px]">
        <div className="w-full h-full bg-gray-300" />
      </div>
      {/* Product Details */}
      <div className="px-4 py-3">
        <div className="h-6 bg-gray-300 rounded mb-2 w-3/4" />
        <div className="h-4 bg-gray-200 rounded w-1/2" />
      </div>
      {/* Price & Cart Section */}
      <div className="border-t">
        <div className="flex items-center justify-between px-4 py-3">
          <div className="h-6 bg-gray-300 rounded w-1/3" />
          <div className="h-8 w-8 bg-gray-300 rounded-full" />
        </div>
      </div>
    </div>
  );
}


===== src/components/home/ProductList/ShopCard.jsx =====
// app/shops/[slug]/ShopCard.jsx
"use client";

import { useEffect, useMemo, useState } from "react";
import Link from "next/link";
import { useSelector } from "react-redux";
import { convertPrice } from "@/app/utils/utils";
import { AiOutlineHeart, AiOutlineShoppingCart } from "react-icons/ai";
import { SITE_BASE_URL, BASE_API_URL } from "@/app/constants";

const IMAGE_BASE =
  process.env.NEXT_PUBLIC_IMAGE_BASE_URL // e.g. https://media.upfrica.com
  || SITE_BASE_URL                       // e.g. https://www.upfrica.com
  || BASE_API_URL;                       // e.g. http://127.0.0.1:8000

function absolutize(url) {
  if (!url) return null;
  if (/^https?:\/\//i.test(url)) return url;    // already absolute
  if (url.startsWith("//")) return `https:${url}`;
  const base = IMAGE_BASE.replace(/\/$/, "");
  return `${base}${url.startsWith("/") ? "" : "/"}${url}`;
}

function pickFirstImage(p) {
  if (p?.thumbnail) return p.thumbnail;
  if (p?.image_objects?.[0]?.image_url) return p.image_objects[0].image_url;
  if (p?.image_objects?.[0]?.url) return p.image_objects[0].url;
  if (Array.isArray(p?.product_images) && p.product_images[0]) return p.product_images[0];
  if (Array.isArray(p?.ordered_product_images) && p.ordered_product_images[0]) return p.ordered_product_images[0];
  if (Array.isArray(p?.images) && p.images[0]) return p.images[0];
  return null;
}

export default function ShopCard({ product, onBuy }) {
  const title = product?.title || product?.name || "Product";
  const priceCents = typeof product?.price_cents === "number" ? product.price_cents : 0;
  const priceCurrency = product?.price_currency || "USD";
  const country = (product?.seller_country || product?.listing_country_code || "gh").toLowerCase();
  const slug = product?.seo_slug || product?.slug || "";
  const href = product?.frontend_url || (slug ? `/${country}/${slug}` : "#");

  const exchangeRates = useSelector((s) => s.exchangeRates.rates);
  const convertedPrice =
    convertPrice(priceCents / 100, priceCurrency, "GHS", exchangeRates) ??
    priceCents / 100;

  const [src, setSrc] = useState("/placeholder.png");

  // compute image src when product changes
  useEffect(() => {
    const raw = pickFirstImage(product);
    const abs = absolutize(raw);
    setSrc(abs || "/placeholder.png");
  }, [product]);

  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow hover:shadow-md transition p-2 flex flex-col">
      {/* Product Image */}
      <Link href={href} target="_blank" className="relative group">
        <img
          src={src}
          alt={title}
          onError={() => setSrc("/placeholder.png")}
          className="rounded-md w-full h-60 object-cover bg-gray-50 group-hover:scale-105 transition-transform"
        />
        <span className="absolute top-2 right-2 bg-white rounded-full p-2 shadow hover:bg-gray-100">
          <AiOutlineHeart className="text-gray-700" />
        </span>
      </Link>

      {/* Product Info */}
      <div className="flex-1 mt-3 px-1">
        <h5 className="text-sm font-semibold leading-tight line-clamp-2">
          <Link href={href} target="_blank">{title}</Link>
        </h5>
      </div>

      {/* Price + Buy Button */}
      <div className="mt-3 flex items-center justify-between px-1 pb-2">
        <div className="text-gray-900 font-semibold text-sm">
          GHS {convertedPrice.toFixed(2)}
        </div>
        <button
          onClick={onBuy}
          title="Buy Now"
          className="flex items-center gap-1 text-sm text-white bg-violet-600 hover:bg-violet-700 px-3 py-1 rounded-full transition"
        >
          <AiOutlineShoppingCart className="text-base" />
          Buy
        </button>
      </div>
    </div>
  );
}

===== src/components/input/ApprovalNotesSelect.jsx =====
// import React from "react";

// const ApprovalNotesSelect = ({ formik }) => {
//   return (
//     <div className="bg-white shadow rounded-lg mb-6">
//       <div className="p-4">
//         <div className="grid grid-cols-1  gap-4">
//           <div>
//             <label htmlFor="approval_notes" className="blocktext-lg font-semibold mb-2">
//             Approval notes
//             </label>
//             <select
//               name="approval_notes"
//               id="approval_notes"
//               value={formik.values.approval_notes}
//               onChange={formik.handleChange}
//               className="w-full border px-3 py-2 rounded-lg focus:ring focus:ring-blue-200"
//             >
//               <option value="">Select</option>
//               <option value="Phone number or contact details not allowed on images">
//                 Phone number or contact details not allowed on images
//               </option>
//               <option value="Please remove text from the main image">
//                 Please remove text from the main image
//               </option>
//               <option value="Please upload a clearer image">Please upload a clearer image</option>
//               <option value="Provide a valid contact number. Go to your Profile Settings">
//                 Provide a valid contact number. Go to your Profile Settings
//               </option>
//               <option value="Description should be in bullet points, include keywords">
//                 Description should be in bullet points, include keywords
//               </option>
//               <option value="The first 2-3 words in the title must contain main keywords">
//                 The first 2-3 words in the title must contain main keywords
//               </option>
//               <option value="Missing Supplier Link">Missing Supplier Link</option>
//               <option value="Missing Supplier phone number">Missing Supplier phone number</option>
//               <option value="Missing Supplier name">Missing Supplier name</option>
//               <option value="Missing images">Missing images</option>
//               <option value="Duplicate listing">Duplicate listing</option>
//               <option value="Supplier MOQ too high">Supplier MOQ too high</option>
//             </select>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ApprovalNotesSelect;

import React from "react";

const ApprovalNotesSelect = ({ formik }) => {
  // your preset options
  const OPTIONS = [
    { value: "", label: "Select" },
    {
      value: "Phone number or contact details not allowed on images",
      label: "Phone number or contact details not allowed on images",
    },
    {
      value: "Please remove text from the main image",
      label: "Please remove text from the main image",
    },
    {
      value: "Please upload a clearer image",
      label: "Please upload a clearer image",
    },
    {
      value: "Provide a valid contact number. Go to your Profile Settings",
      label: "Provide a valid contact number. Go to your Profile Settings",
    },
    {
      value: "Description should be in bullet points, include keywords",
      label: "Description should be in bullet points, include keywords",
    },
    {
      value: "The first 2-3 words in the title must contain main keywords",
      label: "The first 2-3 words in the title must contain main keywords",
    },
    { value: "Missing Supplier Link", label: "Missing Supplier Link" },
    {
      value: "Missing Supplier phone number",
      label: "Missing Supplier phone number",
    },
    { value: "Missing Supplier name", label: "Missing Supplier name" },
    { value: "Missing images", label: "Missing images" },
    { value: "Duplicate listing", label: "Duplicate listing" },
    { value: "Supplier MOQ too high", label: "Supplier MOQ too high" },
    // the ‚ÄúOther‚Äù hook:
    { value: "Other", label: "Other (write your own‚Ä¶)" },
  ];

  return (
    <div className="bg-white shadow rounded-lg mb-6">
      <div className="p-4 space-y-4">
        {/* dropdown */}
        <div>
          <label
            htmlFor="approval_notes"
            className="block text-lg font-semibold mb-2"
          >
            Approval notes
          </label>
          <select
            id="approval_notes"
            name="approval_notes"
            value={formik.values.approval_notes}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            className="w-full border px-3 py-2 rounded-lg focus:ring focus:ring-blue-200"
          >
            {OPTIONS.map((opt) => (
              <option key={opt.value} value={opt.value}>
                {opt.label}
              </option>
            ))}
          </select>
          {formik.touched.approval_notes && formik.errors.approval_notes ? (
            <p className="text-red-500 text-sm mt-1">
              {formik.errors.approval_notes}
            </p>
          ) : null}
        </div>

        {/* custom‚Äêtext area, only if ‚ÄúOther‚Äù chosen */}
        {formik.values.approval_notes === "Other" && (
          <div>
            <label
              htmlFor="approval_notes_custom"
              className="block text-lg font-semibold mb-2"
            >
              Your custom approval note
            </label>
            <textarea
              id="approval_notes_custom"
              name="approval_notes_custom"
              value={formik.values.approval_notes_custom}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              placeholder="Type your note here‚Ä¶"
              className="w-full border px-3 py-2 rounded-lg focus:ring focus:ring-blue-200 resize-y"
              rows={4}
            />
            {formik.touched.approval_notes_custom &&
            formik.errors.approval_notes_custom ? (
              <p className="text-red-500 text-sm mt-1">
                {formik.errors.approval_notes_custom}
              </p>
            ) : null}
          </div>
        )}
      </div>
    </div>
  );
};

export default ApprovalNotesSelect;


===== src/components/input/Brand.jsx =====
// Brand.js
import React, { useState, useRef, useEffect } from "react";
import { IoIosArrowDown } from "react-icons/io";
import useBrands from "../api/useBrands";

const Brand = ({ formik }) => {
  const [arrowshowDropdown, setArrowShowDropdown] = useState(false);
  const wrapperRef = useRef(null);
  const { brands, loading, error } = useBrands();

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
        setArrowShowDropdown(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // Find the name of the currently selected brand (Formik stores the id)
  const selectedBrandName =
    brands.find((b) => b.id === formik.values.brand)?.name || "";

  return (
    <div className="py-4" ref={wrapperRef}>
      <h2 className="text-2xl font-bold mb-2">*Brand</h2>
      <p className="mb-2 text-gray-600">
        Use keywords people would search for when looking for your item. Include
        details such as colour, size, brand & model.
      </p>

      <div className="relative flex items-center border rounded-lg border-purple-500 px-2">
        <input
          id="brand"
          name="brand"
          type="text"
          placeholder="Select Brand"
          value={selectedBrandName}
          readOnly
          onClick={() => !loading && setArrowShowDropdown((prev) => !prev)}
          className="w-full border-none focus:ring-0 px-3 py-2 cursor-pointer"
        />
        <button
          type="button"
          onClick={() => !loading && setArrowShowDropdown((prev) => !prev)}
          className="ml-2 focus:outline-none"
        >
          <IoIosArrowDown className="w-5 h-5" />
        </button>

        {arrowshowDropdown && (
          <div className="absolute top-full left-0 w-full bg-white border rounded shadow-lg mt-2 z-10 max-h-60 overflow-auto">
            <ul className="py-2">
              {loading && (
                <li className="px-4 py-2 text-gray-500">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá‚Ä¶</li>
              )}
              {error && (
                <li className="px-4 py-2 text-red-500">Error: {error}</li>
              )}
              {!loading &&
                !error &&
                brands.map((brand) => (
                  <li
                    key={brand.id}
                    className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
                    onClick={() => {
                      formik.setFieldValue("brand", brand.id);
                      setArrowShowDropdown(false);
                    }}
                  >
                    {brand.name}
                  </li>
                ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default Brand;


===== src/components/input/CancellationReturns.jsx =====
import React from "react";

const CancellationPolicyForm = ({ formik }) => {
  return (
    <div className="bg-white shadow rounded-lg mb-6 ">
      <div className="border-b p-4">
        <h5 className="text-lg font-semibold mb-0">
          Define Cancellation Policy
        </h5>
      </div>

      {/* 1. Toggle: Allow cancellation? */}
      <div className="space-x-6 p-6 ">
        <label className="inline-flex items-center">
          <input
            type="radio"
            name="cancellable"
            // unchecked by default
            checked={formik.values.cancellable === false}
            onChange={() => formik.setFieldValue("cancellable", false)}
            className="form-radio text-blue-600"
          />
          <span className="ml-2">No, cancellations not allowed</span>
        </label>
        <label className="inline-flex items-center">
          <input
            type="radio"
            name="cancellable"
            checked={formik.values.cancellable === true}
            onChange={() => formik.setFieldValue("cancellable", true)}
            className="form-radio text-blue-600"
          />
          <span className="ml-2">Yes, allow cancellations</span>
        </label>
      </div>

      {/* 2. When allowed ‚Üí show policy inputs */}
      {formik.values.cancellable && (
        <div className="border-l-4 border-blue-300 pl-4 mt-4 space-y-4 pb-4">
          {/* 2.1 Cancellation window */}
          <div className="">
            <label
              htmlFor="cancellationWindowHours"
              className="block text-sm font-medium mb-1"
            >
              Cancellation window (hours)
            </label>
            <input
              type="number"
              id="cancellationWindowHours"
              name="cancellationWindowHours"
              min={1}
              max={48}
              value={formik.values.cancellationWindowHours}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              className="w-24 border rounded-md px-2 py-1"
            />
            {formik.touched.cancellationWindowHours &&
              formik.errors.cancellationWindowHours && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.cancellationWindowHours}
                </p>
              )}
            <p className="text-xs text-gray-500">
              (e.g. 1‚Äì2 hours before shipment)
            </p>
          </div>

          {/* 2.2 Seller SLA */}
          <div>
            <label
              htmlFor="sellerResponseSLA"
              className="block text-sm font-medium mb-1"
            >
              Seller response SLA
            </label>
            <select
              id="sellerResponseSLA"
              name="sellerResponseSLA"
              value={formik.values.sellerResponseSLA}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              className="w-32 border rounded-md px-3 py-2"
            >
              <option value="24h">24 hours</option>
              <option value="48h">48 hours</option>
            </select>
            {formik.touched.sellerResponseSLA &&
              formik.errors.sellerResponseSLA && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.sellerResponseSLA}
                </p>
              )}
          </div>

          {/* 2.3 Deny if shipped/custom */}
          <div>
            <label className="inline-flex items-center">
              <input
                type="checkbox"
                name="denyIfShippedOrCustom"
                checked={formik.values.denyIfShippedOrCustom}
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
                className="form-checkbox text-blue-600"
              />
              <span className="ml-2">
                Deny if already shipped or customized
              </span>
            </label>
          </div>

          {/* 2.4 Auto‚Äëcancel unpaid orders */}
          <div>
            <label
              htmlFor="autoCancelUnpaidHours"
              className="block text-sm font-medium mb-1"
            >
              Auto-cancel unpaid orders after (hours)
            </label>
            <input
              type="number"
              id="autoCancelUnpaidHours"
              name="autoCancelUnpaidHours"
              min={1}
              max={168}
              value={formik.values.autoCancelUnpaidHours}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              className="w-24 border rounded-md px-2 py-1"
            />
            {formik.touched.autoCancelUnpaidHours &&
              formik.errors.autoCancelUnpaidHours && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.autoCancelUnpaidHours}
                </p>
              )}
            <p className="text-xs text-gray-500">(e.g. 48 hours = 2 days)</p>
          </div>

          {/* 2.5 Flag abuse threshold */}
          <div>
            <label
              htmlFor="abuseFlagThreshold"
              className="block text-sm font-medium mb-1"
            >
              Flag user/seller after X cancellations in 30 days
            </label>
            <input
              type="number"
              id="abuseFlagThreshold"
              name="abuseFlagThreshold"
              min={1}
              value={formik.values.abuseFlagThreshold}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              className="w-20 border rounded-md px-2 py-1"
            />
            {formik.touched.abuseFlagThreshold &&
              formik.errors.abuseFlagThreshold && (
                <p className="text-red-500 text-sm mt-1">
                  {formik.errors.abuseFlagThreshold}
                </p>
              )}
          </div>
        </div>
      )}
    </div>
  );
};

export default CancellationPolicyForm;


===== src/components/input/Categore.jsx =====
// // Categore.js
// import React, { useState, useRef, useEffect } from 'react';
// import InputField from '../InputField';
// import useCategories from '../api/data';

// const Categore = ({ formik }) => {
//   const [dropdownOpen, setDropdownOpen] = useState(false);
//   const { categories, loading, error } = useCategories();
//   const wrapperRef = useRef(null);

//   // Close dropdown on outside click
//   useEffect(() => {
//     const handleClickOutside = (e) => {
//       if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {
//         setDropdownOpen(false);
//       }
//     };
//     document.addEventListener('mousedown', handleClickOutside);
//     return () => document.removeEventListener('mousedown', handleClickOutside);
//   }, []);

//   // Derive display name from the selected category id
//   const selectedName =
//     categories.find((c) => c.id === formik.values.category)?.name || '';

//   return (
//     <div className="py-4" ref={wrapperRef}>
//       <h2 className="text-2xl font-bold mb-2">*Category</h2>
//       <hr className="border-gray-300 mb-4" />

//       <div className="relative flex items-center border rounded-md border-purple-500 bg-purple-50 px-2">
//         <InputField
//           className="w-full focus:outline-none py-2 ps-3 hover:cursor-pointer"
//           type="text"
//           name="category"           // still tied to Formik
//           readOnly
//           placeholder="Select Category"
//           value={selectedName}
//           onClick={() => !loading && setDropdownOpen((o) => !o)}
//         />
//         <button
//           type="button"
//           className="ml-2 focus:outline-none"
//           onClick={() => !loading && setDropdownOpen((o) => !o)}
//         >
//           More
//         </button>

//         {dropdownOpen && (
//           <div className="absolute top-full left-0 w-full bg-white border rounded shadow-lg mt-2 z-10 max-h-60 overflow-auto">
//             <ul className="py-2">
//               {loading && (
//                 <li className="px-4 py-2 text-gray-500">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá‚Ä¶</li>
//               )}
//               {error && (
//                 <li className="px-4 py-2 text-red-500">
//                   Error: {error}
//                 </li>
//               )}
//               {!loading && !error && categories.map((cat) => (
//                 <li
//                   key={cat.id}
//                   className="px-4 py-2 hover:bg-gray-200 cursor-pointer"
//                   onClick={() => {
//                     formik.setFieldValue('category', cat.id);
//                     setDropdownOpen(false);
//                   }}
//                 >
//                   {cat.name}
//                 </li>
//               ))}
//             </ul>
//           </div>
//         )}
//       </div>

//       <p className="mt-2 text-sm text-gray-600">
//         Select or tap on more
//       </p>
//     </div>
//   );
// };

// export default Categore;

import React, { useState, useRef, useEffect } from "react";
import useCategories from "../api/data";
import CategoreTitle from "../CategoreTitle";

const Categore = ({ formik }) => {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const { categories, loading, error } = useCategories();
  const wrapperRef = useRef(null);

  // close dropdown if clicked outside
  useEffect(() => {
    const handler = (e) => {
      if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {
        setDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handler);
    return () => document.removeEventListener("mousedown", handler);
  }, []);

  // find the selected category object (loose compare for id types)
  const selectedCat = categories.find((c) => c.id == formik.values.category);

  // display name or placeholder
  const displayName = selectedCat ? selectedCat.name : "Select Category";

  return (
    <div className="py-4" ref={wrapperRef}>
      <h2 className="text-2xl font-bold mb-2">*Category</h2>
      <hr className="border-gray-300 mb-4" />

      <div className="relative flex items-center border rounded-md border-purple-500 px-2">
        <CategoreTitle
          className="w-full focus:ring-0 py-2 ps-3 border-none hover:cursor-pointer"
          type="text"
          name="category"
          readOnly
          placeholder={displayName}
          value={displayName}
          onClick={() => !loading && setDropdownOpen((o) => !o)}
        />
        <button
          type="button"
          className="ml-2 focus:outline-none"
          onClick={() => !loading && setDropdownOpen((o) => !o)}
        >
          ‚ñº
        </button>

        {dropdownOpen && (
          <div className="absolute top-full left-0 w-full bg-white border rounded shadow-lg mt-2 z-10 max-h-60 overflow-auto">
            <ul className="py-2">
              {loading && (
                <li className="px-4 py-2 text-gray-500">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá‚Ä¶</li>
              )}
              {error && (
                <li className="px-4 py-2 text-red-500">Error: {error}</li>
              )}
              {!loading &&
                !error &&
                categories.map((cat) => (
                  <li
                    key={cat.id}
                    className={`px-4 py-2 hover:bg-gray-200 cursor-pointer ${
                      cat.id == formik.values.category
                        ? "bg-gray-100 font-semibold"
                        : ""
                    }`}
                    onClick={() => {
                      formik.setFieldValue("category", cat.id);
                      setDropdownOpen(false);
                    }}
                  >
                    {cat.name}
                  </li>
                ))}
            </ul>
          </div>
        )}
      </div>

      <p className="mt-2 text-sm text-gray-600">
        Tap to {displayName === "Select Category" ? "choose" : "change"}.
      </p>
    </div>
  );
};

export default Categore;


===== src/components/input/Conditon.jsx =====
// import React, { useState, useRef, useEffect } from "react";
// import { MdOutlineArrowDropDown, MdOutlineArrowDropUp } from "react-icons/md";
// import useCategories from "../api/data";
// import { RiArrowDropDownLine } from "react-icons/ri";
// import { IoIosArrowDown } from "react-icons/io";

// const Conditon = ({ formik }) => {
//     const { conditions, loading, error } = useCategories();
//     const [dropdownOpen, setDropdownOpen] = useState(false);
//     const wrapperRef = useRef(null);

//     // Close dropdown when clicking outside the component
//     useEffect(() => {
//         const handleClickOutside = (event) => {
//             if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
//                 setDropdownOpen(false);
//             }
//         };
//         document.addEventListener("mousedown", handleClickOutside);
//         return () => document.removeEventListener("mousedown", handleClickOutside);
//     }, []);

//     const handleSelectCondition = (condition) => {
//         formik.setFieldValue("condition", condition.id);
//         // formik.setFieldValue("condition_name", condition.name);
//         setDropdownOpen(false);
//     };

//     return (
//         <div className="py-4" ref={wrapperRef}>
//             <h2 className="text-2xl font-bold mb-2">*Condition</h2>
//             <p className="mb-2 text-gray-600">
//                 Use keywords people would search for when looking for your item.
//                 Include details such as colour, size, brand, and model.
//             </p>
//             {/* <hr className="border-gray-300 mb-4" /> */}
//             {/* <div className="relative flex items-center border">
//                 <input
//                     id="condition_name"
//                     name="condition_name"
//                     type="text"
//                     placeholder="Select Condition"
//                     value={formik.values.condition_name || ""}
//                     readOnly
//                     onClick={() => setDropdownOpen((prev) => !prev)}
//                     className="w-full border-none py-2 px-3 cursor-pointer"
//                 />
//                 <button
//                     type="button"
//                     onClick={() => setDropdownOpen((prev) => !prev)}
//                     className="ml-2 focus:outline-none"
//                 >
//                     {dropdownOpen ? (
//                         <MdOutlineArrowDropUp size={24} />
//                     ) : (
//                         <MdOutlineArrowDropDown size={24} />
//                     )}
//                 </button>

//                 {dropdownOpen && (
//                     <div className="absolute z-10 w-full bg-white border mt-1 rounded shadow">
//                         {loading ? (
//                             <div className="p-3 text-gray-500">Loading...</div>
//                         ) : error ? (
//                             <div className="p-3 text-red-500">{error}</div>
//                         ) : (
//                             <ul>
//                                 {conditions && conditions.length > 0 ? (
//                                     conditions.map((condition) => (
//                                         <li
//                                             key={condition.id}
//                                             onClick={() => handleSelectCondition(condition)}
//                                             className="px-3 py-2 hover:bg-gray-200 cursor-pointer"
//                                         >
//                                             {condition.name}
//                                         </li>
//                                     ))
//                                 ) : (
//                                     <li className="p-3 text-gray-500">No conditions found</li>
//                                 )}
//                             </ul>
//                         )}
//                     </div>
//                 )}

//             </div> */}

//             <div className="relative flex items-center border rounded-lg border-purple-500 px-2">
//                 <input
//                     id="condition_name"
//                     name="condition_name"
//                     type="text"
//                     placeholder="Select Condition"
//                     value={formik.values.condition_name || ""}
//                     readOnly
//                     onClick={() => setDropdownOpen((prev) => !prev)}
//                     className="w-full border-none focus:ring-0 px-3 cursor-pointer"
//                 />
//                 <button
//                     type="button"
//                     onClick={() => setDropdownOpen((prev) => !prev)}
//                     className="ml-2 focus:outline-none"
//                 >
//                     {dropdownOpen ? (
//                         <IoIosArrowDown className="w-5 h-5" />
//                     ) : (
//                         <IoIosArrowDown className="w-5 h-5" />
//                     )}
//                 </button>

//                 {dropdownOpen && (
//                     <div className="absolute top-full left-0 z-10 w-full bg-white border mt-1 rounded shadow max-h-60 overflow-y-auto">
//                         {loading ? (
//                             <div className="p-3 text-gray-500">Loading...</div>
//                         ) : error ? (
//                             <div className="p-3 text-red-500">{error}</div>
//                         ) : (
//                             <ul>
//                                 {conditions && conditions.length > 0 ? (
//                                     conditions.map((condition) => (
//                                         <li
//                                             key={condition.id}
//                                             onClick={() => handleSelectCondition(condition)}
//                                             className="px-3 py-2 hover:bg-gray-200 cursor-pointer"
//                                         >
//                                             {condition.name}
//                                         </li>
//                                     ))
//                                 ) : (
//                                     <li className="p-3 text-gray-500">No conditions found</li>
//                                 )}
//                             </ul>
//                         )}
//                     </div>
//                 )}
//             </div>

//         </div>
//     );
// };

// export default Conditon;
// Condition.js
import React, { useState, useRef, useEffect } from "react";
import { IoIosArrowDown } from "react-icons/io";
import useCategories from "../api/data";

const Condition = ({ formik }) => {
  const { conditions, loading, error } = useCategories();
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const wrapperRef = useRef(null);

  // Close dropdown on outside click
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {
        setDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // Derive the name to display from the selected id
  const selectedName =
    conditions.find((c) => c.id === formik.values.condition)?.name || "";

  return (
    <div className="py-4" ref={wrapperRef}>
      <h2 className="text-2xl font-bold mb-2">*Condition</h2>
      <p className="mb-2 text-gray-600">
        Use keywords people would search for when looking for your item. Include
        details such as colour, size, brand, and model.
      </p>

      <div className="relative flex items-center border rounded-lg border-purple-500 px-2">
        <input
          id="condition"
          name="condition"
          type="text"
          placeholder="Select Condition"
          value={selectedName}
          readOnly
          onClick={() => !loading && setDropdownOpen((o) => !o)}
          className="w-full border-none focus:ring-0 px-3 py-2 cursor-pointer"
        />
        <button
          type="button"
          onClick={() => !loading && setDropdownOpen((o) => !o)}
          className="ml-2 focus:outline-none"
        >
          <IoIosArrowDown className="w-5 h-5" />
        </button>

        {dropdownOpen && (
          <div className="absolute top-full left-0 w-full bg-white border rounded shadow-lg mt-2 z-10 max-h-60 overflow-y-auto">
            {loading ? (
              <div className="p-3 text-gray-500">loading...</div>
            ) : error ? (
              <div className="p-3 text-red-500">{error}</div>
            ) : (
              <ul>
                {conditions.length > 0 ? (
                  conditions.map((cond) => (
                    <li
                      key={cond.id}
                      className="px-3 py-2 hover:bg-gray-200 cursor-pointer"
                      onClick={() => {
                        formik.setFieldValue("condition", cond.id);
                        setDropdownOpen(false);
                      }}
                    >
                      {cond.name}
                    </li>
                  ))
                ) : (
                  <li className="p-3 text-gray-500">No conditions found</li>
                )}
              </ul>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Condition;


===== src/components/input/DateSelector.jsx =====
// 'use client'
// import React, { useState } from 'react';
// import DatePicker from 'react-datepicker';
// import 'react-datepicker/dist/react-datepicker.css';

// export default function DateSelector() {
//   const [selectedDate, setSelectedDate] = useState(new Date('2024-11-12T11:00:00'));

//   return (
//     <div className="mt-0 rounded-md bg-blue-600 p-1 w-full max-w-sm">
//       <DatePicker
//         selected={selectedDate}
//         onChange={(date) => setSelectedDate(date)}
//         showTimeSelect
//         timeFormat="HH:mm"
//         timeIntervals={30}
//         dateFormat="yyyy-MM-dd'T'HH:mm:ss"
//         className="w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
//         placeholderText="Select date"
//       />
//     </div>
//   );
// }

// src/components/inpute/DateSelector.jsx
"use client";

import React from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

export default function DateSelector({ name, formik, ...props }) {
  // Grab the ISO string from Formik, convert to Date (or null)
  const value = formik.values[name];
  const selectedDate = value ? new Date(value) : null;

  return (
    <DatePicker
      {...props}
      selected={selectedDate}
      onChange={(date) =>
        formik.setFieldValue(name, date ? date.toISOString() : "")
      }
      showTimeSelect
      timeFormat="HH:mm"
      timeIntervals={30}
      dateFormat="yyyy-MM-dd'T'HH:mm:ss"
      className="w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
      placeholderText="Select date"
    />
  );
}


===== src/components/input/DeliverySection.jsx =====
import React from "react";

const DeliverySection = ({ formik }) => {
  return (
    <div className="bg-white shadow rounded-lg mb-6">
      {/* Header */}
      <div className="border-b px-4 py-3">
        <h5 className="text-lg font-semibold">*Delivery</h5>
      </div>

      {/* Body */}
      <div className="p-4 space-y-6">
        {/* Delivery Fees */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="postage_fee_cents"
              className="block text-sm font-medium mb-1"
            >
              Delivery Fee
            </label>
            <input
              type="number"
              min="0"
              placeholder="e.g: 35"
              name="postage_fee_cents"
              id="postage_fee_cents"
              className="w-full border rounded-md px-3 py-2"
              value={formik.values.postage_fee_cents}
              onChange={formik.handleChange}
            />
          </div>

          <div>
            <label
              htmlFor="secondary_postage_fee_cents"
              className="block text-sm font-medium mb-1"
            >
              2nd Delivery Fee
            </label>
            <input
              type="number"
              min="0"
              placeholder="e.g: 20"
              name="secondary_postage_fee_cents"
              id="secondary_postage_fee_cents"
              className="w-full border rounded-md px-3 py-2"
              value={formik.values.secondary_postage_fee_cents}
              onChange={formik.handleChange}
            />
          </div>
        </div>

        {/* Quantity & Dispatch */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="product_quantity"
              className="block text-sm font-medium mb-1"
            >
              *Max Available Quantity
            </label>
            <input
              type="number"
              name="product_quantity"
              id="product_quantity"
              placeholder="e.g: 25"
              className="w-full border rounded-md px-3 py-2"
              value={formik.values.product_quantity}
              onChange={formik.handleChange}
            />
            <p className="text-xs text-gray-500 mt-1">
              (stock will reduce automatically after each sale)
            </p>
          </div>

          <div>
            <label
              htmlFor="dispatch_time_in_days"
              className="block text-sm font-medium mb-1"
            >
              *Days to Dispatch
            </label>
            <input
              type="number"
              name="dispatch_time_in_days"
              id="dispatch_time_in_days"
              placeholder="e.g: 2"
              min="0"
              className="w-full border rounded-md px-3 py-2"
              value={formik.values.dispatch_time_in_days || ""}
              onChange={formik.handleChange}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default DeliverySection;


===== src/components/input/Description.jsx =====
import { Editor } from "@tinymce/tinymce-react";
import React, { useRef, useEffect } from "react";

const Description = ({ formik }) => {
  const editorRef = useRef(null);

  return (
    <div>
      <h2 className="text-2xl font-bold mb-2">*Item description</h2>
      <p className="text-gray-600 mb-4">
        Usually in bullet points{" "}
        <span className="text-red-500">
          Phone numbers or external links are not allowed in the description
        </span>
      </p>
      <hr className="border-gray-300 mb-4" />

      <Editor
        name="description"
        apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
        value={formik.values.description || ""} // Initial value ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        onEditorChange={(content) => {
          // console.log(content)
          formik.setFieldValue("description", content); // Update formik field
        }}
        init={{
          height: 350,
          menubar: false,
          plugins: [
            "advlist",
            "autolink",
            "lists",
            "link",
            "charmap",
            "preview",
            "anchor",
            "searchreplace",
            "visualblocks",
            "code",
            "fullscreen",
            "insertdatetime",
            "media",
            "table",
            "help",
            "wordcount",
          ],
          toolbar:
            "undo redo | blocks | bold italic forecolor | alignleft aligncenter " +
            "alignright alignjustify | bullist numlist outdent indent | " +
            "removeformat | help",
          content_style:
            "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
        }}
      />

      <p>Add accurate and concise details of your product</p>
    </div>
  );
};

export default Description;


===== src/components/input/PhoneInput.jsx =====
// src/components/input/phoneInput.jsx
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { parsePhoneNumberFromString, getCountryCallingCode } from 'libphonenumber-js/min';

const toIso2 = (v) => (!v ? '' : String(v).trim().toUpperCase());

export default function PhoneInput({
  countries = [],
  selectedCountry = 'GH',
  value = '',
  onChange,
  onCountryChange,
  onBlur,
  onFocus,                  // forwarded
  invalid = false,
  className = '',
}) {
  const [open, setOpen] = useState(false);
  const wrapRef = useRef(null);
  const [country, setCountry] = useState(toIso2(selectedCountry));
  const [localDigits, setLocalDigits] = useState('');

  // keep internal ISO in sync with prop
  useEffect(() => { setCountry(toIso2(selectedCountry)); }, [selectedCountry]);

  // close on outside click
  useEffect(() => {
    const fn = (e) => { if (wrapRef.current && !wrapRef.current.contains(e.target)) setOpen(false); };
    document.addEventListener('mousedown', fn);
    return () => document.removeEventListener('mousedown', fn);
  }, []);

  const countryEntry = useMemo(
    () => countries.find((c) => toIso2(c.code) === country) || countries[0] || { code:'GH', name:'Ghana', flag_emoji:'üá¨üá≠' },
    [countries, country]
  );

  const dial = useMemo(() => {
    const iso = toIso2(countryEntry?.code) || 'GH';
    try { return `+${getCountryCallingCode(iso)}`; } catch { return '+'; }
  }, [countryEntry]);

  const flag = countryEntry?.flag_emoji || 'üìû';

  // hydrate from value (E.164 or local digits)
  useEffect(() => {
    const v = String(value || '').trim();
    if (!v) { setLocalDigits(''); return; }
    if (v.startsWith('+')) {
      try {
        const pn = parsePhoneNumberFromString(v);
        if (pn) {
          setCountry(toIso2(pn.country || country));
          setLocalDigits(pn.nationalNumber || '');
          return;
        }
      } catch {}
    }
    setLocalDigits(v.replace(/\D/g, ''));
  }, [value]); // eslint-disable-line

  const handleLocalChange = (e) => {
    const digits = e.target.value.replace(/\D/g, '');
    setLocalDigits(digits);
    onChange?.(digits);
  };

  const chooseCountry = (iso) => {
    const next = toIso2(iso);
    setCountry(next);
    onCountryChange?.(next);
    onChange?.(localDigits); // re-validate under new region
    setOpen(false);
  };

  return (
    <div ref={wrapRef} className={`flex w-full gap-2 ${className}`}>
      {/* prefix */}
      <div className="relative shrink-0">
        <button
          type="button"
          onClick={() => setOpen((v) => !v)}
          className="w-28 sm:w-36 px-3 py-2 rounded border border-gray-300 dark:border-gray-700
                     bg-gray-100 dark:bg-gray-800 text-sm flex items-center justify-between"
        >
          <span className="flex items-center gap-2">
            <span className="text-base leading-none">{flag}</span>
            <span className="font-medium">{dial}</span>
          </span>
          <svg className="h-4 w-4 opacity-70" viewBox="0 0 20 20" fill="currentColor">
            <path d="M5.25 7.5L10 12.25L14.75 7.5H5.25Z" />
          </svg>
        </button>

        {open && (
          <div className="absolute z-50 mt-1 w-[18rem] max-h-64 overflow-auto rounded
                          border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-lg">
            <ul className="py-1">
              {countries.map((c) => {
                const iso = toIso2(c.code);
                let dc = '';
                try { dc = `+${getCountryCallingCode(iso)}`; } catch {}
                return (
                  <li key={iso}>
                    <button
                      type="button"
                      onClick={() => chooseCountry(iso)}
                      className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-800
                                 flex items-center gap-2"
                    >
                      <span className="text-base leading-none">{c.flag_emoji || 'üè≥Ô∏è'}</span>
                      <span className="flex-1 truncate">{c.name}</span>
                      <span className="text-sm opacity-70">{dc}</span>
                    </button>
                  </li>
                );
              })}
            </ul>
          </div>
        )}
      </div>

      {/* input */}
      <div className="flex-1 min-w-0">
        <input
          type="tel"
          name="phone"
          autoComplete="tel"
          inputMode="tel"
          placeholder="Phone Number"
          className={`w-full p-2 rounded border ${invalid ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-gray-900`}
          aria-invalid={invalid || undefined}
          aria-describedby="phone-help"
          value={localDigits}
          onChange={handleLocalChange}
          onBlur={onBlur}
          onFocus={onFocus}       // ‚Üê forwarded so parent can clear 'touched'
        />
      </div>
    </div>
  );
}

===== src/components/input/Photo.jsx =====
import React, { useState, useEffect, useRef } from "react";
import ImageUploading from "react-images-uploading";
import { IoMdPhotos } from "react-icons/io";

const PhotoUploader = ({ initialImages = [], onImagesSelect }) => {
  const MAX_IMAGES = 12;

  // State holds objects like { data_url: string }
  const [images, setImages] = useState(
    initialImages.map((url) => ({ data_url: url })),
  );

  // Refs for HTML5 drag-and-drop
  const dragItem = useRef(null);
  const dragOverItem = useRef(null);

  // Sync if initialImages change
  useEffect(() => {
    if (initialImages.length) {
      setImages(initialImages.map((url) => ({ data_url: url })));
    }
  }, [initialImages]);

  // Called when images are added/removed
  const handleChange = (imageList) => {
    setImages(imageList);
    onImagesSelect?.(imageList);
  };

  // Reorder images on drag end
  const handleDragEnd = () => {
    if (dragItem.current == null || dragOverItem.current == null) return;
    const list = Array.from(images);
    const [moved] = list.splice(dragItem.current, 1);
    list.splice(dragOverItem.current, 0, moved);
    dragItem.current = dragOverItem.current = null;
    setImages(list);
    onImagesSelect?.(list);
  };

  return (
    <div className="max-w-5xl mx-auto py-4">
      {/* Title + Subtitle */}
      <h2 className="text-2xl font-semibold mb-1">*Upload Your Images</h2>
      <p className="text-sm text-gray-600 mb-4">
        Please ensure your photos do not include phone numbers.
      </p>
      <div className="border-b mb-2"></div>

      {/* Counter */}
      <p className="text-sm text-gray-500 mb-2">
        {images.length}/{MAX_IMAGES} images uploaded
      </p>

      <ImageUploading
        multiple
        value={images}
        onChange={handleChange}
        maxNumber={MAX_IMAGES}
        dataURLKey="data_url"
        className="px-1"
      >
        {({
          imageList,
          onImageUpload,
          onImageRemove,
          isDragging,
          dragProps,
        }) => {
          // Small-grid calculations
          const smallSlots = MAX_IMAGES - 1;
          const uploadedSmall = Math.max(imageList.length - 1, 0);
          const showSmallUpload =
            imageList.length >= 1 && imageList.length < MAX_IMAGES;
          const placeholders =
            smallSlots - uploadedSmall - (showSmallUpload ? 1 : 0);

          // Shared Tailwind classes
          const largeDropzoneCls = `
            border-2 border-dashed border-gray-300
            rounded-lg flex flex-col items-center justify-center
            text-center p-6 cursor-pointer
            w-full h-[315px]
          `;
          const smallDropzoneCls = `
            border-2 border-dashed border-gray-300
            rounded-lg flex flex-col items-center justify-center
            text-center p-4 cursor-pointer
            w-full h-[100px]
          `;

          return (
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              {/* ‚îÄ‚îÄ‚îÄ Main / Large Slot (index 0) ‚îÄ‚îÄ‚îÄ */}
              <div className="md:col-span-2">
                {imageList.length === 0 ? (
                  <div
                    className={`${
                      largeDropzoneCls
                    } ${isDragging ? "bg-gray-100" : ""}`}
                    onClick={onImageUpload}
                    {...dragProps}
                  >
                    <IoMdPhotos className="w-8 h-8 text-gray-500 mb-2" />
                    <p className="font-medium text-sm">Drag &amp; Drop</p>
                    <span className="mt-2 px-4 py-1 border rounded-full text-sm text-gray-700">
                      Upload
                    </span>
                  </div>
                ) : (
                  <div
                    draggable
                    onDragStart={() => (dragItem.current = 0)}
                    onDragEnter={() => (dragOverItem.current = 0)}
                    onDragOver={(e) => e.preventDefault()}
                    onDragEnd={handleDragEnd}
                    className="relative rounded-lg overflow-hidden bg-gray-100 w-full h-[315px] shadow-sm"
                  >
                    <img
                      src={imageList[0].data_url}
                      alt="Main upload"
                      className="object-contain w-full h-full"
                    />
                    <button
                      type="button"
                      className="absolute top-2 right-2 bg-white px-2 rounded-full shadow"
                      onClick={() => onImageRemove(0)}
                    >
                      ‚úï
                    </button>
                    <div className="absolute bottom-5 left-1/2 transform -translate-x-1/2">
                      <span className="bg-black bg-opacity-30 text-white text-xs px-2 py-1 rounded-full">
                        Main Image
                      </span>
                    </div>
                  </div>
                )}
              </div>

              {/* ‚îÄ‚îÄ‚îÄ Small‚ÄêGrid (indexes 1‚Ä¶11) ‚îÄ‚îÄ‚îÄ */}
              <div className="md:col-span-3 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2">
                {/* Existing thumbnails */}
                {imageList.slice(1).map((img, idx) => {
                  const index = idx + 1;
                  return (
                    <div
                      key={index}
                      draggable
                      onDragStart={() => (dragItem.current = index)}
                      onDragEnter={() => (dragOverItem.current = index)}
                      onDragOver={(e) => e.preventDefault()}
                      onDragEnd={handleDragEnd}
                      className="relative rounded-lg overflow-hidden bg-white w-full h-[100px] shadow-sm"
                    >
                      <img
                        src={img.data_url}
                        alt={`Thumbnail ${index}`}
                        className="object-cover w-full h-full"
                      />
                      <button
                        type="button"
                        className="absolute top-2 right-2 bg-white px-2 rounded-full shadow"
                        onClick={() => onImageRemove(index)}
                      >
                        ‚úï
                      </button>
                    </div>
                  );
                })}

                {/* Upload placeholder moves here */}
                {showSmallUpload && (
                  <div
                    className={`${
                      smallDropzoneCls
                    } ${isDragging ? "bg-gray-100" : ""}`}
                    onClick={onImageUpload}
                    {...dragProps}
                  >
                    <IoMdPhotos className="w-6 h-6 text-gray-500 mb-1" />
                    <span className="font-medium text-sm">Add Photo</span>
                  </div>
                )}

                {/* Empty placeholders */}
                {Array.from({ length: placeholders }).map((_, i) => (
                  <div
                    key={`ph-${i}`}
                    className="bg-gray-100 rounded-lg w-full h-[100px]"
                  />
                ))}
              </div>
            </div>
          );
        }}
      </ImageUploading>
    </div>
  );
};

export default PhotoUploader;


===== src/components/input/PriceSection.jsx =====
import React from "react";

const currencies = ["GHS", "USD", "EUR", "EUR", "GBP", "BDT", "NGN", "PKR"];

const PriceSection = ({ formik }) => {
  return (
    <div id="price" className="bg-white shadow rounded-lg mb-6">
      {/* Header */}
      <div className="border-b px-4 py-3">
        <h5 className="text-lg font-semibold">*Pricing</h5>
      </div>

      {/* Body */}
      <div className="p-4 space-y-6">
        {/* Row 1: Currency & Price */}
        <div className="grid grid-cols-2 gap-6">
          {/* Currency */}
          <div className="border-b">
            <label className="block text-sm font-semibold mb-1 pb-2">
              *Currency
            </label>
            <select
              name="price_currency"
              value={formik.values.price_currency}
              onChange={formik.handleChange}
              className="w-full  bg-white  underline cursor-pointer py-2 focus:outline-none rounded-md focus:ring focus:ring-blue-200"
            >
              {currencies.map((curr, idx) => (
                <option key={`${curr}-${idx}`} value={curr}>
                  {curr}
                </option>
              ))}
            </select>
          </div>

          {/* Item Price */}
          <div className="border-b relative">
            <label className="block text-sm font-semibold mb-1 pb-2">
              *Item Price(cent)
            </label>
            <input
              type="text"
              name="price_cents"
              placeholder="Price"
              required
              className="w-full border-none py-2 px-3 mt-1 text-base placeholder-gray-400 focus:outline-none focus:ring-0"
              value={formik.values.price_cents}
              onChange={formik.handleChange}
            />
          </div>
        </div>

        {/* Row 2: Unit Value & Unit of Measure */}
        <div className="grid grid-cols-2 gap-6">
          {/* Unit Value */}
          <div>
            <label className="block text-sm font-medium mb-1">Unit Value</label>
            <input
              type="number"
              name="unit_value"
              step="1"
              placeholder="Enter a value"
              className="w-full py-2 px-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-200"
              value={formik.values.unit_value || ""}
              onChange={formik.handleChange}
            />
          </div>

          {/* Unit of Measure */}
          <div>
            <label className="block text-sm font-medium mb-1">
              Unit of Measure
            </label>
            <select
              name="unit_measure"
              className="w-full py-2 px-3 border rounded-md focus:outline-none focus:ring focus:ring-violet-700"
              value={formik.values.unit_measure || "each"}
              onChange={formik.handleChange}
            >
              {[
                "each",
                "cbm",
                "cm",
                "ct",
                "ft",
                "g",
                "gal",
                "inch",
                "kg",
                "km",
                "m",
                "pcs",
                "oz",
                "pack",
                "set",
                "sqft",
                "sqm",
                "yard",
              ].map((unit) => (
                <option key={unit} value={unit}>
                  {unit}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceSection;


===== src/components/input/Promotions.jsx =====
// 'use client';

// import React, { useState, useEffect } from 'react';
// import { FaChevronDown, FaChevronUp } from 'react-icons/fa';
// import DateSelector from './DateSelector';

// export default function Promotions({ formik }) {
//     // collapse state mirrors the formik ‚Äúyes‚Äù/‚Äúno‚Äù flags:
//     const [salesOpen, setSalesOpen] = useState(formik.values.on_sales === 'yes');
//     const [multiBuyOpen, setMultiBuyOpen] = useState(
//         formik.values.multi_buy === 'yes'
//     );

//     // keep collapse panels in sync if parent formik.initialValues come in ‚Äúyes‚Äù
//     useEffect(() => {
//         setSalesOpen(formik.values.on_sales === 'yes');
//     }, [formik.values.on_sales]);

//     useEffect(() => {
//         setMultiBuyOpen(formik.values.multi_buy === 'yes');
//     }, [formik.values.multi_buy]);

//     const handleAddTier = () =>
//         formik.setFieldValue('multi_buy_tiers', [
//             ...formik.values.multi_buy_tiers,
//             { min_quantity: '', price_each: '' },
//         ]);

//     const handleRemoveTier = idx => {
//         const updated = [...formik.values.multi_buy_tiers];
//         updated.splice(idx, 1);
//         formik.setFieldValue('multi_buy_tiers', updated);
//     };

//     return (
//         <div className="bg-white shadow-md rounded-md mb-4">
//             <div className="border-b p-4">
//                 <h5 className="text-lg font-semibold mb-0">
//                     Promotions (On Sale & Multi‚ÄëBuy)
//                 </h5>
//             </div>

//             <div className="p-4 space-y-4">
//                 {/* ===== Sales Section ===== */}
//                 <div className="border rounded-md">
//                     <div className="flex items-center justify-between px-4 py-2">
//                         <label className="flex items-center cursor-pointer">
//                             <input
//                                 type="checkbox"
//                                 name="on_sales"
//                                 checked={formik.values.on_sales === 'yes'}
//                                 onChange={e => {
//                                     const yes = e.target.checked ? 'yes' : 'no';
//                                     formik.setFieldValue('on_sales', yes);
//                                 }}
//                                 className="form-checkbox w-5 h-5 text-violet-700 mr-2 rounded"
//                             />
//                             <span className="text-lg font-semibold">Sales</span>
//                         </label>
//                         <button
//                             type="button"
//                             disabled={formik.values.on_sales !== 'yes'}
//                             onClick={() =>
//                                 formik.values.on_sales === 'yes' && setSalesOpen(!salesOpen)
//                             }
//                             className={`flex items-center ${formik.values.on_sales === 'yes'
//                                     ? ''
//                                     : 'opacity-50 cursor-not-allowed'
//                                 }`}
//                         >
//                             {salesOpen ? <FaChevronUp /> : <FaChevronDown />}
//                         </button>
//                     </div>

//                     {formik.values.on_sales === 'yes' && salesOpen && (
//                         <div className="p-4 text-sm text-gray-700">
//                             <p className="text-center mb-3">
//                                 Reduce the item price for a period of time.
//                             </p>
//                             <hr className="my-2" />

//                             <div className="mb-4">
//                                 <label className="block mb-1 font-medium">
//                                     Sales Price{' '}
//                                     <span className="text-red-600 text-xs">
//                                         (numbers only &amp; must be less than the item price above)
//                                     </span>
//                                 </label>
//                                 <input
//                                     type="text"
//                                     name="sale_price_cents"
//                                     value={formik.values.sale_price_cents}
//                                     onChange={formik.handleChange}
//                                     placeholder="Enter value"
//                                     className="w-full border px-3 py-2 rounded-md"
//                                 />
//                             </div>

//                             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//                                 <div>
//                                     <label className="block mb-1 font-medium">
//                                         Sales start date
//                                     </label>
//                                     <DateSelector name="sale_start_date" formik={formik} />
//                                 </div>
//                                 <div>
//                                     <label className="block mb-1 font-medium">
//                                         Sales end date
//                                     </label>
//                                     <DateSelector name="sale_end_date" formik={formik} />
//                                 </div>
//                             </div>
//                         </div>
//                     )}
//                 </div>

//                 <hr className="border-t-2 border-gray-300" />

//                 {/* ===== Multi‚ÄëBuy Section ===== */}
//                 <div className="border rounded-md">
//                     <div className="flex items-center justify-between px-4 py-2">
//                         <label className="flex items-center cursor-pointer">
//                             <input
//                                 type="checkbox"
//                                 name="multi_buy"
//                                 checked={formik.values.multi_buy === 'yes'}
//                                 onChange={e => {
//                                     const yes = e.target.checked ? 'yes' : 'no';
//                                     formik.setFieldValue('multi_buy', yes);
//                                 }}
//                                 className="form-checkbox w-5 h-5 text-violet-700 mr-2 rounded"
//                             />
//                             <span className="text-lg font-semibold">Multi‚ÄëBuy</span>
//                         </label>
//                         <button
//                             type="button"
//                             disabled={formik.values.multi_buy !== 'yes'}
//                             onClick={() =>
//                                 formik.values.multi_buy === 'yes' &&
//                                 setMultiBuyOpen(!multiBuyOpen)
//                             }
//                             className={`flex items-center ${formik.values.multi_buy === 'yes'
//                                     ? ''
//                                     : 'opacity-50 cursor-not-allowed'
//                                 }`}
//                         >
//                             {multiBuyOpen ? <FaChevronUp /> : <FaChevronDown />}
//                         </button>
//                     </div>

//                     {formik.values.multi_buy === 'yes' && multiBuyOpen && (
//                         <div className="p-4 text-sm text-gray-700">
//                             <p className="text-center mb-3">
//                                 Offer a discount when buyers purchase more than one item.
//                             </p>
//                             <hr className="my-2" />

//                             {formik?.values?.multi_buy_tiers?.map((tier, idx) => (
//                                 <div
//                                     key={idx}
//                                     className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 items-end"
//                                 >
//                                     <div>
//                                         <label className="block mb-1 font-medium">
//                                             Min Quantity
//                                         </label>
//                                         <input
//                                             type="number"
//                                             name={`multi_buy_tiers[${idx}].min_quantity`}
//                                             min="1"
//                                             placeholder="e.g. 2"
//                                             value={tier.min_quantity}
//                                             onChange={formik.handleChange}
//                                             className="w-full border px-3 py-2 rounded-md"
//                                         />
//                                     </div>

//                                     <div>
//                                         <label className="block mb-1 font-medium">
//                                             Price Each{' '}
//                                             <span className="text-red-600 text-xs">
//                                                 (must be less than standard price)
//                                             </span>
//                                         </label>
//                                         <input
//                                             type="text"
//                                             name={`multi_buy_tiers[${idx}].price_each`}
//                                             placeholder="e.g. 9.99"
//                                             value={tier.price_each}
//                                             onChange={formik.handleChange}
//                                             className="w-full border px-3 py-2 rounded-md"
//                                         />
//                                     </div>

//                                     <div className="flex space-x-2">
//                                         <button
//                                             type="button"
//                                             onClick={() => handleRemoveTier(idx)}
//                                             className="px-3 py-2 border rounded-md hover:bg-gray-100"
//                                         >
//                                             Remove
//                                         </button>
//                                         <button
//                                             type="button"
//                                             onClick={handleAddTier}
//                                             className="px-3 py-2 border rounded-md hover:bg-gray-100"
//                                         >
//                                             Add Tier
//                                         </button>
//                                     </div>
//                                 </div>
//                             ))}

//                             {formik.values.multi_buy_tiers.length === 0 && (
//                                 <button
//                                     type="button"
//                                     onClick={handleAddTier}
//                                     className="px-4 py-2 bg-violet-700 text-white rounded-md"
//                                 >
//                                     Add First Tier
//                                 </button>
//                             )}
//                         </div>
//                     )}

//                 </div>
//             </div>
//         </div>
//     );
// }

"use client";

import React, { useState, useEffect } from "react";
import { FaChevronDown, FaChevronUp } from "react-icons/fa";
import DateSelector from "./DateSelector";

export default function Promotions({ formik }) {
  // collapse state mirrors the formik ‚Äúyes‚Äù/‚Äúno‚Äù flags:
  const [salesOpen, setSalesOpen] = useState(formik.values.on_sales === "yes");
  const [multiBuyOpen, setMultiBuyOpen] = useState(
    formik.values.multi_buy === "yes",
  );

  // keep collapse panels in sync if parent formik.initialValues come in ‚Äúyes‚Äù
  useEffect(() => {
    setSalesOpen(formik.values.on_sales === "yes");
  }, [formik.values.on_sales]);

  useEffect(() => {
    setMultiBuyOpen(formik.values.multi_buy === "yes");
  }, [formik.values.multi_buy]);

  // handlers to add/remove tiers:
  const handleAddTier = () =>
    formik.setFieldValue("multi_buy_tiers", [
      ...(Array.isArray(formik.values.multi_buy_tiers)
        ? formik.values.multi_buy_tiers
        : []),
      { min_quantity: "", price_each: "" },
    ]);

  const handleRemoveTier = (idx) => {
    const existing = Array.isArray(formik.values.multi_buy_tiers)
      ? [...formik.values.multi_buy_tiers]
      : [];
    existing.splice(idx, 1);
    formik.setFieldValue("multi_buy_tiers", existing);
  };

  return (
    <div className="bg-white shadow-md rounded-md mb-4">
      <div className="border-b p-4">
        <h5 className="text-lg font-semibold mb-0">
          Promotions (On Sale & Multi-Buy)
        </h5>
      </div>

      <div className="p-4 space-y-4">
        {/* ===== Sales Section ===== */}
        <div className="border rounded-md">
          <div className="flex items-center justify-between px-4 py-2">
            <label className="flex items-center cursor-pointer">
              <input
                type="checkbox"
                name="on_sales"
                checked={formik.values.on_sales === "yes"}
                onChange={(e) => {
                  const yes = e.target.checked ? "yes" : "no";
                  formik.setFieldValue("on_sales", yes);
                }}
                className="form-checkbox w-5 h-5 text-violet-700 mr-2 rounded"
              />
              <span className="text-lg font-semibold">Sales</span>
            </label>
            <button
              type="button"
              disabled={formik.values.on_sales !== "yes"}
              onClick={() =>
                formik.values.on_sales === "yes" && setSalesOpen(!salesOpen)
              }
              className={`flex items-center ${
                formik.values.on_sales === "yes"
                  ? ""
                  : "opacity-50 cursor-not-allowed"
              }`}
            >
              {salesOpen ? <FaChevronUp /> : <FaChevronDown />}
            </button>
          </div>

          {formik.values.on_sales === "yes" && salesOpen && (
            <div className="p-4 text-sm text-gray-700">
              <p className="text-center mb-3">
                Reduce the item price for a period of time.
              </p>
              <hr className="my-2" />

              <div className="mb-4">
                <label className="block mb-1 font-medium">
                  Sales Price{" "}
                  <span className="text-red-600 text-xs">
                    (numbers only &amp; must be less than the item price above)
                  </span>
                </label>
                <input
                  type="text"
                  name="sale_price_cents"
                  value={formik.values.sale_price_cents}
                  onChange={formik.handleChange}
                  placeholder="Enter value"
                  className="w-full border px-3 py-2 rounded-md"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block mb-1 font-medium">
                    Sales start date
                  </label>
                  <DateSelector name="sale_start_date" formik={formik} />
                </div>
                <div>
                  <label className="block mb-1 font-medium">
                    Sales end date
                  </label>
                  <DateSelector name="sale_end_date" formik={formik} />
                </div>
              </div>
            </div>
          )}
        </div>

        <hr className="border-t-2 border-gray-300" />

        {/* ===== Multi-Buy Section ===== */}
        <div className="border rounded-md">
          <div className="flex items-center justify-between px-4 py-2">
            <label className="flex items-center cursor-pointer">
              <input
                type="checkbox"
                name="multi_buy"
                checked={formik.values.multi_buy === "yes"}
                onChange={(e) => {
                  const yes = e.target.checked ? "yes" : "no";
                  formik.setFieldValue("multi_buy", yes);
                }}
                className="form-checkbox w-5 h-5 text-violet-700 mr-2 rounded"
              />
              <span className="text-lg font-semibold">Multi-Buy</span>
            </label>
            <button
              type="button"
              disabled={formik.values.multi_buy !== "yes"}
              onClick={() =>
                formik.values.multi_buy === "yes" &&
                setMultiBuyOpen(!multiBuyOpen)
              }
              className={`flex items-center ${
                formik.values.multi_buy === "yes"
                  ? ""
                  : "opacity-50 cursor-not-allowed"
              }`}
            >
              {multiBuyOpen ? <FaChevronUp /> : <FaChevronDown />}
            </button>
          </div>

          {formik.values.multi_buy === "yes" && multiBuyOpen && (
            <div className="p-4 text-sm text-gray-700">
              <p className="text-center mb-3">
                Offer a discount when buyers purchase more than one item.
              </p>
              <hr className="my-2" />

              {Array.isArray(formik.values.multi_buy_tiers)
                ? formik.values.multi_buy_tiers.map((tier, idx) => (
                    <div
                      key={idx}
                      className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 items-end"
// ‚Ä¶truncated‚Ä¶

===== src/components/input/SellersPaymentTerms.jsx =====
import { Editor } from "@tinymce/tinymce-react";
import React, { useRef } from "react";

const SellersPaymentTerms = ({ formik }) => {
  const editorRef = useRef(null);

  return (
    <div>
      <h2 className="text-2xl font-bold mb-2">*Seller‚Äôs Payment Terms</h2>
      <p className="text-gray-600 mb-4">
        Outline your payment terms (e.g. ‚Äú50% upfront, 50% on delivery‚Äù).
      </p>
      <hr className="border-gray-300 mb-4" />

      <Editor
        name="seller_payment_terms"
        apiKey="cly2l2971z9pgqhfjufgnqbl1h4nomfzmiqbjositk620gut"
        value={formik.values.seller_payment_terms || ""}
        onEditorChange={(content) =>
          formik.setFieldValue("seller_payment_terms", content)
        }
        init={{
          height: 300,
          menubar: false,
          plugins: [
            "advlist",
            "autolink",
            "lists",
            "link",
            "charmap",
            "preview",
            "anchor",
            "searchreplace",
            "visualblocks",
            "code",
            "fullscreen",
            "insertdatetime",
            "media",
            "table",
            "help",
            "wordcount",
          ],
          toolbar:
            "undo redo | blocks | bold italic forecolor | alignleft aligncenter " +
            "alignright alignjustify | bullist numlist outdent indent | " +
            "removeformat | help",
          content_style:
            "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
        }}
      />

      <p className="mt-2 text-sm text-gray-500">
        Be as clear as possible‚Äîthis will show up on your listing page.
      </p>
    </div>
  );
};

export default SellersPaymentTerms;


===== src/components/input/SubmitButton.jsx =====
import React from "react";

const SubmitButton = () => {
  return (
    <div className="flex justify-between text-xl font-bold p-4">
      <button
        type="submit"
        className="bg-purple-500 text-white px-4 py-2 rounded-md"
      >
        Save and continue
      </button>
      <button>Cancel</button>
    </div>
  );
};

export default SubmitButton;


===== src/components/input/Title.jsx =====
import React from "react";
import InputField from "../InputField";

const Title = ({ formik }) => {
  return (
    <div>
      <h2 className="text-2xl font-bold mb-2">Your Title Here</h2>

      {/* <p className="text-gray-600 mb-4">
                This is your paragraph text here.
            </p>

            <hr className="border-gray-300 mb-4" /> */}

      <InputField
        id="title"
        name="title"
        type="text"
        value={formik?.values?.title}
        onChange={formik?.handleChange}
        placeholder="Type something here..."
        className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
      />
      <p className="text-gray-500 mt-2">{formik?.values?.title?.length} / 80</p>
    </div>
  );
};

export default Title;


===== src/components/men fashion/MenFashion.jsx =====
// components/MenFashion.jsx
import React from "react";
import dynamic from "next/dynamic";
import Link from "next/link";
import Image from "next/image";
import { FaShoppingCart } from "react-icons/fa";

// only the price widget runs on the client
const Price = dynamic(() => import("../Price"), { ssr: false });

export default async function MenFashion({ title }) {
  const res = await fetch(
    //'https://media.upfrica.com/api/product-list/men/',
    "http://127.0.0.1:8000/api/product-list/men/",
    { next: { revalidate: 120 } },
  );

  if (!res.ok) {
    throw new Error(`Failed to fetch products: ${res.status}`);
  }

  const { results: products } = await res.json();

  return (
    <div className="container mx-auto bg-white shadow-md py-10 mb-2 p-5 rounded-lg">
      {/* Header */}
      <div className="text-xl md:text-3xl font-extrabold tracking-wide pb-4">
        <h1>{title}</h1>
      </div>

      {/* Horizontal Scroll Container */}
      <div className="overflow-x-auto pb-4">
        <div className="flex space-x-4">
          {products.map((product) => {
            const {
              id,
              title: prodTitle,
              product_images,
              seller_country,
              seo_slug,
              slug,
              price_cents,
              sale_price_cents,
              price_currency,
              sale_end_date,
              on_sales,
            } = product;

            const countryCode = (seller_country || "gh").toLowerCase();
            const pathSlug = seo_slug || slug;

            return (
              <div
                key={id}
                className="border shadow-lg rounded-lg overflow-hidden flex flex-col min-w-[200px] h-[220px]"
              >
                {/* Product Image */}
                <div className="flex-grow overflow-hidden">
                  <Link href={`/${countryCode}/${pathSlug}/`}>
                    <Image
                      src={product_images?.[0] || "/placeholder.png"}
                      alt={prodTitle}
                      width={300}
                      height={300}
                      className="w-full h-full object-cover transform transition-all duration-1000 ease-in-out hover:scale-110 hover:-translate-y-2"
                    />
                  </Link>
                </div>

                {/* Price + Cart (client) */}
                <div className="flex items-center justify-between px-2 py-1 bg-gray-100">
                  <Price
                    priceCents={price_cents}
                    salePriceCents={sale_price_cents}
                    priceCurrency={price_currency}
                    saleEndDate={sale_end_date}
                    onSales={on_sales}
                  />
                  <button className="p-1 border-2 border-black rounded">
                    <FaShoppingCart className="text-purple-500" size={20} />
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}


===== src/components/menuItems.js =====
import {
  FaTachometerAlt,
  FaPlus,
  FaEnvelope,
  FaClipboardList,
  FaBoxOpen,
  FaTag,
  FaChartBar,
  FaWallet,
  FaStore,
  FaShippingFast,
  FaFileAlt,
  FaStar,
  FaQuestionCircle,
  FaBalanceScale,
  FaInbox,
  FaBullhorn,
  FaLifeRing,
  FaTicketAlt,
  FaComments,
  FaUserCircle,
  FaSignOutAlt,
  FaCogs,
  FaChartLine,
  FaMoneyBillWave,
} from "react-icons/fa";

export const menuItems = [
  // Direct click menus
  {
    label: "Dashboard",
    route: "/dashboard",
    icon: FaTachometerAlt,
  },
  {
    label: "Analytics",
    route: "/analytics",
    icon: FaChartLine,
  },
  {
    label: "Plan & Add-ons",
    route: "/plan",
    icon: FaTag,
  },
  {
    label: "Payouts & Finances",
    route: "/finance",
    icon: FaWallet,
  },

  // Collapsible sections for Sellers
  {
    label: "Products",
    route: "/products",
    icon: FaBoxOpen,
    role: "seller",
    children: [
      { label: "View All Products", route: "/products" },
      { label: "Add Product", route: "/products/add" },
      { label: "Product Reviews", route: "/products/reviews" },
      { label: "Drafts / Archived", route: "/products/drafts" },
    ],
  },
  {
    label: "Orders",
    route: "/orders",
    icon: FaClipboardList,
    role: "seller",
    children: [
      { label: "All Orders", route: "/orders/all" },
      { label: "Unfulfilled", route: "/orders/unfulfilled" },
      { label: "Returns & Cancellations", route: "/orders/returns" },
      { label: "Order Settings", route: "/orders/settings" },
    ],
  },
  {
    label: "Marketing Tools",
    route: "/marketing",
    icon: FaBullhorn,
    role: "seller",
    children: [
      { label: "Discounts", route: "/marketing/discounts" },
      { label: "Promotions", route: "/marketing/promotions" },
      { label: "Email Campaigns", route: "/marketing/email" },
      { label: "SEO Booster", route: "/marketing/seo" },
      { label: "Ad Boosts", route: "/marketing/boosts" },
    ],
  },
  {
    label: "Store Settings",
    route: "/settings",
    icon: FaCogs,
    role: "seller",
    children: [
      { label: "Store Details", route: "/settings/details" },
      { label: "Shipping Methods", route: "/settings/shipping" },
      { label: "Payment Settings", route: "/settings/payments" },
      { label: "Tax Settings", route: "/settings/taxes" },
      { label: "Store Policies", route: "/settings/policies" },
    ],
  },

  // Messages shared by all roles
  {
    label: "Messages",
    route: "/messages",
    icon: FaEnvelope,
    children: [
      { label: "Inbox", route: "/messages/inbox" },
      { label: "Buyer Questions", route: "/messages/questions" },
      { label: "System Alerts", route: "/messages/alerts" },
    ],
  },

  // Buyer role-specific entries (if needed)
  {
    label: "My Orders",
    route: "/my-orders",
    icon: FaClipboardList,
    role: "buyer",
    children: [
      { label: "All Purchases", route: "/my-orders" },
      { label: "Processing", route: "/my-orders/processing" },
      { label: "Unpaid", route: "/my-orders/unpaid" },
      { label: "Returns & Cancelled", route: "/my-orders/returns" },
    ],
  },

  // Sourcing Agent role-specific entries
  {
    label: "Sourcing Tasks",
    route: "/sourcing",
    icon: FaShippingFast,
    role: "agent",
    children: [
      { label: "Assigned Requests", route: "/sourcing/tasks" },
      { label: "Sourced Products", route: "/sourcing/products" },
    ],
  },

  // All Settings
  {
    label: "Settings",
    route: "/settings",
    icon: FaCogs,
    children: [
      { label: "Account Type", route: "/settings/account-type" },
      { label: "Payout Info", route: "/settings/payouts" },
      { label: "Security", route: "/settings/security" },
      { label: "Notifications", route: "/settings/notifications" },
      { label: "Preferences", route: "/settings/preferences" },
      // optionally add billing, user management etc.
    ],
  },

  // Shared profile/logout
  {
    label: "My Profile",
    route: "/profile",
    icon: FaUserCircle,
    children: [
      { label: "Profile Settings", route: "/profile/settings" },
      { label: "Address Book", route: "/profile/addresses" },
    ],
  },
  {
    label: "Sign Out",
    route: "/logout",
    icon: FaSignOutAlt,
  },
];


===== src/components/multi_page/App.jsx =====
import Header from "./components/Header";
import BulkEditMenu from "./components/BulkEditMenu";
import DraftTable from "./components/DraftTable";

export default function App() {
  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <main className="p-6 space-y-4">
        <BulkEditMenu />
        <DraftTable />
        <div className="flex justify-end gap-2 mt-4">
          <button className="bg-gray-300 px-4 py-2 rounded">
            Save for later
          </button>
          <button className="bg-blue-600 text-white px-4 py-2 rounded">
            Submit (1)
          </button>
        </div>
      </main>
    </div>
  );
}


===== src/components/multi_page/BulkEditMenu.jsx =====
export default function BulkEditMenu() {
  const items = [
    "Auto relist",
    "Available quantity",
    "Buy it now",
    "Charity",
    "Duration",
  ];

  return (
    <div className="relative inline-block">
      <button className="btn bg-gray-100 px-3 py-1 text-sm rounded shadow">
        Bulk edit ‚ñº
      </button>
      {/* <div className="absolute mt-2 bg-white border rounded shadow-lg z-10 w-48">
          {items.map((item) => (
            <div key={item} className="px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm">
              {item}
            </div>
          ))}
        </div> */}
    </div>
  );
}


===== src/components/multi_page/DraftRow.jsx =====
export default function DraftRow() {
  return (
    <tr className="border-b">
      <td>
        <input type="checkbox" className="mx-auto" />
      </td>
      <td>
        <button className="text-blue-600 underline">Edit</button>
      </td>
      <td>
        <span className="text-yellow-600">‚ö†Ô∏è Needs Info</span>
      </td>
      <td>
        <img
          src="https://pics.ebaystatic.com/aw/pics/stockimage1.jpg"
          alt="default"
          className="h-12 w-12"
        />
      </td>
      <td>
        <p className="text-sm">Chandeliers, Sconces</p>
        <p className="text-xs text-gray-500">Architectural Antiques</p>
      </td>
      <td>
        <input
          type="text"
          className="border rounded px-2 py-1 w-full"
          placeholder="Enter title"
        />
      </td>
      <td>N/A</td>
      <td>
        <select className="border rounded px-2 py-1">
          <option>Auction</option>
          <option>Buy it now</option>
        </select>
      </td>
      <td>
        <select className="border rounded px-2 py-1">
          <option>3 days</option>
          <option>7 days</option>
        </select>
      </td>
      <td>1</td>
      <td>
        <input
          type="text"
          className="border rounded px-2 py-1 w-full"
          placeholder="¬£ Price"
        />
      </td>
    </tr>
  );
}


===== src/components/multi_page/DraftTable.jsx =====
import React from "react";

const headers = [
  "Select",
  "Edit your listing",
  "Status",
  "Photos",
  "Item category 1",
  "Title",
  "Custom label (SKU)",
  "Format",
  "Available quantity",
  "Price",
  "Item cost",
  "Sales tax",
  "Fees",
  "Net proceeds",
  "Promotions",
  "Sold",
  "Unsold",
  "Views",
  "Watchers",
  "Start date",
  "End date",
  "Duration",
  "Time left",
  "Actions",
];

// Dummy row data (just an example row)
const rowData = [
  {
    select: "‚úî",
    edit: "Edit",
    status: "Active",
    photos: "üì∑",
    category: "Electronics",
    title: "Smartphone",
    sku: "SKU123",
    format: "Fixed Price",
    qty: 10,
    price: "$299",
    cost: "$200",
    tax: "$15",
    fees: "$20",
    proceeds: "$264",
    promo: "None",
    sold: 5,
    unsold: 2,
    views: 120,
    watchers: 3,
    start: "2025-04-01",
    end: "2025-04-30",
    duration: "30 days",
    left: "10d left",
    actions: "Action",
  },
  // Add more rows here if needed
];

export default function FullDraftTable() {
  return (
    <div className="overflow-x-auto p-4">
      <table className="min-w-full text-left text-sm border-separate border-spacing-y-2">
        <thead>
          <tr className="bg-gray-100 text-xs uppercase">
            {headers.map((header, index) => (
              <th
                key={index}
                className="p-2 whitespace-nowrap border-l border-r border-gray-300"
              >
                {header}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {rowData.map((row, rowIndex) => (
            <tr
              key={rowIndex}
              className="bg-white border-l border-r border-gray-300"
            >
              {Object.values(row).map((value, colIndex) => (
                <td key={colIndex} className="p-2 whitespace-nowrap">
                  {value}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}


===== src/components/multi_page/Header.jsx =====
export default function Header() {
  return (
    <header className="flex justify-between items-center bg-white shadow p-4">
      <div className="flex items-center gap-4">
        <div className="bg-gray-200 w-10 h-10 rounded" />
        <h1 className="text-xl font-bold">Create multiple listings</h1>
      </div>
      <button className="text-sm text-blue-600 hover:underline">
        Send Feedback
      </button>
    </header>
  );
}


===== src/components/new-dashboard/AffiliateDashboardHome.jsx =====
//src/components/new-dashboard/AffiliateDashboardHome.jsx
"use client";

import React, { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";
import {
  Link2,
  Gift,
  TrendingUp,
  ClipboardList,
  CreditCard,
  Users,
  Zap,
  Star,
  CheckCircle,
} from "lucide-react";
import CreateReferralDrawer from "@/components/affiliate/CreateReferralDrawer";

export default function AffiliateDashboardHome() {
  const { user, token, hydrated } = useAuth(); // ‚úÖ Hydration guard
  const [stats, setStats] = useState(null);
  const [openDrawer, setOpenDrawer] = useState(false);

  useEffect(() => {
    if (!token) return;

    const fetchStats = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/affiliate/dashboard/`, {
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const data = await res.json();
        setStats(data);
      } catch (err) {
        console.error("Failed to fetch affiliate stats:", err);
      }
    };

    fetchStats();
  }, [token]);

  if (!hydrated) {
    return (
      <div className="max-w-7xl mx-auto p-6 text-gray-500 dark:text-gray-300">
        <span className="animate-pulse">Loading affiliate dashboard...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-4 text-gray-800 dark:text-white transition">
      <h1 className="text-2xl font-semibold mb-4">
        Welcome back{user?.username ? `, ${user.username}` : ", Affiliate Pro"} üëã
      </h1>

      {/* Action Bar */}
      <div className="flex gap-2 mb-6 overflow-x-auto flex-nowrap">
        <button
          onClick={() => setOpenDrawer(true)}
          className="min-h-10 bg-green-600 text-white px-4 py-2 rounded text-sm hover:bg-green-700 transition flex items-center gap-1"
        >
          <Link2 className="w-4 h-4" /> Create Referral Link
        </button>
        <button className="min-h-10 bg-indigo-600 text-white px-4 py-2 rounded text-sm hover:bg-indigo-700 transition flex items-center gap-1">
          <Gift className="w-4 h-4" /> Share & Earn Now
        </button>
        <button className="min-h-10 bg-blue-600 text-white px-4 py-2 rounded text-sm hover:bg-blue-700 transition flex items-center gap-1">
          <TrendingUp className="w-4 h-4" /> View Performance
        </button>
      </div>

      {/* Metrics */}
      <h2 className="text-lg font-bold mb-2">Affiliate Performance</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
        <MetricBox icon={<Users />} label="Total Clicks" value={stats?.clicks ?? "‚Äì"} />
        <MetricBox icon={<ClipboardList />} label="Total Conversions" value={stats?.conversions ?? "‚Äì"} />
        <MetricBox icon={<CreditCard />} label="Pending Commissions" value={`‚Çµ${stats?.pending_commissions ?? 0}`} />
        <MetricBox icon={<Zap />} label="Paid Commissions" value={`‚Çµ${stats?.paid_commissions ?? 0}`} />
        <MetricBox icon={<CheckCircle />} label="Conversion Rate" value={`${stats?.conversion_rate ?? 0}%`} />
        <MetricBox icon={<Star />} label="Affiliate Tier" value={stats?.tier ?? "Tier 1"} />
      </div>

      {/* Milestone Progress */}
      <h2 className="text-lg font-bold mb-2">Milestone Rewards</h2>
      <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700">
        <p className="text-sm font-semibold text-gray-700 dark:text-gray-200 mb-1">
          Earn ‚Çµ{stats?.milestone_goal ?? 5000} to unlock VIP Affiliate Badge
        </p>
        <div className="w-full h-3 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
          <div
            className="bg-purple-600 h-full rounded-full transition-all duration-500"
            style={{
              width: `${((stats?.milestone_progress ?? 0) / (stats?.milestone_goal ?? 5000)) * 100}%`,
            }}
          ></div>
        </div>
        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
          ‚Çµ{(stats?.milestone_goal ?? 5000) - (stats?.milestone_progress ?? 0)} to go
        </p>
      </div>

      {/* Drawer for Referral Link */}
      <CreateReferralDrawer open={openDrawer} onClose={() => setOpenDrawer(false)} />
    </div>
  );
}

function MetricBox({ icon, label, value }) {
  return (
    <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700 hover:ring-1 hover:ring-gray-300 dark:hover:ring-gray-600 hover:scale-[1.01] transition duration-200">
      <div className="flex items-center justify-between mb-2">
        <span className="text-xs font-semibold text-gray-600 dark:text-gray-400">
          {label}
        </span>
        {icon && React.cloneElement(icon, { className: "w-5 h-5 text-gray-400 dark:text-gray-300" })}
      </div>
      <p className="text-2xl font-bold">{value}</p>
    </div>
  );
}

===== src/components/new-dashboard/AffiliateSidebar.jsx =====
//src/components/new-dashboard/AffiliateSidebar.jsx
"use client";

import React, { useEffect } from "react";
import Link from "next/link";
import clsx from "clsx";
import { useDispatch, useSelector } from "react-redux";
import { usePathname } from "next/navigation";
import { clearToggle } from "@/app/store/slices/toggleSlice";
import RoleSwitcher from "@/components/new-dashboard/RoleSwitcher";
import {
  X,
  LayoutDashboard,
  Users,
  ShoppingBag,
  DollarSign,
  Mail,
  HelpCircle,
  User,
  Settings,
} from "lucide-react";

const navItems = [
  {
    label: "Affiliate Dashboard",
    href: "/new-dashboard/affiliate",
    icon: LayoutDashboard,
  },
  { label: "My Referrals", href: "/affiliate/referrals", icon: Users },
  { label: "Earnings", href: "/affiliate/earnings", icon: DollarSign },
  { label: "Promotions", href: "/affiliate/promotions", icon: ShoppingBag },
  { label: "Messages", href: "/affiliate/messages", icon: Mail },
  { label: "Profile Settings", href: "/settings/profile", icon: User },
  { label: "Help Center", href: "/help", icon: HelpCircle },
];

export default function AffiliateSidebar({
  sidebarVisible,
  mobileOpen,
  toggleMobile,
  sidebarRef,
}) {
  const toggle = useSelector((state) => state.toggle.toggle);
  const dispatch = useDispatch();
  const pathname = usePathname();

  useEffect(() => {
    if (toggle) dispatch(clearToggle());
  }, [pathname]);

  const handleClose = () => {
    dispatch(clearToggle());
    if (toggleMobile) toggleMobile(false);
  };

  return (
    <aside
      ref={sidebarRef}
      className={clsx(
        "fixed md:static z-40 w-64 h-screen flex flex-col border-r shadow-lg transition-transform duration-300 bg-white dark:bg-[#111827]",
        {
          "translate-x-0": mobileOpen,
          "-translate-x-full": !mobileOpen,
          "md:translate-x-0": true,
          hidden: !sidebarVisible,
          block: sidebarVisible,
        },
      )}
    >
      {/* Mobile Header */}
      <div className="flex items-center justify-between px-4 pt-4 mb-2 md:hidden">
        <span className="font-bold text-gray-800 dark:text-white">Sidebar</span>
        <button onClick={handleClose}>
          <X className="w-5 h-5 text-gray-700 dark:text-white" />
        </button>
      </div>

      {/* Sidebar layout with sticky footer */}
      <div className="flex flex-col justify-between h-[70%]">
        {/* Top Area */}
        <div className="flex-1 overflow-y-auto px-4">
          <div className="font-semibold mb-4 hidden md:block text-gray-800 dark:text-white">
            Affiliate Tools
          </div>

          <div className="md:hidden mb-4">
            <RoleSwitcher />
          </div>

          <nav className="space-y-2 text-sm text-gray-700 dark:text-gray-200">
            {navItems.map(({ label, href, icon: Icon }) => {
              const isActive = pathname === href;
              return (
                <Link
                  key={href}
                  href={href}
                  onClick={handleClose}
                  className={clsx(
                    "flex items-center gap-3 px-3 py-2 rounded-md transition-colors",
                    isActive
                      ? "bg-pink-100 text-pink-800 font-semibold dark:bg-pink-900 dark:text-white"
                      : "hover:bg-gray-100 dark:hover:bg-gray-700",
                  )}
                >
                  <Icon className="w-5 h-5" />
                  {label}
                </Link>
              );
            })}
          </nav>
        </div>

        {/* Sticky Bottom Settings */}
        <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-4">
          <Link
            href="/settings"
            onClick={handleClose}
            className="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-white flex items-center gap-2"
          >
            <Settings className="w-4 h-4" />
            Settings
          </Link>
        </div>
      </div>
    </aside>
  );
}


===== src/components/new-dashboard/AgentDashboardHome.jsx =====
//src/components/new-dashboard/AgentDashboardHome.jsx
"use client";

import React from "react";
import { useAuth } from "@/contexts/AuthContext";
import {
  FilePlus2,
  Handshake,
  UploadCloud,
  CheckCircle,
  ClipboardList,
  ShoppingCart,
  CreditCard,
  UserCheck,
  Star,
  Clock,
  TrendingUp,
  Info,
} from "lucide-react";

export default function AgentDashboardHome() {
  const { user, hydrated } = useAuth(); // ‚úÖ hydration guard

  if (!hydrated) {
    return (
      <div className="max-w-7xl mx-auto p-6 text-gray-500 dark:text-gray-300">
        <span className="animate-pulse">Loading dashboard...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-4 text-gray-800 dark:text-white transition">
      <h1 className="text-2xl font-semibold mb-4 text-gray-800 dark:text-white">
        Welcome back{user?.username ? `, ${user.username}` : ""}!
      </h1>

      {/* Action Bar */}
      <div className="flex gap-2 mb-6 overflow-x-auto flex-nowrap">
        <button className="min-h-10 bg-blue-600 text-white px-4 py-2 rounded text-sm hover:bg-blue-700 transition flex items-center gap-1">
          <FilePlus2 className="w-4 h-4" /> Add New Local Listing
        </button>
        <button className="min-h-10 bg-blue-600 text-white px-4 py-2 rounded text-sm hover:bg-blue-700 transition flex items-center gap-1">
          <Handshake className="w-4 h-4" /> Accept New RFQ
        </button>
        <button className="min-h-10 bg-blue-600 text-white px-4 py-2 rounded text-sm hover:bg-blue-700 transition flex items-center gap-1">
          <UploadCloud className="w-4 h-4" /> Upload Proof of Purchase
        </button>
        <button className="min-h-10 bg-blue-600 text-white px-4 py-2 rounded text-sm hover:bg-blue-700 transition flex items-center gap-1">
          <CheckCircle className="w-4 h-4" /> Mark as Fulfilled
        </button>
      </div>

      {/* Headings */}
      <h2 className="text-lg font-bold mb-2 text-gray-800 dark:text-white">
        Local Listings
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <MetricBox
          icon={<ClipboardList />}
          label="Listings Active"
          value="25"
        />
        <MetricBox icon={<ShoppingCart />} label="Orders Received" value="9" />
        <MetricBox icon={<CheckCircle />} label="Orders Fulfilled" value="8" />
        <MetricBox
          icon={<CreditCard />}
          label="Order Value"
          value="‚Çµ4,700"
        />
        <MetricBox
          icon={<CheckCircle />}
          label="Fulfillment Success Rate"
          value={<span className="text-green-600 font-bold">89%</span>}
        />
        <MetricBox
          icon={<Star />}
          label="Buyer Trust Rating"
          value="4.8 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
        />
        <MetricBox
          icon={<Clock />}
          label="Avg Fulfillment Time"
          value="1.6 days"
        />
      </div>

      <h2 className="text-lg font-bold mb-2 text-gray-800 dark:text-white">
        Sourcing Requests
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
        <MetricBox icon={<ClipboardList />} label="RFQs Received" value="12" />
        <MetricBox icon={<UserCheck />} label="RFQs Accepted" value="6" />
        <MetricBox icon={<CheckCircle />} label="RFQs Closed" value="5" />
        <MetricBox icon={<CreditCard />} label="Commission" value="‚Ç¨1,900" />
        <MetricBox
          icon={<TrendingUp />}
          label="Total Commission"
          value="‚Ç¨6,600"
        />
      </div>
    </div>
  );
}

function MetricBox({ icon, label, value, hint }) {
  return (
    <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700 hover:ring-1 hover:ring-gray-300 dark:hover:ring-gray-600 hover:scale-[1.01] transition duration-200">
      <div className="flex items-center justify-between mb-2">
        <span className="text-xs font-semibold text-gray-600 dark:text-gray-400 flex items-center gap-1">
          {label}
          {hint && (
            <Info
              className="w-3 h-3 text-gray-400 dark:text-gray-500"
              title={hint}
            />
          )}
        </span>
        {icon &&
          React.cloneElement(icon, {
            className: "w-5 h-5 text-gray-400 dark:text-gray-300",
          })}
      </div>
      <p className="text-2xl font-bold">{value}</p>
    </div>
  );
}

===== src/components/new-dashboard/AgentSidebar.jsx =====
// src/components/new-dashboard/AgentSidebar.jsx
"use client";

import React, { useEffect } from "react";
import Link from "next/link";
import clsx from "clsx";
import { useDispatch, useSelector } from "react-redux";
import { usePathname } from "next/navigation";
import { clearToggle } from "@/app/store/slices/toggleSlice";
import RoleSwitcher from "@/components/new-dashboard/RoleSwitcher";
import {
  X,
  LayoutDashboard,
  ShoppingBag,
  Truck,
  Mail,
  DollarSign,
  User,
  HelpCircle,
  Settings,
} from "lucide-react";

const navItems = [
  { label: "Agent Dashboard", href: "/new-dashboard", icon: LayoutDashboard },
  { label: "My Orders", href: "/orders", icon: ShoppingBag },
  { label: "Pickup Tasks", href: "/agent/pickups", icon: Truck },
  { label: "Messages", href: "/agent/messages", icon: Mail },
  { label: "My Commissions", href: "/agent/earnings", icon: DollarSign },
  { label: "Profile Settings", href: "new-dashboard/settings/profile", icon: User },
  { label: "Help Center", href: "/help", icon: HelpCircle },
];

export default function AgentSidebar({
  sidebarVisible,
  mobileOpen,
  toggleMobile,
  sidebarRef,
}) {
  const toggle = useSelector((state) => state.toggle.toggle);
  const dispatch = useDispatch();
  const pathname = usePathname();

  useEffect(() => {
    if (toggle) dispatch(clearToggle());
  }, [pathname]);

  const handleClose = () => {
    dispatch(clearToggle());
    if (toggleMobile) toggleMobile(false);
  };

  return (
    <aside
      ref={sidebarRef}
      className={clsx(
        "fixed md:static z-40 w-64 h-screen flex flex-col border-r shadow-lg transition-transform duration-300 bg-white dark:bg-[#111827]",
        {
          "translate-x-0": mobileOpen,
          "-translate-x-full": !mobileOpen,
          "md:translate-x-0": true,
          hidden: !sidebarVisible,
          block: sidebarVisible,
        },
      )}
    >
      {/* Mobile Header */}
      <div className="flex items-center justify-between px-4 pt-4 mb-2 md:hidden">
        <span className="font-bold text-gray-800 dark:text-white">Sidebar</span>
        <button onClick={handleClose}>
          <X className="w-5 h-5 text-gray-700 dark:text-white" />
        </button>
      </div>

      {/* Sidebar layout with sticky footer */}
      <div className="flex flex-col justify-between h-[70%]">
        {/* Top Area */}
        <div className="flex-1 overflow-y-auto px-4">
          <div className="font-semibold mb-4 hidden md:block text-gray-800 dark:text-white">
            Sidebar
          </div>

          <div className="md:hidden mb-4">
            <RoleSwitcher />
          </div>

          <nav className="space-y-2 text-sm text-gray-700 dark:text-gray-200">
            {navItems.map(({ label, href, icon: Icon }) => {
              const isActive = pathname === href;
              return (
                <Link
                  key={href}
                  href={href}
                  onClick={handleClose}
                  className={clsx(
                    "flex items-center gap-3 px-3 py-2 rounded-md transition-colors",
                    isActive
                      ? "bg-purple-100 text-purple-800 font-semibold dark:bg-purple-900 dark:text-white"
                      : "hover:bg-gray-100 dark:hover:bg-gray-700",
                  )}
                >
                  <Icon className="w-5 h-5" />
                  {label}
                </Link>
              );
            })}
          </nav>
        </div>

        {/* Sticky Bottom Settings */}
        <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-4">
          <Link
            href="/new-dashboard/settings"
            onClick={handleClose}
            className="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-white flex items-center gap-2"
          >
            <Settings className="w-4 h-4" />
            Settings
          </Link>
        </div>
      </div>
    </aside>
  );
}


===== src/components/new-dashboard/Buyer-theme.jsx =====
"use client";

import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import clsx from "clsx";
import { usePathname } from "next/navigation";
import { clearToggle } from "@/app/store/slices/toggleSlice";
import AccountTypeBadge from "../common/AccountTypeBadge";

const navItems = [
  { label: "Dashboard", href: "/dashboard", icon: "üè†" },
  { label: "My Orders", href: "/orders", icon: "üì¶" },
  { label: "Saved Items", href: "/saved", icon: "‚ù§Ô∏è" },
  { label: "BNPL Orders", href: "/bnpl/orders", icon: "üßæ" },
  { label: "Profile Settings", href: "/settings/profile", icon: "üë§" },
  { label: "Help Center", href: "/help", icon: "üÜò" },
];

const BuyerSidebar = () => {
  const toggle = useSelector((state) => state.toggle.toggle);
  const pathname = usePathname();
  const dispatch = useDispatch();

  // Auto-close on route change
  useEffect(() => {
    if (toggle) {
      dispatch(clearToggle());
    }
  }, [pathname]);

  return (
    <>
      {/* Backdrop only on mobile */}
      {toggle && (
        <div
          className="fixed inset-0 bg-black/40 z-40 xl:hidden"
          onClick={() => dispatch(clearToggle())}
        />
      )}

      {/* Sidebar */}
      <div
        className={clsx(
          "fixed top-0 left-0 z-50 h-screen overflow-y-auto bg-white shadow-md transition-all duration-300 ease-in-out",
          "xl:relative xl:z-auto xl:opacity-100 xl:translate-x-0",
          toggle
            ? "w-64 opacity-100 translate-x-0"
            : "w-0 -translate-x-full xl:w-64",
        )}
      >
        <div className="p-4 text-sm text-gray-800">
          <AccountTypeBadge />

          <ul className="mt-4 space-y-1">
            {navItems.map((item) => {
              const isActive = pathname === item.href;
              return (
                <li key={item.href}>
                  <a
                    href={item.href}
                    onClick={() => dispatch(clearToggle())}
                    className={clsx(
                      "flex items-center gap-2 px-3 py-2 rounded-md transition-all",
                      isActive
                        ? "bg-purple-100 text-purple-800 font-semibold"
                        : "hover:bg-gray-100 text-gray-800",
                    )}
                  >
                    <span className="text-lg">{item.icon}</span>
                    <span>{item.label}</span>
                  </a>
                </li>
              );
            })}
          </ul>
        </div>
      </div>
    </>
  );
};

export default BuyerSidebar;


===== src/components/new-dashboard/BuyerDashboardHome.jsx =====
//src/components/new-dashboard/BuyerDashboardHome.jsx
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { useAuth } from "@/contexts/AuthContext";
import RecentReviews from "./RecentReviews";
import { BASE_API_URL } from "@/app/constants";
import { ShoppingBag, CreditCard, Clock, Star, MessageSquare, Heart, Info } from "lucide-react";

export default function BuyerDashboardHome() {
  const { user, token, hydrated } = useAuth();
  const [showWelcome, setShowWelcome] = useState(user?.is_new_user);

  const roles = Array.isArray(user?.account_type)
    ? user.account_type
    : user?.account_type
    ? [user.account_type]
    : [];

  const hasSeller = roles.includes("seller_private") || roles.includes("seller_business");
  const hasAgent = roles.includes("agent");

  const [pendingReviews, setPendingReviews] = useState([]);
  const [myReviews, setMyReviews] = useState([]);
  const [orderCount, setOrderCount] = useState(0);

  useEffect(() => {
    if (!hydrated || !token || !user) return;

    const markSeen = async () => {
      if (user?.is_new_user) {
        try {
          await fetch(`${BASE_API_URL}/api/users/mark-dashboard-seen/`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Token ${token}`,
            },
          });
          setShowWelcome(false);
        } catch (error) {
          console.error("‚ùå Failed to mark dashboard seen:", error);
        }
      }
    };

    const fetchReviews = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/reviews/my-reviews/?limit=100`, {
          headers: { Authorization: `Token ${token}` },
          cache: "no-store",
        });
        if (!res.ok) throw new Error("Failed to fetch reviews");
        const data = await res.json();
        const approved = data.results.filter((r) => r.status === 1);
        const pending = data.results.filter((r) => r.status === 0);
        setMyReviews(approved);
        setPendingReviews(pending);
      } catch (err) {
        console.error("‚ùå Failed to fetch my reviews:", err);
      }
    };

    const fetchOrderCount = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/buyer/order-summary/`, {
          headers: { Authorization: `Token ${token}` },
          cache: "no-store",
        });
        if (!res.ok) throw new Error("Failed to fetch order count");
        const data = await res.json();
        setOrderCount(data.order_count || 0);
      } catch (err) {
        console.error("‚ùå Failed to fetch order count:", err);
      }
    };

    markSeen();
    fetchReviews();
    fetchOrderCount();
  }, [hydrated, token, user]);

  if (!hydrated) {
    return (
      <div className="max-w-7xl mx-auto p-6 text-gray-500 dark:text-gray-300">
        <span className="animate-pulse">Loading dashboard...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-4 text-gray-800 dark:text-white transition">
      <h1 className="text-2xl font-semibold text-gray-800 dark:text-white mb-4">
        Welcome back{user?.username ? `, ${user.username}` : ""}!
      </h1>

      {roles.length === 1 && roles.includes("buyer") && (
        <div className="bg-yellow-100 text-yellow-800 text-sm p-3 rounded-md mb-4 border border-yellow-300 shadow-sm">
          üéØ Want to earn on Upfrica?
          <Link href="/onboarding/account-type" className="ml-2 font-semibold text-purple-600 hover:underline">
            Become a Seller or Agent
          </Link>
        </div>
      )}

      {showWelcome && (
        <div className="bg-purple-50 dark:bg-purple-900 text-purple-800 dark:text-white border border-purple-200 dark:border-purple-700 rounded-lg p-4 mb-6">
          <h2 className="text-lg font-semibold mb-2">üëã Welcome to Upfrica!</h2>
          <p className="text-sm mb-4">
            Your account is set up as a <strong>Buyer</strong> by default. You can now start placing orders, saving items to your wishlist, or
            upgrade to our VIP Buyer program.
            <br />
            Want to sell products or become a local sourcing agent? You can add a Seller or Agent profile anytime.
          </p>
          <div className="flex flex-wrap gap-2">
            <Link href="/">
              <button className="bg-purple-600 text-white px-3 py-1.5 rounded text-sm hover:bg-purple-700">Explore Products</button>
            </Link>
            <Link href="/wishlist">
              <button className="bg-gray-200 dark:bg-gray-700 px-3 py-1.5 rounded text-sm hover:bg-gray-300 dark:hover:bg-gray-600">View Wishlist</button>
            </Link>

            {(!hasSeller || !hasAgent) && (
              <div className="relative group">
                <button
                  disabled={roles.includes("affiliate")}
                  onClick={() => {
                    if (!roles.includes("affiliate")) window.location.href = "/onboarding/account-type";
                  }}
                  className={`bg-gray-200 dark:bg-gray-700 px-3 py-1.5 rounded text-sm transition ${
                    roles.includes("affiliate")
                      ? "text-gray-500 cursor-not-allowed bg-gray-300 dark:bg-gray-600"
                      : "hover:bg-gray-300 dark:hover:bg-gray-600"
                  }`}
                >
                  {hasSeller && !hasAgent
                    ? "Become an Agent"
                    : !hasSeller && hasAgent
                    ? "Sell on Upfrica"
                    : "Switch to Seller or Agent"}
                </button>

                {roles.includes("affiliate") && (
                  <div className="absolute top-full left-0 mt-1 text-xs text-red-500 dark:text-red-400">
                    üö´ Cannot switch: Affiliate accounts cannot become sellers or agents.
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Action Bar */}
      <div className="flex gap-2 mb-6 overflow-x-auto flex-nowrap">
        <button className="min-h-10 bg-purple-600 text-white px-4 py-2 rounded text-sm hover:bg-purple-700 transition">Claim ‚Ç¨5 Reward</button>
        <button className="min-h-10 bg-purple-600 text-white px-4 py-2 rounded text-sm hover:bg-purple-700 transition">Leave Review</button>
        <button className="min-h-10 bg-purple-600 text-white px-4 py-2 rounded text-sm hover:bg-purple-700 transition">View Wishlist Deals</button>
        <button className="min-h-10 bg-purple-600 text-white px-4 py-2 rounded text-sm hover:bg-purple-700 transition">Upgrade to 1P</button>
        <button className="min-h-10 bg-purple-600 text-white px-4 py-2 rounded text-sm hover:bg-purple-700 transition">Pay / BNPL</button>

        {(!hasSeller || !hasAgent) && (
          <Link href="/onboarding/account-type">
            <button className="min-h-10 bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded text-sm hover:bg-gray-300 dark:hover:bg-gray-600 transition">
              {hasSeller && !hasAgent ? "Become an Agent" : !hasSeller && hasAgent ? "Sell on Upfrica" : "Switch to Seller or Agent"}
            </button>
          </Link>
        )}
      </div>

      {/* Metrics */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <Link href="/new-dashboard/orders">
          <MetricBox icon={<ShoppingBag />} label="Orders" value={orderCount} />
        </Link>
        <MetricBox icon={<CreditCard />} label="Total Spend" value="‚Ç¨4,500" />
        <MetricBox icon={<Clock />} label="Avg. Delivery" value="2.1 days" />
        <MetricBox icon={<Star />} label="Buyer Rating" value="Excellent" />
        <Link href="/new-dashboard/reviews">
          <MetricBox
            icon={<MessageSquare />}
            label="Reviews"
            hint="Approved vs Pending Reviews"
            value={
              <div className="flex items-center gap-1">
                <span className="text-green-600">{myReviews.length} ‚úÖ</span>
                <span className="text-gray-500">/</span>
                <span className="text-yellow-500">{pendingReviews.length} ‚è≥</span>
              </div>
            }
          />
        </Link>
        <MetricBox icon={<Heart />} label="Wishlist Items" value="5" />

        <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700 hover:shadow-md transition">
          <h2 className="text-sm font-bold text-gray-800 dark:text-white mb-1">Wishlist</h2>
          <p className="text-sm mb-3 text-gray-600 dark:text-gray-400">3 items have price drops!</p>
          <Link href="/wishlist">
            <span className="text-sm font-medium text-blue-600 dark:text-blue-400 cursor-pointer">View Items &rarr;</span>
          </Link>
        </div>
      </div>

      {/* Rewards + Recent Reviews */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700 hover:shadow-md transition">
          <h2 className="text-sm font-bold text-gray-800 dark:text-white mb-1">Milestone Rewards</h2>
          <p className="text-sm mb-3 text-gray-600 dark:text-gray-400">Spend ‚Ç¨5,000 to become a VIP Buyer</p>
          <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400 mb-1">
            <span>Progress</span>
            <span>90%</span>
          </div>
          <div className="h-2 w-full bg-gray-300 rounded">
            <div className="h-2 bg-blue-600 rounded" style={{ width: "90%" }} />
          </div>
          <p className="text-xs mt-2 text-gray-500 dark:text-gray-400">‚Ç¨500 to go</p>
        </div>

        <RecentReviews token={token} />
      </div>
    </div>
  );
}

function MetricBox({ icon, label, value, hint }) {
  return (
    <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700 hover:ring-1 hover:ring-gray-300 dark:hover:ring-gray-600 hover:scale-[1.01] transition duration-200">
      <div className="flex items-center justify-between mb-2">
        <span className="text-xs font-semibold text-gray-600 dark:text-gray-400 flex items-center gap-1">
          {label}
          {hint && <Info className="w-3 h-3 text-gray-400 dark:text-gray-500" title={hint} />}
        </span>
        {icon && React.cloneElement(icon, { className: "w-5 h-5 text-gray-400 dark:text-gray-300" })}
      </div>
      <p className="text-2xl font-bold">{value}</p>
    </div>
  );
}

===== src/components/new-dashboard/BuyerSidebar.jsx =====
// src/components/new-dashboard/BuyerSidebar.jsx
"use client";

import React, { useEffect } from "react";
import Link from "next/link";
import clsx from "clsx";
import { useDispatch, useSelector } from "react-redux";
import { usePathname } from "next/navigation";
import { clearToggle } from "@/app/store/slices/toggleSlice";
import RoleSwitcher from "@/components/new-dashboard/RoleSwitcher";
import {
  X,
  Home,
  ShoppingBag,
  Bookmark,
  CreditCard,
  User,
  HelpCircle,
  Settings,
} from "lucide-react";

const navItems = [
  { label: "Dashboard", href: "/new-dashboard/buyer", icon: Home },
  { label: "My Orders", href: "/new-dashboard/orders", icon: ShoppingBag },
  { label: "Saved Items", href: "/saved", icon: Bookmark },
  { label: "BNPL Orders", href: "/bnpl/orders", icon: CreditCard },
  { label: "Profile Settings", href: "/settings/profile", icon: User },
  { label: "Help Center", href: "/help", icon: HelpCircle },
];

export default function BuyerSidebar({
  sidebarVisible,
  mobileOpen,
  toggleMobile,
  sidebarRef,
}) {
  const toggle = useSelector((state) => state.toggle.toggle);
  const dispatch = useDispatch();
  const pathname = usePathname();

  useEffect(() => {
    if (toggle) dispatch(clearToggle());
  }, [pathname]);

  const handleClose = () => {
    dispatch(clearToggle());
    if (toggleMobile) toggleMobile(false);
  };

  return (
    <aside
      ref={sidebarRef}
      className={clsx(
        `fixed md:static z-40 w-64 h-screen flex flex-col border-r shadow-lg transition-transform duration-300 bg-white dark:bg-[#111827]`,
        {
          "translate-x-0": mobileOpen,
          "-translate-x-full": !mobileOpen,
          "md:translate-x-0": true,
          hidden: !sidebarVisible,
          block: sidebarVisible,
        },
      )}
    >
      {/* Mobile Header */}
      <div className="flex items-center justify-between px-4 pt-4 mb-2 md:hidden">
        <span className="font-bold text-gray-800 dark:text-white">Sidebar</span>
        <button onClick={handleClose}>
          <X className="w-5 h-5 text-gray-700 dark:text-white" />
        </button>
      </div>

      {/* ‚úÖ Sidebar Content with footer pinned */}
      <div className="flex flex-col justify-between h-[70%]">
        {/* Top Scrollable Area */}
        <div className="flex-1 overflow-y-auto px-4">
          <div className="font-semibold mb-4 hidden md:block text-gray-800 dark:text-white">
            Sidebar
          </div>

          <div className="md:hidden mb-4">
            <RoleSwitcher />
          </div>

          <nav className="space-y-2 text-sm text-gray-700 dark:text-gray-200">
            {navItems.map(({ label, href, icon: Icon }) => {
              const isActive =
                pathname.startsWith(href) ||
                (href === "/new-dashboard/buyer" &&
                  pathname === "/new-dashboard");
              return (
                <Link
                  key={href}
                  href={href}
                  onClick={handleClose}
                  className={clsx(
                    "flex items-center gap-3 px-3 py-2 rounded-md transition-colors",
                    isActive
                      ? "bg-purple-100 text-purple-800 font-semibold dark:bg-purple-900 dark:text-white"
                      : "hover:bg-gray-100 dark:hover:bg-gray-700",
                  )}
                >
                  <Icon className="w-5 h-5" />
                  {label}
                </Link>
              );
            })}
          </nav>
        </div>

        {/* Sticky Footer at true bottom (no scroll needed if enough space) */}
        <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-4">
          <Link
            href="/new-dashboard/settings"
            onClick={handleClose}
            className="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-white flex items-center gap-2"
          >
            <Settings className="w-4 h-4" />
            Settings
          </Link>
        </div>
      </div>
    </aside>
  );
}


===== src/components/new-dashboard/CompleteSetupBanner.jsx =====
//src/components/new-dashboard/CompleteSetupBanner.jsx
"use client";

import { useCallback, useState } from "react";
import { useRouter } from "next/navigation";
import axiosInstance from "@/lib/axiosInstance";
import { useAuth } from "@/contexts/AuthContext";

export default function CompleteSetupBanner() {
  const { user, refreshUser } = useAuth();
  const router = useRouter();
  const [busy, setBusy] = useState(false);

  const ob = user?.onboarding;
  if (!ob) return null;

  const showSetup = ob.complete === false;           // needs to finish onboarding
  const showWelcome = !showSetup && ob.first_time;   // first welcome route

  if (!showSetup && !showWelcome) return null;

  const primaryCtaText = showSetup ? "Continue setup" : "Start tour";
  const target = ob.target || "/onboarding/checklist";

  const handlePrimary = useCallback(async () => {
    router.replace(target);
  }, [router, target]);

  const handleDismissWelcome = useCallback(async () => {
    // Mark welcome seen (only when first_time)
    try {
      setBusy(true);
      await axiosInstance.post("/onboarding/welcome-seen/");
      await refreshUser();
    } finally {
      setBusy(false);
    }
  }, [refreshUser]);

  return (
    <div className="mb-6 rounded-xl border border-amber-300 bg-amber-50 px-4 py-3 text-amber-900 shadow-sm dark:border-amber-700 dark:bg-amber-900/20 dark:text-amber-100">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
        <div className="flex-1">
          {showSetup ? (
            <>
              <div className="font-semibold">Finish setting up your account</div>
              <div className="text-sm opacity-90">
                You‚Äôre almost there. Complete the remaining steps to unlock all features.
              </div>
            </>
          ) : (
            <>
              <div className="font-semibold">Welcome to Upfrica üéâ</div>
              <div className="text-sm opacity-90">
                We‚Äôve prepared a quick tour based on your role. You can skip it anytime.
              </div>
            </>
          )}
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={handlePrimary}
            className="inline-flex items-center rounded-lg bg-amber-600 px-3 py-2 text-white text-sm font-medium hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-amber-500"
          >
            {primaryCtaText}
          </button>

          {showWelcome && (
            <button
              disabled={busy}
              onClick={handleDismissWelcome}
              className="inline-flex items-center rounded-lg border border-amber-300 px-3 py-2 text-sm font-medium hover:bg-amber-100 dark:hover:bg-amber-800/40"
            >
              {busy ? "Saving‚Ä¶" : "Dismiss"}
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

===== src/components/new-dashboard/DashboardHomeTheme.jsx =====
// src/components/new-dashboard/DashboardHome.jsx
"use client";
import React from "react";
import { ClipboardList, Package, MessageCircle } from "lucide-react";

export default function DashboardContent() {
  return (
    <div className="max-w-7xl mx-auto text-gray-800 dark:text-white transition-colors duration-300">
      <h1 className="text-2xl font-semibold mb-2 text-gray-800 dark:text-white">
        Welcome to Your Dashboard
      </h1>
      <p className="text-gray-600 dark:text-gray-300 mb-6">
        Here's a quick overview of your activity.
      </p>

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-6">
        <Card
          icon={<ClipboardList />}
          label="Total Orders"
          value="124"
          iconBg="bg-purple-100 dark:bg-purple-950"
          iconColor="text-purple-700 dark:text-purple-300"
        />
        <Card
          icon={<Package />}
          label="Pending Products"
          value="7"
          iconBg="bg-yellow-100 dark:bg-yellow-900"
          iconColor="text-yellow-600 dark:text-yellow-300"
        />
        <Card
          icon={<MessageCircle />}
          label="Messages"
          value="18"
          iconBg="bg-green-100 dark:bg-green-900"
          iconColor="text-green-600 dark:text-green-300"
        />
      </div>
    </div>
  );
}

function Card({ icon, label, value, iconBg, iconColor }) {
  return (
    <div className="bg-white dark:bg-gray-800 p-5 rounded-xl shadow-md dark:shadow-[0_4px_24px_rgba(0,0,0,0.4)] border border-gray-200 dark:border-gray-700 flex items-center gap-4 group transition-all hover:shadow-lg dark:hover:shadow-[0_6px_30px_rgba(0,0,0,0.5)] hover:scale-[1.02] duration-300">
      <div className={`${iconBg} p-2.5 rounded-full`}>
        {React.cloneElement(icon, { className: `w-5 h-5 ${iconColor}` })}
      </div>
      <div>
        <p className="text-sm text-gray-500 dark:text-gray-400">{label}</p>
        <p className="text-2xl font-bold text-gray-900 dark:text-white">
          {value}
        </p>
      </div>
    </div>
  );
}


===== src/components/new-dashboard/DashboardLayout.jsx =====
// src/components/new-dashboard/DashboardLayout.jsx
"use client";

import React, { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useRoleView } from "@/contexts/RoleViewContext";
import TopBar from "./TopBar";
import SellerSidebar from "./SellerSidebar";
import BuyerSidebar from "./BuyerSidebar";
import AgentSidebar from "./AgentSidebar";
import Footer from "./Footer";
import { normalizeRole } from "@/app/utils/roles";
import { useSearchParams } from "next/navigation";

// Placeholder affiliate
const AffiliateSidebar = ({ isOpen }) => (
  <div className="w-64 bg-pink-100 dark:bg-pink-900 p-4">Affiliate Sidebar</div>
);

function InnerDashboardLayout({ children }) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const { roleView, displayRoles } = useRoleView();
  const { user } = useAuth();
  const searchParams = useSearchParams();

  const normalizedRole = normalizeRole(roleView);
  const paymentSuccess = searchParams.get("payment") === "success";

  const acct = user?.account_type;
  const isBuyerOnly = Array.isArray(acct)
    ? acct.length === 1 && acct.includes("buyer")
    : acct === "buyer";

  useEffect(() => {
    if (paymentSuccess) {
      const url = new URL(window.location.href);
      url.searchParams.delete("payment");
      window.history.replaceState({}, "", url.toString());
    }
  }, [paymentSuccess]);

  const renderSidebar = () => {
    if (normalizedRole === "seller") {
      return (
        <SellerSidebar
          key="seller"
          roleView={normalizedRole}
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
        />
      );
    }
    if (normalizedRole === "agent") {
      return (
        <AgentSidebar
          key="agent"
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
        />
      );
    }
    if (normalizedRole === "affiliate") {
      return <AffiliateSidebar key="affiliate" isOpen={sidebarOpen} />;
    }
    return <BuyerSidebar key="buyer" isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />;
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900">
      <TopBar toogleMobileSidebarHide={() => setSidebarOpen(!sidebarOpen)} />

      {isBuyerOnly && (
        <div className="bg-indigo-100 dark:bg-indigo-900 text-indigo-900 dark:text-indigo-100 text-sm px-4 py-2 text-center shadow-sm">
          üöÄ Want to earn on Upfrica?{" "}
          <a href="/onboarding/account-type" className="underline font-semibold hover:text-indigo-700 dark:hover:text-white">
            Become a Seller, Agent or Affiliate
          </a>
        </div>
      )}

      <div className="flex flex-1 overflow-hidden">
        {renderSidebar()}

        <main className="flex-1 flex flex-col overflow-y-auto">
          <div className="flex-1 bg-green-50 dark:bg-[#0e1e1e] px-4 sm:px-6 lg:px-12 xl:px-40 py-6 overflow-y-auto">
            <div className="max-w-7xl mx-auto text-gray-800 dark:text-white">
              {/* tiny debug pill (remove later) */}
              <div className="text-xs opacity-70 mb-2">roles: {JSON.stringify(displayRoles)} | active: {normalizedRole}</div>
              {children}
            </div>
          </div>
          <Footer />
        </main>
      </div>
    </div>
  );
}

export default function DashboardLayout({ children }) {
  const { hydrated } = useAuth();
  if (!hydrated) return null;
  // RoleViewProvider is applied in app/(pages)/new-dashboard/layout.js
  return <InnerDashboardLayout>{children}</InnerDashboardLayout>;
}

===== src/components/new-dashboard/DynamicSidebar.jsx =====
"use client";

import React from "react";
import BuyerSidebar from "./BuyerSidebar";
import SellerSidebar from "./SellerSidebar";
import AgentSidebar from "./AgentSidebar";
import AffiliateSidebar from "./AffiliateSidebar";
import { useRoleView } from "@/contexts/RoleViewContext";
import { normalizeRole } from "@/app/utils/roles";

export default function DynamicSidebarLayout({
  sidebarVisible,
  mobileOpen,
  toggleMobile,
  sidebarRef,
}) {
  const { roleView } = useRoleView();
  const normalized = normalizeRole(roleView); // "seller", "buyer", "agent", "affiliate"

  const commonProps = {
    sidebarVisible,
    mobileOpen,
    toggleMobile,
    sidebarRef,
  };

  const renderSidebar = () => {
    if (normalized === "seller") {
      return <SellerSidebar key="seller" {...commonProps} />;
    }
    if (normalized === "agent") {
      return <AgentSidebar key="agent" {...commonProps} />;
    }
    if (normalized === "affiliate") {
      return <AffiliateSidebar key="affiliate" {...commonProps} />;
    }
    return <BuyerSidebar key="buyer" {...commonProps} />;
  };

  return <div key={normalized}>{renderSidebar()}</div>;
}


===== src/components/new-dashboard/DynamicSidebarLayout.jsx =====
// src/components/new-dashboard/DynamicSidebarLayout.jsx
"use client";

import React, { useMemo, useEffect } from "react";
import BuyerSidebar from "./BuyerSidebar";
import SellerSidebar from "./SellerSidebar";
import AgentSidebar from "./AgentSidebar";
import AffiliateSidebar from "./AffiliateSidebar";
import { useRoleView } from "@/contexts/RoleViewContext";
import { normalizeRole } from "@/app/utils/roles";

export default function DynamicSidebarLayout({
  sidebarVisible,
  mobileOpen,
  toggleMobile,
  sidebarRef,
}) {
  const { roleView, roles } = useRoleView();

  // Derive a stable role to use if roleView is empty (first load, cleared LS, etc.)
  const effectiveRole = useMemo(() => {
    // 1) explicit roleView wins
    const n = normalizeRole(roleView);
    if (n) return n;

    // 2) try localStorage (user last choice)
    if (typeof window !== "undefined") {
      const fromLS = normalizeRole(localStorage.getItem("roleView"));
      if (fromLS) return fromLS;
    }

    // 3) infer from actual account roles
    if (Array.isArray(roles) && roles.length) {
      if (roles.includes("seller_private") || roles.includes("seller_business")) return "seller";
      if (roles.includes("agent")) return "agent";
      if (roles.includes("affiliate")) return "affiliate";
      if (roles.includes("buyer")) return "buyer";
    }

    // 4) default to buyer UI if truly unknown
    return "buyer";
  }, [roleView, roles]);

  const commonProps = { sidebarVisible, mobileOpen, toggleMobile, sidebarRef };

  let SidebarComponent = BuyerSidebar;
  if (effectiveRole === "seller") SidebarComponent = SellerSidebar;
  else if (effectiveRole === "agent") SidebarComponent = AgentSidebar;
  else if (effectiveRole === "affiliate") SidebarComponent = AffiliateSidebar;

  useEffect(() => {
    // Debug only; remove or gate by NODE_ENV in prod
    // console.log("[Sidebar DEBUG]", { roles, roleView, effectiveRole, ls: typeof window !== "undefined" ? localStorage.getItem("roleView") : null });
  }, [roleView, roles, effectiveRole]);

  // Key forces a clean remount when role changes (prevents stale menu state)
  return <SidebarComponent key={effectiveRole} {...commonProps} />;
}

===== src/components/new-dashboard/Footer.jsx =====
"use client";

import React from "react";
import Link from "next/link";

export default function Footer() {
  return (
    <footer className="bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-12 xl:px-40 py-4 text-sm text-gray-600 dark:text-gray-400">
      <div className="max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center gap-3">
        <div className="text-center md:text-left">
          ¬© {new Date().getFullYear()} Upfrica. All rights reserved.
        </div>
        <div className="flex flex-wrap justify-center md:justify-end gap-4 text-xs md:text-sm">
          <Link href="/terms" className="hover:underline">
            Terms
          </Link>
          <Link href="/privacy" className="hover:underline">
            Privacy
          </Link>
          <Link href="/help" className="hover:underline">
            Help Center
          </Link>
        </div>
      </div>
    </footer>
  );
}


===== src/components/new-dashboard/MetricBox.jsx =====
// components/new-dashboard/MetricBox.jsx
import React from "react";

export default function MetricBox({ icon, label, value, className = "" }) {
  return (
    <div
      className={`flex items-center gap-4 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl p-4 shadow-sm ${className}`}
    >
      <div className="p-2 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded-full">
        {icon}
      </div>
      <div className="flex-1">
        <p className="text-sm text-gray-500 dark:text-gray-400">{label}</p>
        <p className="text-lg font-semibold text-gray-900 dark:text-white">{value}</p>
      </div>
    </div>
  );
}

===== src/components/new-dashboard/MyReviewsPageContent.jsx =====
// src/components/new-dashboard/MyReviewsPageContent.jsx
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";
import toast from 'react-hot-toast';
import { AiOutlineSearch, AiOutlineClose } from "react-icons/ai";

export default function MyReviewsPageContent() {
  const { token } = useAuth();
  const [reviews, setReviews] = useState([]);
  const [count, setCount] = useState(0);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(true);
  const [editingReview, setEditingReview] = useState(null);
  const [editForm, setEditForm] = useState({ title: "", comment: "", rating: 5, tags: [], seller_comment: "" });
  const [tagGroups, setTagGroups] = useState([]);
  const [allTags, setAllTags] = useState([]);
  const [expandedReviewId, setExpandedReviewId] = useState(null);
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxIndex, setLightboxIndex] = useState(0);
  const [lightboxMedia, setLightboxMedia] = useState([]);
  const [expandedTagsReviewId, setExpandedTagsReviewId] = useState(null);

  // ‚úÖ Move the filter/sort logic here
  const [sortBy, setSortBy] = useState("date_desc");
  const [searchQuery, setSearchQuery] = useState("");
  const [activeTags, setActiveTags] = useState([]);

  const toggleTag = (tag) => {
    setActiveTags((prev) =>
      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]
    );
  };

  const sortedReviews = [...reviews].sort((a, b) => {
    switch (sortBy) {
      case "date_asc":
        return new Date(a.created_at) - new Date(b.created_at);
      case "date_desc":
        return new Date(b.created_at) - new Date(a.created_at);
      case "rating_asc":
        return a.rating - b.rating;
      case "rating_desc":
        return b.rating - a.rating;
      case "product_asc":
        return a.product_title.localeCompare(b.product_title);
      case "product_desc":
        return b.product_title.localeCompare(a.product_title);
      default:
        return 0;
    }
  });



  useEffect(() => {
    if (!token) return;
    const fetchReviews = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/reviews/my-reviews/?page=${page}&page_size=10`, {
          headers: { Authorization: `Token ${token}` },
        });
        const data = await res.json();
        setReviews(data.results || []);
        setCount(data.count || 0);
      } catch (err) {
        console.error("‚ùå Failed to fetch reviews:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchReviews();
  }, [token, page]);

  useEffect(() => {
    if (!editingReview || !token) return;
    const fetchTags = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/review-tags/grouped/`, {
          headers: { Authorization: `Token ${token}` },
        });
        const data = await res.json();
        if (Array.isArray(data.results)) {
          setTagGroups(data.results);
          setAllTags(data.results.flatMap(group => group.tags));
        }
      } catch (err) {
        console.error('‚ùå Failed to fetch tags:', err);
      }
    };
    fetchTags();
  }, [editingReview, token]);

  function startEditReview(review) {
    setEditingReview(review);
    setEditForm({
      title: review.title,
      comment: review.comment,
      rating: review.rating,
      seller_comment: review.seller_comment || "",
      tags: review.tags.map((t) => t.label),
    });
  }

  async function submitEdit() {
    if (!editingReview) return;
    try {
      const res = await fetch(`${BASE_API_URL}/api/reviews/${editingReview.id}/edit/`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Token ${token}`,
        },
        body: JSON.stringify(editForm),
      });

      if (res.ok) {
        toast.success("‚úÖ Review updated! Pending moderation.");
        setEditingReview(null);
        setPage(1);
      } else {
        const errorData = await res.json();
        console.error(errorData);
        toast.error("‚ùå Failed to update review.");
      }
    } catch (e) {
      console.error(e);
      toast.error("‚ùå Something went wrong.");
    }
  }

  const totalPages = Math.ceil(count / 10);

const availableTags = Array.from(
  new Set(
    reviews.flatMap((review) => review.tags?.map((t) => t.label) || [])
  )
);

const filteredReviews = sortedReviews.filter((review) => {
  const query = searchQuery.toLowerCase();
  const matchesQuery =
    review.product_title?.toLowerCase().includes(query) ||
    review.comment?.toLowerCase().includes(query);

  const matchesTags =
    activeTags.length === 0 ||
    (review.tags || []).some((tag) => activeTags.includes(tag.label));

  return matchesQuery && matchesTags;
});


return (
  <div className="p-0">
    <div className="flex flex-col md:flex-row justify-between items-center gap-4 mb-6">
      {/* Search Bar */}
      <div className="relative w-full md:w-1/2">
        <AiOutlineSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-xl text-gray-600 dark:text-gray-300" />
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search reviews by product name or comment..."
          className="w-full rounded-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-10 py-2 text-sm placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-brand"
        />
        {searchQuery && (
          <AiOutlineClose
            className="absolute right-3 top-1/2 -translate-y-1/2 text-xl text-gray-500 dark:text-gray-300 cursor-pointer"
            onClick={() => setSearchQuery("")}
          />
        )}
      </div>

      {/* Sort Dropdown */}
      <div className="w-full md:w-auto">
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          className="w-full md:w-auto px-4 py-2 border rounded-md bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-sm text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-1 focus:ring-brand"
        >
          <option value="date_desc">Newest First</option>
          <option value="date_asc">Oldest First</option>
          <option value="rating_desc">Highest Rated</option>
          <option value="rating_asc">Lowest Rated</option>
          <option value="product_asc">Product A‚ÄìZ</option>
          <option value="product_desc">Product Z‚ÄìA</option>
        </select>
      </div>
    </div>

    <div className="flex flex-wrap gap-2 mb-6">
      {availableTags.map((tag) => (
        <button
          key={tag}
          onClick={() => toggleTag(tag)}
          className={`px-2 py-1 text-xs rounded-full border ${
            activeTags.includes(tag)
              ? "bg-blue-600 text-white"
              : "bg-gray-200 dark:bg-gray-700 dark:text-white"
          }`}
        >
          {tag}
        </button>
      ))}
    </div>

    <h1 className="text-xl font-semibold text-gray-800 dark:text-white mb-4">My Reviews</h1>

    {loading ? (
      <p className="text-sm text-gray-500 dark:text-gray-300">Loading reviews...</p>
    ) : reviews.length === 0 ? (
      <p className="text-sm text-gray-500 dark:text-gray-300">No reviews found.</p>
    ) : (
      <>
        <p className="text-sm text-gray-500 dark:text-gray-300 mb-2">
          Showing {filteredReviews.length} of {reviews.length} reviews
        </p>

        {filteredReviews.map((review) => (
          <div
            key={review.id}
            className="bg-gray-100 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 hadow-upfrica mb-6 p-4"
          >
            <div className="flex gap-4 items-start">
              {review.product_image && (
                <Image
                  src={review.product_image}
                  alt={review.product_title || "Product"}
                  width={80}
                  height={80}
                  className="rounded-md object-cover"
                />
              )}
              <div className="flex-1">
              
                <Link
                  href={review.product_frontend_url || "#"}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-gray-900 dark:text-white font-medium hover:underline line-clamp-2 leading-snug text-base"
                >
                  {review.product_title || "Untitled Product"}
                </Link>
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  üïì Reviewed on{" "}
                  {new Date(review.created_at).toLocaleDateString(undefined, {
                    day: "numeric",
                    month: "long",
                    year: "numeric",
                  })}
                </p>
                <div className="text-sm text-gray-700 dark:text-gray-300 mt-1 leading-relaxed">
                  <p className={`${expandedReviewId === review.id ? "" : "line-clamp-3"} overflow-hidden`}>
                    {review.comment}
                  </p>
                  {review.comment.length > 100 && (
                    <button
                      onClick={() =>
                        setExpandedReviewId(
                          expandedReviewId === review.id ? null : review.id
                        )
                      }
                      className="text-xs text-blue-500 hover:underline mt-1"
                    >
                      {expandedReviewId === review.id ? "Show less" : "Read more"}
                    </button>
                  )}
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  ‚≠ê {review.rating} ‚Äî <span className="italic">{review.status_label}</span>
                </p>

                {review.tags?.length > 0 && (
                  <div className="mt-2">
                    <div className="flex flex-wrap gap-2">
                      {(expandedTagsReviewId === review.id
                        ? review.tags
                        : review.tags.slice(0, 5)
                      ).map((tag) => (
                        <span
                          key={tag.id}
                          className="bg-blue-600 text-white text-xs px-2 py-1 rounded-full mt-1 mb-1"
                        >
                          {tag.label}
                        </span>
                      ))}
                    </div>
                    {review.tags.length > 5 && (
                      <button
                        onClick={() =>
                          setExpandedTagsReviewId(
                            expandedTagsReviewId === review.id ? null : review.id
                          )
                        }
                        className="text-xs text-blue-500 mt-1 hover:underline cursor-pointer"
                      >
                        {expandedTagsReviewId === review.id
                          ? "Show less tags"
                          : `+${review.tags.length - 5} more`}
                      </button>
                    )}
                  </div>
                )}

                {review.media?.length > 0 && (
                  <div className="flex gap-3 flex-wrap mt-3">
                    {review.media.map((m, idx) => {
                      const mediaUrl = m.url?.startsWith("http")
                        ? m.url
                        : `${process.env.NEXT_PUBLIC_API_BASE_URL || ""}${m.url}`;
                      return (
                        <button
                          key={m.id || m.filename}
                          onClick={() => {
                            setLightboxMedia(review.media);
                            setLightboxIndex(idx);
                            setLightboxOpen(true);
                          }}
                          className="focus:outline-none"
                        >
                          <div className="relative w-24 h-24">
                            {m.media_type === "image" ? (
                              <img
                                src={mediaUrl}
                                alt={m.filename || "Review media"}
                                className="w-full h-full object-cover rounded-md border hover:scale-105 transition"
                              />
                            ) : (
                              <div className="relative w-full h-full">
                                <video
                                  src={mediaUrl}
                                  className="w-full h-full object-cover rounded-md border"
                                  muted
                                />
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-white text-xl bg-black/50 rounded-full px-2">
                                    ‚ñ∂
                                  </span>
                                </div>
                              </div>
                            )}
                          </div>
                        </button>
                      );
                    })}
                  </div>
                )}

                {review.can_edit && (
                  <div className="mt-3">
                    <button
                      onClick={() => startEditReview(review)}
                      className="text-sm text-blue-500 hover:underline"
                    >
                      ‚úèÔ∏è Edit Review
                    </button>
                    {review.edit_deadline && (
                      <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        ‚è∞ Editable until{" "}
                        {new Date(review.edit_deadline).toLocaleString()}
                      </p>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {totalPages > 1 && (
          <div className="flex gap-2 mt-6">
            {Array.from({ length: totalPages }).map((_, i) => (
              <button
                key={i}
                onClick={() => setPage(i + 1)}
                className={`px-3 py-1 text-sm rounded ${
                  i + 1 === page
                    ? "bg-blue-600 text-white"
                    : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200"
                }`}
              >
                {i + 1}
              </button>
            ))}
          </div>
        )}
      </>
    )}

    {/* Lightbox */}
    {lightboxOpen && lightboxMedia.length > 0 && (
      <div className="fixed inset-0 z-[9999] bg-black/80 flex items-center justify-center">
        <div className="relative max-w-[90vw] max-h-[90vh] w-full flex flex-col items-center justify-center px-4">
          <button
            onClick={() => setLightboxOpen(false)}
// ‚Ä¶truncated‚Ä¶

===== src/components/new-dashboard/ProductReviewList.jsx =====
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import { BASE_API_URL } from '@/app/constants';
import { getCleanToken } from '@/lib/getCleanToken';
import { useAuth } from "@/contexts/AuthContext";
import SellerProductReviewCard from "./SellerProductReviewCard";

export default function ProductReviewList() {
  const { token } = useAuth();
  const [reviews, setReviews] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [sort, setSort] = useState("newest");

  useEffect(() => {
    if (!token) return;

    const cleanToken = getCleanToken();

const fetchReviews = async () => {
  try {
    const res = await fetch(`${BASE_API_URL}/api/reviews/my-product-reviews/`, {
      headers: {
        Authorization: `Token ${cleanToken}`,
      },
    });

    const data = await res.json();
    console.log("Fetched reviews:", data);

    const reviewsArray = Array.isArray(data)
      ? data
      : Array.isArray(data.results)
      ? data.results
      : [];

    setReviews(reviewsArray);
    setFiltered(reviewsArray);
  } catch (err) {
    console.error("Failed to fetch product reviews:", err);
    setReviews([]);
    setFiltered([]);
  } finally {
    setLoading(false);
  }
};

    fetchReviews();
  }, [token]);

  useEffect(() => {
    let updated = [...reviews];

    if (search) {
      const q = search.toLowerCase();
      updated = updated.filter(
        (r) =>
          r.product?.title?.toLowerCase().includes(q) ||
          r.text?.toLowerCase().includes(q)
      );
    }

    if (sort === "newest") {
      updated.sort(
        (a, b) => new Date(b.created_at) - new Date(a.created_at)
      );
    } else if (sort === "oldest") {
      updated.sort(
        (a, b) => new Date(a.created_at) - new Date(b.created_at)
      );
    }

    setFiltered(updated);
  }, [search, sort, reviews]);

  if (loading) {
    return <div className="text-sm text-gray-500">Loading product reviews...</div>;
  }

  return (
    <div>
      {/* Search & Sort Controls */}
      <div className="flex items-center justify-between mb-4 gap-2">
        <input
          type="text"
          placeholder="üîç Search product reviews..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="w-full max-w-sm px-4 py-2 rounded-md border dark:border-gray-700 bg-gray-100 dark:bg-gray-800 text-sm"
        />

        <select
          value={sort}
          onChange={(e) => setSort(e.target.value)}
          className="px-3 py-2 rounded-md border dark:border-gray-700 bg-gray-100 dark:bg-gray-800 text-sm"
        >
          <option value="newest">Newest First</option>
          <option value="oldest">Oldest First</option>
        </select>
      </div>

      {/* Review List */}
      <div className="space-y-4">
        {Array.isArray(filtered) && filtered.length === 0 ? (
          <div className="text-sm text-gray-500">No product reviews found.</div>
        ) : (
          Array.isArray(filtered) &&
          filtered.map((review) => (
            <SellerProductReviewCard key={review.id} review={review} />
          ))
        )}
      </div>
    </div>
  );
}

===== src/components/new-dashboard/RecentReviews.jsx =====
// components/new-dashboard/RecentReviews.jsx
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import { BASE_API_URL } from "@/app/constants";
import { Button } from "@/components/ui/button";

export default function RecentReviews({ token }) {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!token) return;

    const fetchReviews = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/reviews/my-reviews/?page_size=2`, {
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const data = await res.json();
        setReviews(data.results || []);
      } catch (err) {
        console.error("‚ùå Failed to load recent reviews:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchReviews();
  }, [token]);

  if (!token || loading) {
    return (
      <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700 animate-pulse">
        <h2 className="text-sm font-bold mb-1">Recent Reviews</h2>
        <p className="text-sm text-gray-500 dark:text-gray-400">Loading...</p>
      </div>
    );
  }

  if (reviews.length === 0) {
    return (
      <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700">
        <h2 className="text-sm font-bold dark:text-white mb-1">Recent Reviews</h2>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          You haven‚Äôt left any reviews yet.
        </p>
        <Link
          href="/orders"
          className="text-sm text-blue-600 hover:underline mt-2 inline-block"
        >
          Review a recent order ‚Üí
        </Link>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700">
      <div className="flex items-center justify-between mb-3">
        <h2 className="text-sm font-bold text-gray-800 dark:text-white">Recent Reviews</h2>
        <Link href="/new-dashboard/reviews">
          <Button variant="link" className="text-xs text-blue-600 p-0 h-auto">View All</Button>
        </Link>
      </div>

      <ul className="space-y-3 text-sm text-gray-700 dark:text-gray-300">
        {reviews.slice(0, 2).map((review) => (
          <li
            key={review.id}
            className="border-b border-gray-200 dark:border-gray-700 pb-2 last:border-b-0"
          >
            <Link
              href={review.product_frontend_url || "#"}
              target="_blank"
              rel="noopener noreferrer"
              className="font-medium text-blue-600 hover:underline block truncate text-sm"
              title={review.product_title}
            >
              {review.product_title || "Untitled Product"}
            </Link>

            {review.comment && (
              <p className="text-xs text-gray-400 dark:text-gray-500 line-clamp-1">{review.comment}</p>
            )}

            <div className="flex items-center justify-between text-xs mt-1">
              <span className="flex items-center space-x-1 text-gray-500 dark:text-gray-400">
                <span>‚≠ê {review.rating}</span>
                {review.status_label && (
                  <span className={review.status_label === "Approved" ? "text-green-600" : "text-yellow-600"}>
                    {review.status_label}
                  </span>
                )}
              </span>
              <span className="italic text-gray-400 dark:text-gray-500">
                {new Date(review.created_at).toLocaleDateString("en-GB")}
              </span>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

===== src/components/new-dashboard/RequireRole.jsx =====
//src/components/new-dashboard/RequireRole.jsx
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import { useRoleView } from "@/contexts/RoleViewContext";

export default function RequireRole({ need, children, fallback = "/unauthorized" }) {
  const router = useRouter();
  const { hydrated } = useAuth();
  const { displayRoles } = useRoleView();

  const allowed = Array.isArray(displayRoles) && displayRoles.includes(need);

  useEffect(() => {
    if (!hydrated) return;         // wait until /me is loaded
    if (!allowed) router.replace(fallback);
  }, [hydrated, allowed, router, fallback]);

  if (!hydrated) {
    return (
      <div className="p-6 text-gray-500 dark:text-gray-300">
        <span className="animate-pulse">Loading‚Ä¶</span>
      </div>
    );
  }

  // If not allowed we‚Äôve already scheduled a redirect; render nothing to avoid flicker.
  if (!allowed) return null;

  return children;
}

===== src/components/new-dashboard/RoleSwitcher.jsx =====
// src/components/new-dashboard/RoleSwitcher.jsx
"use client";

import React, { useEffect, useMemo } from "react";
import { useRouter, usePathname } from "next/navigation";
import classNames from "classnames";
import { useRoleView } from "@/contexts/RoleViewContext";
import { useAuth } from "@/contexts/AuthContext";

const roleConfig = {
  buyer: { label: "Buyer", emoji: "üõçÔ∏è", active: "bg-emerald-600 text-white",
    inactive: "hover:bg-emerald-100 text-gray-700 dark:text-gray-200",
    badge: "bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200",
    ring: "ring-emerald-300" },
  seller: { label: "Seller", emoji: "üè™", active: "bg-orange-600 text-white",
    inactive: "hover:bg-orange-100 text-gray-700 dark:text-gray-200",
    badge: "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200",
    ring: "ring-orange-300" },
  agent: { label: "Agent", emoji: "üß≠", active: "bg-indigo-600 text-white",
    inactive: "hover:bg-indigo-100 text-gray-700 dark:text-gray-200",
    badge: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200",
    ring: "ring-indigo-300" },
  affiliate: { label: "Affiliate", emoji: "üí∏", active: "bg-pink-600 text-white",
    inactive: "hover:bg-pink-100 text-gray-700 dark:text-gray-200",
    badge: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
    ring: "ring-pink-300" },
};

export default function RoleSwitcher() {
  const router = useRouter();
  const pathname = usePathname();
  const { roleView, setRoleView, displayRoles, roles } = useRoleView();
  const { refreshUser } = useAuth();

  // Prefer provider's displayRoles (now sourced from backend)
  const roleButtons = useMemo(() => {
    if (Array.isArray(displayRoles) && displayRoles.length) return displayRoles;

    // Fallback compute (should rarely run now)
    const hasSeller =
      Array.isArray(roles) && (roles.includes("seller_private") || roles.includes("seller_business"));
    const out = [];
    if (roles?.includes?.("buyer")) out.push("buyer");
    if (hasSeller) out.push("seller");
    if (roles?.includes?.("agent")) out.push("agent");
    if (roles?.includes?.("affiliate")) out.push("affiliate");
    return out.length ? out : ["buyer"];
  }, [displayRoles, roles]);

  // keep a valid roleView
  useEffect(() => {
    if (!roleButtons.length) return;
    if (!roleView || !roleButtons.includes(roleView)) {
      const next = roleButtons[0];
      setRoleView(next);
      if (typeof window !== "undefined") localStorage.setItem("roleView", next);
    }
  }, [roleView, roleButtons, setRoleView]);

  const handleSwitch = async (newRole) => {
    if (!newRole || newRole === roleView) return;
    setRoleView(newRole);
    if (typeof window !== "undefined") localStorage.setItem("roleView", newRole);

    try { await refreshUser?.(); } catch {}

    const target =
      newRole === "buyer" ? "/new-dashboard/buyer" :
      newRole === "seller" ? "/new-dashboard/seller" :
      newRole === "agent" ? "/new-dashboard/agent" :
      "/new-dashboard/affiliate";

    if (pathname === target) {
      router.replace("/new-dashboard/temp");
      setTimeout(() => router.replace(target), 30);
    } else {
      router.push(target);
    }
  };

  if (!roleButtons.length) return null;

  return (
    <div className="flex flex-col items-center justify-center w-full py-2 space-y-2">
      <div className="flex rounded-full overflow-hidden border bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 shadow-sm">
        {roleButtons.map((role) => {
          const isActive = roleView === role;
          return (
            <button
              key={role}
              onClick={() => handleSwitch(role)}
              className={classNames(
                "px-4 py-1 text-xs font-semibold transition-all duration-200 ease-in-out flex items-center gap-1",
                isActive ? roleConfig[role].active : roleConfig[role].inactive,
                isActive && "ring-2 ring-offset-1",
                isActive && roleConfig[role].ring
              )}
            >
              <span>{roleConfig[role].emoji}</span>
              <span>{roleConfig[role].label}</span>
            </button>
          );
        })}
      </div>

      {roleView && (
        <span
          className={classNames(
            "text-xs px-2 py-0.5 rounded-full font-medium",
            roleConfig[roleView]?.badge ||
              "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200"
          )}
        >
          Active Role: {roleConfig[roleView]?.label || roleView}
        </span>
      )}
    </div>
  );
}

===== src/components/new-dashboard/SellerDashboardHome.jsx =====
  // src/components/new-dashboard/SellerDashboardHome.jsx
  "use client";

  import React, { useEffect, useState, useRef } from "react";
 import { parsePhoneNumberFromString, getCountryCallingCode } from "libphonenumber-js/min";
  import Link from "next/link";
  import { useRouter, usePathname, useSearchParams } from "next/navigation";
  import toast from "react-hot-toast";

  import { useAuth } from "@/contexts/AuthContext";
  import useEntitlements from "@/hooks/useEntitlements";

  // NEW imports
  import { X, Loader2, BadgeCheck, Star } from "lucide-react";
  import PhoneInput from "@/components/input/phoneInput";

  import {
    ShoppingCart, BarChart2, Eye, Package, Clock, AlertCircle,
    TrendingUp, CircleCheck, Info,
  } from "lucide-react";
  import SellerReviewsSummaryCard from "@/components/new-dashboard/SellerReviewsSummaryCard";
  import PlanComparisonModal from "@/components/ui/PlanComparisonModal";
  import { BASE_API_URL } from "@/app/constants";



  // --- friendly labels for `uses` (module scope so all components can use) ---
const USE_LABELS = {
  shop_public: "Shop contact",
  whatsapp: "WhatsApp",
  delivery: "Delivery",
};
const USE_ORDER = { shop_public: 0, whatsapp: 1, delivery: 2 };

const startCase = (s = "") =>
  String(s)
    .replace(/[_-]+/g, " ")
    .replace(/\s+/g, " ")
    .trim()
    .replace(/\b\w/g, (m) => m.toUpperCase());

export const humanizeUses = (uses) => {
  const arr = Array.isArray(uses)
    ? uses
    : typeof uses === "string"
      ? uses.split(",").map((x) => x.trim()).filter(Boolean)
      : [];

  if (arr.length === 0) return "";
  const sorted = [...arr].sort(
    (a, b) => (USE_ORDER[a] ?? 99) - (USE_ORDER[b] ?? 99)
  );
  return [...new Set(sorted.map((u) => USE_LABELS[u] ?? startCase(u)))].join(", ");
};



  const DEBUG = false;
  const isSellerRole = (r) =>
    r === "seller" || r === "seller_private" || r === "seller_business";

  export default function SellerDashboardHome() {
    const router = useRouter();
    const pathname = usePathname();
    const search = useSearchParams();

    // üîê Entitlements (feature flags) ‚Äî used to gate UI actions
  const { has, stateOf, whyLocked, loading: entLoading, error: entError } = useEntitlements();

  const contactState = stateOf("allow_display_seller_contact");
  const contactWhy   = whyLocked("allow_display_seller_contact");


  // NEW: bottom sheet + phones state
const [phoneSheetOpen, setPhoneSheetOpen] = useState(false);
const [hasPrimaryContact, setHasPrimaryContact] = useState(false);



    const { user, token, hydrated } = useAuth();

    const [dashboard, setDashboard] = useState(null);
    const [shop, setShop] = useState(null);
    const [loadingDash, setLoadingDash] = useState(true);
    const [loadingShop, setLoadingShop] = useState(true);
    const [errorDash, setErrorDash] = useState(null);
    const [errorShop, setErrorShop] = useState(null);
    const [planRequired, setPlanRequired] = useState(null); // { message, next }

    // upgrade modal + subscribe state
    const [showPlans, setShowPlans] = useState(false);
    const [subscribing, setSubscribing] = useState(false);
    const [plansOpen, setPlansOpen] = useState(false);

    // --- roles ---
    const roles = Array.isArray(user?.account_type)
      ? user.account_type
      : user?.account_type
      ? [user.account_type]
      : [];
    const isSeller = roles.some(isSellerRole);

    // --- plan presence (from /me and/or dashboard once loaded) ---
    const userHasPlan = !!(user?.seller_plan && (user?.seller_plan.id ?? user?.seller_plan));
    const dashHasPlan = !!(dashboard?.seller_plan && (dashboard?.seller_plan.id ?? dashboard?.seller_plan));
    const hasPlan = userHasPlan || dashHasPlan;

    useEffect(() => {
      if (!DEBUG) return;
      console.log("üß≠ Auth state:", {
        hydrated,
        token,
        roles,
        isSeller,
        userHasPlan,
        dashHasPlan,
        hasPlan,
      });
    }, [hydrated, token, user, dashboard]); // eslint-disable-line

    // üõí Fetch dashboard ‚Äî let backend enforce plan/role.
    useEffect(() => {
      if (!hydrated || !token) return;

      const controller = new AbortController();
      const run = async () => {
        setLoadingDash(true);
        setErrorDash(null);
        setPlanRequired(null);

        try {
          const authToken = token?.replace(/^"|"$/g, "");
          const res = await fetch(`${BASE_API_URL}/api/users/me/dashboard/`, {
            headers: {
              Authorization: `Token ${authToken}`,
              Accept: "application/json",
            },
            signal: controller.signal,
            cache: "no-store",
          });

          if (!res.ok) {
            // Try JSON, fall back to text
            let body = null,
              text = "";
            try {
              body = await res.clone().json();
            } catch {}
            if (!body) {
              try {
                text = await res.text();
              } catch {}
            }

            if (res.status === 401) {
              setErrorDash("Session expired. Please log in again.");
              return;
            }

            if (res.status === 403) {
              const detail =
                body?.detail || body?.code || body?.error || text?.toLowerCase();
              if (detail && String(detail).includes("seller_plan_required")) {
                setPlanRequired({
                  message:
                    body?.message ||
                    "You need an active seller plan to access the seller dashboard.",
                  next: "/onboarding/account-type",
                });
                return;
              }
            }

            const compact = body
              ? JSON.stringify(body).slice(0, 300)
              : (text || "").slice(0, 300);
            setErrorDash(
              `${res.status} ${res.statusText}${compact ? ` ‚Äî ${compact}` : ""}`,
            );
            if (DEBUG)
              console.error("‚ùå Dashboard fetch failed:", res.status, body || text);
            return;
          }

          const data = await res.json();
          setDashboard(data);
          if (DEBUG) console.log("‚úÖ Dashboard data:", data);
        } catch (err) {
          if (err.name !== "AbortError") {
            setErrorDash(err.message || "Network error");
            if (DEBUG) console.error("üí• Dashboard error:", err);
          }
        } finally {
          setLoadingDash(false);
        }
      };

      run();
      return () => controller.abort();
    }, [hydrated, token]);

    // üîÅ Payment success: clear the query param and refresh lightweight state
    useEffect(() => {
      const paid = search?.get("payment");
      if (paid !== "success") return;

      toast.success("Payment confirmed. Updating your plan‚Ä¶");

      const params = new URLSearchParams(search);
      params.delete("payment");

      router.replace(`${pathname}${params.toString() ? `?${params}` : ""}`, {
        scroll: false,
      });

      // Optional light refresh to prompt re-fetch (backend should reflect new plan)
      setTimeout(() => setLoadingDash(true), 250);
    }, [search, pathname, router]);

    // ‚úÖ Prefer backend role when it's present on the dashboard payload
    const backendIsSeller = Array.isArray(dashboard?.account_type)
      ? dashboard.account_type.some(isSellerRole)
      : undefined;
    const effectiveIsSeller =
      backendIsSeller === undefined ? isSeller : backendIsSeller;

    // üè™ Fetch shop ‚Äî only if seller and NOT plan-gated and has a plan
    useEffect(() => {
      if (!hydrated || !token || !effectiveIsSeller || planRequired || !hasPlan)
        return;

      const controller = new AbortController();
      const run = async () => {
        setLoadingShop(true);
        setErrorShop(null);
        try {
          const authToken = token?.replace(/^"|"$/g, "");
          const res = await fetch(`${BASE_API_URL}/api/shops/me/`, {
            headers: { Authorization: `Token ${authToken}` },
            signal: controller.signal,
            cache: "no-store",
          });

          if (!res.ok) {
            // 404/204 means no shop yet‚Äîtreat as null
            if (res.status !== 404 && res.status !== 204) {
              if (res.status === 401)
                setErrorShop("Session expired. Please log in again.");
              else if (res.status === 403)
                setErrorShop("You don‚Äôt have permission to view shop data.");
              else {
                const text = await res.text();
                setErrorShop(
                  `${res.status} ${res.statusText} ‚Äî ${text}`.slice(0, 300),
                );
                if (DEBUG)
                  console.warn("‚ö†Ô∏è Shop fetch failed:", res.status, text);
              }
            }
            setShop(null);
            return;
          }

          const data = await res.json();
          setShop(data || null);
          if (DEBUG) console.log("‚úÖ Shop data:", data);
        } catch (err) {
          if (err.name !== "AbortError") {
            setErrorShop(err.message || "Network error");
            if (DEBUG) console.error("üí• Shop error:", err);
          }
        } finally {
          setLoadingShop(false);
        }
      };

      run();
      return () => controller.abort();
    }, [hydrated, token, effectiveIsSeller, planRequired, hasPlan]);


  // ----------- Shop gating helpers -----------
  const storefrontState = stateOf("storefront_unlock"); // 'active' | 'included_locked' | 'available'

  // Important: while entitlements are loading, DON'T assume locked
  const storefrontLocked = !entLoading && storefrontState === "available";
  const storefrontKyc    = !entLoading && storefrontState === "included_locked";

  // Interpret shop status safely (treat unknown/missing as ACTIVE)
  const shopStatus = String(shop?.status ?? "").toLowerCase();
  const subStatus  = String(
    shop?.subscription?.status ??
    shop?.subscription_status ??
    shop?.plan_status ??
    ""
  ).toLowerCase();

  const isExplicitInactive =
    shop?.is_enabled === false ||           // <-- add this
    shop?.is_active === false ||
    shop?.suspended === true ||
    ["inactive", "paused", "suspended", "disabled", "closed", "archived"].includes(shopStatus) ||
    Boolean(shop?.deleted_at);

  const isSubscriptionInactive =
    ["canceled", "past_due", "unpaid"].includes(subStatus);

  // Only mark inactive when we KNOW it‚Äôs inactive
  const shopInactive = isExplicitInactive || isSubscriptionInactive;





    // üßÆ Plan/Data (compute defensively)
    const planLabel = dashboard?.seller_plan?.label ?? "Unknown";
    const maxProductsNum = Number(dashboard?.seller_plan?.max_products ?? 0);
    const activeListingsNum = Number(dashboard?.active_listings ?? 0);
    const awaitingApproval = Number(dashboard?.awaiting_approval_listings ?? 0);
    const inactiveBySeller = Number(dashboard?.inactive_listings ?? 0);
    const slotsLeft =
      maxProductsNum > 0 ? Math.max(maxProductsNum - activeListingsNum, 0) : "‚Äî";
    const usagePercent =
      maxProductsNum > 0
        ? Math.min(Math.round((activeListingsNum / maxProductsNum) * 100), 100)
        : 0;

    // üîî subscribe handler (used by PlanComparisonModal)
    const handlePickPlan = async (planId) => {
      if (!token) return toast.error("Please log in again.");
      try {
        setSubscribing(true);
        const authToken = token?.replace(/^"|"$/g, "");
        const res = await fetch(`${BASE_API_URL}/api/seller/subscribe/`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${authToken}`,
          },
          body: JSON.stringify({ plan_id: planId, billing_cycle: "monthly" }),
        });

        const data = await res.json().catch(() => ({}));








        if (!res.ok) {
          const msg = data?.error || data?.detail || "Subscription failed.";
          toast.error(`‚ùå ${msg}`);
          return;
        }

        

        // Free plan ‚Üí message + redirect
        if (data?.message && !data?.checkout_url) {
          toast.success("‚úÖ Free plan activated!");
          router.push("/new-dashboard/seller");
          return;
        }

        // Paid ‚Üí Stripe
        if (data?.checkout_url) {
          window.location.href = data.checkout_url;
          return;
        }

        toast.success("‚úÖ Plan updated.");
        router.push("/new-dashboard/seller");
      } catch (e) {
        console.error(e);
        toast.error("‚ùå Something went wrong starting checkout.");
      } finally {
        setSubscribing(false);
        setShowPlans(false);
      }
    };






    return (
      <div className="max-w-7xl mx-auto p-4 text-gray-800 dark:text-white transition">
        <h1 className="text-2xl font-semibold dark:text-gray-300 mb-3">
          Welcome back, {user?.username || user?.email || "Seller"}!
        </h1>

        {(errorDash || errorShop) && (
          <div className="mb-4 rounded-md border border-red-300 bg-red-50 p-3 text-sm text-red-700 dark:border-red-700 dark:bg-red-900/30 dark:text-red-200">
            {errorDash && <div>Dashboard: {errorDash}</div>}
            {errorShop && <div>Shop: {errorShop}</div>}
          </div>
        )}
// ‚Ä¶truncated‚Ä¶

===== src/components/new-dashboard/SellerProductReviewCard.jsx =====
// src/components/new-dashboard/SellerProductReviewCard.jsx
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { FaStar, FaEdit, FaChevronLeft, FaChevronRight, FaTimes } from "react-icons/fa";
import { format, differenceInHours } from "date-fns";

export default function SellerProductReviewCard({ review }) {
  const {
    product = {},
    rating,
    text,
    comment,
    status,
    status_label,
    created_at,
    tags = [],
    media = [],
    editable_until,
    edit_deadline,
    is_editable,
    can_edit,
  } = review;

  const normalizedText = text || comment || "";
  const normalizedStatus =
    typeof status !== "undefined"
      ? status
      : status_label === "Approved"
      ? 1
      : status_label === "Pending"
      ? 0
      : -1;

  const editable = typeof is_editable !== "undefined" ? is_editable : can_edit;
  const editUntil = editable_until || edit_deadline;

  const [showAllTags, setShowAllTags] = useState(false);
  const displayTags = showAllTags ? tags : tags.slice(0, 5);
  const remainingTags = tags.length - displayTags.length;

  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return format(date, "dd MMM yyyy");
  };

  const getStatusLabel = () => {
    if (normalizedStatus === 1) return "‚úÖ Approved";
    if (normalizedStatus === 0) return "‚è≥ Pending";
    return "‚ùå Rejected";
  };

  const isExpiringSoon = editUntil
    ? differenceInHours(new Date(editUntil), new Date()) <= 24
    : false;

  // Lightbox state
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [activeIndex, setActiveIndex] = useState(0);

  const openLightbox = (index) => {
    setActiveIndex(index);
    setLightboxOpen(true);
  };

  const closeLightbox = () => setLightboxOpen(false);
  const next = () => setActiveIndex((prev) => (prev + 1) % media.length);
  const prev = () => setActiveIndex((prev) => (prev - 1 + media.length) % media.length);

  return (
    <div className="bg-gray-100 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 hadow-upfrica mb-6 p-4">

<Link
  href={review.product_frontend_url || "#"}
  target="_blank"
  rel="noopener noreferrer"
  className="text-gray-900 dark:text-white font-medium hover:underline line-clamp-2 leading-snug text-base"
>
  {review.product_title || review.product?.title || "Untitled Product"}
</Link>

      <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
        üïí Reviewed on {formatDate(created_at)}
      </p>

      <div className="flex items-center mt-2 mb-1 space-x-2">
        <div className="flex items-center space-x-1 text-yellow-500">
          {Array.from({ length: 5 }, (_, i) => (
            <FaStar
              key={i}
              className={i < rating ? "text-yellow-500" : "text-gray-400"}
            />
          ))}
          <span className="text-sm ml-2 text-white dark:text-gray-300">{rating}</span>
        </div>
        <span className="text-xs italic text-gray-500 dark:text-gray-400">
          ‚Äî {getStatusLabel()}
        </span>
      </div>

      {normalizedText && (
        <p className="text-sm text-gray-800 dark:text-white mt-2">{normalizedText}</p>
      )}

      {tags?.length > 0 && (
        <div className="flex flex-wrap mt-3 gap-2">
          {displayTags.map((tag) => (
            <span
              key={tag.id || tag.label}
              className="text-xs px-3 py-1 bg-blue-600 text-white rounded-full"
            >
              ‚úÖ {tag.label}
            </span>
          ))}
          {remainingTags > 0 && (
            <button
              onClick={() => setShowAllTags(true)}
              className="text-xs text-blue-400"
            >
              +{remainingTags} more
            </button>
          )}
        </div>
      )}

      {media?.length > 0 && (
        <div className="flex flex-wrap gap-3 mt-4">
          {media.map((item, idx) => {
            const mediaUrl = item.url?.startsWith("http")
              ? item.url
              : `${process.env.NEXT_PUBLIC_API_BASE_URL || ""}${item.url}`;
            return item.media_type === "video" ? (
              <video
                key={idx}
                src={mediaUrl}
                controls
                onClick={() => openLightbox(idx)}
                className="w-24 h-24 rounded object-cover cursor-pointer"
              />
            ) : (
              <img
                key={idx}
                src={mediaUrl}
                alt={`review-media-${idx}`}
                className="w-24 h-24 object-cover rounded cursor-pointer"
                onClick={() => openLightbox(idx)}
              />
            );
          })}
        </div>
      )}

      {lightboxOpen && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-90 flex items-center justify-center">
          <button onClick={closeLightbox} className="absolute top-4 right-4 text-white text-2xl">
            <FaTimes />
          </button>

<button
  onClick={prev}
  className="absolute left-2 sm:left-4 text-white text-3xl px-3 py-2 bg-black/30 sm:bg-transparent sm:hover:bg-black/40 rounded-full z-50"
>
  <FaChevronLeft />
</button>

          <div className="max-w-[90%] max-h-[80%]">
            {media[activeIndex].media_type === "video" ? (
              <video
                src={
                  media[activeIndex].url?.startsWith("http")
                    ? media[activeIndex].url
                    : `${process.env.NEXT_PUBLIC_API_BASE_URL || ""}${media[activeIndex].url}`
                }
                controls
                autoPlay
                className="max-h-[80vh] rounded"
              />
            ) : (
              <img
                src={
                  media[activeIndex].url?.startsWith("http")
                    ? media[activeIndex].url
                    : `${process.env.NEXT_PUBLIC_API_BASE_URL || ""}${media[activeIndex].url}`
                }
                alt="preview"
                className="max-h-[80vh] rounded object-contain"
              />
            )}
          </div>

<button
  onClick={next}
  className="absolute right-2 sm:right-4 text-white text-3xl px-3 py-2 bg-black/30 sm:bg-transparent sm:hover:bg-black/40 rounded-full z-50"
>
  <FaChevronRight />
</button>
        </div>
      )}

      {editable && (
        <div className="mt-4 text-sm text-orange-400">
          <a
            href={`/write-review/${product?.slug || review.product_slug || product?.id}`}
            className="inline-flex items-center gap-1"
          >
            <FaEdit /> Edit Review
          </a>
          {editUntil && (
            <p
              className={`text-xs mt-1 ${
                isExpiringSoon ? "text-red-400" : "text-gray-400"
              }`}
            >
              üß≠ Editable until {formatDate(editUntil)}
              {isExpiringSoon && " (expires soon!)"}
            </p>
          )}
        </div>
      )}
    </div>
  );
}

===== src/components/new-dashboard/SellerReviewCard.jsx =====
// src/components/new-dashboard/SellerReviewCard.jsx
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { FaStar } from "react-icons/fa";

export default function SellerReviewCard({ review }) {
  const [expanded, setExpanded] = useState(false);
  const [expandedTags, setExpandedTags] = useState(false);

  const tagColor = (tag) => {
    const positive = ["Helpful seller", "Fast delivery", "Polite", "Great communication"];
    const negative = ["Unresponsive", "Rude", "Delayed"];
    if (positive.includes(tag)) return "bg-green-600";
    if (negative.includes(tag)) return "bg-red-600";
    return "bg-gray-600";
  };

  const formatDate = (dateStr) =>
    new Date(dateStr).toLocaleDateString("en-GB", {
      day: "numeric",
      month: "long",
      year: "numeric",
    });

  const reviewText = review.text || review.comment || "";
  const tags = review.tags || [];
  const buyerName = review.reviewer_username || "Anonymous Buyer"; // ‚úÖ updated key
  const productName = review.product_title || review.product_name || "";

  return (
    <div className="bg-gray-900 border border-gray-700 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 p-4">
      <div className="flex flex-col space-y-2">
        {/* Rating & Date */}
        <div className="flex justify-between items-center text-sm text-gray-400">
          <span className="flex items-center gap-1 text-yellow-400 font-semibold">
            <FaStar className="text-yellow-400" /> {review.rating} / 5
          </span>
          <span>{formatDate(review.created_at)}</span>
        </div>

        {/* Product Name */}
        {productName && (
          <p className="text-sm text-blue-400 font-medium">
            üõçÔ∏è {productName}
          </p>
        )}

        {/* Review Text */}
        {reviewText && (
          <div className="text-sm text-white mt-1 leading-relaxed">
            <p className={expanded ? "" : "line-clamp-3"}>
              {reviewText}
            </p>
            {reviewText.length > 100 && (
              <button
                onClick={() => setExpanded(!expanded)}
                className="text-xs text-blue-400 hover:underline mt-1"
              >
                {expanded ? "Show less" : "Read more"}
              </button>
            )}
          </div>
        )}

        {/* Tags */}
        {tags.length > 0 && (
          <div className="mt-2 flex flex-wrap gap-2">
            {(expandedTags ? tags : tags.slice(0, 5)).map((tagObj, idx) => {
              const label = typeof tagObj === "string" ? tagObj : tagObj.label;
              return (
                <span
                  key={idx}
                  className={`${tagColor(label)} text-white text-xs px-3 py-1 rounded-full flex items-center gap-1`}
                >
                  ‚úÖ {label}
                </span>
              );
            })}
            {tags.length > 5 && (
              <button
                onClick={() => setExpandedTags(!expandedTags)}
                className="text-xs text-blue-400 mt-1 hover:underline cursor-pointer"
              >
                {expandedTags ? "Show less tags" : `+${tags.length - 5} more`}
              </button>
            )}
          </div>
        )}

        {/* Reviewer Info */}
        <div className="mt-2 text-xs text-gray-400 italic">
          ‚Äî {buyerName}
        </div>
      </div>
    </div>
  );
}

===== src/components/new-dashboard/SellerReviewList.jsx =====
"use client";

import React, { useEffect, useState } from "react";
import { BASE_API_URL } from '@/app/constants';
import { getCleanToken } from '@/lib/getCleanToken';
import SellerReviewCard from "./SellerReviewCard";

export default function SellerReviewList() {
  const [reviews, setReviews] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [loading, setLoading] = useState(true);
  const [query, setQuery] = useState("");
  const [sortOrder, setSortOrder] = useState("newest");
useEffect(() => {
  const fetchReviews = async () => {
    const token = getCleanToken();
    try {
      const res = await fetch(`${BASE_API_URL}/api/reviews/my-seller-reviews/`, {
        headers: {
          Authorization: `Token ${token}`,
        },
      });

      const data = await res.json();
      console.log("Seller reviews:", data);

      if (Array.isArray(data.results)) {
        setReviews(data.results);
        setFiltered(data.results);
      } else {
        console.warn("Unexpected response structure", data);
        setReviews([]);
        setFiltered([]);
      }
    } catch (err) {
      console.error("Failed to fetch seller reviews:", err);
      setReviews([]);
      setFiltered([]);
    } finally {
      setLoading(false);
    }
  };

  fetchReviews();
}, []);


  useEffect(() => {
    let updated = [...reviews];

    if (query) {
      const q = query.toLowerCase();
      updated = updated.filter((r) =>
        r.text?.toLowerCase().includes(q)
      );
    }

    updated.sort((a, b) => {
      const dateA = new Date(a.created_at);
      const dateB = new Date(b.created_at);
      return sortOrder === "newest" ? dateB - dateA : dateA - dateB;
    });

    setFiltered(updated);
  }, [query, sortOrder, reviews]);

  return (
    <div className="space-y-4">
      {/* Search + Sort */}
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-3 mb-4">
        <input
          type="text"
          placeholder="üîç Search seller reviews..."
          className="w-full md:w-1/2 px-4 py-2 rounded-md border dark:border-gray-700 bg-gray-100 dark:bg-gray-800 text-sm text-gray-800 dark:text-white"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />

        <select
          value={sortOrder}
          onChange={(e) => setSortOrder(e.target.value)}
          className="px-3 py-2 rounded-md border dark:border-gray-700 bg-gray-100 dark:bg-gray-800 text-sm text-gray-800 dark:text-white"
        >
          <option value="newest">Newest First</option>
          <option value="oldest">Oldest First</option>
        </select>
      </div>

      {/* Review List */}
      {loading ? (
        <p className="text-gray-500 text-sm">Loading seller reviews...</p>
      ) : Array.isArray(filtered) && filtered.length === 0 ? (
        <p className="text-gray-500 text-sm italic">No seller reviews found.</p>
      ) : (
        filtered.map((review) => (
          <SellerReviewCard key={review.id} review={review} />
        ))
      )}
    </div>
  );
}

===== src/components/new-dashboard/SellerReviewsPageContent.jsx =====
// src/components/new-dashboard/SellerReviewsPageContent.jsx
"use client";

import React, { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import Link from "next/link";

export default function SellerReviewsCard() {
  const { token } = useAuth();
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!token) return;
    const fetchSellerReviews = async () => {
      try {
        const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/reviews/seller-product-reviews/?limit=5`, {
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const data = await res.json();
        setReviews(data.results || []);
      } catch (error) {
        console.error("Failed to fetch seller reviews", error);
      } finally {
        setLoading(false);
      }
    };

    fetchSellerReviews();
  }, [token]);

  if (loading) {
    return (
      <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700">
        <h2 className="text-sm font-semibold dark:text-gray-400 mb-3">Recent Customer Reviews</h2>
        <p className="text-sm text-gray-500 dark:text-gray-400">Loading...</p>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 p-5 rounded-xl border border-gray-200 dark:border-gray-700 hover:shadow-md">
      <div className="flex justify-between items-center mb-3">
        <h2 className="text-sm font-semibold dark:text-gray-400">Recent Customer Reviews</h2>
        <Link href="/dashboard/reviews" className="text-sm text-blue-600 hover:underline">View All</Link>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full text-sm text-left text-gray-700 dark:text-gray-300">
          <thead className="text-xs uppercase text-gray-400 dark:text-gray-500 border-b border-gray-200 dark:border-gray-700">
            <tr>
              <th className="py-2 pr-4">Product</th>
              <th className="py-2 pr-4">Rating</th>
              <th className="py-2 pr-4">Comment</th>
              <th className="py-2 pr-4">Status</th>
              <th className="py-2">Date</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-100 dark:divide-gray-700">
            {reviews.map((review) => (
              <tr key={review.id}>
                <td className="py-3 pr-4 font-medium">{review.product_title}</td>
                <td className="py-3 pr-4">{"‚≠ê".repeat(review.rating)}</td>
                <td className="py-3 pr-4 italic text-gray-500 dark:text-gray-400">
                  ‚Äú{review.comment.slice(0, 60)}{review.comment.length > 60 ? "‚Ä¶" : ""}‚Äù
                </td>
                <td className="py-3 pr-4">
                  {review.status_label === "Approved" ? (
                    <span className="text-green-600 font-semibold">‚úÖ Approved</span>
                  ) : (
                    <span className="text-yellow-600 font-semibold">‚ùó {review.status_label}</span>
                  )}
                </td>
                <td className="py-3">{new Date(review.created_at).toLocaleDateString()}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

===== src/components/new-dashboard/SellerReviewsSummaryCard.jsx =====
// src/components/new-dashboard/SellerReviewsSummaryCard.jsx
"use client";

import React, { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";

export default function SellerReviewsSummaryCard() {
  const { token } = useAuth();
  const [activeTab, setActiveTab] = useState("product");
  const [productReviews, setProductReviews] = useState([]);
  const [sellerReviews, setSellerReviews] = useState([]);
  const [summary, setSummary] = useState({ avg: 0, count: 0, breakdown: {} });

  useEffect(() => {
    if (!token) return;

    const fetchProductReviews = async () => {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/reviews/my-product-reviews/`, {
        headers: { Authorization: `Token ${token}` }
      });
      const data = await res.json();
      setProductReviews(data.results || []);

      const ratings = data.results?.map(r => r.rating) || [];
      const count = ratings.length;
      const avg = count ? (ratings.reduce((a, b) => a + b, 0) / count) : 0;

      const breakdown = [5, 4, 3, 2, 1].reduce((acc, star) => {
        const percent = Math.round((ratings.filter(r => r === star).length / count) * 100);
        acc[star] = percent || 0;
        return acc;
      }, {});

      setSummary({ avg: avg.toFixed(1), count, breakdown });
    };

    const fetchSellerReviews = async () => {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/reviews/my-seller-reviews/`, {
        headers: { Authorization: `Token ${token}` }
      });
      const data = await res.json();
      setSellerReviews(data.results || []);
    };

    fetchProductReviews();
    fetchSellerReviews();
  }, [token]);

  const displayedReviews = activeTab === "product" ? productReviews : sellerReviews;

  return (
    <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 p-5 rounded-xl shadow-sm transition-all">
      {/* Header */}
      <div className="flex justify-between items-center mb-3">
        <h2 className="text-sm font-semibold text-gray-700 dark:text-gray-200">
          Recent Customer Reviews
        </h2>
        <div className="flex gap-2">
          <button
            onClick={() => setActiveTab("product")}
            className={`text-xs px-3 py-1 rounded-full font-medium ${
              activeTab === "product"
                ? "bg-blue-600 text-white"
                : "bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-200"
            }`}
          >
            Product
          </button>
          <button
            onClick={() => setActiveTab("seller")}
            className={`text-xs px-3 py-1 rounded-full font-medium ${
              activeTab === "seller"
                ? "bg-blue-600 text-white"
                : "bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-200"
            }`}
          >
            Seller
          </button>
        </div>
      </div>

      {/* Summary Breakdown */}
      {activeTab === "product" && (
        <div className="text-sm text-gray-600 dark:text-gray-300 mb-4">
          ‚≠ê <strong>{summary.avg}</strong> from <strong>{summary.count}</strong> reviews
          <div className="mt-2 space-y-1">
            {[5, 4, 3, 2, 1].map((star) => (
              <div key={star} className="flex items-center text-xs gap-2">
                <span className="w-6">{star}‚òÖ</span>
                <div className="flex-1 h-2 rounded bg-gray-200 dark:bg-gray-700 overflow-hidden">
                  <div
                    className="h-full bg-yellow-500 transition-all duration-500"
                    style={{ width: `${summary.breakdown[star] || 0}%` }}
                  ></div>
                </div>
                <span className="w-10 text-right">{summary.breakdown[star] || 0}%</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Review Table */}
      <div className="overflow-x-auto max-h-[280px] scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600">
        <table className="min-w-full text-sm text-left text-gray-700 dark:text-gray-300">
          <thead className="text-xs uppercase text-gray-400 dark:text-gray-500 border-b border-gray-200 dark:border-gray-700">
            <tr>
              <th className="py-2 pr-4">{activeTab === "product" ? "Product" : "Rating"}</th>
              <th className="py-2 pr-4">Comment</th>
              <th className="py-2">Date</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-100 dark:divide-gray-700">
            {displayedReviews.slice(0, 5).map((r) => (
              <tr key={r.id}>
                <td className="py-3 pr-4 font-medium truncate max-w-[160px]">
                  {activeTab === "product" ? r.product_title : `‚≠ê ${r.rating}`}
                </td>
                <td className="py-3 pr-4 text-gray-500 dark:text-gray-400 italic truncate max-w-xs">
                  {r.comment?.slice(0, 100) ?? "No comment"}
                </td>
                <td className="py-3 whitespace-nowrap">
                  {new Date(r.created_at).toLocaleDateString()}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* View All */}
      <div className="text-right mt-3">
        <a
          href="/new-dashboard/seller/reviews"
          className="text-sm text-blue-600 dark:text-blue-400 hover:underline"
        >
          View All ‚Üí
        </a>
      </div>
    </div>
  );
}

===== src/components/new-dashboard/SellerSidebar.jsx =====
// src/components/new-dashboard/SellerSidebar.jsx
"use client";

import React, { useEffect } from "react";
import Link from "next/link";
import clsx from "clsx";
import { useDispatch, useSelector } from "react-redux";
import { usePathname } from "next/navigation";
import { clearToggle } from "@/app/store/slices/toggleSlice";
import RoleSwitcher from "@/components/new-dashboard/RoleSwitcher";
import {
  LayoutDashboard,
  Package,
  ShoppingCart,
  Truck,
  BarChart2,
  Target,
  Store,
  CreditCard,
  BadgeDollarSign,
  Layers,
  User,
  Heart,
  HelpCircle,
  Settings,
  X,
} from "lucide-react";
import { useRoleView } from "@/contexts/RoleViewContext";

const sellerItems = [
  { label: "Seller Dashboard", href: "/new-dashboard", icon: LayoutDashboard },
  { label: "My Products", href: "/new-dashboard/products", icon: Package },
  { label: "My Sales", href: "/new-dashboard/sales", icon: ShoppingCart },
  { label: "Shipping Zones", href: "/shipping/zones", icon: Truck },
  { label: "Analytics", href: "/analytics", icon: BarChart2 },
  { label: "Marketing Tools", href: "/marketing", icon: Target },
  { label: "Store Settings", href: "/store/settings", icon: Store },
  { label: "Payouts", href: "/payouts", icon: BadgeDollarSign },
  { label: "Plan & Add-ons", href: "/plans", icon: Layers },
];

const buyerItems = [
  { label: "Buyer Orders", href: "/orders", icon: ShoppingCart },
  { label: "Saved Items", href: "/wishlist", icon: Heart },
  { label: "BNPL Orders", href: "/bnpl", icon: CreditCard },
  { label: "Profile Settings", href: "/settings/profile", icon: User },
  { label: "Help Center", href: "/help", icon: HelpCircle },
];

export default function SellerSidebar({
  sidebarVisible,
  mobileOpen,
  toggleMobile,
  sidebarRef,
}) {
  const toggle = useSelector((state) => state.toggle.toggle);
  const dispatch = useDispatch();
  const pathname = usePathname();
  const { roleView } = useRoleView();

  useEffect(() => {
    if (toggle) dispatch(clearToggle());
  }, [pathname]);

  const handleClose = () => {
    dispatch(clearToggle());
    if (toggleMobile) toggleMobile(false);
  };

  const navItems = roleView?.includes("seller") ? sellerItems : buyerItems;

  return (
    <aside
      ref={sidebarRef}
      className={clsx(
        `fixed md:static z-40 w-64 h-screen flex flex-col border-r shadow-lg transition-transform duration-300 bg-white dark:bg-[#111827]`,
        {
          "translate-x-0": mobileOpen,
          "-translate-x-full": !mobileOpen,
          "md:translate-x-0": true,
          hidden: !sidebarVisible,
          block: sidebarVisible,
        },
      )}
    >
      {/* Mobile Header */}
      <div className="flex items-center justify-between px-4 pt-4 mb-2 md:hidden">
        <span className="font-bold text-gray-800 dark:text-white">Sidebar</span>
        <button onClick={handleClose}>
          <X className="w-5 h-5 text-gray-700 dark:text-white" />
        </button>
      </div>

      {/* Sidebar Content with footer pinned */}
      <div className="flex flex-col justify-between h-[70%]">
        {/* Scrollable nav */}
        <div className="flex-1 overflow-y-auto px-4">
          <div className="font-semibold mb-4 hidden md:block text-gray-800 dark:text-white">
            Sidebar
          </div>
          <div className="md:hidden mb-4">
            <RoleSwitcher />
          </div>

          <nav className="space-y-2 text-sm text-gray-700 dark:text-gray-200">
            {navItems.map(({ label, href, icon: Icon }) => {
              const isActive =
                pathname === href || pathname.startsWith(href + "/");
              return (
                <Link
                  key={href}
                  href={href}
                  onClick={handleClose}
                  className={clsx(
                    "flex items-center gap-3 px-3 py-2 rounded-md transition-colors",
                    isActive
                      ? "bg-purple-100 text-purple-800 font-semibold dark:bg-purple-900 dark:text-white"
                      : "hover:bg-gray-100 dark:hover:bg-gray-700",
                  )}
                >
                  <Icon className="w-5 h-5" />
                  {label}
                </Link>
              );
            })}
          </nav>
        </div>

        {/* Sticky Footer */}
        <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-4">
          <Link
            href="/new-dashboard/settings"
            onClick={handleClose}
            className="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-white flex items-center gap-2"
          >
            <Settings className="w-4 h-4" />
            Settings
          </Link>
        </div>
      </div>
    </aside>
  );
}


===== src/components/new-dashboard/SeoArticleEditor.jsx =====
"use client";

import React from "react";
import { Editor } from "@tinymce/tinymce-react";

const apiKey = process.env.NEXT_PUBLIC_TINYMCE_API_KEY || "no-api-key";

function buildOutlineTemplate(shop) {
  const shopName = shop?.name || "Your Shop";
  const town = shop?.user?.town || "Your City";
  const country = shop?.user?.country_name || shop?.user?.country || "Your Country";
  const h1 = `Machines in ${country} ‚Äî ${shopName}`;
  const shopUrl = `/shops/${shop?.slug || ""}`;

  return `
<h1>${h1}</h1>
<p><strong>${shopName}</strong> supplies quality machinery to businesses and individuals in ${town}, ${country}. This evergreen guide covers popular categories, selection tips, delivery timelines, after-sales support, and how to buy safely on Upfrica.</p>
<h2>Popular machine categories</h2>
<ul>
  <li><a href="${shopUrl}?category=construction" rel="nofollow">Construction &amp; building</a></li>
  <li><a href="${shopUrl}?category=agriculture" rel="nofollow">Agriculture &amp; agro-processing</a></li>
  <li><a href="${shopUrl}?category=manufacturing" rel="nofollow">Manufacturing &amp; fabrication</a></li>
  <li><a href="${shopUrl}?category=energy" rel="nofollow">Power &amp; energy</a></li>
  <li><a href="${shopUrl}?category=spare-parts" rel="nofollow">Spare parts &amp; accessories</a></li>
</ul>
<h2>How to choose the right machine</h2>
<ul>
  <li>Define the workload (hours/day), capacity and required tolerances.</li>
  <li>Compare power options (single/three phase, diesel, petrol) and fuel/energy costs.</li>
  <li>Check availability of spares, service and warranties.</li>
  <li>Evaluate safety features and operator training needs.</li>
  <li>Consider total cost of ownership, not just the sticker price.</li>
</ul>
<h2>Delivery &amp; installation in ${town}</h2>
<p>Standard delivery is typically <em>1‚Äì5 days</em> within ${town}. Nationwide delivery is available. Installation and commissioning can be arranged on request.</p>
<h2>After-sales support</h2>
<ul>
  <li>Warranty coverage on eligible products.</li>
  <li>Spare parts and scheduled servicing.</li>
  <li>Phone and WhatsApp support for troubleshooting.</li>
</ul>
<h2>Top picks from ${shopName}</h2>
<ul>
  <li><a href="${shopUrl}" rel="nofollow">Browse all products</a> or filter by category from the list above.</li>
</ul>
<h2>How to order on Upfrica</h2>
<ol>
  <li>Open the product page and review specs, price and delivery.</li>
  <li>Click <strong>Add to Basket</strong> or <strong>Buy Now</strong> to checkout.</li>
  <li>Choose delivery address; pay securely online or as offered.</li>
</ol>
<p><strong>Need help?</strong> Contact <a href="${shopUrl}">${shopName}</a> for quotes, bulk orders or custom configurations.</p>
`.trim();
}

export default function SeoArticleEditor({ value, onChange, shop }) {
  return (
    <div className="space-y-2 relative">
      <div className="flex items-center justify-between">
        <label className="block text-sm font-medium">SEO Article</label>
        <button
          type="button"
          className="text-xs px-3 py-1 rounded border hover:bg-gray-50"
          onClick={() => onChange(buildOutlineTemplate(shop))}
          title="Insert a structured evergreen outline"
        >
          Insert outline
        </button>
      </div>

      <Editor
        key={shop?.slug}                 // reset when switching shops
        apiKey={apiKey}
        value={value ?? ""}              // fully controlled
        onEditorChange={(content) => onChange(content)}
        init={{
          height: 520,
          menubar: "file edit view insert format tools table help",
          plugins:
            "autolink lists link anchor table code preview searchreplace wordcount media autoresize",
          toolbar:
            "undo redo | blocks | bold italic underline | bullist numlist | link table blockquote | " +
            "alignleft aligncenter alignright | removeformat | preview code",
          toolbar_mode: "sliding",
          toolbar_sticky: true,
          branding: false,
          convert_urls: false,
          relative_urls: false,
          default_link_target: "_self",
          link_assume_external_targets: "https",
          block_formats:
            "Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Blockquote=blockquote",
          content_style:
            "body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,'Helvetica Neue',Arial,'Noto Sans';line-height:1.65;font-size:16px} h1,h2,h3{margin-top:1.25em} ul,ol{padding-left:1.25em}",
          valid_elements: "*[*]",
        }}
      />

      <p className="text-xs text-gray-500">
        Aim for ~800‚Äì1,800 words. Include an H1 with your main query (e.g. ‚ÄúMachines in Ghana ‚Äî {shop?.name}‚Äù),
        clear H2s, bullet points, and internal links to your shop categories & top products.
      </p>
    </div>
  );
}

===== src/components/new-dashboard/Sidebar.jsx =====
"use client";

import React from "react";
import Link from "next/link";
import clsx from "clsx";
import { Home, Package, ShoppingCart } from "lucide-react";

export default function Sidebar({ isOpen, onClose }) {
  return (
    <>
      {/* ‚ú® Overlay for mobile */}
      <div
        className={clsx(
          "fixed inset-0 z-30 bg-black bg-opacity-40 transition-opacity duration-300 md:hidden",
          isOpen ? "block" : "hidden",
        )}
        onClick={onClose}
      />

      {/* Sidebar */}
      <aside
        className={clsx(
          "fixed top-0 left-0 z-40 h-full w-64 border-r shadow-lg transition-transform duration-300 bg-white dark:bg-[#111827]",
          {
            "translate-x-0": isOpen,
            "-translate-x-full": !isOpen,
            "md:translate-x-0": true,
          },
        )}
      >
        {/* Logo or header */}
        <div className="h-16 flex items-center justify-center border-b border-gray-200 dark:border-gray-700 px-4">
          <span className="text-xl font-bold text-gray-800 dark:text-white tracking-wide">
            Upfrica.com
          </span>
        </div>

        {/* Navigation */}
        <nav className="p-4 space-y-2 text-sm text-gray-700 dark:text-gray-200">
          <Link
            href="/dashboard"
            className="flex items-center gap-3 px-3 py-2 rounded-md transition-colors hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <Home className="w-5 h-5" />
            Dashboard
          </Link>

          <Link
            href="/products"
            className="flex items-center gap-3 px-3 py-2 rounded-md transition-colors hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <Package className="w-5 h-5" />
            Products
          </Link>

          <Link
            href="/orders"
            className="flex items-center gap-3 px-3 py-2 rounded-md transition-colors hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <ShoppingCart className="w-5 h-5" />
            Orders
          </Link>
        </nav>
      </aside>
    </>
  );
}


===== src/components/new-dashboard/TopBar.jsx =====
// src/components/new-dashboard/TopBar.jsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import {
  Menu, Bell, Sun, Moon, ChevronDown, Globe, Settings,
  CheckCircle2, AlertTriangle, Check, PanelLeft, PanelLeftOpen,
} from "lucide-react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import useTheme from "@/hooks/useTheme";
import { useAuth } from "@/contexts/AuthContext";
import { useRoleView } from "@/contexts/RoleViewContext";
import RoleSwitcher from "@/components/new-dashboard/RoleSwitcher";

export default function TopBar({ toggleMobileSidebar, toggleDesktopSidebar, sidebarVisible }) {
  const router = useRouter();
  const { theme, setTheme } = useTheme();
  const { user, hydrated } = useAuth();
  const { roleView, roles } = useRoleView() || { roles: [] };

  // üîí Never fully hide the bar ‚Äî just render lighter while data hydrates
  const safeRoles = Array.isArray(roles) ? roles : [];
  const ready = Boolean(hydrated && user);

  const [themeDropdown, setThemeDropdown] = useState(false);
  const [langDropdown, setLangDropdown] = useState(false);
  const [notifDropdown, setNotifDropdown] = useState(false);
  const [profileDropdown, setProfileDropdown] = useState(false);
  const dropdownRef = useRef(null);

  const toggle = (setter) => setter((p) => !p);
  const closeAll = () => {
    setThemeDropdown(false);
    setLangDropdown(false);
    setNotifDropdown(false);
    setProfileDropdown(false);
  };

  useEffect(() => {
    const handleOutside = (e) => {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
        closeAll();
      }
    };
    document.addEventListener("mousedown", handleOutside);
    return () => document.removeEventListener("mousedown", handleOutside);
  }, []);

  const notifications = [
    { id: 1, type: "info", message: "You have 2 new orders." },
    { id: 2, type: "success", message: "Product uploaded successfully!" },
    { id: 3, type: "warning", message: "Low stock on 5 products." },
  ];

  const logoSrc =
    theme === "dark"
      ? "https://upfrica-production.s3.eu-west-2.amazonaws.com/upfrica-com-logo-white_170x.webp"
      : "https://d26ukeum83vx3b.cloudfront.net/assets/upfrica-com-logo-dark_170x-94d438d62a4c6b2c2c70fe1084c008f4584357ed2847dac5fc38818a0de6459d.webp";

  return (
    <header className="sticky top-0 z-50 w-full bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 shadow-upfrica px-4 py-2">
      <div className="flex justify-between items-center w-full">
        {/* Left */}
        <div className="flex items-center gap-3">
          <button
            className="md:hidden inline-flex items-center p-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded"
            onClick={() => toggleMobileSidebar(true)}
            aria-label="Open mobile sidebar"
          >
            <Menu className="w-5 h-5" />
          </button>

          <button
            onClick={toggleDesktopSidebar}
            className="hidden md:flex items-center gap-1 px-2 py-1 text-sm rounded-md border bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300"
            aria-label="Toggle desktop sidebar"
          >
            {sidebarVisible ? <PanelLeftOpen className="w-5 h-5" /> : <PanelLeft className="w-5 h-5" />}
          </button>

          <Link href="/">
            <img src={logoSrc} alt="Upfrica Logo" className="w-[80px] md:w-[100px] h-auto" />
          </Link>
        </div>

        {/* Center: Search */}
        <form className="hidden md:flex items-center bg-gray-100 dark:bg-gray-800 rounded px-3 py-1 w-full max-w-md mx-4">
          <input
            type="text"
            placeholder="Search..."
            className="bg-transparent text-sm outline-none w-full text-gray-800 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400"
          />
        </form>

        {/* Right */}
        <div className="flex items-center gap-3 relative text-gray-700 dark:text-gray-200" ref={dropdownRef}>
          {/* Role Switcher (only when roles loaded) */}
<div className="hidden md:flex items-center gap-3">
<RoleSwitcher />
</div>

          {/* Theme */}
          <div className="relative">
            <button onClick={() => toggle(setThemeDropdown)} className="p-1" aria-label="Theme">
              {theme === "dark" ? <Moon className="w-5 h-5" /> : <Sun className="w-5 h-5" />}
            </button>
            {themeDropdown && (
              <div className="absolute right-0 mt-2 w-40 bg-white dark:bg-gray-800 border rounded shadow z-50">
                {["dark", "light", "system"].map((mode) => (
                  <button
                    key={mode}
                    onClick={() => setTheme(mode)}
                    className="w-full flex justify-between items-center px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 text-sm"
                  >
                    <span className="flex items-center gap-2">
                      {mode === "dark" && <Moon className="w-4 h-4" />}
                      {mode === "light" && <Sun className="w-4 h-4" />}
                      {mode === "system" && <span className="text-lg">üñ•Ô∏è</span>}
                      {mode.charAt(0).toUpperCase() + mode.slice(1)}
                    </span>
                    {theme === mode && <Check className="w-4 h-4 text-green-500" />}
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Language */}
          <div className="relative">
            <button onClick={() => toggle(setLangDropdown)} className="p-1" aria-label="Language">
              <Globe className="w-5 h-5" />
            </button>
            {langDropdown && (
              <div className="absolute right-0 mt-2 w-40 bg-white dark:bg-gray-800 border rounded shadow z-50">
                <button className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700">
                  English (UK)
                </button>
                <button className="w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700">
                  Fran√ßais (FR)
                </button>
              </div>
            )}
          </div>

          {/* Notifications */}
          <div className="relative">
            <button onClick={() => toggle(setNotifDropdown)} className="p-1 relative" aria-label="Notifications">
              <Bell className="w-5 h-5" />
              {!!notifications.length && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs w-4 h-4 rounded-full flex items-center justify-center">
                  {notifications.length}
                </span>
              )}
            </button>
            {notifDropdown && (
              <div className="absolute right-0 mt-2 w-72 max-h-80 bg-white dark:bg-gray-800 border rounded shadow z-50 flex flex-col">
                <div className="px-3 py-2 font-semibold text-sm border-b">Notifications</div>
                <div className="flex-1 overflow-auto">
                  {notifications.map((n) => (
                    <div key={n.id} className="flex items-start gap-2 px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700">
                      {n.type === "success" && <CheckCircle2 className="w-4 h-4 text-green-500 mt-1" />}
                      {n.type === "warning" && <AlertTriangle className="w-4 h-4 text-yellow-500 mt-1" />}
                      {n.type === "info" && <Bell className="w-4 h-4 text-blue-500 mt-1" />}
                      <span>{n.message}</span>
                    </div>
                  ))}
                </div>
                <div onClick={() => router.push("/notifications")} className="px-3 py-2 text-xs text-brand hover:underline cursor-pointer border-t">
                  View all notifications ‚Üí
                </div>
              </div>
            )}
          </div>

          {/* Settings */}
          <button className="p-1" onClick={() => router.push("/settings")} aria-label="Settings">
            <Settings className="w-5 h-5" />
          </button>

          {/* Profile (only show initials when ready) */}
          <div className="relative">
            <button onClick={() => toggle(setProfileDropdown)} className="flex items-center gap-1 p-1 hover:scale-105 transition-transform">
              <div className="w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 text-sm font-bold flex items-center justify-center text-gray-800 dark:text-white">
                {ready ? (user?.first_name?.[0] || "U") + (user?.last_name?.[0] || "") : "‚Ä¶"}
              </div>
              <ChevronDown className="w-4 h-4 hidden md:block" />
            </button>

            {profileDropdown && ready && (
              <div className="absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 border rounded shadow z-50">
                <div className="px-3 py-2 border-b">
                  <p className="text-sm font-semibold">
                    {user?.first_name || "User"} {user?.last_name || ""}
                  </p>
                  <p className="text-xs text-gray-500">{user?.email || ""}</p>
                </div>

                <button onClick={() => router.push("/profile")} className="w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700">
                  Profile
                </button>

                {/* Quick switches */}
                {safeRoles.includes("buyer") && (
                  <button
                    onClick={() => {
                      localStorage.setItem("roleView", "buyer");
                      setProfileDropdown(false);
                      router.push("/new-dashboard/buyer");
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700"
                  >
                    Switch to Buyer
                  </button>
                )}
                {(safeRoles.includes("seller_private") || safeRoles.includes("seller_business")) && (
                  <button
                    onClick={() => {
                      localStorage.setItem("roleView", "seller");
                      setProfileDropdown(false);
                      router.push("/new-dashboard/seller");
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700"
                  >
                    Switch to Seller
                  </button>
                )}
                {safeRoles.includes("agent") && (
                  <button
                    onClick={() => {
                      localStorage.setItem("roleView", "agent");
                      setProfileDropdown(false);
                      router.push("/new-dashboard/agent");
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700"
                  >
                    Switch to Agent
                  </button>
                )}
                {safeRoles.includes("affiliate") && (
                  <button
                    onClick={() => {
                      localStorage.setItem("roleView", "affiliate");
                      setProfileDropdown(false);
                      router.push("/new-dashboard/affiliate");
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700"
                  >
                    Switch to Affiliate
                  </button>
                )}

                <button onClick={() => router.push("/logout")} className="w-full text-left px-3 py-2 text-red-500 hover:bg-red-50 dark:hover:bg-gray-700">
                  Logout
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
}

===== src/components/new-dashboard/page.jsx =====
"use client";
import React from "react";
import { useSelector } from "react-redux";
import clsx from "clsx";
import DashbordSearchBar from "../dashboard/DashbordSearchBar";

const Dashboard = () => {
  const toggle = useSelector((state) => state.toggle.toggle);
  return (
    <div
      // className={clsx(
      //     "transition-all duration-500 ease-in-out h-full bg-white shadow-md overflow-hidden  ",
      //     "fixed top-0 left-0 z-50",
      //     "xl:relative xl:z-auto",
      //     toggle ? "w-64 opacity-100 shrink-0" : "w-0 opacity-0",
      //     " xl:opacity-100 xl:translate-x-0"
      // )}

      className={clsx(
        // fixed to viewport, full-screen height, allow vertical scroll
        "fixed top-0 left-0 z-50 h-screen overflow-y-auto bg-upfricaGray1 shadow-md transition-all duration-500 ease-in-out",
        // ensure always visible & positioned correctly on xl+
        "xl:relative xl:z-auto xl:opacity-100 xl:translate-x-0",
        // width & opacity based on toggle state
        toggle ? "w-64 opacity-100 shrink-0" : "w-0 opacity-0",
      )}
    >
      <DashbordSearchBar />
    </div>
  );
};

export default Dashboard;


===== src/components/new-dashboard/products/AddProductForm.jsx =====


===== src/components/new-dashboard/products/EditProductForm.jsx =====


===== src/components/new-dashboard/products/ProductDashboard.jsx =====
"use client";
import React from "react";
import Link from "next/link";
import { BadgeCheck, Clock, XCircle } from "lucide-react";

const dummyProducts = [
  {
    id: 1,
    title: "iPhone 13 Pro Max - 256GB",
    price_cents: 679900,
    status: 1,
    image: "/dummy/iphone.jpg",
  },
  {
    id: 2,
    title: 'Samsung Smart TV 55"',
    price_cents: 299999,
    status: 0,
    image: "/dummy/tv.jpg",
  },
  {
    id: 3,
    title: "Office Chair Ergonomic Mesh",
    price_cents: 14999,
    status: 2,
    image: "/dummy/chair.jpg",
  },
];

export default function ProductDashboard() {
  return (
    <div className="max-w-7xl mx-auto text-gray-800 dark:text-white">
      <h2 className="text-xl font-semibold mb-4">My Products</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
        {dummyProducts.map((product) => (
          <div
            key={product.id}
            className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl shadow-md p-4 hover:shadow-lg dark:hover:shadow-[0_6px_30px_rgba(0,0,0,0.5)] transition duration-300"
          >
            <img
              src={product.image}
              alt={product.title}
              className="w-full h-40 object-cover rounded-md mb-3"
            />
            <h3 className="text-lg font-semibold mb-1">{product.title}</h3>
            <p className="text-gray-500 dark:text-gray-400 text-sm mb-2">
              ‚Çµ{(product.price_cents / 100).toLocaleString()}
            </p>
            <StatusBadge status={product.status} />

            <Link
              href={`/new-dashboard/edit-product/${product.id}`}
              className="inline-block mt-3 text-sm text-blue-600 dark:text-blue-400 hover:underline"
            >
              Edit Product
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
}

function StatusBadge({ status }) {
  const config = {
    0: {
      label: "Draft",
      color: "bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300",
      icon: <Clock className="w-4 h-4 mr-1" />,
    },
    1: {
      label: "Published",
      color:
        "bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-300",
      icon: <BadgeCheck className="w-4 h-4 mr-1" />,
    },
    2: {
      label: "Rejected",
      color: "bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-300",
      icon: <XCircle className="w-4 h-4 mr-1" />,
    },
  };

  const { label, color, icon } = config[status] || config[0];

  return (
    <span
      className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-medium ${color}`}
    >
      {icon}
      {label}
    </span>
  );
}


===== src/components/new-dashboard/products/ProductListCards.jsx =====
"use client";

import { Eye, CheckCircle, Trash2, Pencil, MoreVertical } from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";

export default function ProductListCards() {
  const { token } = useAuth();
  const [products, setProducts] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!token) return;

    const fetchProducts = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/products/mine/`, {
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch products");
        const data = await res.json();
        setProducts(data.results || []);
      } catch (err) {
        console.error("‚ùå Product fetch error:", err);
        setError("Failed to load products.");
      }
    };

    fetchProducts();
  }, [token]);

  if (error) {
    return <p className="text-red-500 text-center mt-4">{error}</p>;
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6">
      {products.map((p) => (
        <div
          key={p.id}
          className="bg-white dark:bg-gray-800 rounded-2xl shadow-md overflow-hidden flex flex-col"
        >
          <div className="p-4 flex items-start gap-4">
            <Link
              href={p.frontend_url || `/product/${p.slug}`}
              className="w-20 h-20 relative flex-shrink-0 rounded overflow-hidden block"
            >
              <Image
                src={
                  p.thumbnail ||
                  p.image_objects?.[0]?.image_url ||
                  p.image_objects?.[0]?.url ||
                  "/placeholder.png"
                }
                alt={p.title}
                fill
                className="object-cover"
              />
            </Link>

            <div className="flex-1 space-y-1 overflow-hidden">
              <Link href={p.frontend_url || `/product/${p.slug}`}>
                <h3 className="font-semibold text-base text-gray-900 dark:text-white line-clamp-3 hover:underline">
                  {p.title}
                </h3>
              </Link>

              <div className="text-sm text-green-600 font-medium flex items-center gap-1">
                <CheckCircle className="w-4 h-4" />
                {p.status || "Approved"}
              </div>

              <div className="text-sm text-gray-600 dark:text-gray-300 flex items-center gap-1">
                <Eye className="w-4 h-4" />
                {p.visibility || "Published"}
              </div>

              <div className="text-sm text-emerald-700 dark:text-emerald-400">
                In Stock ({p.stock_quantity ?? 1})
              </div>
            </div>
          </div>

          <div className="flex items-center justify-between px-4 pb-4 mt-auto">
            <div>
              <div className="text-black dark:text-white font-bold text-lg">
                ${parseFloat(p.price || 0).toFixed(2)}
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400 flex items-center gap-1">
                <Eye className="w-3 h-3" />
                {p.views ?? 0}
              </div>
            </div>

            <div className="flex gap-2">
              <button
                className="p-1.5 rounded-md border hover:bg-gray-100 dark:hover:bg-gray-700"
                title="Edit"
              >
                <Pencil className="w-4 h-4" />
              </button>
              <button
                className="p-1.5 rounded-md border hover:bg-red-100 dark:hover:bg-red-800"
                title="Delete"
              >
                <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
              </button>
              <button
                className="p-1.5 rounded-md border hover:bg-gray-100 dark:hover:bg-gray-700"
                title="More"
              >
                <MoreVertical className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}


===== src/components/new-dashboard/products/ProductListCardstheme.jsx =====


===== src/components/new-dashboard/products/ProductListResponsive.jsx =====
// src/components/new-dashboard/products/ProductListResponsive.jsx
"use client";

import { useEffect, useState } from "react";
import ProductListTable from "./ProductListTable";
import ProductListCards from "./ProductListCards";

export default function ProductListResponsive() {
  const [isMobile, setIsMobile] = useState(false);
  const [manualOverride, setManualOverride] = useState(null); // null, 'table', or 'card'

  const handleResize = () => {
    setIsMobile(window.innerWidth <= 768);
  };

  useEffect(() => {
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const showTableView = manualOverride ? manualOverride === "table" : !isMobile;

  const toggleView = () => {
    setManualOverride((prev) => (prev === "table" ? "card" : "table"));
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-end">
        <button
          onClick={toggleView}
          className="text-sm bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-100 px-3 py-1 rounded"
        >
          {showTableView ? "üîÅ Switch to Card View" : "üîÅ Switch to Table View"}
        </button>
      </div>
      {showTableView ? <ProductListTable /> : <ProductListCards />}
    </div>
  );
}


===== src/components/new-dashboard/products/ProductListTable.jsx =====
"use client";

import React, { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";
import Image from "next/image";
import Link from "next/link";
import {
  Eye,
  CheckCircle,
  Trash2,
  Pencil,
  ChevronDown,
  ChevronUp,
} from "lucide-react";

export default function ProductListTable() {
  const { token } = useAuth();
  const [products, setProducts] = useState([]);
  const [expandedRows, setExpandedRows] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);

  const fetchProducts = async (pageNum = 1) => {
    if (!token || !hasMore) return;

    setLoading(true);
    try {
      const res = await fetch(
        `${BASE_API_URL}/api/products/mine/?page=${pageNum}`,
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
        },
      );

      if (!res.ok) throw new Error("Failed to fetch products");
      const data = await res.json();

      setProducts((prev) => [...prev, ...data.results]);
      setHasMore(data.next !== null);
    } catch (err) {
      console.error(err);
      setError("Failed to load products.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts(page);
  }, [token]);

  const handleLoadMore = () => {
    const nextPage = page + 1;
    setPage(nextPage);
    fetchProducts(nextPage);
  };

  const toggleRow = (id) => {
    setExpandedRows((prev) =>
      prev.includes(id) ? prev.filter((r) => r !== id) : [...prev, id],
    );
  };

  if (error) return <p className="text-center text-red-500">{error}</p>;

  return (
    <div className="bg-white dark:bg-gray-800 rounded-2xl shadow p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold text-gray-800 dark:text-white">
          My Product Listings
        </h2>
        <button className="bg-black text-white px-4 py-2 rounded-lg hover:bg-gray-900 transition">
          + Add Product
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full text-sm text-left text-gray-700 dark:text-gray-200">
          <thead className="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-100 text-sm font-semibold">
            <tr>
              <th className="p-3">Image</th>
              <th className="p-3">Title</th>
              <th className="p-3">Status</th>
              <th className="p-3">Visibility</th>
              <th className="p-3">Availability</th>
              <th className="p-3">Price</th>
              <th className="p-3">Views</th>
              <th className="p-3">Actions</th>
            </tr>
          </thead>
          <tbody>
            {products.map((p) => (
              <React.Fragment key={p.id}>
                <tr className="border-t border-gray-200 dark:border-gray-700">
                  <td className="p-3">
                    <Link
                      href={p.frontend_url || `/product/${p.slug}`}
                      className="block w-fit"
                    >
                      <Image
                        src={
                          p.thumbnail ||
                          p.image_objects?.[0]?.image_url ||
                          p.image_objects?.[0]?.url ||
                          "/placeholder.png"
                        }
                        alt={p.title}
                        width={50}
                        height={50}
                        className="rounded object-cover"
                      />
                    </Link>
                  </td>
                  <td className="p-3 font-medium text-gray-800 dark:text-white">
                    <Link href={p.frontend_url || `/product/${p.slug}`}>
                      <span className="hover:underline">{p.title}</span>
                    </Link>
                  </td>
                  <td className="p-3">
                    <span className="flex items-center gap-1 text-green-600 font-semibold">
                      <CheckCircle className="w-4 h-4" />
                      {p.status || "Approved"}
                    </span>
                  </td>
                  <td className="p-3">
                    <span className="flex items-center gap-1 text-green-600">
                      <Eye className="w-4 h-4" />
                      {p.visibility || "Published"}
                    </span>
                  </td>
                  <td className="p-3 text-green-600 font-semibold whitespace-nowrap">
                    In Stock ({p.stock_quantity || 1})
                  </td>
                  <td className="p-3 font-bold text-black dark:text-white whitespace-nowrap">
                    ${p.price?.toFixed(2) || "0.00"}
                  </td>
                  <td className="p-3 text-center">
                    <span className="flex items-center gap-1">
                      <Eye className="w-4 h-4" />
                      {p.views || 0}
                    </span>
                  </td>
                  <td className="p-3">
                    <div className="flex items-center gap-2">
                      <button
                        className="p-1 rounded border hover:bg-gray-100 dark:hover:bg-gray-700"
                        title="Edit"
                      >
                        <Pencil className="w-4 h-4" />
                      </button>
                      <button
                        className="p-1 rounded border hover:bg-red-100 dark:hover:bg-red-800"
                        title="Delete"
                      >
                        <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                      </button>
                      <button
                        onClick={() => toggleRow(p.id)}
                        title="Toggle Details"
                      >
                        {expandedRows.includes(p.id) ? (
                          <ChevronUp className="w-4 h-4" />
                        ) : (
                          <ChevronDown className="w-4 h-4" />
                        )}
                      </button>
                    </div>
                  </td>
                </tr>
                {expandedRows.includes(p.id) && (
                  <tr className="bg-gray-50 dark:bg-gray-900 text-xs text-gray-500 dark:text-gray-400">
                    <td colSpan="8" className="p-3 space-x-6">
                      <span className="font-semibold text-gray-700 dark:text-gray-300">
                        Date Added:
                      </span>{" "}
                      {p.created_at || "‚Äî"}
                      <span className="font-semibold text-gray-700 dark:text-gray-300">
                        Last Updated:
                      </span>{" "}
                      {p.updated_at || "‚Äî"}
                      <span className="font-semibold text-gray-700 dark:text-gray-300">
                        Product ID:
                      </span>{" "}
                      #{p.id}
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>

      {loading && (
        <p className="text-center mt-4 text-gray-400 dark:text-gray-500">
          Loading more products...
        </p>
      )}

      {hasMore && !loading && (
        <div className="text-center mt-6">
          <button
            onClick={handleLoadMore}
            className="bg-gray-900 text-white px-5 py-2 rounded-lg hover:bg-black"
          >
            Load More
          </button>
        </div>
      )}
    </div>
  );
}


===== src/components/new-dashboard/products/ProductListTabletheme.jsx =====


===== src/components/new-dashboard/products/ProductSummaryPills.jsx =====
// src/components/new-dashboard/products/ProductListTable.jsx
"use client";

import { useEffect, useMemo, useState } from "react";
import {
  Eye,
  AlertTriangle,
  CheckCircle,
  EyeOff,
  PackageSearch,
  DollarSign,
  Star,
} from "lucide-react";
import classNames from "classnames";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";

export default function ProductSummaryPills({ onSelect, activeKey }) {
  const { token } = useAuth();
  const [products, setProducts] = useState([]);
  const [monthlyViews, setMonthlyViews] = useState(0);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchProducts = async () => {
      if (!token) return;

      try {
        const res = await fetch(`${BASE_API_URL}/api/products/mine/`, {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${token}`,
          },
        });

        if (!res.ok) throw new Error("Failed to fetch products");
        const data = await res.json();
        setProducts(data);
      } catch (err) {
        console.error("‚ùå Failed to load products:", err);
        setError("Failed to load products");
      }
    };

    fetchProducts();
  }, [token]);

  const summary = useMemo(() => {
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    const productList = products?.results || [];

    const approved = productList.filter((p) => p.status === "active");
    const drafts = productList.filter((p) => !p.is_published);
    const outOfStock = productList.filter((p) => p.quantity === 0);
    const lowStock = productList.filter(
      (p) => p.quantity > 0 && p.quantity < 5,
    );

    const needsAttention = productList.filter(
      (p) =>
        p.status !== "active" ||
        !p.is_published ||
        p.quantity === 0 ||
        !p.image_objects?.length ||
        !p.price ||
        !p.category ||
        p.category.slug === "uncategorized",
    );

    const viewsThisMonth = productList.reduce((sum, p) => {
      const updatedAt = new Date(p.updated_at);
      return updatedAt >= startOfMonth ? sum + (p.views || 0) : sum;
    }, 0);

    const avgPrice = productList.length
      ? (
          productList.reduce((sum, p) => sum + parseFloat(p.price || 0), 0) /
          productList.length
        ).toFixed(2)
      : "0.00";

    setMonthlyViews(viewsThisMonth);

    return {
      total: productList.length,
      approved: approved.length,
      draft: drafts.length,
      out_of_stock: outOfStock.length,
      low_stock: lowStock.length,
      needs_attention: needsAttention.length,
      average_price: avgPrice,
    };
  }, [products]);

  const items = [
    {
      label: "Total Products",
      key: null,
      value: summary.total,
      icon: PackageSearch,
    },
    {
      label: "Approved",
      key: "approved",
      value: summary.approved,
      icon: CheckCircle,
    },
    { label: "Drafts", key: "draft", value: summary.draft, icon: EyeOff },
    {
      label: "Out of Stock",
      key: "out_of_stock",
      value: summary.out_of_stock,
      icon: AlertTriangle,
    },
    {
      label: "Low Stock",
      key: "low_stock",
      value: summary.low_stock,
      icon: Star,
    },
    { label: "Views This Month", key: null, value: monthlyViews, icon: Eye },
    {
      label: "Needs Attention",
      key: "needs_attention",
      value: summary.needs_attention,
      icon: AlertTriangle,
    },
    {
      label: "Avg Price",
      key: null,
      value: `$${summary.average_price}`,
      icon: DollarSign,
    },
  ];

  if (error) {
    return <p className="text-center text-red-500 py-4">{error}</p>;
  }

  return (
    <div className="flex overflow-x-auto gap-3 py-4 scrollbar-hide">
      {items.map((item) => {
        const isActive = item.key && item.key === activeKey;
        const isClickable = !!item.key;

        return (
          <button
            key={item.label}
            onClick={() => isClickable && onSelect?.(item.key)}
            className={classNames(
              "flex flex-col justify-center items-center min-w-[120px] px-4 py-2 rounded-3xl border text-sm shadow-sm",
              {
                "bg-purple-100 text-purple-800 border-purple-300": isActive,
                "bg-white dark:bg-gray-900 text-gray-700 border-gray-200 hover:bg-gray-50 dark:hover:bg-gray-800":
                  !isActive && isClickable,
                "cursor-default text-gray-400": !isClickable,
              },
            )}
          >
            <item.icon className="w-4 h-4 mb-1" />
            <span className="text-[13px] font-medium text-center leading-snug">
              {item.label}
            </span>
            <span className="text-lg font-bold mt-0.5">{item.value}</span>
          </button>
        );
      })}
    </div>
  );
}


===== src/components/new-dashboard/settings/FAQs.jsx =====
"use client";

import React, { useCallback, useEffect, useMemo, useState } from "react";
import { BASE_API_URL } from "@/app/constants";
import { getCleanToken } from "@/lib/getCleanToken";

const normalize = (arr) =>
  (Array.isArray(arr) ? arr : [])
    .map((f) => ({
      id: f.id || crypto.randomUUID?.() || Math.random().toString(36).slice(2),
      question: String(f?.question ?? "").trim(),
      answer: String(f?.answer ?? "").trim(),
    }))
    .filter((f) => f.question && f.answer);

export default function FAQsEditor({ slug: slugProp }) {
  const [slug, setSlug] = useState(slugProp || "");
  const [faqs, setFaqs] = useState([{ id: "tmp-1", question: "", answer: "" }]);
  const [baseline, setBaseline] = useState([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [savedAt, setSavedAt] = useState(null);
  const [error, setError] = useState(null);
  const [locked, setLocked] = useState(false);

  // derive dirty flag
  const dirty = useMemo(
    () => JSON.stringify(normalize(faqs)) !== JSON.stringify(normalize(baseline)),
    [faqs, baseline]
  );

  // resolve slug if not provided
  useEffect(() => {
    if (slugProp) return;
    const token = getCleanToken();
    if (!token) return;
    (async () => {
      try {
        const r = await fetch(`${BASE_API_URL}/api/shops/me/`, {
          headers: { Authorization: `Token ${token}` },
          cache: "no-store",
        });
        if (r.ok) {
          const data = await r.json();
          setSlug(data.slug);
        }
      } catch {}
    })();
  }, [slugProp]);

  const fetchFaqs = useCallback(async () => {
    if (!slug) return;
    setLoading(true);
    setError(null);
    try {
      const r = await fetch(
        `${BASE_API_URL}/api/shops/${encodeURIComponent(slug)}/faqs/?_=${Date.now()}`,
        { cache: "no-store" }
      );
      if (!r.ok) throw new Error(`Failed to load (HTTP ${r.status})`);
      const data = await r.json();
      const clean = normalize(data.faqs);
      setFaqs(clean.length ? clean : [{ id: "tmp-1", question: "", answer: "" }]);
      setBaseline(clean);
    } catch (e) {
      setError(e.message || "Failed to load FAQs");
    } finally {
      setLoading(false);
    }
  }, [slug]);

  useEffect(() => {
    fetchFaqs();
  }, [fetchFaqs]);

  const addFaq = () =>
    setFaqs((list) => [...list, { id: crypto.randomUUID?.() || Math.random().toString(36).slice(2), question: "", answer: "" }]);

  const removeFaq = (id) =>
    setFaqs((list) => (list.length > 1 ? list.filter((f) => f.id !== id) : list));

  const updateFaq = (id, patch) =>
    setFaqs((list) => list.map((f) => (f.id === id ? { ...f, ...patch } : f)));

  const handleSave = async () => {
    if (!slug || saving) return;
    setSaving(true);
    setError(null);
    setLocked(false);
    const token = getCleanToken();
    try {
      const r = await fetch(`${BASE_API_URL}/api/shops/${encodeURIComponent(slug)}/faqs/`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          ...(token ? { Authorization: `Token ${token}` } : {}),
        },
        body: JSON.stringify({ faqs: normalize(faqs) }),
      });

      if (r.status === 401) throw new Error("Please sign in again.");
      if (r.status === 403) {
        setLocked(true);
        throw new Error("Your plan doesn‚Äôt include FAQ editing.");
      }
      if (!r.ok) throw new Error(`Save failed (HTTP ${r.status})`);

      // 1) optimistic: set from response
      const data = await r.json();
      const clean = normalize(data.faqs);
      setFaqs(clean.length ? clean : [{ id: "tmp-1", question: "", answer: "" }]);
      setBaseline(clean);
      setSavedAt(new Date());

      // 2) confirm by refetch (ensures we‚Äôre showing what backend will render)
      await fetchFaqs();
    } catch (e) {
      setError(e.message || "Failed to save FAQs");
    } finally {
      setSaving(false);
    }
  };

  return (
    <section className="mt-10">
      <h2 className="text-xl font-semibold mb-1">FAQs</h2>
      <p className="text-sm text-gray-500 mb-4">
        Add question‚Äìanswer pairs that help customers and improve your shop SEO.
      </p>

      {locked && (
        <div className="mb-4 rounded-md border border-amber-300 bg-amber-50 px-3 py-2 text-sm text-amber-800">
          FAQ editing is locked for your plan. Upgrade to enable it.
        </div>
      )}

      {error && (
        <div className="mb-4 rounded-md border border-red-300 bg-red-50 px-3 py-2 text-sm text-red-700">
          {error}
        </div>
      )}

      <div className="rounded-lg border border-gray-200 bg-white p-4 space-y-6">
        {loading ? (
          <div className="text-gray-500">Loading FAQs‚Ä¶</div>
        ) : (
          faqs.map((f) => (
            <div key={f.id} className="space-y-2">
              <label className="block text-sm font-medium">Question</label>
              <input
                className="w-full rounded-md border px-3 py-2"
                value={f.question}
                onChange={(e) => updateFaq(f.id, { question: e.target.value })}
                placeholder="e.g., Do you give any discounts?"
              />
              <label className="block text-sm font-medium mt-2">Answer</label>
              <textarea
                className="w-full rounded-md border px-3 py-2 min-h-[110px]"
                value={f.answer}
                onChange={(e) => updateFaq(f.id, { answer: e.target.value })}
                placeholder="Your short, helpful answer‚Ä¶"
              />
              <button
                type="button"
                onClick={() => removeFaq(f.id)}
                className="text-sm text-red-600 hover:underline"
              >
                Remove
              </button>
              <hr className="my-4" />
            </div>
          ))
        )}

        <div className="flex items-center justify-between">
          <button
            type="button"
            onClick={addFaq}
            className="text-blue-600 hover:underline text-sm"
          >
            + Add FAQ
          </button>

          <div className="flex items-center gap-3">
            {savedAt && !dirty && (
              <span className="text-sm text-green-600">Saved {savedAt.toLocaleTimeString()}</span>
            )}
            <button
              type="button"
              onClick={handleSave}
              disabled={saving || !dirty || locked}
              className={`px-4 py-2 rounded-md text-white ${
                saving || !dirty || locked ? "bg-violet-400" : "bg-violet-700 hover:bg-violet-800"
              }`}
            >
              {saving ? "Saving‚Ä¶" : "Save FAQs"}
            </button>
          </div>
        </div>
      </div>
    </section>
  );
}

===== src/components/new-dashboard/settings/PayoutSettings.jsx =====
"use client";

import { useEffect, useState } from "react";
import { toast } from "sonner";
import classNames from "classnames";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";
import { getCleanToken } from "@/lib/getCleanToken";

export default function PayoutSettings() {
  const { user, token: rawToken, refreshUser } = useAuth();
  const token = getCleanToken(rawToken);

  const [loading, setLoading] = useState(true);
  const [formLocked, setFormLocked] = useState(false);
  const [method, setMethod] = useState("bank");
  const [accountName, setAccountName] = useState("");
  const [accountNumber, setAccountNumber] = useState("");
  // store the code we will SEND to Paystack
  const [bankCode, setBankCode] = useState("");
  // store a separate display code (ghipss) for UI only
  const [bankDisplayCode, setBankDisplayCode] = useState("");
  const [network, setNetwork] = useState("");
  const [accountValidated, setAccountValidated] = useState(false);
  const [maskedAccount, setMaskedAccount] = useState("");
  const [bankList, setBankList] = useState([]);
  const [momoList, setMomoList] = useState([]);
  const [savedPayout, setSavedPayout] = useState(null);

  // ‚úÖ NEW: Load allowed payout methods from API
  const [allowedMethods, setAllowedMethods] = useState(["bank", "momo"]);

  useEffect(() => {
    if (!token) return;
    fetch(`${BASE_API_URL}/api/users/me/payout-methods/`, {
      headers: { Authorization: `Token ${token}` },
    })
      .then((res) => res.json())
      .then((data) => {
        setAllowedMethods(data.available_methods || ["bank"]);
      })
      .catch(() => {
        toast.warning("Could not fetch payout methods. Defaulting to bank.");
      });
  }, [token]);

  // Load banks/momo + existing payout
  useEffect(() => {
    if (!token) return;

    const fetchInitialData = async () => {
      try {
        // üè¶ Load banks and MoMo networks
        const banksRes = await fetch(`${BASE_API_URL}/api/paystack/banks/`, {
          headers: { Authorization: `Token ${token}` },
        });
        const raw = await banksRes.json();

        // Normalize to ensure we hold both display and paystack codes
        const banks = (Array.isArray(raw) ? raw : []).filter((b) => b.type === "ghipss")
          .map((b) => ({
            id: b.id,
            name: b.name,
            // what we show alongside the name (often ghipss long code)
            displayCode: b.longcode || b.code || "",
            // what we SEND to Paystack /bank/resolve (prefer explicit paystack_code if provided)
            paystackCode: b.paystack_code || b.code_ps || b.code || "",
          }));

        const momos = (Array.isArray(raw) ? raw : []).filter((b) => b.type === "mobile_money")
          .map((b) => ({
            id: b.id,
            name: b.name,
            code: b.code, // Paystack expects MTN / VOD / ATL etc.
          }));

        setBankList(banks);
        setMomoList(momos);

        // üí∏ Load user payout info
        const payoutRes = await fetch(`${BASE_API_URL}/api/payout-info/`, {
          headers: { Authorization: `Token ${token}` },
        });

        if (!payoutRes.ok) {
          if (payoutRes.status === 404) {
            toast.info("No payout info found.");
          } else {
            toast.error("Failed to fetch payout info.");
          }
          return;
        }

        const saved = await payoutRes.json();
        setSavedPayout(saved);

        if (saved?.account_number) {
          setFormLocked(true);
          setMethod(saved.method);
          setAccountName(saved.account_name);
          setAccountNumber(saved.account_number);
          setMaskedAccount(
            saved.masked_account_number || `****${saved.account_number.slice(-4)}`
          );

          if (saved.method === "bank") {
            // We don't know if saved.bank_code is paystack or ghipss; assume it's what we should send back
            setBankCode(saved.bank_code || "");
            // try to find bank to show a nice display code
            const found = banks.find(
              (b) =>
                b.paystackCode === saved.bank_code ||
                b.displayCode === saved.bank_code
            );
            setBankDisplayCode(found?.displayCode || saved.bank_code || "");
          } else {
            // ‚úÖ bug fix: this was using saved.bank_code before
            setNetwork(saved.network || "");
          }

          setAccountValidated(!!saved.validated);

          if (saved.locked_after_payout) {
            toast.warning("üîí This payout info is locked after use and cannot be edited.");
          }
        }
      } catch (err) {
        console.error("‚ùå Error loading payout data:", err);
        toast.error("Could not load payout settings");
      } finally {
        setLoading(false);
      }
    };

    fetchInitialData();
  }, [token]);

  // Validate account whenever number + (bank or network) present
  useEffect(() => {
    const ready =
      accountNumber.length >= 8 &&
      ((method === "bank" && bankCode) || (method === "momo" && network)) &&
      token;

    if (!ready) return;

    const validateAccount = async () => {
      try {
        const params = new URLSearchParams({
          account_number: accountNumber,
          bank_code: method === "bank" ? bankCode : network, // send Paystack bank code or MoMo code
        });

        const res = await fetch(
          `${BASE_API_URL}/api/paystack/validate-account/?${params.toString()}`,
          { headers: { Authorization: `Token ${token}` } }
        );

        const data = await res.json();
        if (!res.ok) throw new Error(data?.message || "Validation failed");

        setAccountName(data.account_name || "");
        setAccountValidated(true);
        toast.success("‚úÖ Account validated");
      } catch (e) {
        setAccountName("");
        setAccountValidated(false);
        toast.error(
          e?.message?.includes("invalid_bank_code")
            ? "‚ùå Invalid bank code for Paystack. Pick a different bank."
            : "‚ùå Could not validate account"
        );
      }
    };

    validateAccount();
  }, [accountNumber, bankCode, network, method, token]);

  const handleBankChange = (e) => {
    const selected = bankList.find((b) => (b.paystackCode || "") === e.target.value);
    if (accountNumber && !confirm("Change will reset account number. Continue?")) return;

    setBankCode(selected?.paystackCode || "");
    setBankDisplayCode(selected?.displayCode || "");
    setAccountNumber("");
    setAccountName("");
    setAccountValidated(false);
  };

  const handleNetworkChange = (e) => {
    const code = e.target.value;
    if (accountNumber && !confirm("Change will reset account number. Continue?")) return;
    setNetwork(code);
    setAccountNumber("");
    setAccountName("");
    setAccountValidated(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const payload = {
      method,
      account_name: accountName,
      account_number: accountNumber,
      // send the exact value Paystack needs (bank) or the MoMo network code
      bank_code: method === "bank" ? bankCode : network,
      // (optional) if you want to persist what the user saw in the UI
      // ui_display_code: method === "bank" ? bankDisplayCode : undefined,
      network: method === "momo" ? network : undefined,
    };

    try {
      if (!token) throw new Error("Missing authentication token");

      const payoutRes = await fetch(`${BASE_API_URL}/api/payout-info/`, {
        method: formLocked ? "PATCH" : "POST",
        headers: {
          Authorization: `Token ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const payoutData = await payoutRes.json();
      if (!payoutRes.ok)
        throw new Error(payoutData?.detail || "Failed to save payout info");

      toast.success("‚úÖ Payout info saved!");
      setFormLocked(true);
      refreshUser?.();
    } catch (err) {
      console.error("‚ùå Submit error:", err);
      toast.error(err.message || "‚ùå Could not save payout info.");
    }
  };

  if (loading) {
    return (
      <div className="max-w-xl mx-auto p-6 text-center text-gray-500">
        Loading payout settings...
      </div>
    );
  }

  return (
    <div className="max-w-xl mx-auto p-6 bg-white rounded-xl shadow">
      <h2 className="text-2xl font-bold mb-6">Set Your Payout Method</h2>

      {formLocked ? (
        <>
          <div className="mb-4 p-4 bg-green-50 border border-green-300 rounded text-green-800">
            ‚úÖ You‚Äôve already added your payout method.
          </div>
          <div className="mb-6 space-y-2 text-sm">
            <p>
              <strong>Method:</strong>{" "}
              {method === "bank" ? "Bank Account" : "Mobile Money"}
            </p>
            <p>
              <strong>Account Name:</strong> {accountName}
            </p>
            <p>
              <strong>Account Number:</strong> {maskedAccount}
            </p>
            <p>
              <strong>{method === "bank" ? "Bank Code (Paystack)" : "MoMo Network"}:</strong>{" "}
              {method === "bank" ? bankCode : network}
            </p>
            {method === "bank" && bankDisplayCode ? (
              <p>
                <strong>Bank Code (Display):</strong> {bankDisplayCode}
              </p>
            ) : null}
            <p>
              <strong>Validated:</strong>{" "}
              {accountValidated ? "‚úÖ Yes" : "‚ùå No"}
            </p>
          </div>

          {savedPayout?.locked_after_payout ? (
            <p className="text-sm text-gray-500 mt-2">
              üîí Locked after payout. Contact support to update.
            </p>
          ) : (
            <div className="flex gap-4 mt-2">
              <button
                className="text-blue-600 underline text-sm"
                onClick={() => setFormLocked(false)}
              >
                Edit payout info
              </button>
              <button
                onClick={async () => {
                  const confirmDelete = confirm(
                    "Deleting this payout method will prevent withdrawals until you add a new one. Continue?"
                  );
                  if (!confirmDelete) return;
                  try {
                    const res = await fetch(`${BASE_API_URL}/api/payout-info/`, {
                      method: "DELETE",
                      headers: { Authorization: `Token ${token}` },
                    });
                    if (!res.ok) throw new Error();
                    toast.success("Payout info deleted.");
                    window.location.reload();
                  } catch {
                    toast.error("Could not delete payout info.");
                  }
                }}
                className="text-red-600 underline text-sm"
              >
                Delete payout info
              </button>
            </div>
          )}
        </>
      ) : (
        <>
          <div className="mb-6">
            <label className="block font-semibold mb-2">Select Method</label>
            <div className="flex gap-4">
              {allowedMethods.includes("bank") && (
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name="method"
                    value="bank"
                    checked={method === "bank"}
                    onChange={() => {
                      setMethod("bank");
                      setAccountNumber("");
                      setAccountName("");
                      setNetwork("");
                      setAccountValidated(false);
                    }}
                  />
                  Bank Account
                </label>
              )}
              {allowedMethods.includes("momo") && (
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name="method"
                    value="momo"
                    checked={method === "momo"}
                    onChange={() => {
                      setMethod("momo");
                      setAccountNumber("");
                      setAccountName("");
                      setBankCode("");
                      setBankDisplayCode("");
                      setAccountValidated(false);
                    }}
                  />
                  Mobile Money (MoMo)
                </label>
              )}
            </div>

            {allowedMethods.length === 0 && (
              <p className="text-sm text-red-600 mt-2">
                ‚ùå No payout methods are currently available for your account.
              </p>
            )}
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            {method === "bank" ? (
              <div>
                <label className="block mb-1 font-medium">Select Bank</label>
                <select
                  value={bankCode}
                  onChange={handleBankChange}
                  className="w-full border rounded px-3 py-2"
                  required
                >
                  <option value="">-- Choose a bank --</option>
                  {bankList.map((bank) => (
                    <option key={bank.id} value={bank.paystackCode}>
                      {bank.name}
                      {bank.displayCode ? ` (${bank.displayCode})` : ""}
                    </option>
                  ))}
                </select>
              </div>
            ) : (
              <div>
                <label className="block mb-1 font-medium">MoMo Network</label>
                <select
                  value={network}
                  onChange={handleNetworkChange}
                  className="w-full border rounded px-3 py-2"
                  required
                >
                  <option value="">-- Choose MoMo network --</option>
                  {momoList.map((item) => (
                    <option key={item.id} value={item.code}>
                      {item.name}
// ‚Ä¶truncated‚Ä¶

===== src/components/new-dashboard/settings/ShopDetailsForm.jsx =====
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import { BASE_API_URL } from "@/app/constants";

export default function ShopSettingsPage() {
  const { token } = useAuth();
  const [shop, setShop] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saved, setSaved] = useState(false);

  useEffect(() => {
    if (!token) {
      console.log("‚õîÔ∏è No auth token yet");
      return;
    }

    const fetchShop = async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/shops/me/`, {
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to load shop");
        const data = await res.json();
        setShop(data);
      } catch (err) {
        console.error("‚ùå FETCH ERROR:", err);
        setShop(null);
      } finally {
        setLoading(false);
      }
    };

    fetchShop();
  }, [token]);

  const validationSchema = Yup.object().shape({
    name: Yup.string().required("Shop name is required"),
    description: Yup.string().nullable(),
    seller_contact_number: Yup.string()
      .matches(
        /^\+\d{6,20}$/,
        "Use full international format, e.g. +233245123456",
      )
      .nullable(),
    bg_color: Yup.string().nullable(),
  });

  if (loading) return <p className="p-4">Loading shop...</p>;
  if (!shop) return <p className="p-4 text-red-500">Shop not found.</p>;

  const initialValues = {
    name: shop.name || "",
    description: shop.description || "",
    seller_contact_number: shop.seller_contact_number || "",
    bg_color: shop.bg_color || "#ffffff",
    logo: null,
    banner: null,
  };

  return (
    <main className="max-w-xl mx-auto p-6 text-black dark:text-white">
      <h1 className="text-2xl font-semibold mb-4">Store Settings</h1>

      <Formik
        enableReinitialize
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={async (values, { setSubmitting }) => {
          try {
            const formData = new FormData();
            formData.append("name", values.name);
            formData.append("description", values.description);
            formData.append(
              "seller_contact_number",
              values.seller_contact_number || "",
            );
            formData.append("bg_color", values.bg_color);
            if (values.logo) formData.append("logo", values.logo);
            if (values.banner) formData.append("banner", values.banner);

            const res = await fetch(
              `${BASE_API_URL}/api/shops/${shop.slug}/update/`,
              {
                method: "PATCH",
                headers: { Authorization: `Token ${token}` },
                body: formData,
              },
            );

            if (!res.ok) throw new Error("Failed to update shop");
            setSaved(true);
          } catch (err) {
            console.error("‚ùå SUBMIT ERROR:", err);
            alert("Failed to save changes");
          } finally {
            setSubmitting(false);
          }
        }}
      >
        {({ isSubmitting, setFieldValue }) => (
          <Form className="space-y-4">
            {/* Shop Name */}
            <div>
              <label className="block mb-1 font-medium">Shop Name</label>
              <Field name="name" className="w-full border px-3 py-2 rounded" />
              <ErrorMessage
                name="name"
                component="p"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Description */}
            <div>
              <label className="block mb-1 font-medium">Description</label>
              <Field
                name="description"
                as="textarea"
                rows="3"
                className="w-full border px-3 py-2 rounded"
              />
            </div>

            {/* Seller Phone */}
            <div>
              <label className="block mb-1 font-medium">
                Contact Phone Number
              </label>
              <Field
                name="seller_contact_number"
                placeholder="+233245123456"
                className="w-full border px-3 py-2 rounded"
              />
              <ErrorMessage
                name="seller_contact_number"
                component="p"
                className="text-red-500 text-sm"
              />
              <p className="text-xs text-gray-500 mt-1">
                Must be full international format, e.g. +233245123456.
              </p>
            </div>

            {/* Background Color */}
            <div>
              <label className="block mb-1 font-medium">Background Color</label>
              <Field
                name="bg_color"
                type="color"
                className="w-16 h-10 border rounded"
              />
            </div>

            {/* Logo */}
            <div>
              <label className="block mb-1 font-medium">Logo</label>
              {shop.shop_logo && (
                <img
                  src={shop.shop_logo}
                  alt="Logo"
                  className="h-20 mb-2 rounded border"
                />
              )}
              <input
                name="logo"
                type="file"
                accept="image/*"
                onChange={(e) =>
                  setFieldValue("logo", e.currentTarget.files[0])
                }
              />
            </div>

            {/* Banner */}
            <div>
              <label className="block mb-1 font-medium">Banner</label>
              {shop.top_banner && (
                <img
                  src={shop.top_banner}
                  alt="Banner"
                  className="h-20 mb-2 rounded border"
                />
              )}
              <input
                name="banner"
                type="file"
                accept="image/*"
                onChange={(e) =>
                  setFieldValue("banner", e.currentTarget.files[0])
                }
              />
            </div>

            <button
              type="submit"
              disabled={isSubmitting}
              className="bg-violet-600 text-white px-4 py-2 rounded hover:bg-violet-700"
            >
              {isSubmitting ? "Saving..." : "Save Changes"}
            </button>

            {saved && (
              <p className="text-green-600 mt-2">Changes saved successfully!</p>
            )}
          </Form>
        )}
      </Formik>
    </main>
  );
}


===== src/components/new-dashboard/settings/ShopDetailsSettings.jsx =====
"use client";

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";

import { BASE_API_URL } from "@/app/constants";

export default function StoreDetailsSettings() {
  const { token, user } = useSelector((s) => s.auth);
  const [contactNumber, setContactNumber] = useState("");
  const [useMomo, setUseMomo] = useState(false);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (user) {
      setContactNumber(user.seller_contact_number || "");
    }
  }, [user]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    const payload = {
      seller_contact_number: useMomo ? user.momo_number : contactNumber,
    };
    await fetch(`${BASE_API_URL}/api/users/me/`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Token ${token}`,
      },
      body: JSON.stringify(payload),
    });
    setSaving(false);
  };

  return (
    <div className="max-w-lg mx-auto p-6 bg-white border rounded shadow">
      <h2 className="text-lg font-semibold mb-4">
        Public Seller Contact Number
      </h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            Contact Number
          </label>
          <input
            type="tel"
            value={contactNumber}
            onChange={(e) => setContactNumber(e.target.value)}
            placeholder="+233241234567"
            disabled={useMomo}
            className="w-full border px-3 py-2 rounded"
          />
        </div>
        <div className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={useMomo}
            onChange={(e) => setUseMomo(e.target.checked)}
          />
          <label className="text-sm">
            Use same as payout MoMo number ({user?.momo_number})
          </label>
        </div>
        <button
          type="submit"
          disabled={saving}
          className="px-4 py-2 bg-violet-600 text-white rounded"
        >
          {saving ? "Saving..." : "Save"}
        </button>
      </form>
    </div>
  );
}


===== src/components/onboarding/AccountTypeAndPlan-1.jsx =====
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import axiosInstance from "@/lib/axiosInstance";
import PlanComparisonModal from "@/components/ui/PlanComparisonModal";
import PlanToggleFilter from "@/components/ui/PlanToggleFilter";
import PlanCheckoutModal from "@/components/ui//PlanCheckoutModal";
import { CheckIcon } from "lucide-react";

const ROLE_OPTIONS = [
  { label: "Buy items", value: "buyer", group: "primary" },
  { label: "Become Upfrica sourcing agent", value: "agent", group: "primary" },
  { label: "Sell as an individual", value: "seller_private", group: "seller" },
  { label: "Sell as a company", value: "seller_business", group: "seller" },
];

export default function AccountTypeAndPlan() {
  const router = useRouter();
  const { token, user, refreshUser, hydrated } = useAuth();
  const searchParams = useSearchParams();

  const [selectedRoles, setSelectedRoles] = useState(["buyer"]);
  const [plans, setPlans] = useState([]);
  const [filteredPlans, setFilteredPlans] = useState([]);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [billingCycle, setBillingCycle] = useState("monthly");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showCheckoutModal, setShowCheckoutModal] = useState(false);

  const sellerSelected =
    selectedRoles.includes("seller_private") ||
    selectedRoles.includes("seller_business");

  useEffect(() => {
    if (token) {
      axiosInstance
        .get("/api/seller-plans/", {
          headers: {
            Authorization: `Token ${token?.replace(/^"|"$/g, "")}`,
          },
        })
        .then((res) => {
          setPlans(res.data);
          setFilteredPlans(res.data);
        });
    }
  }, [token]);

  const toggleRole = (value) => {
    if (value === "buyer") return;
    const updated = selectedRoles.includes(value)
      ? selectedRoles.filter((r) => r !== value)
      : [...selectedRoles, value];

    const hasBothSellers =
      updated.includes("seller_private") && updated.includes("seller_business");
    const hasSellerAndAgent =
      (updated.includes("seller_private") ||
        updated.includes("seller_business")) &&
      updated.includes("agent");

    if (hasBothSellers || hasSellerAndAgent) {
      toast.error("‚ùå Can't combine seller types or seller + agent.");
      return;
    }

    if (!updated.includes("buyer")) updated.unshift("buyer");
    setSelectedRoles([...new Set(updated)]);
  };

  const handleSubmit = async () => {
    setError(null);

    const isSeller = sellerSelected;
    const isFreePlan =
      !selectedPlan ||
      Number(plans.find((p) => p.id === selectedPlan)?.price_per_month || 0) ===
        0;

    if (isSeller && !selectedPlan) {
      return setError("Please select a seller plan.");
    }

    const payload = {
      account_type: selectedRoles,
      seller_plan_id: isSeller ? selectedPlan : null,
      billing_cycle: billingCycle,
    };

    try {
      setLoading(true);
      await axiosInstance.patch("/api/users/me/", payload, {
        headers: {
          Authorization: `Token ${token?.replace(/^"|"$/g, "")}`,
        },
      });
      toast.success("‚úÖ Roles and plan saved!");
      await refreshUser();
      router.push("/new-dashboard");
    } catch (err) {
      console.error(err);
      toast.error("‚ùå Failed to update account.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-1">Select Your Account Type</h1>
      <p className="text-gray-500 mb-6">
        Choose what you want to do on Upfrica.
      </p>

      <div className="space-y-4 mb-6">
        {ROLE_OPTIONS.map(({ label, value }) => {
          const isSelected = selectedRoles.includes(value);
          return (
            <button
              key={value}
              onClick={() => toggleRole(value)}
              className={`w-full px-4 py-3 rounded border flex justify-between items-center transition-all ${
                isSelected
                  ? "bg-purple-600 text-white font-semibold border-purple-600"
                  : "bg-white border-gray-300 hover:border-purple-500"
              }`}
            >
              <span>{label}</span>
              {isSelected && <CheckIcon className="w-5 h-5" />}
            </button>
          );
        })}
      </div>

      {sellerSelected && (
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4 mb-4">
              <span
                className={`text-sm font-medium ${billingCycle === "monthly" ? "text-black" : "text-gray-500"}`}
              >
                Monthly
              </span>
              <button
                type="button"
                onClick={() =>
                  setBillingCycle((prev) =>
                    prev === "monthly" ? "weekly" : "monthly",
                  )
                }
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-300
      ${billingCycle === "weekly" ? "bg-purple-600" : "bg-gray-300"}
    `}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-300
        ${billingCycle === "weekly" ? "translate-x-6" : "translate-x-1"}
      `}
                />
              </button>
              <span
                className={`text-sm font-medium ${billingCycle === "weekly" ? "text-black" : "text-gray-500"}`}
              >
                Weekly
              </span>
            </div>

            <PlanComparisonModal />
          </div>

          <PlanToggleFilter plans={plans} setFilteredPlans={setFilteredPlans} />

          <h2 className="font-medium mb-2">Choose a Seller Plan</h2>
          <div className="grid gap-3">
            {filteredPlans.map((plan) => (
              <button
                key={plan.id}
                onClick={() => setSelectedPlan(plan.id)}
                className={`w-full text-left p-4 rounded border transition-all ${
                  selectedPlan === plan.id
                    ? "bg-green-50 border-green-500 ring ring-green-300"
                    : "bg-white border-gray-300 hover:border-gray-500"
                }`}
              >
                <div className="flex justify-between items-center">
                  <div>
                    <div className="font-semibold">{plan.label}</div>
                    <div className="text-sm text-gray-500">
                      GHS{" "}
                      {billingCycle === "weekly"
                        ? plan.price_per_week
                        : plan.price_per_month}
                    </div>
                  </div>
                  {selectedPlan === plan.id && (
                    <span className="text-green-600">‚úî Selected</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {error && <p className="text-red-500 text-sm mb-4">{error}</p>}

      <button
        onClick={handleSubmit}
        disabled={(sellerSelected && !selectedPlan) || loading}
        className="btn-primary w-full disabled:opacity-50"
      >
        {loading ? "Saving..." : "Continue"}
      </button>

      <PlanCheckoutModal
        open={showCheckoutModal}
        onClose={() => setShowCheckoutModal(false)}
        planId={selectedPlan}
        billing={billingCycle}
      />
    </div>
  );
}


===== src/components/onboarding/AccountTypeAndPlan.jsx =====
// src/components/onboarding/AccountTypeAndPlan.jsx
"use client";

import toast from "react-hot-toast";
import { useState, useEffect, useRef } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import axiosInstance from "@/lib/axiosInstance";
import PlanComparisonModal from "@/components/ui/PlanComparisonModal";
import PlanToggleFilter from "@/components/ui/PlanToggleFilter";
import PlanCheckoutModal from "@/components/ui/PlanCheckoutModal";
import { CheckIcon, ChevronLeft, ChevronRight } from "lucide-react";

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* Small inline component that renders the TradingView-style plan carousel    */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function PlanCardsInline({
  plans = [],
  billing = "monthly",
  selectedPlan,
  onPick,
}) {
  const trackRef = useRef(null);
  const cardRefs = useRef([]);
  const [activeIdx, setActiveIdx] = useState(0);

  // keep dots in sync while user swipes
  useEffect(() => {
    const el = trackRef.current;
    if (!el) return;
    const onScroll = () => {
      const children = Array.from(el.children);
      let best = 0;
      let bestDist = Infinity;
      children.forEach((child, i) => {
        const d = Math.abs(child.offsetLeft - el.scrollLeft);
        if (d < bestDist) { best = i; bestDist = d; }
      });
      setActiveIdx(best);
    };
    el.addEventListener("scroll", onScroll, { passive: true });
    return () => el.removeEventListener("scroll", onScroll);
  }, []);

  const priceKey = billing === "weekly" ? "price_per_week" : "price_per_month";
  const scrollToIndex = (idx) => {
    const el = trackRef.current;
    const card = cardRefs.current[idx];
    if (!el || !card) return;
    el.scrollTo({ left: card.offsetLeft - 16, behavior: "smooth" });
  };
  const prev = () => scrollToIndex(Math.max(0, activeIdx - 1));
  const next = () => scrollToIndex(Math.min(plans.length - 1, activeIdx + 1));

  const fmtPrice = (n) =>
    (Number(n) || 0).toLocaleString(undefined, { minimumFractionDigits: 2 });

  return (
    <section
      className="-mx-4 mb-3 sm:mx-0"
      aria-roledescription="carousel"
      aria-label="Seller plan options"
    >
      <div
        ref={trackRef}
        className="relative flex snap-x snap-mandatory gap-4 overflow-x-auto px-4 pb-3 sm:grid sm:grid-cols-3 sm:gap-6 sm:overflow-visible sm:px-0"
        role="group"
      >
        {plans.map((p, idx) => {
          const price = p[priceKey];
          const popular = p.is_popular;
          const isSelected = selectedPlan === p.id;

          return (
            <article
              key={p.id}
              ref={(el) => (cardRefs.current[idx] = el)}
              tabIndex={0}
              className={[
                "min-w-[86%] snap-start rounded-2xl border p-5 transition sm:min-w-0",
                popular
                  ? "border-purple-500 shadow-[0_8px_30px_rgb(88_28_135_/_0.25)] ring-1 ring-purple-200 dark:ring-purple-800/50"
                  : "border-gray-200 dark:border-gray-800",
                isSelected ? "outline outline-2 outline-green-500" : "",
                "bg-white dark:bg-[#0f1115]/90",
              ].join(" ")}
              aria-label={`${p.label} plan`}
            >
              <div className="mb-3 flex items-center justify-between">
                <h3 className="text-lg font-semibold">{p.label}</h3>
                {p.is_popular && (
                  <span className="rounded-full bg-purple-600 px-2 py-0.5 text-[11px] font-medium text-white">
                    Most Popular
                  </span>
                )}
                {p.is_free && !p.is_popular && (
                  <span className="rounded-full bg-emerald-600 px-2 py-0.5 text-[11px] font-medium text-white">
                    Free
                  </span>
                )}
              </div>

              <div className="mb-4">
                <div className="text-3xl font-bold">
                  GHS {fmtPrice(price)}
                  <span className="ml-1 align-middle text-sm font-medium text-gray-600 dark:text-gray-400">
                    /{billing === "weekly" ? "wk" : "mo"}
                  </span>
                </div>
                <p className="mt-1 text-xs text-gray-600 dark:text-gray-400">
                  Includes core selling tools
                </p>
              </div>

              <ul className="mb-5 space-y-2 text-sm">
                <li className="flex items-center gap-2">
                  <span className="inline-block h-2 w-2 rounded-full bg-emerald-500" />
                  Max listings: <span className="ml-1 font-semibold">{p.max_products ?? "‚Äî"}</span>
                </li>
                <li className="flex items-center gap-2">
                  <span
                    className={[
                      "inline-block h-2 w-2 rounded-full",
                      p.allow_bnpl ? "bg-emerald-500" : "bg-rose-500",
                    ].join(" ")}
                  />
                  Buy Now Pay Later
                </li>
                <li className="flex items-center gap-2">
                  <span
                    className={[
                      "inline-block h-2 w-2 rounded-full",
                      p.allow_display_seller_contact ? "bg-emerald-500" : "bg-rose-500",
                    ].join(" ")}
                  />
                  Display phone number
                </li>
              </ul>

              <button
                className={[
                  "w-full rounded-lg px-4 py-2 text-center font-semibold transition",
                  popular
                    ? "bg-purple-600 text-white hover:bg-purple-700"
                    : "bg-gray-900 text-white hover:bg-black dark:bg-gray-100 dark:text-gray-900 dark:hover:bg-white",
                ].join(" ")}
                onClick={() => onPick?.(p.id)}
              >
                {p.is_free ? (isSelected ? "Selected" : "Get Started") : (isSelected ? "Selected" : "Start free trial")}
              </button>

              {isSelected && (
                <div className="mt-2 text-center text-xs font-medium text-green-600 dark:text-green-400">
                  ‚úî Selected
                </div>
              )}
            </article>
          );
        })}

        {/* mobile arrows */}
        {plans.length > 1 && (
          <>
            <button
              type="button"
              onClick={prev}
              aria-label="Previous plan"
              className="absolute left-1 top-1/2 z-10 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow ring-1 ring-black/5 backdrop-blur hover:bg-white dark:bg-gray-900/90 dark:ring-white/10 sm:hidden"
            >
              <ChevronLeft className="h-5 w-5" />
            </button>
            <button
              type="button"
              onClick={next}
              aria-label="Next plan"
              className="absolute right-1 top-1/2 z-10 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow ring-1 ring-black/5 backdrop-blur hover:bg-white dark:bg-gray-900/90 dark:ring-white/10 sm:hidden"
            >
              <ChevronRight className="h-5 w-5" />
            </button>
          </>
        )}
      </div>

      {/* dots */}
      {plans.length > 1 && (
        <div className="mt-2 flex justify-center gap-2 sm:hidden">
          {plans.map((_, i) => (
            <button
              key={i}
              onClick={() => scrollToIndex(i)}
              aria-label={`Go to plan ${i + 1}`}
              aria-current={activeIdx === i ? "true" : "false"}
              className={[
                "h-2 w-2 rounded-full transition",
                activeIdx === i ? "bg-purple-600" : "bg-gray-300 dark:bg-gray-600",
              ].join(" ")}
            />
          ))}
        </div>
      )}
    </section>
  );
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

const ROLE_OPTIONS = [
  { label: "Buy items", value: "buyer" },
  { label: "Sell as an individual", value: "seller_private" },
  { label: "Sell as a company", value: "seller_business" },
  { label: "Become Upfrica sourcing agent", value: "agent" },
  { label: "Become an affiliate", value: "affiliate", sellerConflict: true },
];

export default function AccountTypeAndPlan() {
  const router = useRouter();
  const { token, refreshUser } = useAuth();
  const searchParams = useSearchParams();

  const [selectedRoles, setSelectedRoles] = useState(["buyer"]);
  const [plans, setPlans] = useState([]);
  const [filteredPlans, setFilteredPlans] = useState([]);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [billingCycle, setBillingCycle] = useState("monthly"); // 'monthly' | 'weekly'
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [roleError, setRoleError] = useState(null);

  // üîê Modal state lives here (parent)
  const [plansOpen, setPlansOpen] = useState(false);

  const sellerSelected =
    selectedRoles.includes("seller_private") ||
    selectedRoles.includes("seller_business");

  const currentStep = !sellerSelected ? 1 : !selectedPlan ? 2 : 3;

  useEffect(() => {
    if (!token) return;
    axiosInstance
      .get("/api/seller-plans/", {
        headers: { Authorization: `Token ${token?.replace(/^"|"$/g, "")}` },
      })
      .then((res) => {
        const list = res.data || [];
        setPlans(list);
        setFilteredPlans(list);
      })
      .catch(() => {});
  }, [token]);

  useEffect(() => {
    const paymentStatus = searchParams.get("payment");
    if (paymentStatus === "success") {
      toast.success("üéâ Payment successful! Redirecting...");
      router.push("/new-dashboard");
    } else if (paymentStatus === "cancel") {
      toast.error("‚ö†Ô∏è Payment cancelled. Try again.");
    }
  }, [searchParams, router]);

  const toggleRole = (value) => {
    if (value === "buyer") return;
    let next = [...selectedRoles];
    const isSelected = next.includes(value);
    const isIndividual = value === "seller_private";
    const isCompany = value === "seller_business";

    if (isSelected) next = next.filter((r) => r !== value);
    else {
      next.push(value);
      if (isIndividual && next.includes("seller_business"))
        next = next.filter((r) => r !== "seller_business");
      if (isCompany && next.includes("seller_private"))
        next = next.filter((r) => r !== "seller_private");
    }

    const isSeller = next.includes("seller_private") || next.includes("seller_business");
    const isAgent = next.includes("agent");
    const isAffiliate = next.includes("affiliate");
    if (isSeller && isAgent) return toast.error("‚ùå You can‚Äôt combine seller and sourcing agent.");
    if (isSeller && isAffiliate) return toast.error("‚ùå You can‚Äôt be a seller and an affiliate.");
    if (isAgent && isAffiliate) return toast.error("‚ùå You can‚Äôt be an agent and an affiliate.");

    if (!next.includes("buyer")) next.unshift("buyer");
    setRoleError(null);
    setSelectedRoles([...new Set(next)]);
  };

  const handleSubmit = async () => {
    setError(null);
    if (sellerSelected && !selectedPlan) return setError("Please select a seller plan.");

    const patchPayload = {
      account_type: selectedRoles,
      ...(sellerSelected && selectedPlan && { seller_plan_id: selectedPlan }),
    };

    try {
      setLoading(true);
      await axiosInstance.patch("/api/users/me/", patchPayload, {
        headers: { Authorization: `Token ${token?.replace(/^"|"$/g, "")}` },
      });
      await refreshUser();

      if (sellerSelected && selectedPlan) {
        const plan = plans.find((p) => p.id === selectedPlan);
        if (!plan) return toast.error("‚ùå Could not find plan details.");

        const priceRaw =
          billingCycle === "weekly" ? plan.price_per_week : plan.price_per_month;
        const price = Number.parseFloat(priceRaw || 0) || 0;

        const res = await axiosInstance.post(
          "/api/seller/subscribe/",
          { plan_id: selectedPlan, billing_cycle: billingCycle || "monthly" },
          { headers: { Authorization: `Token ${token?.replace(/^"|"$/g, "")}` } }
        );

        if (price === 0) {
          toast.success("‚úÖ Free plan activated immediately!");
          router.push("/new-dashboard");
        } else if (res.data?.checkout_url) {
          window.location.href = res.data.checkout_url;
        } else {
          toast.error("‚ùå Stripe checkout session failed.");
        }
      } else {
        toast.success("‚úÖ Roles updated!");
        router.push("/new-dashboard");
      }
    } catch (err) {
      console.error(err);
      toast.error("‚ùå Something went wrong.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="mx-auto max-w-2xl p-4 sm:p-6 text-gray-900 dark:text-gray-100">
      {/* progress */}
      <div className="mb-6">
        <div className="mb-1 text-sm text-gray-500 dark:text-gray-400">Step {currentStep} of 3</div>
        <div className="h-2 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-700">
          <div className="h-2 bg-purple-600 transition-all" style={{ width: `${(currentStep / 3) * 100}%` }} />
        </div>
      </div>

      {/* title */}
      <h1 className="mb-1 text-2xl font-bold">Select Your Account Type</h1>
      <p className="mb-6 text-gray-600 dark:text-gray-300">Choose what you want to do on Upfrica.</p>

      {/* roles */}
      <div className="mb-2 space-y-3">
        {ROLE_OPTIONS.map(({ label, value }) => {
          const isSelected = selectedRoles.includes(value);
          const isSellerSelected = selectedRoles.includes("seller_private") || selectedRoles.includes("seller_business");
          const isAgentSelected = selectedRoles.includes("agent");
          const sellerOrAgentConflict = value === "affiliate" && (isSellerSelected || isAgentSelected);
          const disableThis = sellerOrAgentConflict;

          return (
            <div key={value} className="space-y-1">
              <button
                type="button"
                aria-pressed={isSelected}
                onClick={() => !disableThis && toggleRole(value)}
                disabled={disableThis}
                className={[
                  "flex w-full items-center justify-between rounded border px-4 py-3 transition",
                  isSelected
                    ? "border-purple-600 bg-purple-600 text-white shadow-md"
                    : "border-gray-300 bg-white hover:border-purple-500 dark:border-gray-700 dark:bg-gray-800",
                  disableThis ? "cursor-not-allowed opacity-50" : "",
                ].join(" ")}
              >
                <span>{label}</span>
                {isSelected && <CheckIcon className="h-5 w-5" />}
              </button>
              {disableThis && (
                <div className="ml-2 text-xs text-gray-400">
                  Cannot combine with seller or agent account.
                </div>
              )}
            </div>
          );
        })}
      </div>

      {roleError && (
        <div className="mt-2 mb-4 text-sm font-medium text-red-600 dark:text-red-400">{roleError}</div>
      )}

      {/* seller step */}
      {sellerSelected && (
        <div className="mb-8">
          <div className="mb-4 flex items-center justify-between gap-3">
            <div className="flex items-center gap-3">
              <span className={billingCycle === "monthly" ? "text-sm font-medium" : "text-sm font-medium text-gray-500 dark:text-gray-400"}>Monthly</span>
// ‚Ä¶truncated‚Ä¶

===== src/components/onboarding/AccountTypePage.jsx =====
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import { BASE_API_URL } from "@/app/constants";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";

const accountTypes = [
  {
    key: "buyer",
    title: "Buyer",
    emoji: "üõçÔ∏è",
    description:
      "Browse and buy products, save items, and track orders easily.",
  },
  {
    key: "seller_private",
    title: "Seller (Private)",
    emoji: "üë©üèæ",
    description: "Sell personal or small business items with flexible plans.",
  },
  {
    key: "seller_business",
    title: "Seller (Business)",
    emoji: "üè¢",
    description: "List bulk or professional inventory, access advanced tools.",
  },
  {
    key: "agent",
    title: "Sourcing Agent",
    emoji: "üöö",
    description: "Help buyers collect or verify items and earn commissions.",
  },
  {
    key: "affiliate",
    title: "Affiliate Marketer",
    emoji: "üí∏",
    description:
      "Promote products and earn commission when someone buys through your link.",
  },
];

export default function OnboardingPage() {
  const router = useRouter();
  const { user, token, refreshUser } = useAuth();

  const [selectedRole, setSelectedRole] = useState(null);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [sellerPlans, setSellerPlans] = useState([]);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState("");

  const isSeller =
    selectedRole === "seller_private" || selectedRole === "seller_business";

  useEffect(() => {
    if (isSeller && token) {
      fetch(`${BASE_API_URL}/api/seller-plans/`, {
        headers: {
          Authorization: `Token ${token?.replace(/^"|"$/g, "")}`,
        },
      })
        .then((res) => res.json())
        .then((data) => {
          if (Array.isArray(data)) {
            setSellerPlans(data);
          } else if (Array.isArray(data.results)) {
            setSellerPlans(data.results);
          } else {
            setSellerPlans([]);
          }
        })
        .catch((err) => {
          console.error("‚ùå Failed to load seller plans", err);
          setError("Failed to load seller plans.");
        });
    }
  }, [selectedRole, token]);

  useEffect(() => {
    if ((selectedRole === "buyer" || selectedRole === "agent") && token) {
      handleSubmit();
    }
  }, [selectedRole]);

  const handleSubmit = async () => {
    setError("");
    if (!selectedRole || (isSeller && !selectedPlan)) {
      setError("Please select an account type and seller plan.");
      return;
    }

    setSubmitting(true);
    try {
      const res = await fetch(`${BASE_API_URL}/api/users/me/`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Token ${token?.replace(/^"|"$/g, "")}`,
        },
        body: JSON.stringify({
          account_type: selectedRole,
          seller_plan_id: isSeller ? selectedPlan.id : null,
        }),
      });

      if (res.ok) {
        await refreshUser();
        router.push("/new-dashboard");
      } else {
        setError("Failed to update your account.");
      }
    } catch (err) {
      setError("An unexpected error occurred.");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen p-6 max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold text-center mb-2">
        Welcome to <span className="text-purple-600">Upfrica!</span>
      </h1>
      <p className="text-center text-gray-600 mb-8">
        What do you want to do today?
      </p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-4xl">
        {accountTypes.map((type) => (
          <div
            key={type.key}
            className={`relative cursor-pointer border rounded-2xl p-6 text-center transition ${
              selectedRole === type.key
                ? "border-purple-500 bg-purple-50"
                : "hover:bg-gray-50"
            }`}
            onClick={() => {
              setSelectedRole(type.key);
              setSelectedPlan(null);
            }}
          >
            <div className="text-3xl mb-2">{type.emoji}</div>
            <h3 className="font-semibold text-lg">{type.title}</h3>
            <p className="text-sm text-gray-600">{type.description}</p>
            {selectedRole === type.key && (
              <div className="absolute top-4 right-4 text-purple-500 text-xl">
                ‚úîÔ∏è
              </div>
            )}
          </div>
        ))}
      </div>

      <AnimatePresence>
        {isSeller && (
          <motion.div
            key="plans"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.3 }}
            className="mt-10"
          >
            <h2 className="text-xl font-bold mb-4">Choose a Seller Plan</h2>
            <div className="space-y-4">
              {sellerPlans.map((plan) => (
                <div
                  key={plan.id}
                  className={`relative border p-4 rounded-xl cursor-pointer transition ${
                    selectedPlan?.id === plan.id
                      ? "border-purple-500 bg-purple-50"
                      : "hover:bg-gray-50"
                  }`}
                  onClick={() => setSelectedPlan(plan)}
                >
                  <h4 className="font-semibold">{plan.label}</h4>
                  <p className="text-sm text-gray-600">
                    {plan.description || "Flexible plan for sellers."}
                  </p>
                  <p className="text-md mt-1 font-bold">
                    {plan.price_per_month === "0.00"
                      ? "Free"
                      : `GHS ${plan.price_per_month}/month`}
                  </p>
                  {selectedPlan?.id === plan.id && (
                    <div className="absolute top-3 right-3 text-purple-500">
                      ‚úîÔ∏è
                    </div>
                  )}
                </div>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {error && (
        <div className="text-red-600 text-sm text-center mt-6">{error}</div>
      )}

      <div className="mt-12 text-center">
        <Button
          disabled={submitting || !selectedRole || (isSeller && !selectedPlan)}
          onClick={handleSubmit}
          className="w-full max-w-md mx-auto"
        >
          {submitting ? "Submitting..." : "Continue"}
        </Button>
      </div>
    </div>
  );
}


===== src/components/onboarding/AccountTypeSelector.jsx =====
"use client";

import { motion } from "framer-motion";
import classNames from "classnames";

const accountTypes = [
  {
    key: "buyer",
    label: "Buy on Upfrica",
    description: "Find and purchase products from African sellers worldwide.",
    color: "bg-green-100 border-green-300",
  },
  {
    key: "seller_private",
    label: "Sell as Individual",
    description: "List products, manage orders, and earn from home.",
    color: "bg-yellow-100 border-yellow-300",
  },
  {
    key: "seller_business",
    label: "Sell as Business",
    description: "Grow your business with advanced tools and storefront.",
    color: "bg-blue-100 border-blue-300",
  },
  {
    key: "agent",
    label: "Sourcing Agent",
    description:
      "Find items for buyers, coordinate pickups, and earn commissions.",
    color: "bg-purple-100 border-purple-300",
  },
  {
    key: "affiliate",
    label: "Affiliate Marketer",
    description: "Promote products and earn commissions for each sale.",
    color: "bg-pink-100 border-pink-300",
  },
];

export default function AccountTypeSelector({ selected, onSelect }) {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
      {accountTypes.map((type) => (
        <motion.div
          key={type.key}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={() => onSelect(type.key)}
          className={classNames(
            "p-5 border-2 rounded-xl cursor-pointer shadow-sm transition-all",
            selected === type.key
              ? `ring-2 ring-purple-500 ${type.color}`
              : "border-gray-200 bg-white",
          )}
        >
          <h3 className="text-lg font-semibold text-gray-800">{type.label}</h3>
          <p className="text-sm text-gray-600 mt-2">{type.description}</p>
        </motion.div>
      ))}
    </div>
  );
}


===== src/components/order/OrderBord.jsx =====
// components/order/OrderBord.js
"use client";
import Link from "next/link";
import React from "react";
import { usePathname } from "next/navigation";
import { BiSolidShoppingBag } from "react-icons/bi";
import { FaTimesCircle, FaUndoAlt } from "react-icons/fa";

const OrderBord = () => {
  const pathname = usePathname();

  const links = [
    { href: "/order/order", label: "All Orders", icon: BiSolidShoppingBag },
    {
      href: "/order/your-sales",
      label: "Your Sales",
      icon: BiSolidShoppingBag,
    },
    { href: "/order/orders", label: "Orders", icon: BiSolidShoppingBag },
    {
      href: "/order/cancellations",
      label: "Cancellations",
      icon: FaTimesCircle,
    },
    { href: "/order/returns", label: "Returns", icon: FaUndoAlt },
  ];

  return (
    <div>
      <ul className="flex justify-around items-center text-base font-bold border-t border-b bg-white shadow-xl">
        {links.map((link) => {
          const isActive = pathname === link.href;
          return (
            <li
              key={link.href}
              className={`flex items-center h-10 cursor-pointer px-4 ${
                isActive
                  ? "text-purple-600 border-b-4 border-purple-600"
                  : "text-[#747579] hover:text-purple-600"
              }`}
            >
              <Link href={link.href} className="flex items-center">
                {React.createElement(link.icon, { className: "mr-2" })}
                {link.label}
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  );
};

export default OrderBord;


===== src/components/order/OrderCart.jsx =====
"use client";
import React from "react";
import { FaLocationPin } from "react-icons/fa6";
import { FaCartPlus } from "react-icons/fa";
import { useOrder } from "@/contexts/OrderContext";

const OrderCart = () => {
  const { data, error, loading, user, setData } = useOrder(); // Context ‡¶•‡ßá‡¶ï‡ßá `setData` ‡¶™‡ßá‡¶§‡ßá ‡¶π‡¶¨‡ßá

  const handleDelete = async (itemId) => {
    if (user && user.token) {
      const myHeaders = new Headers();
      myHeaders.append("Authorization", `Bearer ${user.token}`);
      myHeaders.append("Content-Type", "application/json");

      const requestOptions = {
        method: "DELETE",
        headers: myHeaders,
        redirect: "follow",
      };

      try {
        const response = await fetch(
          `https://upfrica-staging.herokuapp.com/api/v1/orders/${itemId}`,
          requestOptions,
        );
        if (!response.ok) {
          throw new Error(`Failed to delete item: ${response.status}`);
        }

        // ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
        const filteredData = data.filter((product) => product.id !== itemId);
        setData(filteredData); // ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶ï‡¶®‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      } catch (error) {
        console.error("Delete Error:", error);
      }
    }
  };

  if (loading) {
    return <div className="text-center">Loading....</div>; // Skeleton loader
  }

  if (error) {
    return <div className="text-red-500 text-center">{error}</div>; // Display error message
  }

  return (
    <div>
      <div className="space-y-4 text-base">
        {data?.map(
          (product, index) =>
            product?.cart_items?.length > 0 && (
              <div
                key={product.id}
                className="border border-gray-300 p-4 rounded-lg shadow-lg bg-white hover:shadow-xl transition-shadow duration-300"
              >
                <div className="text-base">
                  <p className="text-xl font-bold">Order #{index + 1}</p>
                  <p className="text-gray-600">
                    Order Date: {product.created_at || "N/A"}
                  </p>
                  <p className="text-gray-700 font-bold">
                    Pick up one or more items in shop or at a collection point.
                  </p>
                </div>

                <hr className="my-4" />

                <div className="grid md:grid-cols-2 py-5">
                  <div className="col-span-1 flex items-center">
                    <img
                      src={
                        product.cart_items[0].product?.product_images?.[0] ||
                        "/default-image.jpg"
                      }
                      alt={product.cart_items[0]?.product?.title || "No Title"}
                      className="w-20 h-20 object-cover rounded-md"
                    />
                    <div className="ml-4 text-base font-bold">
                      <p className="text-gray-700">
                        {product.cart_items[0]?.product?.title || "No Title"}
                      </p>
                      <p className="text-gray-600">
                        Quantity: {product.cart_items[0].quantity || 0}
                      </p>
                      <p className="text-gray-600">
                        {product.is_paid ? "Paid" : "Unpaid"}
                      </p>
                      <p className="text-gray-600">
                        Dispatch time: {product.dispatch_time || "N/A"}
                      </p>
                      <p className="text-gray-600">
                        Price: $
                        {product.cart_items[0].product?.price?.cents
                          ? (
                              product.cart_items[0].product.price.cents / 100
                            ).toFixed(2)
                          : "N/A"}
                      </p>
                      <p className="text-gray-600">
                        Postage & Packing: {product.postage_packing || "N/A"}
                      </p>
                      <p className="text-gray-600">
                        Total: $
                        {product.total_amount?.cents
                          ? (product.total_amount.cents / 100).toFixed(2)
                          : "N/A"}
                      </p>
                    </div>
                  </div>

                  <div className="col-span-1 flex justify-center items-center">
                    <div className="grid grid-cols-4 gap-2">
                      <button className="text-black px-4 py-1 border rounded hover:border-red-400">
                        Checkout
                      </button>
                      <button
                        className="text-black px-4 py-1 border rounded bg-pink-50 hover:border-red-400"
                        onClick={() => handleDelete(product.id)}
                      >
                        Delete Order
                      </button>
                      <button className="text-black px-4 py-2 rounded bg-purple-100 hover:bg-purple-700 font-bold">
                        Leave Feedback
                      </button>
                      <button className="bg-green-100 text-black px-4 py-2 rounded font-bold hover:bg-green-600 flex items-center">
                        <FaCartPlus className="h-6 w-6" />
                        Buy Again
                      </button>
                    </div>
                  </div>
                </div>

                <hr className="my-4" />

                <div className="p-4 bg-white rounded">
                  <h2 className="text-xl font-bold mb-2">Delivery Location</h2>
                  <p className="text-gray-700">{product?.buyer?.first_name}</p>
                  <p className="text-gray-700">
                    {product?.buyer?.town}, {product?.buyer?.country}
                  </p>
                  <p className="text-gray-700">Bouvet Island</p>
                  <p className="text-gray-700">
                    {product?.buyer?.phone_number}
                  </p>
                  <button className="font-bold hover:text-red-500 cursor-pointer hover:underline">
                    WhatsApp
                  </button>
                </div>
              </div>
            ),
        )}
      </div>
    </div>
  );
};

export default OrderCart;


===== src/components/order/ProfileCard.jsx =====
"use client";
import React from "react";
import { FaUserCircle, FaRegBookmark, FaCog } from "react-icons/fa";
import Link from "next/link"; // ‡¶Ø‡¶¶‡¶ø Next.js ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®

const ProfileCard = () => {
  const user = {
    name: "John Doe",
    profileImage:
      "https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?cs=srgb&dl=pexels-pixabay-220453.jpg&fm=jpg", // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ ‡¶™‡¶æ‡¶• ‡¶¶‡¶ø‡¶®
  };

  return (
    <div className="max-w-sm mx-auto bg-white rounded-lg shadow-md p-6">
      <div className="flex flex-col items-center">
        <img
          className="w-24 h-24 rounded-full object-cover"
          src={user.profileImage}
          alt={`${user.name}'s profile`}
        />
        <h2 className="mt-4  font-semibold">{user.name}</h2>
        <p className="text-gray-600">Welcome back</p>
      </div>
      <hr className="my-6" />
      <div className="space-y-4">
        {/* My Profile Page */}
        <Link href="/dashboard">
          <div className="flex items-center cursor-pointer hover:text-purple-600 mb-6">
            <FaUserCircle className="text-xl mr-3" />
            <span className="text-lg font-medium">Dashboard</span>
          </div>
        </Link>
        {/* My Saved Items */}
        <Link href="/saved-items">
          <div className="flex items-center cursor-pointer hover:text-purple-600 mb-6">
            <FaRegBookmark className="text-xl mr-3" />
            <span className="text-lg font-medium">My Saved Items</span>
          </div>
        </Link>
        {/* Profile Settings */}
        <Link href="/settings">
          <div className="flex items-center cursor-pointer hover:text-purple-600 mb-6">
            <FaCog className="text-xl mr-3" />
            <span className="text-lg font-medium">Profile Settings</span>
          </div>
        </Link>
      </div>
    </div>
  );
};

export default ProfileCard;


===== src/components/overview/Analytics.jsx =====
import React from "react";
import SalesCardGroup from "./SalesCardGroup.jsx";
import OrdersData from "./SellerOrdersData.jsx";

const Analytics = () => {
  return (
    <div className="space-y-4">
      <SalesCardGroup />
      <OrdersData />
    </div>
  );
};

export default Analytics;


===== src/components/overview/AnalyticsSection.jsx =====
// src/components/AnalyticsSection.js
import React from "react";
import EarningsChart from "./EarningsChart";
import SummaryGroup from "./SummaryGroup";
import MapPlaceholder from "./MapPlaceholder";

const AnalyticsSection = () => {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
      <EarningsChart />
    </div>
  );
};

export default AnalyticsSection;


===== src/components/overview/ChartSection.jsx =====
// src/components/charts/ChartSection.js
import React from "react";

const ChartSection = () => {
  return (
    <div className="bg-white rounded-lg shadow-md p-5 h-64 flex items-center justify-center col-span-2">
      <p className="text-gray-400">[Chart Placeholder]</p>
    </div>
  );
};

export default ChartSection;


===== src/components/overview/EarningsChart.jsx =====
// src/components/charts/EarningsChart.js
"use client";
import React from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { earningsData } from "./earningsData";
// import { earningsData } from "../../data/analyticsData";

const EarningsChart = () => (
  <div className="bg-white rounded-xl p-4 shadow-md">
    <p className="text-lg font-bold text-gray-800">
      Total Earnings: {earningsData.total}
    </p>
    <ResponsiveContainer width="100%" height={100}>
      <LineChart data={earningsData.chart}>
        <XAxis dataKey="month" />
        <YAxis />
        <Tooltip />
        <Line
          type="monotone"
          dataKey="value"
          stroke="#3b82f6"
          strokeWidth={3}
          dot
        />
      </LineChart>
    </ResponsiveContainer>
  </div>
);

export default EarningsChart;


===== src/components/overview/IdeasLocations.jsx =====
// src/components/cards/IdeasLocations.js
import React from "react";

const IdeasLocations = () => {
  return (
    <div className="flex flex-col md:flex-row gap-4">
      <div className="bg-white rounded-lg shadow-md p-5 flex-1">
        <h3 className="text-lg font-semibold text-gray-700">Total Ideas</h3>
        <p className="text-2xl font-bold text-gray-900">235</p>
      </div>
      <div className="bg-white rounded-lg shadow-md p-5 flex-1">
        <h3 className="text-lg font-semibold text-gray-700">Total Locations</h3>
        <p className="text-2xl font-bold text-gray-900">25</p>
      </div>
    </div>
  );
};

export default IdeasLocations;


===== src/components/overview/MapPlaceholder.jsx =====
// src/components/MapPlaceholder.js
import React from "react";

const MapPlaceholder = () => (
  <div className="bg-white rounded-xl p-4 shadow-md h-72 flex items-center justify-center w-full">
    <p className="text-gray-400">[World Map Placeholder]</p>
  </div>
);

export default MapPlaceholder;


===== src/components/overview/RatingSection.jsx =====
// src/components/RatingSection.js
import React from "react";
import { FaStar } from "react-icons/fa";

const ratings = {
  average: 4.7,
  counts: {
    5: 384,
    4: 145,
    3: 24,
    2: 1,
    1: 0,
  },
};

const RatingSection = () => {
  const total = Object.values(ratings.counts).reduce((a, b) => a + b, 0);

  return (
    <div className="bg-white rounded-xl shadow-md p-5 w-full max-w-md mx-auto">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold text-gray-700">Recent Users</h3>
        <div className="flex items-center text-yellow-400">
          {[...Array(5)].map((_, i) => (
            <FaStar
              key={i}
              className={i < Math.round(ratings.average) ? "" : "text-gray-300"}
            />
          ))}
        </div>
      </div>

      <div className="flex items-center gap-2 mb-4">
        <span className="text-4xl font-bold text-yellow-500">
          {ratings.average}
        </span>
        <span className="text-gray-400 text-lg">/5</span>
      </div>

      <div className="space-y-3">
        {Object.entries(ratings.counts).map(([star, count]) => (
          <div key={star} className="flex items-center gap-3">
            <span className="w-6 text-sm font-semibold">{star}‚òÖ</span>
            <div className="flex-1 bg-gray-200 rounded h-2">
              <div
                className="bg-blue-500 h-2 rounded"
                style={{ width: `${(count / total) * 100}%` }}
              ></div>
            </div>
            <span className="text-sm text-gray-500 w-10 text-right">
              {count}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default RatingSection;


===== src/components/overview/RecentOrders.jsx =====
// 'use client';

// import { useState, useEffect } from 'react';
// import { useSelector } from 'react-redux';
// import { useRouter } from 'next/navigation';
// import { FiSearch } from 'react-icons/fi';
// import { MdRemoveRedEye, MdDelete, MdCheckCircle, MdOutlineRemoveRedEye } from 'react-icons/md';
// import { FaEdit } from "react-icons/fa";
// import Pagination from '@/components/Pagination';

// const PAGE_SIZE = 20;

// export default function RecentOrdersPage() {
//     const { token, user } = useSelector((state) => state.auth);
//     const router = useRouter();

//     const [orderItems, setOrderItems] = useState([]);
//     const [searchTerm, setSearchTerm] = useState('');
//     const [currentPage, setCurrentPage] = useState(1);
//     const [totalPages, setTotalPages] = useState(1);
//     const [loading, setLoading] = useState(false);
//     const [deletingId, setDeletingId] = useState(null);

//     useEffect(() => {
//         if (!token) return;
//         const fetchOrderItems = async () => {
//             setLoading(true);
//             try {
//                 const res = await fetch(
//                     `https://media.upfrica.com/api/seller/order-items/?page=${currentPage}`,
//                     { method: 'GET', headers: { Authorization: `Token ${token}` } }
//                 );
//                 if (!res.ok) throw new Error('Failed to fetch');
//                 const data = await res.json();
//                 setOrderItems(data.results || []);
//                 setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
//             } catch (err) {
//                 console.error(err);
//             } finally {
//                 setLoading(false);
//             }
//         };
//         fetchOrderItems();
//     }, [token, currentPage]);

//     const handleView = (slug) => router.push(`/${user?.country?.toLocaleDateString() || 'gh'}/${slug}`);
//     const handleEdit = (id) => router.push(`/new-dashboard/all-orders/${id}`);
//     const handleDelete = async (id) => {
//         if (!window.confirm('Are you sure you want to delete this item?')) return;
//         setDeletingId(id);
//         try {
//             const res = await fetch(
//                 `https://media.upfrica.com/api/seller/order-items/${id}/`,
//                 { method: 'DELETE', headers: { Authorization: `Token ${token}` } }
//             );
//             if (!res.ok) throw new Error('Delete failed');
//             setOrderItems((prev) => prev.filter((item) => item.id !== id));
//         } catch (err) {
//             console.error(err);
//         } finally {
//             setDeletingId(null);
//         }
//     };

//     const filteredItems = orderItems.filter((item) => {
//         const title = item.product.title.toLowerCase();
//         const sku = item.product.u_pid.toLowerCase();
//         return title.includes(searchTerm.toLowerCase()) || sku.includes(searchTerm.toLowerCase());
//     });

//     return (
//         <div className="w-full  mx-auto p-6">
//             <h1 className="text-2xl font-semibold mb-4">Recent Orders</h1>

//             {/* Search + Pagination */}
//             <div className="flex items-center justify-between mb-4">
//                 <div className="relative w-1/2">
//                     <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
//                     <input
//                         type="text"
//                         value={searchTerm}
//                         onChange={(e) => { setSearchTerm(e.target.value); setCurrentPage(1); }}
//                         placeholder="Search orders..."
//                         className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none font-medium"
//                     />
//                 </div>
//                 {totalPages > 1 && (
//                     <Pagination
//                         currentPage={currentPage}
//                         totalPages={totalPages}
//                         onPageChange={setCurrentPage}
//                     />
//                 )}
//             </div>

//             {loading ? (
//                 // loading skeletons
//                 <div className="space-y-6">
//                     {[...Array(3)].map((_, i) => (
//                         <div key={i} className="space-y-4">
//                             <div className="animate-pulse flex items-center bg-green-50 p-4 rounded-lg h-12" />
//                             <div className="animate-pulse flex items-start bg-white p-4 rounded-lg h-32" />
//                             <div className="animate-pulse bg-white p-4 rounded-lg h-24" />
//                         </div>
//                     ))}
//                 </div>
//             ) : (
//                 <div className="space-y-6">
//                     {filteredItems.map((item) => {
//                         const { product } = item;
//                         const statusText =
//                             item.dispatch_status === 0 ? 'Pending' : 'Dispatched';
//                         const statusColor =
//                             item.dispatch_status === 0 ? 'yellow' : 'green';

//                         return (
//                             <div key={item.id} className="space-y-4">
//                                 {/* 1) Header */}
//                                 <div className="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
//                                     <div className="flex space-x-6 text-sm text-gray-700">
//                                         <div>
//                                             <span className="font-medium">Order #{item?.order_id}</span>{' '}
//                                             {item.order_number}
//                                         </div>
//                                         <div>
//                                             <span className="font-medium">Date</span>{' '}
//                                             {new Date(item.order_date).toLocaleDateString()}
//                                         </div>
//                                         <div>
//                                             <span className="font-medium">Total</span> GHS{' '}
//                                              {(item.price_cents / 100).toFixed(2)}
//                                         </div>
//                                     </div>
//                                     <div className="flex items-center space-x-2">
//                                         <MdCheckCircle
//                                             className={`w-6 h-6 text-${statusColor}-500`}
//                                         />
//                                         <span
//                                             className={`text-${statusColor}-800 font-semibold`}
//                                         >
//                                             {statusText}
//                                         </span>
//                                     </div>

//                                 </div>

//                                 {/* 2) Product Detail */}
//                                 <div className="bg-white p-4 rounded-lg shadow">
//                                     <div className="flex items-start">
//                                         {/* Image */}
//                                         {product.product_images[0] ? (
//                                             <img
//                                                 src={product.product_images[0]}
//                                                 alt={product.title}
//                                                 className="w-20 h-20 object-cover rounded-lg mr-4"
//                                             />
//                                         ) : (
//                                             <div className="w-20 h-20 bg-gray-100 rounded-lg mr-4" />
//                                         )}

//                                         {/* Details */}
//                                         <div className="flex-1">
//                                             <h2 className="font-semibold text-lg">
//                                                 {product.title}
//                                             </h2>
//                                             <div className="mt-2 space-y-1 text-sm text-gray-600">
//                                                 <div>
//                                                     <span className="font-medium text-gray-800">
//                                                         Status:
//                                                     </span>{' '}
//                                                     {statusText}
//                                                 </div>
//                                                 <div>
//                                                     <span className="font-medium text-gray-800">
//                                                         Item ID:
//                                                     </span>{' '}
//                                                     {item.id}
//                                                 </div>
//                                                 <div>
//                                                     <span className="font-medium text-gray-800">
//                                                         Price:
//                                                     </span>{' '}
//                                                     GHS{' '}
//                                                     {(item.price_cents / 100).toFixed(2)}
//                                                 </div>
//                                             </div>

//                                         </div>

//                                         {/* actions button  */}
//                                         <div className="py-3 flex space-x-2">
//                                             <button
//                                                 onClick={() => handleView(item.id)}
//                                                 className="p-2 bg-gray-100 hover:bg-gray-200 rounded-full font-bold text-gray-700"
//                                                 aria-label="View"
//                                             >
//                                                 <MdOutlineRemoveRedEye size={20} />
//                                             </button>
//                                             <button
//                                                 onClick={() => handleEdit(item.id)}
//                                                 className="p-2 bg-gray-100 hover:bg-blue-200 rounded-full font-bold text-gray-700 hover:text-blue-700"
//                                                 aria-label="Edit"
//                                             >
//                                                 <FaEdit size={20} />
//                                             </button>
//                                             <button
//                                                 onClick={() => handleDelete(item.id)}
//                                                 disabled={deletingId === item.id}
//                                                 className={`p-2 rounded-full font-bold ${deletingId === item.id
//                                                     ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
//                                                     : 'bg-gray-100 hover:bg-red-200 hover:text-red-700'
//                                                     }`}
//                                                 aria-label="Delete"
//                                             >
//                                                 <MdDelete size={20} />
//                                             </button>
//                                         </div>
//                                     </div>
//                                 </div>
//                             </div>
//                         );
//                     })}
//                 </div>
//             )}

//             {totalPages > 1 && (
//                 <div className="flex justify-center mt-4">
//                     <Pagination
//                         currentPage={currentPage}
//                         totalPages={totalPages}
//                         onPageChange={setCurrentPage}
//                     />
//                 </div>
//             )}
//         </div>
//     );
// }

"use client";

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import { FiSearch } from "react-icons/fi";
import {
  MdRemoveRedEye,
  MdDelete,
  MdCheckCircle,
  MdOutlineRemoveRedEye,
} from "react-icons/md";
import { FaEdit } from "react-icons/fa";
import Pagination from "@/components/Pagination";
import { BASE_API_URL } from "@/app/constants";

const PAGE_SIZE = 20;

export default function RecentOrdersPage() {
  const { token, user } = useSelector((state) => state.auth);
  const router = useRouter();

  const [orderItems, setOrderItems] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);
  const [deletingId, setDeletingId] = useState(null);

  useEffect(() => {
    if (!token) return;

    const fetchOrderItems = async () => {
      setLoading(true);
      try {
        // build query params
        const params = new URLSearchParams();
        params.append("page", currentPage);
        // if there‚Äôs a search term, hit the search endpoint
        const isSearch = Boolean(searchTerm.trim());
        if (isSearch) {
          params.append("q", searchTerm.trim());
        }

        const url = isSearch
          ? `${BASE_API_URL}/api/seller/orders/search/?${params.toString()}`
          : `${BASE_API_URL}/api/seller/order-items/?${params.toString()}`;

        const res = await fetch(url, {
          method: "GET",
          headers: { Authorization: `Token ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch");
        const data = await res.json();

        setOrderItems(data.results || []);
        setTotalPages(Math.ceil((data.count || 0) / PAGE_SIZE));
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchOrderItems();
  }, [token, currentPage, searchTerm]);

  const handleView = (slug) => {
    router.push(`/${user?.country?.toLocaleDateString() || "gh"}/${slug}`);
  };
  const handleEdit = (id) => router.push(`/new-dashboard/all-orders/${id}`);
  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this item?")) return;
    setDeletingId(id);
    try {
      const res = await fetch(`${BASE_API_URL}/api/seller/order-items/${id}/`, {
        method: "DELETE",
        headers: { Authorization: `Token ${token}` },
      });
      if (!res.ok) throw new Error("Delete failed");
      setOrderItems((prev) => prev.filter((item) => item.id !== id));
    } catch (err) {
      console.error(err);
    } finally {
      setDeletingId(null);
    }
  };

  return (
    <div className="w-full mx-auto p-6">
      <h1 className="text-2xl font-semibold mb-4">Recent Orders</h1>

      {/* Search + Pagination */}
      <div className="flex items-center justify-between mb-4">
        <div className="relative w-1/2">
          <FiSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setCurrentPage(1);
            }}
            placeholder="Search orders..."
            className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 text-gray-900 placeholder-gray-500 focus:outline-none font-medium"
          />
        </div>
        {totalPages > 1 && (
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        )}
      </div>

      {loading ? (
        <div className="space-y-6">
          {[...Array(3)].map((_, i) => (
            <div
              key={i}
              className="animate-pulse bg-gray-50 p-4 rounded-lg h-24"
            />
          ))}
        </div>
      ) : (
        <div className="space-y-6">
          {orderItems.map((item) => {
            const { product } = item;
            const statusText =
              item.dispatch_status === 0 ? "Pending" : "Dispatched";
            const statusColor = item.dispatch_status === 0 ? "yellow" : "green";

            return (
              <div key={item.id} className="space-y-4">
                {/* Header */}
                <div className="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
                  <div className="flex space-x-6 text-sm text-gray-700">
                    <div>
                      <span className="font-medium">
                        Order #{item.order_id}
                      </span>
                    </div>
                    <div>
                      <span className="font-medium">Date</span>{" "}
                      {new Date(item.order_date).toLocaleDateString()}
                    </div>
                    <div>
                      <span className="font-medium">Total</span> GHS{" "}
                      {(item.price_cents / 100).toFixed(2)}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <MdCheckCircle
                      className={`w-6 h-6 text-${statusColor}-500`}
                    />
                    <span className={`text-${statusColor}-800 font-semibold`}>
                      {statusText}
                    </span>
                  </div>
                </div>

// ‚Ä¶truncated‚Ä¶

===== src/components/overview/RecentUsers.jsx =====
// src/components/cards/RecentUsers.js
import React from "react";
import recentUsers from "./recentUsers";
import { FaCheck, FaTimes } from "react-icons/fa";

const RecentUsers = () => {
  return (
    <div className="bg-white rounded-xl shadow-md p-5">
      <h3 className="text-lg font-semibold text-gray-700 mb-4">Recent Users</h3>
      <ul className="space-y-4">
        {recentUsers.map((user, i) => (
          <li key={i} className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              <img
                src={user.avatar}
                alt={user.name}
                className="w-10 h-10 rounded-full"
              />
              <div>
                <p className="font-semibold text-gray-800">{user.name}</p>
                <p className="text-sm text-gray-500">{user.role}</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <span className={`text-xs ${user.color}`}>{user.time}</span>
              <button className="text-red-500 hover:text-red-700">
                <FaTimes />
              </button>
              <button className="text-green-500 hover:text-green-700">
                <FaCheck />
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default RecentUsers;


===== src/components/overview/ResponsiveHeader.jsx =====
import React, { useState } from "react";
import { LuMenu, LuSearch } from "react-icons/lu";

const ResponsiveHeader = ({ handleToggleClick }) => {
  const [showSearchMobile, setShowSearchMobile] = useState(false);

  return (
    <div className="ml-auto flex items-center gap-2 md:gap-4 relative pb-10">
      {/* Sidebar Toggle Button */}
      <button
        onClick={handleToggleClick}
        className="p-2 rounded hover:bg-gray-100 transition"
        aria-label="Toggle Sidebar"
      >
        <LuMenu className="w-6 h-6 text-gray-700" />
      </button>
    </div>
  );
};

export default ResponsiveHeader;


===== src/components/overview/SalesCard.jsx.jsx =====
// src/components/cards/SalesCard.js
import React from "react";

const SalesCard = ({ title, amount, percent }) => {
  return (
    <div className="bg-white rounded-lg shadow-md p-5">
      <div className="text-gray-500 text-sm font-medium mb-1">{title}</div>
      <div className="text-2xl font-bold text-gray-900">${amount}</div>
      <div className="text-sm text-green-600 mt-1 font-semibold">
        +{percent}%
      </div>
    </div>
  );
};

export default SalesCard;


===== src/components/overview/SalesCardGroup.jsx =====
import React from "react";

const SalesCardGroup = ({ stats, loading }) => {
  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {[...Array(3)].map((_, idx) => (
          <div
            key={idx}
            className="rounded-xl p-4 shadow-md bg-white animate-pulse"
          >
            <div className="h-4 bg-gray-300 rounded w-1/2 mb-2" />
            <div className="h-8 bg-gray-300 rounded w-3/4 mb-2" />
            <div className="h-3 bg-gray-300 rounded w-1/4 mb-4" />
            <div className="h-4 bg-gray-300 rounded mb-1" />
            <div className="w-full h-2 bg-gray-300 rounded mt-2" />
          </div>
        ))}
      </div>
    );
  }

  if (!stats) return null; // üîí Prevent crash when stats is undefined/null

  const { daily, monthly, all_time } = stats;
  const itemsArray = [
    daily.items_sold,
    monthly.items_sold,
    all_time.items_sold,
  ];
  const maxItems = Math.max(...itemsArray, 1);

  const cards = [
    { title: "Daily Sales", data: daily },
    { title: "Monthly Sales", data: monthly },
    { title: "All Time Sales", data: all_time },
  ];

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      {cards.map(({ title, data }, idx) => {
        const amount = `‚Çµ ${(data.sales_cents / 100).toLocaleString()}`;
        const percent = data.growth_pct !== null ? `${data.growth_pct}%` : "--";
        const message =
          data.items_sold > 0
            ? `${data.items_sold} items sold`
            : "No items sold";
        const progress = Math.round((data.items_sold / maxItems) * 100);

        return (
          <div key={idx} className="rounded-xl p-4 shadow-md bg-white">
            <h4 className="text-sm font-medium text-black">{title}</h4>
            <div className="flex items-center justify-between mt-2">
              <p className="text-2xl font-bold text-black">{amount}</p>
              <span className="bg-green-100 text-green-600 text-xs font-semibold px-2 py-0.5 rounded">
                {percent}
              </span>
            </div>
            <p className="text-sm mt-1 text-black">{message}</p>
            <div className="w-full h-2 mt-3 bg-gray-200 rounded">
              <div
                className="h-2 bg-blue-400 rounded"
                style={{ width: `${progress}%` }}
              />
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default SalesCardGroup;


===== src/components/overview/SellerOrdersData.jsx =====
// export default SellerOrdersData;
// src/components/overview/SellerOrdersData.js
import React from "react";
import { FaInbox, FaTruck, FaUndo } from "react-icons/fa";

const iconMap = {
  New: FaInbox,
  Shipped: FaTruck,
  "Cancelled / Returned": FaUndo,
};

const SellerOrdersData = ({ orders, loading }) => {
  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {[...Array(3)].map((_, idx) => (
          <div
            key={idx}
            className="bg-white rounded-xl shadow-md p-4 flex justify-between items-center animate-pulse"
          >
            <div>
              <div className="h-6 w-6 bg-gray-300 rounded mb-2" />
              <div className="h-4 bg-gray-300 rounded w-20 mb-2" />
              <div className="h-6 bg-gray-300 rounded w-16 mb-2" />
              <div className="h-4 bg-gray-300 rounded w-10" />
            </div>
            <div className="text-right">
              <div className="h-4 bg-gray-300 rounded w-16 mb-2" />
              <div className="h-4 bg-gray-300 rounded w-20 mb-2" />
              <div className="h-4 bg-gray-300 rounded w-16 mb-2" />
              <div className="h-4 bg-gray-300 rounded w-20" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      {orders.map((item, idx) => {
        const Icon = iconMap[item.seller] || FaInbox;
        const growthDisplay = item.growth != null ? `${item.growth}%` : "--";
        return (
          <div
            key={idx}
            className="bg-white rounded-xl shadow-md p-4 flex justify-between items-center"
          >
            <div>
              <div className="flex items-center gap-2 mb-1">
                <Icon className="text-2xl text-gray-700" />
                <h3 className="text-sm font-semibold text-gray-700">
                  {item.seller} Orders
                </h3>
              </div>
              <p className="text-xl font-bold text-gray-900">{item.orders}</p>
              <p className="text-sm text-green-500 font-medium">
                {growthDisplay}
              </p>
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-500">Avg. Target Orders</p>
              <p className="text-md font-bold text-gray-700">{item.target}</p>
              <p className="text-sm text-gray-500 mt-2">Avg. Ship Time</p>
              <p className="text-md font-bold text-gray-700">
                {item.avgShipTime ?? "--"}
              </p>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default SellerOrdersData;


===== src/components/overview/SocialCard.jsx =====
// src/components/cards/SocialCard.js
import React from "react";

const SocialCard = ({
  platform,
  Icon,
  likes,
  growth,
  target,
  duration,
  color,
}) => {
  return (
    <div className="bg-white rounded-xl shadow-md p-4 flex justify-between items-center">
      <div>
        <div className="flex items-center gap-2 mb-1">
          <Icon className={`text-2xl ${color}`} />
          <h3 className="text-sm font-semibold text-gray-700">
            {platform} Likes
          </h3>
        </div>
        <p className="text-xl font-bold text-gray-900">{likes}</p>
        <p className="text-sm text-green-500 font-medium">{growth}</p>
      </div>
      <div className="text-right">
        <p className="text-sm text-gray-500">Target</p>
        <p className="text-md font-bold text-gray-700">{target}</p>
        <p className="text-sm text-gray-500 mt-2">Duration</p>
        <p className="text-md font-bold text-gray-700">{duration}</p>
      </div>
    </div>
  );
};

export default SocialCard;


===== src/components/overview/SocialStats.jsx =====
// src/components/cards/SocialStats.js
import React from "react";

const platforms = [
  { name: "Facebook", color: "text-blue-600" },
  { name: "Google", color: "text-red-500" },
  { name: "Twitter", color: "text-sky-500" },
];

const SocialStats = () => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-4">
      {platforms.map((p) => (
        <div key={p.name} className="bg-white rounded-lg shadow-md p-5">
          <h3 className={`text-lg font-semibold ${p.color}`}>{p.name} Likes</h3>
          <p className="text-2xl font-bold text-gray-900 mt-1">12,281</p>
          <p className="text-green-600 text-sm font-medium mt-1">+2.3%</p>
          <p className="text-xs text-gray-400 mt-1">
            Target: 35,098 | Duration: 3,539
          </p>
        </div>
      ))}
    </div>
  );
};

export default SocialStats;


===== src/components/overview/StatCard.jsx =====
// src/components/cards/StatCard.js
import React from "react";

const StatCard = ({
  title,
  amount,
  percent,
  message,
  progress,
  bgColor,
  textColor,
}) => {
  return (
    <div className={`rounded-xl p-4 shadow-md ${bgColor}`}>
      <h4 className={`text-sm font-medium ${textColor}`}>{title}</h4>
      <div className="flex items-center justify-between mt-2">
        <p className={`text-2xl font-bold ${textColor}`}>{amount}</p>
        <span className="bg-green-100 text-green-600 text-xs font-semibold px-2 py-0.5 rounded">
          {percent}
        </span>
      </div>
      <p className={`text-sm mt-1 ${textColor}`}>{message}</p>
      <div className="w-full h-2 mt-3 bg-gray-200 rounded">
        <div
          className="h-2 bg-blue-400 rounded"
          style={{ width: `${progress}%` }}
        ></div>
      </div>
    </div>
  );
};

export default StatCard;


===== src/components/overview/SummaryCard.jsx =====
// src/components/cards/SummaryCard.js
import React from "react";

const SummaryCard = ({ title, value, icon, bg, text }) => (
  <div className={`rounded-xl px-4 py-3 shadow ${bg}`}>
    <div className="flex items-center gap-2">
      <span className="text-xl">{icon}</span>
      <div>
        <p className="text-sm font-medium text-gray-500">{title}</p>
        <p className={`text-lg font-bold ${text}`}>{value}</p>
      </div>
    </div>
  </div>
);

export default SummaryCard;


===== src/components/overview/SummaryGroup.jsx =====
// src/components/cards/SummaryGroup.js
import React from "react";
import { summaryCards } from "./summaryCards";
import SummaryCard from "./SummaryCard";

const SummaryGroup = () => (
  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
    {summaryCards.map((item, i) => (
      <SummaryCard key={i} {...item} />
    ))}
  </div>
);

export default SummaryGroup;


===== src/components/overview/UserFeedbackSection.jsx =====
// src/components/UserFeedbackSection.js
import React from "react";
import { FaStar, FaCheck, FaTimes } from "react-icons/fa";

// Ratings data
const ratings = {
  average: 4.7,
  counts: {
    5: 384,
    4: 145,
    3: 24,
    2: 1,
    1: 0,
  },
};

// Recent users data
const recentUsers = [
  {
    name: "Quinn Flynn",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-orange-400",
    avatar: "https://i.pravatar.cc/40?img=1",
  },
  {
    name: "Garrett Winters",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-green-400",
    avatar: "https://i.pravatar.cc/40?img=2",
  },
  {
    name: "Ashton Cox",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-blue-400",
    avatar: "https://i.pravatar.cc/40?img=3",
  },
  {
    name: "Cedric Kelly",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-red-400",
    avatar: "https://i.pravatar.cc/40?img=4",
  },
];

const UserFeedbackSection = () => {
  const total = Object.values(ratings.counts).reduce((a, b) => a + b, 0);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
      {/* Ratings Box */}
      <div className="bg-white rounded-xl shadow-md p-5">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-gray-700">Recent Users</h3>
          <div className="flex items-center text-yellow-400">
            {[...Array(5)].map((_, i) => (
              <FaStar
                key={i}
                className={
                  i < Math.round(ratings.average) ? "" : "text-gray-300"
                }
              />
            ))}
          </div>
        </div>

        <div className="flex items-center gap-2 mb-4">
          <span className="text-4xl font-bold text-yellow-500">
            {ratings.average}
          </span>
          <span className="text-gray-400 text-lg">/5</span>
        </div>

        <div className="space-y-3">
          {Object.entries(ratings.counts).map(([star, count]) => (
            <div key={star} className="flex items-center gap-3">
              <span className="w-6 text-sm font-semibold">{star}‚òÖ</span>
              <div className="flex-1 bg-gray-200 rounded h-2">
                <div
                  className="bg-blue-500 h-2 rounded"
                  style={{ width: `${(count / total) * 100}%` }}
                ></div>
              </div>
              <span className="text-sm text-gray-500 w-10 text-right">
                {count}
              </span>
            </div>
          ))}
        </div>
      </div>

      {/* Recent Users Box */}
      <div className="bg-white rounded-xl shadow-md p-5">
        <h3 className="text-lg font-semibold text-gray-700 mb-4">
          Recent Users
        </h3>
        <ul className="space-y-4">
          {recentUsers.map((user, i) => (
            <li key={i} className="flex justify-between items-center">
              <div className="flex items-center gap-3">
                <img
                  src={user.avatar}
                  alt={user.name}
                  className="w-10 h-10 rounded-full"
                />
                <div>
                  <p className="font-semibold text-gray-800">{user.name}</p>
                  <p className="text-sm text-gray-500">{user.role}</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <span className={`text-xs ${user.color}`}>{user.time}</span>
                <button className="text-red-500 hover:text-red-700">
                  <FaTimes />
                </button>
                <button className="text-green-500 hover:text-green-700">
                  <FaCheck />
                </button>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default UserFeedbackSection;


===== src/components/overview/UserStats.jsx =====
// src/components/cards/UserStats.js
import React from "react";
import IdeasLocations from "./IdeasLocations";

const UserStats = () => {
  return (
    <div>
      <div className="bg-white rounded-lg shadow-md p-5">
        <h3 className="text-lg font-semibold text-gray-700 mb-2">
          Users From United States
        </h3>
        <div className="text-xl font-bold text-gray-900">$249.95</div>
        <p className="text-sm text-gray-400 mt-2">Total Earnings</p>
        <div className="mt-4 text-blue-500">[Line Chart Placeholder]</div>
      </div>
      {/* <IdeasLocations /> */}
    </div>
  );
};

export default UserStats;


===== src/components/overview/earningsData.js =====
// src/data/analyticsData.js
export const earningsData = {
  total: "$249.95",
  chart: [
    { month: "Jan", value: 40 },
    { month: "Feb", value: 70 },
    { month: "Mar", value: 50 },
    { month: "Apr", value: 80 },
    { month: "May", value: 60 },
    { month: "Jun", value: 90 },
  ],
};


===== src/components/overview/recentUsers.js =====
// src/data/recentUsers.js
const recentUsers = [
  {
    name: "Quinn Flynn",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-orange-400",
    avatar: "https://i.pravatar.cc/40?img=1",
  },
  {
    name: "Garrett Winters",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-green-400",
    avatar: "https://i.pravatar.cc/40?img=2",
  },
  {
    name: "Ashton Cox",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-blue-400",
    avatar: "https://i.pravatar.cc/40?img=3",
  },
  {
    name: "Cedric Kelly",
    role: "Android developer",
    time: "11 May 12:30",
    color: "text-red-400",
    avatar: "https://i.pravatar.cc/40?img=4",
  },
];

export default recentUsers;


===== src/components/overview/socialStats.js =====


===== src/components/overview/summaryCards.js =====
export const summaryCards = [
  {
    title: "Total Ideas",
    value: 235,
    icon: "üí°",
    bg: "bg-yellow-100",
    text: "text-yellow-600",
  },
  {
    title: "Total Location",
    value: 26,
    icon: "üìç",
    bg: "bg-red-100",
    text: "text-red-600",
  },
];


===== src/components/priceFiter/LeftFilter.jsx =====
import React, { useState } from "react";
import PopularShoppingIdeas from "./PopularShoppingIdeas";
import PriceRefinements from "../home/ProductList/PriceRefinements";
import { IoIosArrowDown, IoIosArrowUp } from "react-icons/io";
import { FaStar } from "react-icons/fa";

/**
 * A simple filter group / accordion for each section
 */
function FilterGroup({ title, children, defaultOpen = true }) {
  const [open, setOpen] = useState(defaultOpen);

  return (
    <div className="border-b border-gray-200 py-3">
      <div className="">
        <h2 className="font-semibold text-base lg:text-lg text-gray-700">
          {title}
        </h2>
      </div>

      {/* Collapsible content */}
      {open && <div className="mt-2 text-base lg:text-lg">{children}</div>}

      {/* {<button
        onClick={() => setOpen(!open)}
        className="text-base lg:text-lg  text-blue-600 focus:outline-none mt-3"
        aria-expanded={open ? 'true' : 'false'}
      >
        {open  ? <div className='flex items-center gap-1 text-base'><IoIosArrowUp className='h-6 w-6 text-gray-800' /> <p>See Less</p></div> : <div className='flex items-center gap-1'><IoIosArrowDown className='h-6 w-6 text-gray-800' /> <p className='flex items-center gap-1 text-base'>See More</p></div>}
      </button>} */}
    </div>
  );
}

function LeftFilter() {
  return (
    <aside
      className="
        w-full
        md:w-60
        lg:w-64
        xl:w-full
        bg-gray-50
        p-10
        pr-28
         
        border-gray-200
        space-y-4
      "
      aria-label="Filter panel"
    >
      <PopularShoppingIdeas />

      {/* Price */}
      <PriceRefinements />

      {/* Customer Reviews */}
      <FilterGroup title="Customer Reviews">
        <ul className="space-y-2 text-base lg:text:lg text-gray-600">
          <li className="flex items-center space-x-2 text-yellow-400 text-lg">
            <FaStar />
            <FaStar />
            <FaStar />
            <FaStar />
            <FaStar />
          </li>
          {/* Additional star rating checkboxes, etc. */}
        </ul>
      </FilterGroup>

      {/* Deals & Discounts */}
      <FilterGroup title="Deals & Discounts">
        <ul className="space-y-1  text-gray-600">
          <li>
            <a href="#allDiscounts" className="hover:text-blue-700">
              All Discounts
            </a>
          </li>
          <li>
            <a href="#todaysDeals" className="hover:text-blue-700">
              Today's Deals
            </a>
          </li>
        </ul>
      </FilterGroup>

      {/* Example for brand list ‚Äî can be huge, so might want its own collapsible ‚ÄúSee more‚Äù */}
      <FilterGroup title="Brands">
        <ul className="text-base lg:text-lg space-y-1 text-gray-600">
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand1" />
            <label htmlFor="brand1">Bissell</label>
          </li>
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand2" />
            <label htmlFor="brand2">Rubbermaid</label>
          </li>
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand3" />
            <label htmlFor="brand3">O-Cedar</label>
          </li>
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand3" />
            <label htmlFor="brand3">Scrub Daddy</label>
          </li>
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand3" />
            <label htmlFor="brand3">CLOROX</label>
          </li>
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand3" />
            <label htmlFor="brand3">OXO</label>
          </li>
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand3" />
            <label htmlFor="brand3">Shark</label>
          </li>
          <li className="flex items-center space-x-2">
            <input type="checkbox" id="brand3" />
            <label htmlFor="brand3">Holikme</label>
          </li>
          {/* ... etc ... */}
        </ul>
      </FilterGroup>

      {/* Additional sections for Connectivity, Special Features, Condition, Departments, etc.
          Each can be structured similarly using <FilterGroup> for the heading & collapsible logic.
      */}

      {/* Example: More-Sustainable Products / Climate Pledge Friendly */}
      <FilterGroup title="Department">
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">
            Household Cleaning Tools
          </label>
        </div>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">
            Household Mops, Buckets &
          </label>
        </div>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">Household Squeegees</label>
        </div>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">Fruit & Vegetable Tools</label>
        </div>
      </FilterGroup>

      {/* all top brand  */}
      <FilterGroup title={"All Top Brands"}>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">Top Brands</label>
        </div>
      </FilterGroup>

      {/* seller  */}
      <FilterGroup title={"Seller"}>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">Amazon.com</label>
        </div>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">Triplenet Pricing INC</label>
        </div>
      </FilterGroup>

      {/* our brands  */}

      <FilterGroup title={"From Our Brands"}>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">Amazon Brands</label>
        </div>
      </FilterGroup>

      {/* more products  */}
      <FilterGroup title={"More-sustainable Products"}>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">Climate Pledge Friendly</label>
        </div>
      </FilterGroup>

      {/* HSA Eligible  */}
      <FilterGroup title={"More-sustainable Products"}>
        <div className="flex items-center space-x-2 text-base lg:text-lg text-gray-600">
          <input type="checkbox" id="climatePledgeFriendly" />
          <label htmlFor="climatePledgeFriendly">FSA or HSA Eligible</label>
        </div>
      </FilterGroup>
    </aside>
  );
}

export default LeftFilter;


===== src/components/priceFiter/PopularShoppingIdeas.jsx =====
import React, { useState } from "react";
import { IoIosArrowDown, IoIosArrowUp } from "react-icons/io";

/**
 * Example data matching the snippet:
 * Wireless, Mechanical, Console, Ergonomic are shown first,
 * then ‚ÄúBacklit,‚Äù ‚ÄúPortable,‚Äù ‚ÄúRetro,‚Äù and ‚ÄúClicky‚Äù appear when expanded.
 */
const popularShoppingItems = [
  {
    label: "Wireless",
    href: "/s?k=wireless+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_0",
  },
  {
    label: "Mechanical",
    href: "/s?k=mechanical+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_1",
  },
  {
    label: "Console",
    href: "/s?k=console+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_2",
  },
  {
    label: "Ergonomic",
    href: "/s?k=ergonomic+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_3",
  },
  {
    label: "Backlit",
    href: "/s?k=backlit+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_4",
  },
  {
    label: "Portable",
    href: "/s?k=portable+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_5",
  },
  {
    label: "Retro",
    href: "/s?k=retro+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_6",
  },
  {
    label: "Clicky",
    href: "/s?k=clicky+gaming+keyboard&ref=sr_nr_p_cosmo_multi_pt_7",
  },
];

const PopularShoppingIdeas = () => {
  const [expanded, setExpanded] = useState(false);

  // Show only the first 4 items unless expanded is true.
  const visibleItems = expanded
    ? popularShoppingItems
    : popularShoppingItems.slice(0, 4);

  return (
    <div className="mb-4 w-full">
      {/* Title */}
      <h2 className="font-semibold text-base lg:text-lg text-gray-700">
        Popular Shopping Ideas
      </h2>

      {/* List of items */}
      <ul className="space-y-1">
        {visibleItems.map((item) => (
          <li key={item.label} className="text-lg">
            <a href={item.href} className="text-gray-600" role="link">
              {item.label}
            </a>
          </li>
        ))}
      </ul>

      {/* Toggle button */}
      {popularShoppingItems.length > 4 && (
        <button
          onClick={() => setExpanded(!expanded)}
          aria-expanded={expanded}
          aria-label="See more or see less items"
          className="mt-2 flex items-center text-base  text-blue-700 hover:underline"
        >
          {expanded ? (
            <div className="flex items-center gap-1 text-base">
              <IoIosArrowUp className="h-6 w-6 text-gray-800" /> <p>See Less</p>
            </div>
          ) : (
            <div className="flex items-center gap-1">
              <IoIosArrowDown className="h-6 w-6 text-gray-800" />{" "}
              <p className="flex items-center gap-1 text-base">See More</p>
            </div>
          )}
        </button>
      )}
    </div>
  );
};

export default PopularShoppingIdeas;


===== src/components/pricing/UpfricaPricing.jsx =====
// src/components/pricing/UpfricaPricing.jsx
"use client";

import { useEffect, useMemo, useRef, useState, Fragment } from "react";
import { Disclosure, Transition } from "@headlessui/react";
import { CheckCircle2, XCircle, Star, Award, Info, ChevronLeft, ChevronRight } from "lucide-react";
import axiosInstance from "@/lib/axiosInstance";

const fmtPrice = (n) =>
  (Number(n) || 0).toLocaleString(undefined, { minimumFractionDigits: 2 });

const FEATURE_GROUPS = [
  {
    key: "core",
    label: "Core limits",
    items: [
      { key: "max_products", label: "Max Listings", type: "number", info: "Maximum active product listings." },
      { key: "allow_bnpl", label: "Buy Now Pay Later", type: "boolean", info: "Offer BNPL to increase conversions." },
      { key: "allow_display_seller_contact", label: "Display Phone Number", type: "boolean", info: "Show your contact on product pages." },
    ],
  },
];

export default function UpfricaPricing() {
  const [plans, setPlans] = useState([]);
  const [loading, setLoading] = useState(true);
  const [billing, setBilling] = useState("monthly"); // 'monthly' | 'weekly'
  const [activeIdx, setActiveIdx] = useState(0);
  const [error, setError] = useState(null);

  // carousel refs
  const trackRef = useRef(null);
  const cardRefs = useRef([]);

  // fetch plans
  useEffect(() => {
    let mounted = true;
    setLoading(true);
    axiosInstance
      .get("/api/seller-plans/")
      .then((res) => {
        if (!mounted) return;
        const raw = res.data || [];
        const normalized = raw.map((p) => ({
          id: p.id,
          label: p.label,
          badge: p.is_popular ? "Most Popular" : p.is_free ? "Free" : null,
          priceMonthly: p.price_per_month,
          priceWeekly: p.price_per_week,
          max_products: p.max_products,
          allow_bnpl: p.allow_bnpl,
          allow_display_seller_contact: p.allow_display_seller_contact,
          feature_matrix: Array.isArray(p.feature_matrix) ? p.feature_matrix : [],
        }));
        setPlans(normalized);
      })
      .catch((e) => setError(e?.message || "Failed to load plans"))
      .finally(() => mounted && setLoading(false));
    return () => {
      mounted = false;
    };
  }, []);

  const priceKey = billing === "weekly" ? "priceWeekly" : "priceMonthly";
  const popularIndex = useMemo(
    () => Math.max(0, plans.findIndex((p) => p.badge === "Most Popular")),
    [plans]
  );

  /** ---------- Carousel controls (mobile) ---------- */
  // Keep active index in sync as the user scrolls by touch
  useEffect(() => {
    const el = trackRef.current;
    if (!el) return;

    const handler = () => {
      const children = Array.from(el.children);
      // find the card whose left edge is closest to the track's scrollLeft
      let best = 0;
      let bestDist = Infinity;
      children.forEach((child, i) => {
        const dist = Math.abs(child.offsetLeft - el.scrollLeft);
        if (dist < bestDist) {
          best = i;
          bestDist = dist;
        }
      });
      setActiveIdx(best);
    };

    el.addEventListener("scroll", handler, { passive: true });
    return () => el.removeEventListener("scroll", handler);
  }, []);

  const scrollToIndex = (idx) => {
    const el = trackRef.current;
    const card = cardRefs.current[idx];
    if (!el || !card) return;
    el.scrollTo({ left: card.offsetLeft - 16, behavior: "smooth" }); // -16 to account for padding
  };

  const prev = () => scrollToIndex(Math.max(0, activeIdx - 1));
  const next = () => scrollToIndex(Math.min(plans.length - 1, activeIdx + 1));

  /** ---------- UI ---------- */
  if (loading) {
    return (
      <div className="mx-auto max-w-6xl p-6 text-gray-700 dark:text-gray-200">
        <div className="mb-3 h-8 w-56 animate-pulse rounded bg-gray-200 dark:bg-gray-700" />
        <div className="mb-8 h-4 w-80 animate-pulse rounded bg-gray-200 dark:bg-gray-700" />
        <div className="flex gap-4 overflow-hidden">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="h-64 w-full max-w-sm shrink-0 animate-pulse rounded-2xl bg-gray-200 dark:bg-gray-800" />
          ))}
        </div>
      </div>
    );
  }
  if (error) {
    return <div className="mx-auto max-w-4xl p-6 text-red-600 dark:text-red-400">{error}</div>;
  }

  return (
    <div className="mx-auto max-w-6xl p-4 sm:p-6 text-gray-900 dark:text-gray-100">
      {/* Hero */}
      <header className="mb-8 sm:mb-10">
        <h1 className="text-3xl font-bold tracking-tight sm:text-4xl">Choose the plan that fits your growth</h1>
        <p className="mt-2 text-sm text-gray-600 dark:text-gray-300 sm:text-base">
          Start free. Upgrade anytime. All plans include core selling tools.
        </p>

        {/* Billing toggle */}
        <div className="mt-4 flex items-center gap-3">
          <span className={billing === "monthly" ? "text-sm font-medium" : "text-sm font-medium text-gray-500 dark:text-gray-400"}>
            Monthly
          </span>
          <button
            type="button"
            onClick={() => setBilling((v) => (v === "monthly" ? "weekly" : "monthly"))}
            className={`relative inline-flex h-6 w-11 items-center rounded-full transition ${
              billing === "weekly" ? "bg-purple-600" : "bg-gray-300 dark:bg-gray-600"
            }`}
            aria-label="Toggle billing cycle"
          >
            <span
              className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
                billing === "weekly" ? "translate-x-6" : "translate-x-1"
              }`}
            />
          </button>
          <span className={billing === "weekly" ? "text-sm font-medium" : "text-sm font-medium text-gray-500 dark:text-gray-400"}>
            Weekly
          </span>

          <span className="ml-3 hidden rounded-full bg-purple-50 px-2 py-0.5 text-xs font-medium text-purple-700 dark:bg-purple-900/40 dark:text-purple-200 sm:inline">
            No credit card needed
          </span>
        </div>
      </header>

      {/* Plan cards */}
      <section
        className="-mx-4 mb-3 sm:mx-0"
        aria-roledescription="carousel"
        aria-label="Upfrica plans"
      >
        {/* Track */}
        <div
          ref={trackRef}
          className="relative flex snap-x snap-mandatory gap-4 overflow-x-auto px-4 pb-3 sm:grid sm:grid-cols-3 sm:gap-6 sm:overflow-visible sm:px-0"
          role="group"
        >
          {plans.map((p, idx) => {
            const price = p[priceKey];
            const popular = idx === popularIndex;
            return (
              <article
                ref={(el) => (cardRefs.current[idx] = el)}
                key={p.id}
                tabIndex={0}
                className={[
                  "min-w-[86%] snap-start rounded-2xl border p-5 transition sm:min-w-0",
                  popular
                    ? "border-purple-500 shadow-[0_8px_30px_rgb(88_28_135_/_0.25)] ring-1 ring-purple-200 dark:ring-purple-800/50"
                    : "border-gray-200 dark:border-gray-800",
                  "bg-white dark:bg-[#0f1115]/90",
                ].join(" ")}
                aria-label={`${p.label} plan`}
                onFocus={() => setActiveIdx(idx)}
              >
                <div className="mb-3 flex items-center justify-between">
                  <h3 className="text-lg font-semibold">{p.label}</h3>
                  {p.badge && (
                    <span
                      className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px] font-medium ${
                        p.badge === "Most Popular"
                          ? "bg-purple-600 text-white"
                          : "bg-emerald-600 text-white"
                      }`}
                    >
                      {p.badge === "Most Popular" ? <Star className="h-3.5 w-3.5" /> : <Award className="h-3.5 w-3.5" />}
                      {p.badge}
                    </span>
                  )}
                </div>

                <div className="mb-4">
                  <div className="text-3xl font-bold">
                    GHS {fmtPrice(price)}
                    <span className="ml-1 align-middle text-sm font-medium text-gray-600 dark:text-gray-400">
                      /{billing === "weekly" ? "wk" : "mo"}
                    </span>
                  </div>
                  <p className="mt-1 text-xs text-gray-600 dark:text-gray-400">Includes core selling tools</p>
                </div>

                <ul className="mb-5 space-y-2 text-sm">
                  <li className="flex items-center gap-2">
                    <CheckCircle2 className="h-4 w-4 text-emerald-500" />
                    Max listings: <span className="ml-1 font-semibold">{p.max_products ?? "‚Äî"}</span>
                  </li>
                  <li className="flex items-center gap-2">
                    {p.allow_bnpl ? (
                      <CheckCircle2 className="h-4 w-4 text-emerald-500" />
                    ) : (
                      <XCircle className="h-4 w-4 text-rose-500" />
                    )}
                    Buy Now Pay Later
                  </li>
                  <li className="flex items-center gap-2">
                    {p.allow_display_seller_contact ? (
                      <CheckCircle2 className="h-4 w-4 text-emerald-500" />
                    ) : (
                      <XCircle className="h-4 w-4 text-rose-500" />
                    )}
                    Display phone number
                  </li>
                </ul>

                <button
                  className={[
                    "w-full rounded-lg px-4 py-2 text-center font-semibold transition",
                    popular
                      ? "bg-purple-600 text-white hover:bg-purple-700"
                      : "bg-gray-900 text-white hover:bg-black dark:bg-gray-100 dark:text-gray-900 dark:hover:bg-white",
                  ].join(" ")}
                  onClick={() => {
                    window.dispatchEvent(new CustomEvent("upfrica:plan-picked", { detail: { planId: p.id } }));
                  }}
                >
                  {p.badge === "Free" ? "Get Started" : "Start free trial"}
                </button>

                <div className="mt-3 hidden text-xs text-gray-600 underline decoration-dotted hover:no-underline dark:text-gray-400 sm:block">
                  Scroll down to compare all features
                </div>
              </article>
            );
          })}

          {/* mobile arrows */}
          {plans.length > 1 && (
            <>
              <button
                type="button"
                onClick={prev}
                aria-label="Previous plan"
                className="absolute left-1 top-1/2 z-10 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow ring-1 ring-black/5 backdrop-blur hover:bg-white dark:bg-gray-900/90 dark:ring-white/10 sm:hidden"
              >
                <ChevronLeft className="h-5 w-5" />
              </button>
              <button
                type="button"
                onClick={next}
                aria-label="Next plan"
                className="absolute right-1 top-1/2 z-10 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow ring-1 ring-black/5 backdrop-blur hover:bg-white dark:bg-gray-900/90 dark:ring-white/10 sm:hidden"
              >
                <ChevronRight className="h-5 w-5" />
              </button>
            </>
          )}
        </div>

        {/* dots */}
        {plans.length > 1 && (
          <div className="mt-2 flex justify-center gap-2 sm:hidden">
            {plans.map((_, i) => (
              <button
                key={i}
                onClick={() => scrollToIndex(i)}
                aria-label={`Go to plan ${i + 1}`}
                aria-current={activeIdx === i ? "true" : "false"}
                className={[
                  "h-2 w-2 rounded-full transition",
                  activeIdx === i ? "bg-purple-600" : "bg-gray-300 dark:bg-gray-600",
                ].join(" ")}
              />
            ))}
          </div>
        )}
      </section>

      {/* Feature comparison */}
      <section aria-labelledby="compare-plans" className="mb-10">
        <h2 id="compare-plans" className="mb-3 text-xl font-semibold">
          Compare features
        </h2>

        <div className="overflow-x-auto rounded-2xl border border-gray-200 bg-white dark:border-gray-800 dark:bg-[#0f1115]">
          <div className="sticky top-0 z-10 grid grid-cols-[1fr_repeat(3,minmax(140px,1fr))] gap-3 border-b bg-white/90 p-3 backdrop-blur dark:bg-[#0f1115]/90">
            <div className="text-sm font-medium text-gray-600 dark:text-gray-300">Feature</div>
            {plans.map((p) => (
              <div key={p.id} className="text-center text-sm font-semibold">
                {p.label}
              </div>
            ))}
          </div>

          <div className="divide-y dark:divide-gray-800">
            {FEATURE_GROUPS.map((group) => (
              <Disclosure as={Fragment} key={group.key}>
                {({ open }) => (
                  <>
                    <Disclosure.Button className="flex w-full items-center justify-between px-4 py-3 text-left text-sm font-semibold">
                      <span className="uppercase tracking-wide text-gray-600 dark:text-gray-300">
                        {group.label}
                      </span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {open ? "Hide" : "Show"}
                      </span>
                    </Disclosure.Button>

                    <Transition
                      enter="transition duration-150 ease-out"
                      enterFrom="opacity-0 -translate-y-1"
                      enterTo="opacity-100 translate-y-0"
                      leave="transition duration-100 ease-in"
                      leaveFrom="opacity-100 translate-y-0"
                      leaveTo="opacity-0 -translate-y-1"
                    >
                      <Disclosure.Panel>
                        {group.items.map((f, idx) => (
                          <div
                            key={f.key}
                            className={`grid grid-cols-[1fr_repeat(3,minmax(140px,1fr))] items-center gap-3 px-4 py-3 ${
                              idx % 2 ? "bg-gray-50 dark:bg-[#12151c]" : ""
                            }`}
                          >
                            <div className="flex items-center gap-2 text-sm">
                              <span>{f.label}</span>
                              {f.info && (
                                <span
                                  title={f.info}
                                  className="inline-flex h-4 w-4 items-center justify-center rounded-full bg-gray-200 text-[10px] text-gray-600 dark:bg-gray-700 dark:text-gray-300"
                                >
                                  <Info className="h-3 w-3" />
                                </span>
                              )}
                            </div>

                            {plans.map((p) => {
                              const value = p[f.key];
                              return (
                                <div key={`${p.id}-${f.key}`} className="text-center">
                                  {f.type === "number" ? (
                                    <span className="text-sm font-semibold">{value ?? "‚Äî"}</span>
                                  ) : f.type === "boolean" ? (
                                    value ? (
                                      <CheckCircle2 className="mx-auto h-4 w-4 text-emerald-500" />
                                    ) : (
                                      <XCircle className="mx-auto h-4 w-4 text-rose-500" />
                                    )
                                  ) : (
                                    <span className="text-sm">‚Äî</span>
                                  )}
                                </div>
                              );
                            })}
                          </div>
                        ))}
                      </Disclosure.Panel>
                    </Transition>
                  </>
                )}
              </Disclosure>
            ))}
          </div>

          <div className="flex items-center justify-between px-4 py-3 text-xs text-gray-500 dark:text-gray-400">
            <span>Tip: on mobile, swipe the plan cards above.</span>
            <span className="hidden sm:block">You can change plans anytime.</span>
          </div>
        </div>
      </section>
    </div>
  );
}

===== src/components/productVeryenet/ProductVariantForm.jsx =====
"use client";
import React, { useState } from "react";
import VariantGroup from "./VariantGroup";

const ProductVariantForm = () => {
  const [variants, setVariants] = useState([
    {
      label: "Package",
      active: true,
      useImageVariant: false,
      options: [
        {
          value: "With Battery",
          additionalPrice: "0.00",
          active: true,
          images: [],
        },
        {
          value: "With Battery & Solar Panels",
          additionalPrice: "599.00",
          active: true,
          images: [],
        },
      ],
    },
  ]);

  const addVariant = () => {
    setVariants([
      ...variants,
      {
        label: "",
        active: true,
        useImageVariant: false,
        options: [],
      },
    ]);
  };

  const updateVariant = (index, data) => {
    const updated = [...variants];
    updated[index] = data;
    setVariants(updated);
  };

  const removeVariant = (index) => {
    const updated = [...variants];
    updated.splice(index, 1);
    setVariants(updated);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Submitting...", variants);
    // Do your POST logic here
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-5xl mx-auto px-4 py-6">
      <h2 className="text-2xl font-semibold mb-4">Product Variants</h2>

      {variants.map((variant, idx) => (
        <VariantGroup
          key={idx}
          index={idx}
          data={variant}
          onChange={(data) => updateVariant(idx, data)}
          onRemove={() => removeVariant(idx)}
        />
      ))}

      <button
        type="button"
        onClick={addVariant}
        className="mt-4 text-sm bg-gray-100 border border-gray-300 px-4 py-2 rounded hover:bg-gray-200"
      >
        ‚ûï Add Variant
      </button>

      <div className="mt-8 pt-4 border-t flex justify-between">
        <button
          type="submit"
          className="btn btn-primary px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Submit
        </button>
        <a href="/products" className="text-gray-600 hover:underline">
          Back
        </a>
      </div>
    </form>
  );
};

export default ProductVariantForm;


===== src/components/productVeryenet/VariantGroup.jsx =====
import React from "react";
import VariantOption from "./VariantOption";

const VariantGroup = ({ data, index, onChange, onRemove }) => {
  if (!data) return null; // üëà Prevents crashing on undefined data
  const handleOptionChange = (i, option) => {
    const updated = { ...data };
    updated.options[i] = option;
    onChange(updated);
  };

  const addOption = () => {
    const updated = { ...data };
    updated.options.push({
      value: "",
      additionalPrice: "0.00",
      active: true,
      images: [],
    });
    onChange(updated);
  };

  const removeOption = (i) => {
    const updated = { ...data };
    updated.options.splice(i, 1);
    onChange(updated);
  };

  return (
    <div className="border rounded p-4 mb-6 bg-gray-50">
      <div className="flex flex-wrap gap-4 items-center mb-4">
        <div className="flex-1">
          <label className="block font-semibold mb-1">
            Attribute Name (e.g. Color, Package)
          </label>
          <input
            type="text"
            className="form-input w-full"
            value={data.label}
            onChange={(e) => onChange({ ...data, label: e.target.value })}
          />
        </div>
        <div>
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={data.active}
              onChange={(e) => onChange({ ...data, active: e.target.checked })}
            />
            Active
          </label>
        </div>
        <div>
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={data.useImageVariant}
              onChange={(e) =>
                onChange({ ...data, useImageVariant: e.target.checked })
              }
            />
            Use Image Variant
          </label>
        </div>
        <button
          onClick={onRemove}
          type="button"
          className="text-red-600 hover:underline text-sm"
        >
          ‚ùå Remove
        </button>
      </div>

      {data.options.map((option, i) => (
        <VariantOption
          key={i}
          data={option}
          onChange={(newOpt) => handleOptionChange(i, newOpt)}
          onRemove={() => removeOption(i)}
        />
      ))}

      <button
        onClick={addOption}
        type="button"
        className="text-sm mt-2 text-blue-600 hover:underline"
      >
        ‚ûï Add Option
      </button>
    </div>
  );
};

export default VariantGroup;


===== src/components/productVeryenet/VariantOption.jsx =====
import React from "react";

const VariantOption = ({ data, onChange, onRemove }) => {
  if (!data) return null; // üëà Prevents crashing on undefined data
  return (
    <div className="bg-white p-3 border rounded mb-3">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-2">
        <input
          type="text"
          className="form-input"
          placeholder="Option name"
          value={data.value}
          onChange={(e) => onChange({ ...data, value: e.target.value })}
        />
        <input
          type="text"
          className="form-input"
          placeholder="Additional Price (e.g. 199.99)"
          value={data.additionalPrice}
          onChange={(e) =>
            onChange({ ...data, additionalPrice: e.target.value })
          }
        />
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={data.active}
            onChange={(e) => onChange({ ...data, active: e.target.checked })}
          />
          Active
        </label>
        <button
          type="button"
          className="text-red-500 text-sm hover:underline"
          onClick={onRemove}
        >
          üóëÔ∏è Remove Option
        </button>
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Upload Images</label>
        <input
          type="file"
          multiple
          className="form-input"
          onChange={(e) =>
            onChange({ ...data, images: Array.from(e.target.files) })
          }
        />
      </div>
    </div>
  );
};

export default VariantOption;


===== src/components/review/DisplayReviews.jsx =====
//components/review/DisplayReviews.jsx
'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import dynamic from 'next/dynamic';
import { useParams } from 'next/navigation';
import { Toaster } from 'react-hot-toast';
import toast from 'react-hot-toast';
import { useAuth } from '@/contexts/AuthContext';
import ProductRatingLine from '@/components/review/ProductRatingLine';
import ProductReviewModal from './ProductReviewModal'; // Adjust path if needed
import { BASE_API_URL } from '@/app/constants';
import { getCleanToken } from '@/lib/getCleanToken'; // ‚úÖ import clean token helper

export default function ProductDetailSection({ product }) {
  const { region } = useParams();
  const { user, hydrated } = useAuth();

  const [reviewStats, setReviewStats] = useState({
    average_rating: 0,
    review_count: 0,
    rating_percent: {},
    reviews: [],
  });

  const ProductReviewModal = dynamic(() => import('./ProductReviewModal'), {
  ssr: false,
});

  const [expandedReviewId, setExpandedReviewId] = useState(null);
  const [copiedReviewId, setCopiedReviewId] = useState(null);
  const [reportModalOpen, setReportModalOpen] = useState(false);
  const [reportingReviewId, setReportingReviewId] = useState(null);
  const [selectedReason, setSelectedReason] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxMedia, setLightboxMedia] = useState([]);
  const [lightboxIndex, setLightboxIndex] = useState(0);
  const [openShareId, setOpenShareId] = useState(null);
  const [showModal, setShowModal] = useState(false);



  useEffect(() => {
    if (!product?.id || !hydrated) return;

    const token = getCleanToken(); // ‚úÖ safely get token
    const reviewUrl = `${BASE_API_URL}/api/product/${product.id}/reviews/`;

    fetch(reviewUrl, {
      headers: token ? { Authorization: `Token ${token}` } : {},
    })
      .then(async (res) => {
        if (!res.ok) {
          console.error('‚ùå Review fetch failed', res.status, await res.text());
          return;
        }
        const data = await res.json();
        setReviewStats({
          average_rating: data?.average_rating || 0,
          review_count: data?.review_count || 0,
          rating_percent: data?.rating_percent || {},
          reviews: data?.reviews || [],
        });
      })
      .catch((err) => console.error('‚ùå Review fetch error:', err));
  }, [product?.id, hydrated]);






  
const handleVote = async (reviewId, voteValue) => {
  if (!user) {
    alert("Please login to vote on reviews.");
    return;
  }

  const token = getCleanToken(); // ‚úÖ safely get token

  try {
    const res = await fetch(`${BASE_API_URL}/api/reviews/${reviewId}/vote/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Token ${token}`,
      },
      body: JSON.stringify({ vote: voteValue }),
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error("‚ùå Vote error:", errorText);
      return;
    }

    const data = await res.json();
    const toastMsg =
      voteValue === 1
        ? data.user_has_voted
          ? "Marked as helpful ‚úÖ"
          : "Removed helpful vote ‚ùå"
        : data.user_has_voted === false
        ? "Marked as not helpful üëé"
        : "Removed not helpful vote";

    toast(toastMsg);

    setReviewStats((prev) => ({
      ...prev,
      reviews: prev.reviews.map((review) =>
        review.id === reviewId
          ? {
              ...review,
              helpful_count: data.helpful_count,
              user_has_voted: data.user_has_voted,
            }
          : review
      ),
    }));
  } catch (err) {
    console.error("‚ùå Vote request failed:", err);
  }
};




const mediaItems = reviewStats.reviews
  .flatMap((r) => r.media || [])
  .filter((m) => m.url) // make sure media item has a valid URL
  .slice(0, 6);

  return (
    <div className="space-y-6 mt-4">
      <Toaster position="top-right" />



      {reviewStats.review_count > 0 ? (
        <>
          <ProductRatingLine
            averageRating={reviewStats.average_rating}
            reviewCount={reviewStats.review_count}
          />

          {/* Star breakdown */}
<div className="text-sm text-gray-700 space-y-2">
  {Object.entries(reviewStats.rating_percent)
    .sort(([a], [b]) => b - a)
    .map(([star, percent]) => (
      <div key={star} className="flex items-center space-x-3">
        {/* Bigger, bold star number */}
        <span className="w-12 flex items-center justify-end text-base font-semibold text-yellow-500">
          {star} <span className="ml-0.5">‚òÖ</span>
        </span>

        {/* Bar */}
        <div className="w-full max-w-xs bg-gray-200 rounded overflow-hidden">
          <div
            className="h-3 bg-yellow-500 rounded"
            style={{ width: `${percent}%` }}
          ></div>
        </div>

        {/* Percentage */}
        <span className="w-12 text-sm text-gray-600 text-right">{percent}%</span>
      </div>
    ))}
</div>

{/* Media preview */}
<div>
<h3 className="text-sm font-semibold text-gray-700 mb-2">Photos & Videos from customers:</h3>
{mediaItems.length > 0 ? (
  <div className="flex space-x-2 overflow-x-auto pb-1">
    {mediaItems.map((media, idx) => {
      const isVideo =
        media.media_type === 'video' || media.url?.match(/\.(mp4|mov|webm)$/i);
      return (
        <div
          key={`${idx}-${media.url}`}
          className="w-20 h-20 rounded border cursor-pointer relative flex-shrink-0"
          onClick={() => {
            setLightboxMedia(mediaItems);
            setLightboxIndex(idx);
            setLightboxOpen(true);
          }}
        >
          {isVideo ? (
            <>
              <video
                src={media.url}
                muted
                className="w-full h-full object-cover rounded"
              />
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="bg-black bg-opacity-50 rounded-full p-1">
                  <span className="text-white text-xs">‚ñ∂</span>
                </div>
              </div>
            </>
          ) : (
            <img
              src={media.url}
              alt="Review media"
              className="w-full h-full object-cover rounded"
              loading="lazy"
            />
          )}
        </div>
      );
    })}
  </div>
) : (
  <p className="text-xs text-gray-400">No customer photos or videos yet</p>
)}
</div>

          {/* Review list */}
          <div>
            <h3 className="text-sm font-semibold text-gray-700 mb-2">What customers are saying:</h3>
            <div className="space-y-4">
              {reviewStats.reviews.map((r) => (
                <div
                  key={r.id}
                  className="bg-gray-100 border border-gray-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 relative"
                >
                  <div className="flex flex-col gap-1">
                    <div className="text-base font-medium text-gray-800 line-clamp-2">{r.title || 'Review'}</div>
                    <p className="text-sm text-gray-700 mt-1 leading-relaxed">
                      <span className={expandedReviewId === r.id ? '' : 'line-clamp-3'}>
                        {r.comment}
                      </span>
                      {r.comment.length > 100 && (
                        <button
                          onClick={() =>
                            setExpandedReviewId(expandedReviewId === r.id ? null : r.id)
                          }
                          className="text-xs text-blue-500 hover:underline ml-1"
                        >
                          {expandedReviewId === r.id ? 'Show less' : 'Read more'}
                        </button>
                      )}
                    </p>

<div className="flex items-center text-base font-semibold text-yellow-500 mt-1">
  <span className="text-lg">
    {'‚≠ê'.repeat(Math.floor(r.rating))}
  </span>
  <span className="ml-2 text-sm text-gray-600 font-normal">
    ({r.rating})
  </span>
  <span className="mx-2 text-sm text-gray-400">‚Äî</span>
  <span className="text-sm italic text-gray-500">
    {new Date(r.created_at).toLocaleDateString()}
  </span>
</div>
                    {r.reviewer?.name && (
                      <p className="text-xs text-gray-500">by {r.reviewer.name}</p>
                    )}

                    {r.tags?.length > 0 && (
                      <div className="mt-2 flex flex-wrap gap-2">
                        {r.tags.slice(0, 5).map((tag) => (
                          <span
                            key={tag.id}
                            className="text-blue-800 bg-blue-100 px-2 py-1 rounded-full text-xs font-medium"
                          >
                            {tag.label}
                          </span>
                        ))}
                      </div>
                    )}

{r.media?.length > 0 && (
  <div className="flex gap-3 flex-wrap mt-3">
    {r.media.map((m, idx) => (
      <div
        key={m.id || m.filename}
        className="w-20 h-20 cursor-pointer"
        onClick={() => {
          setLightboxMedia(r.media); // full gallery
          setLightboxIndex(idx);     // open selected item
          setLightboxOpen(true);     // show lightbox
        }}
      >
        {m.media_type === 'image' ? (
          <img
            src={m.url}
            alt={m.filename || 'Review media'}
            className="w-full h-full object-cover rounded-md border"
          />
        ) : (
<div className="relative w-full h-full">
  <video
    src={m.url}
    muted
    className="w-full h-full object-cover rounded-md border"
  />
  <div className="absolute inset-0 flex items-center justify-center">
    <div className="bg-black bg-opacity-50 rounded-full p-1">
      <span className="text-white text-xs">‚ñ∂</span>
    </div>
  </div>
</div>
        )}
      </div>
    ))}
  </div>
)}
                    {/* ‚ù§Ô∏è Upvote + Share */}


<div className="mt-4 flex flex-wrap items-center gap-2 text-sm">
  {/* Helpful Button */}
  <button
    onClick={() => handleVote(r.id, 1)}
    className={`flex items-center gap-1 px-3 py-1 rounded-md border transition ${
      r.user_has_voted === true
        ? 'bg-green-100 border-green-400 text-green-700 font-medium'
        : 'bg-white border-gray-300 text-gray-600 hover:bg-gray-100'
    }`}
  >
    üëç Helpful ({r.helpful_count || 0})
  </button>

  {/* Not Helpful Button */}
  <button
    onClick={() => handleVote(r.id, -1)}
    className={`flex items-center gap-1 px-3 py-1 rounded-md border transition ${
      r.user_has_voted === false
        ? 'bg-red-100 border-red-400 text-red-700 font-medium'
        : 'bg-white border-gray-300 text-gray-600 hover:bg-gray-100'
    }`}
  >
    üëé Not Helpful
  </button>

  {/* Report */}
<button
  onClick={() => {
    setReportingReviewId(r.id);
    setReportModalOpen(true);
  }}
  title="Report review"
  className="p-1 rounded-full hover:bg-gray-100 text-gray-600 hover:text-red-600"
>
  ‚ö†Ô∏è Report
</button>

{/* Share Dropdown */}
<div className="relative inline-block text-left">
  <button
    onClick={() =>
      setOpenShareId(openShareId === r.id ? null : r.id)
    }
    className="p-1 rounded-full hover:bg-gray-100 text-gray-600 hover:text-black"
    title="Share review"
  >
    üîó Share
  </button>

  {openShareId === r.id && (
    <div
      className="absolute z-10 bg-white border shadow-md rounded-md p-2 mt-1 space-y-1 text-sm w-44 right-0"
      onMouseLeave={() => setOpenShareId(null)} // optional auto-close
    >
      <a
        href={`https://facebook.com/sharer/sharer.php?u=https://upfrica.com/review/${r.id}`}
        target="_blank"
        rel="noopener noreferrer"
        className="block hover:underline"
      >
        Facebook
      </a>
      <a
        href={`https://wa.me/?text=https://upfrica.com/review/${r.id}`}
        target="_blank"
        rel="noopener noreferrer"
        className="block hover:underline"
      >
        WhatsApp
      </a>
      <a
        href={`https://twitter.com/intent/tweet?url=https://upfrica.com/review/${r.id}`}
        target="_blank"
        rel="noopener noreferrer"
        className="block hover:underline"
      >
        X (Twitter)
      </a>
      <a
        href={`mailto:?subject=Check this review&body=https://upfrica.com/review/${r.id}`}
        className="block hover:underline"
      >
        Email
// ‚Ä¶truncated‚Ä¶

===== src/components/review/ProductRatingLine.jsx =====
//components/review/ProductRatingLine.jsx
'use client'

import React from 'react'
import { FaStar, FaStarHalfAlt, FaRegStar } from 'react-icons/fa'

export default function ProductRatingLine({ averageRating = 0, reviewCount = 0 }) {
  const renderStars = (rating) => {
    const stars = []
    for (let i = 1; i <= 5; i++) {
      if (rating >= i) {
        stars.push(<FaStar key={i} className="text-yellow-500" />)
      } else if (rating >= i - 0.5) {
        stars.push(<FaStarHalfAlt key={i} className="text-yellow-500" />)
      } else {
        stars.push(<FaRegStar key={i} className="text-yellow-500" />)
      }
    }
    return <span className="flex gap-1">{stars}</span>
  }

  if (reviewCount === 0) {
    return (
      <a href="#reviews" className="text-sm text-gray-500 hover:underline mt-1 block">
        Be the first to review this product
      </a>
    )
  }

return (
  <div className="flex items-center gap-2 mt-1 text-base sm:text-lg">
    <span className="flex gap-1 text-yellow-500 text-lg sm:text-xl">
      {renderStars(averageRating)}
    </span>
    <span className="text-gray-800 font-semibold">{averageRating.toFixed(1)}</span>
    <a href="#reviews" className="text-gray-600 underline hover:text-purple-600">
      ({reviewCount} {reviewCount === 1 ? 'review' : 'reviews'})
    </a>
  </div>
)
}

===== src/components/review/ProductReviewModal.jsx =====
//components/review/ProductReviewModal.jsx
'use client';

import React, { useState } from 'react';
import { AiOutlineClose } from 'react-icons/ai';
import ReviewListInfinite from './ReviewListInfinite';

export default function ProductReviewModal({ product, isOpen, onClose }) {
  if (!isOpen) return null;

  return (
<div className="fixed inset-0 z-50 bg-black/50 flex items-start justify-center pt-24 overflow-y-auto">
  <div className="bg-white w-full max-w-3xl rounded-xl shadow-lg mx-4 sm:mx-6">
    {/* Modal Header */}
    <div className="flex items-center justify-between p-4 border-b">
      <h2 className="text-lg font-semibold">
        All Reviews for {product.title}
      </h2>
      <button onClick={onClose} className="text-gray-500 hover:text-red-500 text-xl">
        &times;
      </button>
    </div>

    {/* Infinite ReviewList */}
    <div className="max-h-[70vh] overflow-y-auto p-4">
      <ReviewListInfinite productId={product.id} isOpen={isOpen} />
    </div>
  </div>
</div>
  );
}


===== src/components/review/ProductSummaryCard.jsx =====
"use client";

import React, { useState, useEffect, useCallback } from "react";
import Link from "next/link";
import Image from "next/image";

// ‚úÖ LightboxModal: Simple image preview
function LightboxModal({ imageUrl, onClose }) {
  const handleKeyDown = useCallback((e) => {
    if (e.key === "Escape") onClose();
  }, [onClose]);

  useEffect(() => {
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);

  if (!imageUrl) return null;

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center"
      onClick={onClose}
      role="dialog"
      aria-modal="true"
    >
      <div
        className="relative max-w-full max-h-full"
        onClick={(e) => e.stopPropagation()}
      >
        <img
          src={imageUrl}
          alt="Zoomed product image"
          className="max-h-[90vh] max-w-full object-contain rounded-lg"
        />
        <button
          onClick={onClose}
          className="absolute top-2 right-2 bg-white text-black p-2 rounded-full shadow hover:bg-gray-100"
          aria-label="Close"
        >
          ‚úï
        </button>
      </div>
    </div>
  );
}

// ‚úÖ Optional: Star rating component
function StarRating({ rating, total }) {
  return (
    <p className="text-sm text-yellow-500 mt-1">
      {"‚≠ê".repeat(Math.floor(rating))}{" "}
      <span className="text-gray-500">
        ({total} review{total !== 1 ? "s" : ""})
      </span>
    </p>
  );
}

// ‚úÖ Main Card Component
export default function ProductSummaryCard({
  title,
  image,
  price,
  condition,
  region,
  town,
  buyUrl,
  showBuyButton = true,
  showRating = false,
  rating = null,
  totalReviews = null,
}) {
  const [lightboxOpen, setLightboxOpen] = useState(false);

  const imageSrc = (() => {
    if (!image) return null;
    if (image.startsWith("http")) return image;
    if (image.startsWith("/media")) return image;
    return `https://d3q0odwafjkyv1.cloudfront.net/${image}`;
  })();

  return (
    <>
      <div className="bg-white border rounded-lg shadow-sm p-4 flex flex-col md:flex-row gap-4 items-start md:items-center">
        {/* ‚úÖ Image Preview */}
        <div
          className="w-full md:w-32 h-32 overflow-hidden rounded-md cursor-zoom-in bg-gray-100"
          onClick={() => imageSrc && setLightboxOpen(true)}
        >
          {imageSrc ? (
            <Image
              src={imageSrc}
              alt={title || "Product image"}
              width={120}
              height={120}
              className="rounded-md object-cover w-[120px] h-[120px]"
            />
          ) : (
            <div className="w-[120px] h-[120px] flex items-center justify-center text-sm text-gray-400">
              No image
            </div>
          )}
        </div>

        {/* ‚úÖ Product Info */}
        <div className="flex-1">
          {/*<h2 className="text-lg font-semibold leading-snug mb-1">{title}</h2>*/}

          {condition && (
            <span className="inline-block text-xs font-medium bg-gray-200 text-gray-700 px-2 py-0.5 rounded mb-1">
              {condition}
            </span>
          )}

          {town && (
            <p className="text-sm text-gray-600 mt-1">üìç {town}</p>
          )}

          {showRating && rating && (
            <StarRating rating={rating} total={totalReviews} />
          )}

          {price && (
            <p className="text-xl font-bold text-black mt-2">‚Çµ{price}</p>
          )}

          {showBuyButton && buyUrl && (
            <Link
              href={buyUrl}
              className="inline-block mt-3 btn-primary text-white px-4 py-2 rounded hover:bg-gray-800 transition"
            >
              üõí Buy Now
            </Link>
          )}
        </div>
      </div>

      {/* ‚úÖ Lightbox */}
      {lightboxOpen && (
        <LightboxModal
          imageUrl={imageSrc}
          onClose={() => setLightboxOpen(false)}
        />
      )}
    </>
  );
}

===== src/components/review/ReviewCard.jsx =====
"use client";

import React, { useState, useEffect, useCallback } from "react";
import Image from "next/image";
import { format } from "date-fns";
import {
  ThumbsUp,
  ThumbsDown,
  Share2,
  Flag,
  CheckCircle,
} from "lucide-react";
import {
  FaChevronLeft,
  FaChevronRight,
  FaTimes,
} from "react-icons/fa";

import StarRating from "@/components/common/StarRating";

export default function ReviewCard({ review }) {
  const {
    rating,
    title,
    comment,
    created_at,
    reviewer_username,
    tags = [],
    media = [],
    helpful_count = 0,
    not_helpful_count = 0,
    seller_badges = [],
    show_reviewer_city,
    reviewer_city,
    is_verified_buyer,
  } = review;

  const formattedDate = created_at
    ? format(new Date(created_at), "dd/MM/yyyy")
    : null;

  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [activeIndex, setActiveIndex] = useState(0);

  const getMediaUrl = (item) =>
    item?.url?.startsWith("http")
      ? item.url
      : `${process.env.NEXT_PUBLIC_API_BASE_URL || ""}${item.url}`;

  const openLightbox = (idx) => {
    setActiveIndex(idx);
    setLightboxOpen(true);
  };

  const closeLightbox = () => setLightboxOpen(false);
  const next = () => setActiveIndex((prev) => (prev + 1) % media.length);
  const prev = () => setActiveIndex((prev) => (prev - 1 + media.length) % media.length);

  const handleKeyDown = useCallback((e) => {
    if (e.key === "Escape") closeLightbox();
  }, []);

  useEffect(() => {
    if (lightboxOpen) {
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }
  }, [lightboxOpen, handleKeyDown]);

  return (
    <div className="border border-gray-200 rounded-lg p-4 bg-white shadow-sm">
      {/* Header */}
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-2">
          <StarRating rating={rating} />
          {formattedDate && (
            <span className="text-gray-500 text-sm">‚Äî {formattedDate}</span>
          )}
        </div>
      </div>

      {/* Title */}
      {title && <h3 className="font-semibold text-md mb-1">{title}</h3>}

      {/* Comment */}
      <p className="text-gray-700 text-sm mb-2">
        {comment || "No comment provided."}
      </p>

      {/* Tags */}
      {tags.length > 0 && (
        <div className="flex flex-wrap gap-2 mb-3">
          {tags.map((tag) => (
            <span
              key={tag.id || tag.slug}
              className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium"
            >
              {tag.label || tag.name || tag.slug}
            </span>
          ))}
        </div>
      )}

      {/* Media Thumbnails */}
      {media.length > 0 && (
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 mb-3">
          {media.map((item, idx) => {
            const url = getMediaUrl(item);
            return item.media_type === "video" ? (
              <video
                key={idx}
                src={url}
                onClick={() => openLightbox(idx)}
                className="w-full h-[120px] rounded object-cover cursor-pointer"
                muted
                playsInline
              />
            ) : (
              <img
                key={idx}
                src={url}
                alt={`Review image ${idx + 1}`}
                onClick={() => openLightbox(idx)}
                className="w-full h-[120px] object-cover rounded cursor-pointer"
              />
            );
          })}
        </div>
      )}

      {/* Lightbox Viewer */}
      {lightboxOpen && media.length > 0 && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-90 flex items-center justify-center">
          <button
            onClick={closeLightbox}
            className="absolute top-4 right-4 text-white text-2xl"
            aria-label="Close preview"
          >
            <FaTimes />
          </button>

          <button
            onClick={prev}
            className="absolute left-2 sm:left-4 text-white text-3xl px-3 py-2 bg-black/30 hover:bg-black/50 rounded-full"
            aria-label="Previous media"
          >
            <FaChevronLeft />
          </button>

          <div className="max-w-[90%] max-h-[80%] text-center">
            <div className="mb-2 text-sm text-white">
              {activeIndex + 1} of {media.length}
            </div>
            {media[activeIndex].media_type === "video" ? (
              <video
                src={getMediaUrl(media[activeIndex])}
                controls
                autoPlay
                className="max-h-[80vh] rounded"
              />
            ) : (
              <img
                src={getMediaUrl(media[activeIndex])}
                alt="Preview"
                className="max-h-[80vh] rounded object-contain"
              />
            )}
          </div>

          <button
            onClick={next}
            className="absolute right-2 sm:right-4 text-white text-3xl px-3 py-2 bg-black/30 hover:bg-black/50 rounded-full"
            aria-label="Next media"
          >
            <FaChevronRight />
          </button>
        </div>
      )}

      {/* Actions */}
      <div className="flex flex-wrap items-center justify-between text-sm text-gray-500 mt-2">
        <div className="flex items-center gap-3">
          <button className="flex items-center gap-1 hover:text-black">
            <ThumbsUp size={16} />
            Helpful ({helpful_count})
          </button>
          <button className="flex items-center gap-1 hover:text-black">
            <ThumbsDown size={16} />
            Not Helpful ({not_helpful_count})
          </button>
        </div>
        <div className="flex items-center gap-3 mt-2 sm:mt-0">
          <button className="flex items-center gap-1 hover:text-black">
            <Flag size={15} />
            Report
          </button>
          <button className="flex items-center gap-1 hover:text-black">
            <Share2 size={15} />
            Share
          </button>
        </div>
      </div>

      {/* Reviewer Info */}
      <div className="mt-3 text-xs text-gray-500">
        {reviewer_username && (
          <span>
            Review by{" "}
            <span className="text-black font-medium">{reviewer_username}</span>
            {is_verified_buyer && (
              <span className="ml-2 inline-flex items-center gap-1 text-green-600 font-medium">
                <CheckCircle size={14} /> Verified Buyer
              </span>
            )}
            {show_reviewer_city && reviewer_city && (
              <span className="ml-1 italic text-gray-400">
                from {reviewer_city}
              </span>
            )}
          </span>
        )}
      </div>

      {/* Seller Badges */}
      {seller_badges.length > 0 && (
        <div className="mt-2 flex gap-2 flex-wrap">
          {seller_badges.map((badge, i) => (
            <span
              key={i}
              className="bg-purple-100 text-purple-700 px-2 py-1 rounded-full text-xs font-semibold"
            >
              {badge}
            </span>
          ))}
        </div>
      )}
    </div>
  );
}

===== src/components/review/ReviewListInfinite.jsx =====
//components/review/ReviewListInfinite.jsx
'use client';

import React, { useEffect, useRef, useState, useCallback } from 'react';
import { BASE_API_URL } from '@/app/constants';
import { getCleanToken } from '@/lib/getCleanToken'; // ‚úÖ import clean token helper

export default function ReviewListInfinite({ productId, isOpen }) {
  const [reviews, setReviews] = useState([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(false);
  const loaderRef = useRef();

  const loadReviews = useCallback(async () => {
    if (loading || !hasMore || !productId) return;
    setLoading(true);

    try {
const token = getCleanToken();
const reviewUrl = `${BASE_API_URL}/api/product/${productId}/reviews/?page=${page}`;

const res = await fetch(reviewUrl, {
  headers: token ? { Authorization: `Token ${token}` } : {},
});

      const contentType = res.headers.get('content-type');
      if (!res.ok || !contentType?.includes('application/json')) {
        const errorText = await res.text();
        console.error('‚ùå Fetch error:', res.status, errorText);
        setHasMore(false);
        return;
      }

      const data = await res.json();
      console.log('‚úÖ Reviews loaded:', data.reviews);

      if (data.reviews?.length > 0) {
        setReviews((prev) => [...prev, ...data.reviews]);
        setPage((prev) => prev + 1);
      } else {
        setHasMore(false);
      }
    } catch (err) {
      console.error('‚ùå Error loading reviews:', err);
      setHasMore(false);
    } finally {
      setLoading(false);
    }
  }, [page, productId, loading, hasMore]);

  // üîÅ Load on scroll into view
  useEffect(() => {
    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting && hasMore && !loading) {
        loadReviews();
      }
    });

    const current = loaderRef.current;
    if (current) observer.observe(current);

    return () => {
      if (current) observer.unobserve(current);
    };
  }, [loadReviews, hasMore, loading]);

  // üîÅ Refetch when modal opens or product changes
  useEffect(() => {
    if (!productId || !isOpen) return;
    setReviews([]);
    setPage(1);
    setHasMore(true);
    loadReviews();
  }, [productId, isOpen]); // <-- ‚úÖ depends on modal open + product

  return (
    <div>
      {reviews.map((r) => (
        <div key={r.id} className="border-b py-3">
          <div className="text-sm font-semibold">{r.user_name || 'Anonymous'}</div>
          <div className="text-yellow-500">‚≠êÔ∏è {r.rating}</div>
          <p className="text-gray-700">{r.comment}</p>
        </div>
      ))}

      {hasMore && (
        <div ref={loaderRef} className="py-4 text-center text-sm text-gray-400">
          {loading ? 'Loading more...' : 'Scroll to load more'}
        </div>
      )}

      {!loading && reviews.length === 0 && (
        <div className="text-center text-sm text-gray-400 py-6">
          No reviews yet.
        </div>
      )}
    </div>
  );
}

===== src/components/review/ReviewSummaryBox.jsx =====
"use client";

import React from "react";
import StarRating from "@/components/common/StarRating";

export default function ReviewSummaryBox({
  averageRating = 0,
  reviewCount = 0,
  ratingPercent = {},
  onWriteReviewClick = null,
}) {
  const stars = [5, 4, 3, 2, 1];

  return (
    <div className="bg-white border rounded-lg shadow-sm p-4">
      {/* Header Row */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-3 gap-2">
        <div className="flex items-center gap-2 justify-center sm:justify-start">
          <StarRating rating={averageRating} />
          <span className="text-sm text-gray-600 text-center sm:text-left">
            Based on {reviewCount} review{reviewCount !== 1 ? "s" : ""}
          </span>
        </div>

        <a
          href="#write-review"
          onClick={(e) => {
            if (onWriteReviewClick) {
              e.preventDefault();
              onWriteReviewClick();
            }
          }}
          className="text-sm btn-primary text-white px-3 py-1.5 rounded hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-black text-center"
          role="button"
          tabIndex={0}
        >
          üìù Write a Review
        </a>
      </div>

      {/* Rating Bar Breakdown */}
      <div className="space-y-2 mt-2">
        {stars.map((star) => {
          const percent = ratingPercent?.[star] || 0;
          return (
            <div
              key={star}
              className="flex items-center gap-2 text-sm"
              aria-label={`${star} star rating - ${percent.toFixed(1)}%`}
            >
              <span className="w-6">{star} ‚òÖ</span>
              <div className="flex-1 bg-gray-100 rounded h-2 overflow-hidden">
                <div
                  className="bg-yellow-400 h-full transition-all duration-500 ease-in-out"
                  style={{ width: `${percent}%` }}
                ></div>
              </div>
              <span className="w-12 text-right text-gray-600">
                {percent.toFixed(1)}%
              </span>
            </div>
          );
        })}
      </div>
    </div>
  );
}

===== src/components/review/StarRating.jsx =====
//components/review/StarRating.jsx
'use client'

import React, { useState } from 'react'
import { FaStar } from 'react-icons/fa'

export default function StarRating({
  rating,
  setRating,
  size = 40,
  className = '',
}) {
  const [hover, setHover] = useState(null)

  return (
    <div className={`flex space-x-2 ${className}`}>
      {[1, 2, 3, 4, 5].map((star) => (
        <button
          key={star}
          type="button"
          onClick={() => setRating(star)}
          onMouseEnter={() => setHover(star)}
          onMouseLeave={() => setHover(null)}
          className="focus:outline-none transition-transform hover:scale-110"
        >
          <FaStar
            size={size}
            className={
              (hover || rating) >= star ? 'text-yellow-500' : 'text-gray-300'
            }
          />
        </button>
      ))}
    </div>
  )
}

===== src/components/review/StillInStockBanner.jsx =====
// StillInStockBanner.jsx
"use client";
import React, { useState } from "react";

export default function StillInStockBanner({ price, region, productSlug }) {
  const [isVisible, setIsVisible] = useState(true);

  if (!isVisible) return null;

  return (
    <div className="border border-green-200 bg-green-50 p-4 rounded-lg shadow-sm flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2 relative">
      <button
        onClick={() => setIsVisible(false)}
        className="absolute top-2 right-2 text-sm text-gray-400 hover:text-red-500"
        aria-label="Close"
      >
        ‚úï
      </button>

      <div>
        <p className="font-semibold text-green-800 mb-1">
          üéâ Still In Stock ‚Äì Don‚Äôt Miss Out!
        </p>
        <p className="text-sm text-green-700">
          This item is still available for purchase. Current price:{" "}
          <strong>GHS {price}</strong>
        </p>
      </div>

      <a
        href={`/${region}/${productSlug}`}
        className="bg-green-700 hover:bg-green-800 text-white text-sm px-4 py-2 rounded mt-2 sm:mt-0"
      >
        Buy Now
      </a>
    </div>
  );
}

===== src/components/review/SubmitReviewForm.jsx =====
//components/review/SubmitReviewForm.jsx
"use client"

import { useState } from "react"

export default function SubmitReviewForm({ product }) {
  const [rating, setRating] = useState(0)
  const [title, setTitle] = useState("")
  const [text, setText] = useState("")
  const [files, setFiles] = useState([])
  const [agreed, setAgreed] = useState(false)
  const [submitting, setSubmitting] = useState(false)
  const [success, setSuccess] = useState(false)

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!agreed || !rating || !text) return alert("Please complete the form")
    setSubmitting(true)

    const formData = new FormData()
    formData.append("product", product.id)
    formData.append("rating", rating)
    formData.append("title", title)
    formData.append("text", text)
    files.forEach((f) => formData.append("media", f))

    const res = await fetch(`/api/product/${product.id}/reviews/`, {
      method: "POST",
      body: formData,
    })

    if (res.ok) {
      setSuccess(true)
    } else {
      alert("Failed to submit review")
    }

    setSubmitting(false)
  }

  if (success) {
    return (
      <div className="text-green-600">
        üéâ Thanks for your review! You've earned 20 points.
      </div>
    )
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <label className="block">
        ‚≠ê Rating:
        <input
          type="number"
          min="1"
          max="5"
          value={rating}
          onChange={(e) => setRating(e.target.value)}
          required
          className="ml-2 border p-1 w-16"
        />
      </label>

      <label className="block">
        üìù Title:
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Superb Product"
          className="w-full border p-2 rounded"
        />
      </label>

      <label className="block">
        üí¨ Review:
        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="Share your experience"
          className="w-full border p-2 rounded"
          rows={4}
          required
        />
      </label>

      <label className="block">
        üì∑ Upload photo(s) or video (optional):
        <input
          type="file"
          accept="image/*,video/*"
          multiple
          onChange={(e) => setFiles([...e.target.files])}
          className="block mt-1"
        />
      </label>

      <label className="block text-sm">
        <input
          type="checkbox"
          checked={agreed}
          onChange={(e) => setAgreed(e.target.checked)}
          className="mr-2"
        />
        ‚úÖ I agree to the terms and confirm my review is honest.
      </label>

      <button
        type="submit"
        disabled={submitting}
        className="bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700"
      >
        {submitting ? "Submitting..." : "Submit Review & Earn Points"}
      </button>
    </form>
  )
}

===== src/components/shopify/CtaFooterBanner.jsx =====
import React from "react";

const CtaFooterBanner = () => {
  return (
    <section className="relative overflow-hidden bg-green-400 py-14 md:py-24 text-center">
      <div className="max-w-4xl mx-auto px-6 md:px-10">
        {/* Heading */}
        <h2 className="text-3xl md:text-5xl font-semibold tracking-tight leading-snug mb-6 text-gray-900">
          Sell anywhere with Shopify
        </h2>

        {/* Paragraph */}
        <p className="text-base md:text-lg text-gray-700 max-w-2xl mx-auto mb-8">
          Learn on the go. Try Shopify for free, and explore all the tools you
          need to start, run, and grow your business.
        </p>

        {/* Button */}
        <div className="flex justify-center">
          <a
            href="https://accounts.shopify.com/store-create?locale=en&language=en&signup_page=https%3A%2F%2Fwww.shopify.com%2Fblog%2Finternational-import-shipping&signup_types%5B%5D=paid_trial_experience"
            target="_blank"
            rel="noopener noreferrer"
            className="bg-black text-white font-semibold py-3 px-6 rounded-full text-base md:text-lg hover:bg-gray-800 transition duration-200"
          >
            Start free trial
          </a>
        </div>

        {/* Subtext */}
        <p className="text-sm text-white mt-4">
          Try Shopify for free, no credit card required.
        </p>
      </div>
    </section>
  );
};

export default CtaFooterBanner;


===== src/components/shopify/DdpLabelsSection.jsx =====
// DdpLabelsSection.jsx (‡¶¨‡¶æ .tsx)
import Link from "next/link";

export default function DdpLabelsSection() {
  return (
    <section className="my-12 rounded-md border-l-4 border-green-600 bg-green-50 p-6 text-gray-800">
      {/* ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ */}
      <h3 className="mb-4 text-lg font-semibold text-gray-900">
        Purchase Delivered Duty Paid&nbsp;(DDP) labels
      </h3>

      {/* ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ */}
      <p className="mb-4">
        If you calculate and collect duties and import taxes, you need to
        purchase and use <strong>Delivered Duty Paid&nbsp;(DDP)</strong>{" "}
        shipping labels instead of standard international labels. This prevents
        your customers from being double‚Äëcharged for duties and taxes.
      </p>

      <p className="mb-4">
        Currently you can buy DDP labels from{" "}
        <Link
          href="https://apps.shopify.com/categories/orders-and-shipping"
          className="font-medium text-green-700 underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          third‚Äëparty apps
        </Link>
        ‚Äî‚ÄØand very soon directly through&nbsp;
        <Link
          href="https://www.shopify.com/shipping"
          className="font-medium text-green-700 underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Shopify¬†Shipping
        </Link>{" "}
        from carriers like&nbsp;DHL‚ÄØeCommerce and DHL‚ÄØExpress.
      </p>

      {/* ‡¶ü‡¶ø‡¶™‡¶∏ */}
      <h4 className="mb-2 font-medium text-gray-900">
        Tips for a pre‚Äëpaid duties experience
      </h4>
      <ul className="mb-4 list-disc space-y-2 pl-6">
        <li>
          If you include duties and taxes in the product price, clearly mention
          this on the product page to improve add‚Äëto‚Äëcart conversion.
        </li>
        <li>
          Update your{" "}
          <Link
            href="/policies/shipping-policy"
            className="font-medium text-green-700 underline hover:no-underline"
          >
            shipping policy
          </Link>{" "}
          so customers know they won‚Äôt face extra charges on delivery.
        </li>
      </ul>

      {/* ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ */}
      <p className="text-sm text-gray-600">
        Source:&nbsp;
        <Link
          href="https://www.shopify.com/blog/international-import-shipping"
          className="underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Shopify¬†Blog ‚Äì International Import Shipping
        </Link>
      </p>
    </section>
  );
}


===== src/components/shopify/DutiesCollection.jsx =====
import React from "react";

const DutiesCollection = () => {
  return (
    <section className="bg-white py-12 px-6 max-w-5xl mx-auto text-gray-800">
      <h2 className="text-3xl font-bold mb-6 border-b pb-2">
        üì¶ Optimize Duties Collection
      </h2>

      <p className="mb-6">
        Navigating international tariffs and import taxes is a crucial part of
        cross-border selling. Shopify provides tools to simplify the process and
        enhance customer trust through transparency and seamless checkout
        experiences.
      </p>

      <div className="space-y-8">
        {/* Managing Duties and Taxes */}
        <div>
          <h3 className="text-xl font-semibold mb-2">
            üßæ Managing Duties and Taxes
          </h3>
          <p className="mb-2">You can either:</p>
          <ul className="list-disc pl-6 space-y-2 mb-4">
            <li>
              <strong>Absorb the cost:</strong> Improves customer experience but
              reduces profit margins.
            </li>
            <li>
              <strong>Pass it to customers:</strong> Preserves profit but
              requires clear communication.
            </li>
          </ul>
          <p className="italic">
            ‚úÖ Tip: Always be transparent at checkout to build trust.
          </p>
        </div>

        {/* Steps to Enable Duties Collection */}
        <div>
          <h3 className="text-xl font-semibold mb-2">
            ‚öôÔ∏è Steps to Enable Duties Collection
          </h3>
          <ol className="list-decimal pl-6 space-y-2 mb-2">
            <li>
              Go to <strong>Settings &gt; Taxes and duties</strong> in your
              Shopify admin.
            </li>
            <li>
              Add the <strong>Country of Origin</strong> to each product.
            </li>
            <li>
              Assign <strong>HS Codes</strong> to avoid border delays and apply
              correct rates.
            </li>
          </ol>
          <p className="text-sm text-gray-600">
            üìù You can bulk upload via CSV or edit each product manually.
          </p>
        </div>

        {/* Delivered Duty Paid (DDP) */}
        <div>
          <h3 className="text-xl font-semibold mb-2">
            üì¨ Use Delivered Duty Paid (DDP) Labels
          </h3>
          <p className="mb-2">
            Prevent double-charging customers by using{" "}
            <strong>DDP shipping labels</strong>.
          </p>
          <ul className="list-disc pl-6 space-y-2">
            <li>
              Available via{" "}
              <a
                href="https://apps.shopify.com/categories/orders-and-shipping"
                className="text-blue-600 underline"
              >
                third-party apps
              </a>
              .
            </li>
            <li>
              Soon available via Shopify Shipping (DHL eCommerce, DHL Express).
            </li>
          </ul>
          <p className="mt-4 font-medium">Tips for pre-paid duties:</p>
          <ul className="list-disc pl-6 space-y-2">
            <li>Mention that duties are included on product pages.</li>
            <li>
              Update your{" "}
              <a
                href="https://help.shopify.com/en/manual/checkout-settings/refund-privacy-tos"
                className="text-blue-600 underline"
              >
                shipping policy
              </a>{" "}
              accordingly.
            </li>
          </ul>
        </div>

        {/* Delivered Duty Unpaid (DDU) */}
        <div>
          <h3 className="text-xl font-semibold mb-2">
            üì¶ Delivered Duty Unpaid (DDU) Option
          </h3>
          <p>With DDU, the customer pays duties on delivery.</p>
          <ul className="list-disc pl-6 space-y-2">
            <li>Use Shopify Shipping (U.S. and Canada).</li>
            <li>
              Clearly state customer is responsible for fees in policy &
              confirmation emails.
            </li>
          </ul>
        </div>

        {/* Managed Markets */}
        <div className="bg-gray-100 p-6 rounded-lg">
          <h3 className="text-xl font-semibold mb-3">
            üöÄ Advanced: Managed Markets
          </h3>
          <p className="mb-2">
            For eligible U.S. merchants, Shopify‚Äôs Managed Markets handles:
          </p>
          <ul className="list-disc pl-6 space-y-2">
            <li>Accurate duty & tax collection.</li>
            <li>DDP label access via admin or 3PL.</li>
            <li>Product screening & fraud protection.</li>
          </ul>
          <a
            href="https://www.shopify.com/international/managed"
            target="_blank"
            rel="noreferrer"
            className="inline-block mt-4 text-white bg-black px-5 py-2 rounded hover:bg-gray-800"
          >
            Learn more
          </a>
        </div>
      </div>
    </section>
  );
};

export default DutiesCollection;


===== src/components/shopify/Header.jsx =====
// 'use client';

// import { useState } from 'react';
// import Link from 'next/link';
// import { FaChevronDown } from 'react-icons/fa';
// import { FiSearch } from 'react-icons/fi';

// const ShopifyHeader = () => {
//   const [showMore, setShowMore] = useState(false);

//   return (
//     <header className="sticky top-0 z-20 bg-white  border-black/20 text-black shadow-md">
//       <div className="max-w-7xl mx-auto flex items-center h-16 px-4 lg:px-0">
//         {/* Logo */}
//         <Link href="/" className="flex items-center">
//           <svg viewBox="0 0 56 64" className="w-8 h-9" fill="none">
//             <title>Shopify logo</title>
//             <path d="M..." fill="#95BF47" />
//             <path d="M..." fill="#5E8E3E" />
//             <path d="M..." fill="white" />
//           </svg>
//         </Link>

//         {/* Navigation */}
//         <nav className="hidden lg:flex items-center ml-8 gap-6">
//           <Link href="/blog" className="font-bold hover:underline">Blog</Link>
//           <Link href="/blog/topics/find-an-idea" className="hover:underline">Find an Idea</Link>
//           <Link href="/blog/topics/starting-up" className="hover:underline">Starting Up</Link>
//           <Link href="/blog/topics/marketing" className="hover:underline">Marketing</Link>
//           <Link href="/blog/latest" className="hover:underline">Latest</Link>

//           {/* Dropdown */}
//           <div className="relative">
//             <button
//               onClick={() => setShowMore(!showMore)}
//               className="flex items-center hover:underline focus:outline-none"
//             >
//               More
//               <FaChevronDown className="ml-1 w-3 h-3" />
//             </button>
//             {showMore && (
//               <div className="absolute left-0 mt-2 w-56 bg-white shadow-lg rounded z-50">
//                 <Link href="/blog/topics/guides" className="block px-4 py-2 hover:bg-gray-100">Guides</Link>
//                 <Link href="/blog/topics/podcasts" className="block px-4 py-2 hover:bg-gray-100">The Shopify Podcast</Link>
//                 <Link href="/blog/topics/founder-stories" className="block px-4 py-2 hover:bg-gray-100">Founder Stories</Link>
//                 <Link href="/blog/topics/sell-online" className="block px-4 py-2 hover:bg-gray-100">Ecommerce Tips</Link>
//                 <Link href="/blog/topics" className="block px-4 py-2 hover:bg-gray-100">All Topics</Link>
//                 <Link href="/enterprise/blog" className="block px-4 py-2 hover:bg-gray-100">Enterprise Blog</Link>
//               </div>
//             )}
//           </div>
//         </nav>

//         {/* Right Side */}
//         <div className="ml-auto flex items-center gap-4">
//           {/* Search */}
//           <div className="hidden lg:flex items-center cursor-pointer">
//             <span>Search</span>
//             <FiSearch className="ml-2" />
//           </div>

//           {/* Login */}
//           {/* <Link href="/login" className="text-sm">Log in</Link> */}

//           {/* CTA Button */}
//           {/* <a
//             href="https://accounts.shopify.com/store-create"
//             className="px-4 py-2 text-sm font-semibold bg-green-600 text-white rounded hover:bg-green-700 transition"
//           >
//             Start free trial
//           </a> */}
//         </div>
//       </div>
//     </header>
//   );
// };

// export default ShopifyHeader;

// 'use client';

// import { useState } from 'react';
// import Link from 'next/link';
// import { FaChevronDown } from 'react-icons/fa';
// import { FiSearch } from 'react-icons/fi';
// import { IoClose } from 'react-icons/io5';

// const ShopifyStickyHeader = () => {
//   const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
//   const [moreOpen, setMoreOpen] = useState(false);

//   return (
//     <header className="sticky top-0 z-20 text-black before:absolute before:top-0 before:left-0 before:pointer-events-none before:w-full before:h-14 before:z-20 after:absolute after:top-0 after:left-0 after:w-full after:h-full after:z-10 after:transition-opacity after:duration-200 after:bg-white before:border-y before:border-black/20 after:opacity-100 before:opacity-100 pointer-events-auto bg-white shadow-md">
//       <div className="relative z-20 flex items-center h-14 px-4 lg:px-8 max-w-7xl mx-auto">
//         {/* Logo */}
//         <Link href="/" className="flex items-center z-30">
//           <svg viewBox="0 0 56 64" className="w-8 h-9" fill="none">
//             <title>Shopify logo</title>
//             <path d="M..." fill="#95BF47" />
//             <path d="M..." fill="#5E8E3E" />
//             <path d="M..." fill="white" />
//           </svg>
//         </Link>

//         {/* Desktop Navigation */}
//         <nav className="hidden lg:flex items-center ml-10 gap-6 text-base font-medium">
//           <Link href="/blog" className="hover:underline">Blog</Link>
//           <Link href="/blog/topics/find-an-idea" className="hover:underline">Find an Idea</Link>
//           <Link href="/blog/topics/starting-up" className="hover:underline">Starting Up</Link>
//           <Link href="/blog/topics/marketing" className="hover:underline">Marketing</Link>
//           <Link href="/blog/latest" className="hover:underline">Latest</Link>
//           <div className="relative">
//             <button
//               onClick={() => setMoreOpen(!moreOpen)}
//               className="flex items-center hover:underline focus:outline-none"
//             >
//               More
//               <FaChevronDown className="ml-1 w-3 h-3" />
//             </button>
//             {moreOpen && (
//               <div className="absolute top-full left-0 mt-2 w-56 bg-white shadow-lg rounded z-50">
//                 <Link href="/blog/topics/guides" className="block px-4 py-2 hover:bg-gray-100">Guides</Link>
//                 <Link href="/blog/topics/podcasts" className="block px-4 py-2 hover:bg-gray-100">Shopify Podcast</Link>
//                 <Link href="/blog/topics/founder-stories" className="block px-4 py-2 hover:bg-gray-100">Founder Stories</Link>
//                 <Link href="/blog/topics/sell-online" className="block px-4 py-2 hover:bg-gray-100">Ecommerce Tips</Link>
//                 <Link href="/blog/topics" className="block px-4 py-2 hover:bg-gray-100">All Topics</Link>
//                 <Link href="/enterprise/blog" className="block px-4 py-2 hover:bg-gray-100">Enterprise Blog</Link>
//               </div>
//             )}
//           </div>
//         </nav>

//         {/* Right Side */}
//         <div className="ml-auto flex items-center gap-4">
//           <div className="hidden lg:flex items-center text-sm cursor-pointer hover:text-gray-700">
//             Search <FiSearch className="ml-2" />
//           </div>

//           {/* Mobile Menu Toggle */}
//           <button
//             onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
//             className="lg:hidden z-30"
//             aria-label="Toggle Menu"
//           >
//             {mobileMenuOpen ? <IoClose className="w-6 h-6" /> : <FaChevronDown className="w-5 h-5" />}
//           </button>
//         </div>
//       </div>

//       {/* Mobile Menu */}
//       {mobileMenuOpen && (
//         <div className="lg:hidden absolute top-14 left-0 right-0 w-full bg-white shadow-md z-10 transition-all duration-300 p-6 max-h-[80vh] overflow-y-scroll">
//           <ul className="space-y-6 text-base font-semibold">
//             <li><Link href="/blog">Overview</Link></li>
//             <li><Link href="/blog/topics/find-an-idea">Find an Idea</Link></li>
//             <li><Link href="/blog/topics/starting-up">Starting Up</Link></li>
//             <li><Link href="/blog/topics/marketing">Marketing</Link></li>
//             <li><Link href="/blog/latest">Latest</Link></li>
//             <li>
//               <span className="uppercase text-xs text-gray-400">More</span>
//               <ul className="pl-4 mt-2 space-y-2">
//                 <li><Link href="/blog/topics/guides">Guides</Link></li>
//                 <li><Link href="/blog/topics/podcasts">Shopify Podcast</Link></li>
//                 <li><Link href="/blog/topics/founder-stories">Founder Stories</Link></li>
//                 <li><Link href="/blog/topics/sell-online">Ecommerce Tips</Link></li>
//                 <li><Link href="/blog/topics">All Topics</Link></li>
//                 <li><Link href="/enterprise/blog">Enterprise Blog</Link></li>
//               </ul>
//             </li>
//           </ul>

//           {/* Mobile Search Bar */}
//           <form action="/blog/international-import-shipping" method="get" className="mt-6">
//             <div className="flex items-center border border-gray-300 rounded-full px-4 py-2">
//               <input
//                 type="text"
//                 name="header-search"
//                 placeholder="Search"
//                 className="w-full outline-none text-sm"
//               />
//               <button type="submit" aria-label="Search">
//                 <FiSearch className="ml-2" />
//               </button>
//             </div>
//           </form>
//         </div>
//       )}
//     </header>
//   );
// };

// export default ShopifyStickyHeader;

"use client";

import { useState } from "react";
import Link from "next/link";
import { FaChevronDown } from "react-icons/fa";
import { FiSearch } from "react-icons/fi";
import { IoClose } from "react-icons/io5";

const ShopifyStickyHeader = () => {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [moreOpen, setMoreOpen] = useState(false);

  return (
    <header className="sticky top-0 z-20 text-black bg-white shadow-md before:absolute before:top-0 before:left-0 before:pointer-events-none before:w-full before:h-14 before:z-20 after:absolute after:top-0 after:left-0 after:will-change-[opacity] after:pointer-events-none after:h-full after:w-full after:z-10 after:transition-opacity after:duration-200 after:bg-white before:border-y before:border-black/20 after:opacity-100 pointer-events-auto before:opacity-100">
      <div className="relative z-20 flex items-center h-14 px-4  container">
        {/* LEFT: Logo + Title (only visible on small screens) */}
        <div className="flex items-center w-full sm:w-auto">
          <Link href="/" className="flex items-center mr-3 sm:mr-5">
            <svg viewBox="0 0 56 64" className="w-8 h-9" fill="none">
              <title>Shopify logo</title>
              <path d="M..." fill="#95BF47" />
              <path d="M..." fill="#5E8E3E" />
              <path d="M..." fill="white" />
            </svg>
          </Link>

          {/* Mobile / Tablet Menu Title */}
          <button
            type="button"
            className="flex flex-col gap-y-0.5 leading-tight lg:hidden"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            <span className="text-xs font-bold uppercase text-gray-500">
              Blog
            </span>
            <span className="text-base font-bold flex items-center">
              Menu
              <FaChevronDown
                className={`ml-1 transition-transform duration-200 ${mobileMenuOpen ? "rotate-180" : ""}`}
              />
            </span>
          </button>
        </div>

        {/* NAVIGATION - Desktop only */}
        <nav className="hidden lg:flex items-center ml-10 gap-6 text-base font-medium">
          <Link href="/blog" className="hover:underline">
            Blog
          </Link>
          <Link href="/blog/topics/find-an-idea" className="hover:underline">
            Find an Idea
          </Link>
          <Link href="/blog/topics/starting-up" className="hover:underline">
            Starting Up
          </Link>
          <Link href="/blog/topics/marketing" className="hover:underline">
            Marketing
          </Link>
          <Link href="/blog/latest" className="hover:underline">
            Latest
          </Link>
          <div className="relative">
            <button
              onClick={() => setMoreOpen(!moreOpen)}
              className="flex items-center hover:underline focus:outline-none"
            >
              More
              <FaChevronDown className="ml-1 w-3 h-3" />
            </button>
            {moreOpen && (
              <div className="absolute top-full left-0 mt-2 w-56 bg-white shadow-lg rounded z-50">
                <Link
                  href="/blog/topics/guides"
                  className="block px-4 py-2 hover:bg-gray-100"
                >
                  Guides
                </Link>
                <Link
                  href="/blog/topics/podcasts"
                  className="block px-4 py-2 hover:bg-gray-100"
                >
                  Shopify Podcast
                </Link>
                <Link
                  href="/blog/topics/founder-stories"
                  className="block px-4 py-2 hover:bg-gray-100"
                >
                  Founder Stories
                </Link>
                <Link
                  href="/blog/topics/sell-online"
                  className="block px-4 py-2 hover:bg-gray-100"
                >
                  Ecommerce Tips
                </Link>
                <Link
                  href="/blog/topics"
                  className="block px-4 py-2 hover:bg-gray-100"
                >
                  All Topics
                </Link>
                <Link
                  href="/enterprise/blog"
                  className="block px-4 py-2 hover:bg-gray-100"
                >
                  Enterprise Blog
                </Link>
              </div>
            )}
          </div>
        </nav>

        {/* RIGHT: Search + Mobile Toggle */}
        <div className="ml-auto flex items-center gap-4">
          {/* Desktop Search */}
          <div className="hidden lg:flex items-center text-sm cursor-pointer hover:text-gray-700">
            Search <FiSearch className="ml-2" />
          </div>

          {/* Mobile Toggle Button (Right Side) */}
          <button
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            className="lg:hidden"
            aria-label="Toggle Menu"
          >
            {mobileMenuOpen ? (
              <IoClose className="w-6 h-6" />
            ) : (
              <FaChevronDown className="w-5 h-5" />
            )}
          </button>
        </div>
      </div>

      {/* Mobile Menu Panel */}
      {mobileMenuOpen && (
        <div className="lg:hidden absolute top-14 left-0 right-0 w-full bg-white shadow-md z-10 transition-all duration-300 p-6 max-h-[80vh] overflow-y-auto">
          <ul className="space-y-6 text-base font-semibold">
            <li>
              <Link href="/blog">Overview</Link>
            </li>
            <li>
              <Link href="/blog/topics/find-an-idea">Find an Idea</Link>
            </li>
            <li>
              <Link href="/blog/topics/starting-up">Starting Up</Link>
            </li>
            <li>
              <Link href="/blog/topics/marketing">Marketing</Link>
            </li>
            <li>
              <Link href="/blog/latest">Latest</Link>
            </li>
            <li>
              <span className="uppercase text-xs text-gray-400">More</span>
              <ul className="pl-4 mt-2 space-y-2">
                <li>
                  <Link href="/blog/topics/guides">Guides</Link>
                </li>
                <li>
                  <Link href="/blog/topics/podcasts">Shopify Podcast</Link>
                </li>
                <li>
                  <Link href="/blog/topics/founder-stories">
                    Founder Stories
                  </Link>
                </li>
                <li>
                  <Link href="/blog/topics/sell-online">Ecommerce Tips</Link>
                </li>
                <li>
                  <Link href="/blog/topics">All Topics</Link>
                </li>
                <li>
                  <Link href="/enterprise/blog">Enterprise Blog</Link>
                </li>
              </ul>
            </li>
          </ul>

          {/* Search Field for Mobile */}
          <form
            action="/blog/international-import-shipping"
            method="get"
            className="mt-6"
          >
            <div className="flex items-center border border-gray-300 rounded-full px-4 py-2">
              <input
                type="text"
                name="header-search"
                placeholder="Search"
                className="w-full outline-none text-sm"
              />
              <button type="submit" aria-label="Search">
                <FiSearch className="ml-2" />
              </button>
            </div>
          </form>
        </div>
      )}
    </header>
  );
};

export default ShopifyStickyHeader;


===== src/components/shopify/NewsletterBanner.jsx =====
// import React from 'react';

// const NewsletterBanner = () => {
//   return (
//     <section className="grid md:grid-cols-2 w-full bg-black text-white">
//       {/* Image Side */}
//       <div className="relative overflow-hidden h-[400px] md:h-auto">
//         <img
//           className="absolute top-0 left-0 w-full h-full object-cover"
//           src="https://cdn.shopify.com/b/shopify-brochure2-assets/c46f986d892538f4b0a15f25692330f7.png?originalWidth=1420&originalHeight=1040"
//           alt="subscription banner"
//           loading="lazy"
//         />
//       </div>

//       {/* Text + Form Side */}
//       <div className="flex items-center px-6 md:px-10 py-16 md:py-28">
//         <div className="max-w-xl">
//           {/* Heading */}
//           <h2 className="text-3xl md:text-4xl font-medium mb-4">
//             The newsletter for entrepreneurs
//           </h2>
//           <p className="text-lg leading-relaxed mb-6">
//             Join millions of self-starters in getting business resources, tips, and inspiring stories in your inbox.
//           </p>

//           {/* Form */}
//           <form
//             action="/blog/api/subscribe"
//             method="POST"
//             className="flex flex-col space-y-4 sm:w-[406px]"
//           >
//             <div className="flex items-center bg-white rounded-full overflow-hidden border border-gray-500">
//               <input
//                 type="email"
//                 name="email"
//                 placeholder="Email here"
//                 required
//                 className="w-full h-14 px-6 text-black placeholder-gray-500 bg-transparent outline-none"
//               />
//               <button
//                 type="submit"
//                 className="bg-[#7BE986] text-black font-semibold px-6 py-2 rounded-full hover:bg-green-400 transition"
//               >
//                 Subscribe
//               </button>
//             </div>

//             {/* Hidden inputs */}
//             <input type="hidden" name="subscriptionId" value="DE84EF61-2A02-4778-8807-F01B108DE974" />
//             <input type="hidden" name="signup_page" value="/blog/international-import-shipping" />
//             <input type="hidden" name="locale" value="en-US" />
//             <input type="hidden" name="blogHandle" value="blog" />
//             <input type="hidden" name="form_type" value="subscribe" />
//           </form>

//           {/* Disclaimer */}
//           <p className="text-xs text-white opacity-80 pt-4 max-w-md">
//             Unsubscribe anytime. By entering your email, you agree to receive marketing emails from Shopify.
//             By proceeding, you agree to the{' '}
//             <a href="/legal/terms" target="_blank" className="underline hover:text-green-400">
//               Terms and Conditions
//             </a>{' '}
//             and{' '}
//             <a href="/legal/privacy" target="_blank" className="underline hover:text-green-400">
//               Privacy Policy
//             </a>.
//           </p>
//         </div>
//       </div>
//     </section>
//   );
// };

// export default NewsletterBanner;

// import React from 'react';

// const NewsletterBanner = () => {
//   return (
//     <section className="grid md:grid-cols-2 w-full bg-black text-white">
//       {/* Image Side */}
//       <div className="relative h-[300px] md:h-auto overflow-hidden">
//         <img
//           className="absolute top-0 left-0 w-full h-full object-cover"
//           src="https://cdn.shopify.com/b/shopify-brochure2-assets/c46f986d892538f4b0a15f25692330f7.png?originalWidth=1420&originalHeight=1040"
//           alt="Newsletter Banner"
//           loading="lazy"
//         />
//       </div>

//       {/* Content Side */}
//       <div className="flex items-center px-6 md:px-12 lg:px-20 py-14 md:py-24 bg-black">
//         <div className="max-w-xl w-full">
//           {/* Heading */}
//           <h2 className="text-3xl md:text-4xl font-bold mb-4 leading-tight text-white">
//             The newsletter for entrepreneurs
//           </h2>
//           <p className="text-lg md:text-xl text-white mb-8">
//             Join millions of self-starters in getting business resources, tips, and inspiring stories in your inbox.
//           </p>

//           {/* Form */}
//           <form
//             action="/blog/api/subscribe"
//             method="POST"
//             className="w-full space-y-3"
//           >
//             <div className="flex flex-col sm:flex-row sm:items-center bg-white rounded-full overflow-hidden border border-gray-500 shadow-lg">
//               <input
//                 type="email"
//                 name="email"
//                 required
//                 placeholder="Enter your email"
//                 className="text-black w-full h-14 px-6 text-sm outline-none"
//               />
//               <button
//                 type="submit"
//                 className="bg-green-400 hover:bg-green-500 text-black font-semibold px-6 py-3 sm:py-0 sm:h-14 transition-all duration-200"
//               >
//                 Subscribe
//               </button>
//             </div>

//             {/* Hidden fields */}
//             <input type="hidden" name="subscriptionId" value="DE84EF61-2A02-4778-8807-F01B108DE974" />
//             <input type="hidden" name="signup_page" value="/blog/international-import-shipping" />
//             <input type="hidden" name="locale" value="en-US" />
//             <input type="hidden" name="blogHandle" value="blog" />
//             <input type="hidden" name="form_type" value="subscribe" />
//           </form>

//           {/* Disclaimer */}
//           <p className="text-xs text-gray-400 mt-4">
//             Unsubscribe anytime. By entering your email, you agree to receive marketing emails from Shopify.
//             By proceeding, you agree to the{' '}
//             <a href="/legal/terms" target="_blank" className="underline hover:text-white">
//               Terms and Conditions
//             </a>{' '}
//             and{' '}
//             <a href="/legal/privacy" target="_blank" className="underline hover:text-white">
//               Privacy Policy
//             </a>.
//           </p>
//         </div>
//       </div>
//     </section>
//   );
// };

// export default NewsletterBanner;

import React from "react";

const NewsletterBanner = () => {
  return (
    <section className="grid grid-cols-1 lg:grid-cols-2 w-full bg-black text-white">
      {/* Image Side */}
      <div className="relative h-[250px] sm:h-[300px] md:h-auto overflow-hidden hidden lg:block">
        <img
          className="absolute top-0 left-0 w-full h-full object-cover"
          src="https://cdn.shopify.com/b/shopify-brochure2-assets/c46f986d892538f4b0a15f25692330f7.png?originalWidth=1420&originalHeight=1040"
          alt="Newsletter Banner"
          loading="lazy"
        />
      </div>

      {/* Content Side */}
      <div className="flex items-center px-4 sm:px-6 md:px-12 lg:px-20 py-10 sm:py-14 md:py-24 bg-black">
        <div className="max-w-xl w-full">
          {/* Heading */}
          <h2 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-4 leading-tight text-white">
            The newsletter for entrepreneurs
          </h2>
          <p className="text-base sm:text-lg md:text-xl text-white mb-6 sm:mb-8">
            Join millions of self-starters in getting business resources, tips,
            and inspiring stories in your inbox.
          </p>

          {/* Form */}
          <form
            action="/blog/api/subscribe"
            method="POST"
            className="w-full space-y-3"
          >
            <div className="flex flex-col sm:flex-row sm:items-center md:bg-white md:rounded-full overflow-hidden md:border border-gray-500 shadow-lg">
              <input
                type="email"
                name="email"
                required
                placeholder="Enter your email"
                className="text-black w-full h-12 sm:h-14 px-4 sm:px-6 text-sm outline-none rounded-full md:rounded-none"
              />
              <button
                type="submit"
                className="bg-green-400 hover:bg-green-500 text-black font-semibold px-6 py-3 sm:py-0 sm:h-14 transition-all rounded-full md:rounded-none duration-200"
              >
                Subscribe
              </button>
            </div>

            {/* Hidden fields */}
            <input
              type="hidden"
              name="subscriptionId"
              value="DE84EF61-2A02-4778-8807-F01B108DE974"
            />
            <input
              type="hidden"
              name="signup_page"
              value="/blog/international-import-shipping"
            />
            <input type="hidden" name="locale" value="en-US" />
            <input type="hidden" name="blogHandle" value="blog" />
            <input type="hidden" name="form_type" value="subscribe" />
          </form>

          {/* Disclaimer */}
          <p className="text-xs text-gray-400 mt-4">
            Unsubscribe anytime. By entering your email, you agree to receive
            marketing emails from Shopify. By proceeding, you agree to the{" "}
            <a
              href="/legal/terms"
              target="_blank"
              className="underline hover:text-white"
            >
              Terms and Conditions
            </a>{" "}
            and{" "}
            <a
              href="/legal/privacy"
              target="_blank"
              className="underline hover:text-white"
            >
              Privacy Policy
            </a>
            .
          </p>
        </div>
      </div>
    </section>
  );
};

export default NewsletterBanner;


===== src/components/shopify/ShopifyBanner.jsx =====
// 'use client';

// import React from 'react';
// import Link from 'next/link';

// const ShopifyBanner = () => {
//   return (
//     <div className="relative overflow-hidden bg-[url('/images/marketing-bg.jpg')] bg-cover bg-center py-16 px-4 text-center">
//       <div className="container relative flex flex-col items-center">
//         {/* Heading */}
//         <p className="uppercase font-medium text-2xl tablet:text-3xl max-w-xl mb-2">
//           Start selling with Shopify today
//         </p>

//         {/* Subheading */}
//         <p className="max-w-xl text-sm mb-4">
//           Start your free trial with Shopify today‚Äîthen use these resources to guide you through every step of the process.
//         </p>

//         {/* Buttons */}
//         <div className="z-20 relative flex flex-wrap gap-4 justify-center">
//           <a
//             href="https://accounts.shopify.com/store-create?locale=en&language=en"
//             className="px-5 py-2 border-2 border-green-600 text-green-700 bg-white rounded hover:bg-green-50 transition font-semibold"
//           >
//             Start free trial
//           </a>
//           <Link
//             href="/"
//             className="px-5 py-2 border-2 border-gray-400 text-gray-700 bg-white rounded hover:bg-gray-50 transition font-semibold"
//           >
//             Learn more
//           </Link>
//         </div>

//         {/* Decorative Images */}
//         <img
//           src="https://cdn.shopify.com/b/shopify-brochure2-assets/b57973373cb5af3ba8e59f0b966065e7.webp"
//           alt=""
//           className="absolute left-[-26px] bottom-[-20px] tablet:left-0 tablet:bottom-[-60px] w-[90px] tablet:w-[136px] desktop:w-[175px] rounded-[15px] z-10"
//           loading="lazy"
//         />
//         <div className="absolute right-0 top-[-25px] tablet:right-[-20px] tablet:top-[-30px] desktop:right-[20px] desktop:top-[-40px] w-[90px] h-[85px] tablet:w-[136px] tablet:h-[140px] desktop:w-[175px] desktop:h-[180px] overflow-hidden rounded-[15px] z-10">
//           <img
//             src="https://cdn.shopify.com/b/shopify-brochure2-assets/05383e2e9b6568812f1ccc7bbc28ac3d.webp"
//             alt=""
//             className="w-full h-full object-cover"
//             loading="lazy"
//           />
//         </div>
//         <img
//           src="https://cdn.shopify.com/b/shopify-brochure2-assets/2baeeeb3c9bab2dfbfac6428fad929e1.webp"
//           alt=""
//           className="absolute bottom-[20px] right-[-50px] tablet:bottom-[-50px] tablet:right-[-70px] desktop:bottom-[-70px] desktop:right-[-100px] w-[90px] tablet:w-[136px] desktop:w-[175px] rounded-[15px] z-10"
//           loading="lazy"
//         />
//       </div>
//     </div>
//   );
// };

// export default ShopifyBanner;

import React from "react";

const BlogHeaderBanner = () => {
  return (
    <section className="relative overflow-hidden bg-gray-50 container">
      <div className="relative flex flex-col items-center text-center px-6 pt-16 pb-12 md:pt-12 md:px-20 lg:px-40 ">
        {/* Heading */}
        <h2 className="uppercase font-semibold text-2xl md:text-3xl lg:text-4xl max-w-2xl mb-2 text-gray-900 leading-snug">
          Start selling with Shopify today
        </h2>

        {/* Description */}
        <p className="text-sm md:text-base text-gray-700 max-w-xl mb-6">
          Start your free trial with Shopify today‚Äîthen use these resources to
          guide you through every step of the process.
        </p>

        {/* Button Group */}
        <div className="flex flex-wrap justify-center gap-3 z-20 relative">
          <a
            href="https://accounts.shopify.com/store-create?locale=en&language=en&signup_page=https%3A%2F%2Fwww.shopify.com%2Fblog%2Finternational-import-shipping&signup_types%5B%5D=paid_trial_experience"
            target="_blank"
            rel="noopener noreferrer"
            className="bg-black text-white px-6 py-3 rounded-full font-medium text-sm hover:bg-gray-800 transition"
          >
            Start free trial
          </a>
          <a
            href="/"
            className="bg-white border border-gray-300 text-gray-800 px-6 py-3 rounded-full font-medium text-sm hover:bg-gray-100 transition"
          >
            Learn more
          </a>
        </div>

        {/* Floating Decorative Images */}
        <img
          src="https://cdn.shopify.com/b/shopify-brochure2-assets/b57973373cb5af3ba8e59f0b966065e7.webp"
          alt=""
          className="absolute w-[90px] md:w-[136px] lg:w-[175px] bottom-[-20px] md:bottom-[-60px] left-[-26px] md:left-0 z-10 rounded-xl"
        />
        <div className="absolute w-[90px] md:w-[136px] lg:w-[175px] h-[85px] md:h-[140px] lg:h-[180px] right-0 md:right-[-20px] lg:right-[20px] top-[-25px] md:top-[-30px] lg:top-[-40px] overflow-hidden rounded-xl z-10">
          <img
            src="https://cdn.shopify.com/b/shopify-brochure2-assets/05383e2e9b6568812f1ccc7bbc28ac3d.webp"
            alt=""
            className="w-full h-full object-cover"
          />
        </div>
        <img
          src="https://cdn.shopify.com/b/shopify-brochure2-assets/2baeeeb3c9bab2dfbfac6428fad929e1.webp"
          alt=""
          className="absolute w-[90px] md:w-[136px] lg:w-[175px] bottom-[20px] md:bottom-[-50px] lg:bottom-[-70px] right-[-50px] md:right-[-70px] lg:right-[-100px] z-10 rounded-xl"
        />
      </div>
    </section>
  );
};

export default BlogHeaderBanner;


===== src/components/shopify/ShopifyShippingHero.jsx =====
import React from "react";

const ShopifyShippingHero = () => {
  return (
    <section className="relative container bg-white">
      {/* Main text container */}
      <div className="py-10 text-left lg:text-center md:pt-16 md:pb-16 px-4">
        <div className="">
          {/* Breadcrumb */}
          <div className="uppercase text-xs tracking-wide font-semibold text-gray-500 pb-2">
            <a href="/blog" className="hover:underline">
              blog
            </a>
            <span className="mx-2">|</span>
            <a href="/blog/topics/backoffice" className="hover:underline">
              Backoffice
            </a>
          </div>

          {/* Title */}
          <h1 className="text-2xl md:text-4xl font-medium tracking-tight text-gray-900 mb-4">
            Navigating Tariffs: Your Guide to International Shipping on Shopify
          </h1>

          {/* Subtitle */}
          <p className="text-lg md:text-xl text-gray-700 mb-6">
            Shopify has tools you need to keep pace with rapidly evolving trade
            policies.
          </p>

          {/* Author Info */}
          <div className="md:hidden mt-6 flex flex-col  text-gray-600 text-sm">
            <span className="font-semibold">
              by{" "}
              <a href="/blog/authors/joe-hitchcock" className="hover:underline">
                Joe Hitchcock
              </a>
            </span>
            <span>
              Updated on <time>Apr 11, 2025</time>
            </span>
          </div>
        </div>
      </div>

      {/* Hero Image */}
      <div className="">
        <img
          src="https://cdn.shopify.com/s/files/1/0070/7032/articles/international_20shipping_8addcba4-b852-47f5-933e-10b77d3cf2a0.webp?v=1744388094"
          alt="A globe surrounded by shipping packages"
          className="w-full   shadow-md"
          loading="eager"
        />
      </div>
    </section>
  );
};

export default ShopifyShippingHero;


===== src/components/shopify/SidebarNewsletterCTA.jsx =====
import React from "react";

const SidebarNewsletterCTA = () => {
  return (
    <aside className="w-full bg-white p-6 ">
      {/* Author + Date */}
      <div className="mb-6">
        <p className="text-gray-800 font-bold text-lg">
          by{" "}
          <a
            href="/blog/authors/joe-hitchcock"
            className="hover:underline text-black"
          >
            Joe Hitchcock
          </a>
        </p>
        <p className="text-sm text-gray-500">
          Updated on <time>Apr 11, 2025</time>
        </p>
      </div>

      {/* Email Signup CTA */}
      <div className="border-t pt-6 mt-6">
        <h3 className="text-xl font-semibold mb-2">
          The newsletter for entrepreneurs
        </h3>
        <p className="text-sm text-gray-700 mb-4">
          Join millions of self-starters in getting business resources, tips,
          and inspiring stories in your inbox.
        </p>

        <form action="/blog/api/subscribe" method="POST" className="space-y-3">
          <div className="flex flex-col">
            <input
              type="email"
              name="email"
              required
              placeholder="Enter your email"
              className="w-full h-12 px-4 text-sm border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-black"
            />
            <input
              type="hidden"
              name="subscriptionId"
              value="DE84EF61-2A02-4778-8807-F01B108DE974"
            />
            <input
              type="hidden"
              name="signup_page"
              value="/blog/international-import-shipping"
            />
            <input type="hidden" name="locale" value="en-US" />
            <input type="hidden" name="blogHandle" value="blog" />
            <input type="hidden" name="form_type" value="subscribe" />
          </div>

          <button
            type="submit"
            className="w-full bg-black text-white font-medium py-3 rounded-full hover:bg-gray-800 transition"
          >
            Subscribe
          </button>
        </form>

        <p className="text-xs text-gray-500 mt-3">
          Unsubscribe anytime. By entering your email, you agree to receive
          marketing emails from Shopify. By proceeding, you agree to the{" "}
          <a
            href="/legal/terms"
            target="_blank"
            className="underline hover:text-black"
          >
            Terms
          </a>{" "}
          and{" "}
          <a
            href="/legal/privacy"
            target="_blank"
            className="underline hover:text-black"
          >
            Privacy Policy
          </a>
          .
        </p>
      </div>

      {/* Promo Block */}
      <div className="bg-lime-600 text-white mt-12 p-6 rounded-lg">
        <h4 className="text-2xl font-bold leading-snug">
          Get the only point of sale that gives you{" "}
          <span className="text-lime-200">more</span>
        </h4>
        <img
          src="https://cdn.shopify.com/b/shopify-brochure2-assets/e2a124c9e2e7ae76119a66cfc515535b.png"
          alt="get in touch"
          className="my-5 w-full object-contain"
        />
        <a
          href="#contact-sales"
          className="inline-flex items-center text-white underline hover:no-underline font-medium group"
        >
          Get in touch
          <span className="ml-2 group-hover:translate-x-1 transition-transform duration-200">
            ‚Üí
          </span>
        </a>
      </div>
    </aside>
  );
};

export default SidebarNewsletterCTA;


===== src/components/shopify/StartBusinessCTA.jsx =====
import React from "react";

const StartBusinessCTA = () => {
  return (
    <div className="p-6 bg-green-400 sticky top-0 ">
      <p className="text-2xl leading-tight text-black tracking-tight mb-2 font-semibold">
        Start your online business today.
      </p>
      <p className="text-2xl font-bold text-black tracking-tight mb-9">
        For free.
      </p>
      <a
        href="https://accounts.shopify.com/store-create?locale=en&language=en&signup_page=https%3A%2F%2Fwww.shopify.com%2Fblog%2Finternational-import-shipping&signup_types%5B%5D=paid_trial_experience"
        className="flex justify-between items-center text-black no-underline border-b border-black group w-fit"
      >
        <span className="text-base tracking-tight">Start free trial</span>
        <span className="flex justify-center items-center w-6 h-6 ml-4 transition-all duration-500 transform group-hover:translate-x-full group-hover:opacity-0">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M8.00025 15.9998C7.74425 15.9998 7.48825 15.9018 7.29325 15.7068C6.90225 15.3158 6.90225 14.6838 7.29325 14.2928L11.5862 9.99976L7.29325 5.70676C6.90225 5.31576 6.90225 4.68376 7.29325 4.29276C7.68425 3.90176 8.31625 3.90176 8.70725 4.29276L13.7073 9.29276C14.0982 9.68376 14.0982 10.3158 13.7073 10.7068L8.70725 15.7068C8.51225 15.9018 8.25625 15.9998 8.00025 15.9998Z"
              fill="black"
            />
          </svg>
        </span>
      </a>
    </div>
  );
};

export default StartBusinessCTA;


===== src/components/shopify/TariffNoticeSection.jsx =====
import React from "react";

const TradeUpdateSection = () => {
  return (
    <div className="col-span-4 xs:col-span-12 md:col-span-8 lg:col-span-6 col-start-1">
      <div className="text-base text-gray-600 md:pt-10 lg:pt-16">
        {/* Highlighted Update Box */}
        <div className="my-12 border-l-2 border-green-500 pl-4 bg-gray-50 p-4 rounded">
          <p className="font-semibold text-black mb-4">
            Update on tariffs and international trade
          </p>
          <p className="mb-4">
            New and evolving trade regulations may impact your business:
          </p>
          <ul className="list-disc pl-6 space-y-2 mb-4">
            <li>
              On April 2, the U.S. announced a baseline 10% tariff on imports,
              as well as additional tariffs on certain goods from multiple
              countries.
            </li>
            <li>
              The U.S. also announced the elimination of de minimis treatment,
              which allows for duty-free entry for shipments under $800 in
              value, for imports from China.
            </li>
            <li>
              In response, other countries have placed additional tariffs on a
              range of U.S. imports.
            </li>
          </ul>
          <p>
            Check with your local trade authority for the latest information on
            current tariffs‚Äîand{" "}
            <a
              href="/news/open-doors-open-trade"
              className="text-black font-medium underline hover:no-underline"
            >
              learn more about Shopify‚Äôs position
            </a>{" "}
            on these changes.
          </p>
        </div>

        {/* Paragraph */}
        <p className="mb-6">
          Sourcing and selling products internationally is a key way to expand
          your business's reach, product offering, market share, and customer
          base. However, you must stay on top of evolving tariffs, customs
          requirements, and duties.
        </p>
        <p className="mb-6">
          Shopify has tools to{" "}
          <a
            href="/international"
            className="text-black font-medium underline hover:no-underline"
          >
            sell cross-border
          </a>{" "}
          and keep pace with rapidly evolving trade policies.
        </p>

        {/* Table of Contents */}
        <div className="my-12 border-l-2 border-green-500 pl-4 bg-gray-50 p-4 rounded">
          <p className="font-semibold text-black mb-4">Table of contents</p>
          <ul className="list-disc pl-6 space-y-2">
            <li>
              <a href="#1" className="text-black underline hover:no-underline">
                Optimize duties collection
              </a>
            </li>
            <li>
              <a href="#2" className="text-black underline hover:no-underline">
                Diversify suppliers
              </a>
            </li>
            <li>
              <a href="#3" className="text-black underline hover:no-underline">
                Use local third-party logistics (3PL) providers
              </a>
            </li>
          </ul>
        </div>

        {/* Section 1 */}
        <h2 id="1" className="text-2xl font-medium text-black mt-12 mb-6">
          Optimize duties collection
        </h2>
        <p className="mb-6">
          Navigating tariffs, which impose{" "}
          <a
            href="https://help.shopify.com/en/manual/international/duties-and-import-taxes"
            className="text-black underline hover:no-underline"
          >
            duties and import taxes
          </a>
          , means making strategic decisions that affect your business. You may
          choose to absorb these costs, which could impact profit, or pass them
          to customers.
        </p>
        <p className="mb-6">
          Whichever approach you choose, being transparent with customers is
          critical to build trust and maintain a positive customer experience.
        </p>

        {/* Subsection */}
        <h3 className="text-xl font-medium text-black mt-8 mb-4">
          Managing duties and taxes in international markets
        </h3>
        <p className="mb-6">
          Shopify merchants can use the{" "}
          <a
            href="https://admin.shopify.com/settings/taxes#duties"
            className="text-black underline hover:no-underline"
          >
            duties calculator in the admin
          </a>{" "}
          to estimate duties and import taxes. You can build those duties into
          your prices to cover expected costs or transparently display them to
          customers at checkout.
        </p>
        <p className="mb-6">
          By communicating that no additional fees will apply at delivery, your
          customers will feel more confident in completing their purchase.
        </p>
        <p className="mb-2 font-semibold">Here‚Äôs how:</p>
        <ol className="list-decimal pl-6 space-y-2">
          <li>
            Go to <strong>Settings &gt; Taxes and duties</strong>
          </li>
          {/* Add more steps if available */}
        </ol>
      </div>
    </div>
  );
};

export default TradeUpdateSection;


===== src/components/shopify/TradeUpdateSection.jsx =====
import React from "react";
import StartBusinessCTA from "./StartBusinessCTA";
import TariffNoticeSection from "./TariffNoticeSection";
import DdpLabelsSection from "./DdpLabelsSection";
import SidebarNewsletterCTA from "./SidebarNewsletterCTA";
import DutiesCollection from "./DutiesCollection";

const TradeUpdateSection = () => {
  return (
    <div className="container grid lg:grid-cols-4 py-10 gap-5 px-6">
      {/* col one  */}
      <div className="col-span-1 hidden lg:block">
        <StartBusinessCTA />
      </div>
      <div className="col-span-2">
        <TariffNoticeSection />
        <DdpLabelsSection />
        <DutiesCollection />
      </div>
      <div className="col-span-1 hidden lg:block">
        <SidebarNewsletterCTA />
      </div>
    </div>
  );
};

export default TradeUpdateSection;


===== src/components/support/MobileNav.jsx =====
"use client";
import React, { useState } from "react";
import { FaBook } from "react-icons/fa";
import Link from "next/link";
import { BsBoxArrowUpRight } from "react-icons/bs";
import { FiMenu, FiX } from "react-icons/fi"; // FiX for close icon

const MobileNav = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false); // State for handling menu toggle

  return (
    <div className="bg-white shadow-md">
      <nav className="container mx-auto flex items-center justify-between px-6 py-5 sm:py-6">
        {/* Left Section */}
        <div className="flex items-center space-x-4">
          {/* Book Icon and DOCS - Adjusted size for mobile */}
          <div className="flex items-center space-x-2">
            <FaBook className="text-blue-600 h-6 w-6 sm:h-9 sm:w-9" />{" "}
            {/* Smaller icon for mobile */}
            <span className="text-2xl sm:text-3xl font-semibold text-gray-800 hover:text-blue-600 transition duration-300">
              DOCS
            </span>
          </div>

          {/* Vertical Divider (Hidden on Mobile) */}
          <div className="hidden sm:block h-6 w-px bg-gray-300"></div>

          {/* Help Center (Hidden on Mobile) */}
          <span className="hidden sm:block text-gray-600 text-xl sm:text-2xl font-medium hover:text-blue-600 transition duration-300">
            Help Center
          </span>
        </div>

        {/* Right Section */}
        <div className="flex items-center space-x-6 sm:space-x-10 text-lg sm:text-xl font-medium">
          {/* 3-bar icon for Mobile */}
          <div
            className="lg:hidden cursor-pointer text-2xl"
            onClick={() => setIsMenuOpen(!isMenuOpen)} // Toggle the menu
          >
            {isMenuOpen ? <FiX /> : <FiMenu />}{" "}
            {/* Show FiX icon if menu is open, else show FiMenu */}
          </div>

          {/* Links - Hidden on Mobile (Visible on medium and up devices) */}
          <div className={`hidden lg:flex items-center space-x-6`}>
            <Link href="#home">
              <span className="cursor-pointer text-gray-800 hover:text-blue-600 transition duration-300">
                Home
              </span>
            </Link>
            <Link href="#shop">
              <span className="cursor-pointer text-gray-800 hover:text-blue-600 transition duration-300">
                Shop
              </span>
            </Link>
            <Link href="#support">
              <span className="cursor-pointer text-gray-800 hover:text-blue-600 transition duration-300">
                Support
              </span>
            </Link>
            <Link href="#sell-online">
              <span className="flex gap-2 items-center cursor-pointer bg-[#EFEFFF] hover:bg-blue-600 text-gray-800 hover:text-white px-4 py-2 rounded-full transition duration-300">
                <BsBoxArrowUpRight />
                Sell Online
              </span>
            </Link>
          </div>
        </div>
      </nav>

      {/* Mobile Menu - Toggle when 3-bar icon is clicked */}
      {isMenuOpen && (
        <div
          className={`lg:hidden flex flex-col items-center space-y-4 py-4 bg-white border-t border-gray-300 transition-all duration-500 ease-in-out transform ${isMenuOpen ? "translate-y-0" : "-translate-y-full"}`}
        >
          <Link href="#home">
            <span className="cursor-pointer text-gray-800 font-medium hover:text-blue-600 transition duration-300">
              Home
            </span>
          </Link>
          <Link href="#shop">
            <span className="cursor-pointer text-gray-800 font-medium hover:text-blue-600 transition duration-300">
              Shop
            </span>
          </Link>
          <Link href="#support">
            <span className="cursor-pointer text-gray-800 font-medium hover:text-blue-600 transition duration-300">
              Support
            </span>
          </Link>
          <Link href="#sell-online">
            <span className="flex gap-2 items-center cursor-pointer bg-[#EFEFFF] hover:bg-blue-600 text-gray-800 hover:text-white px-4 py-2 rounded-full transition duration-300">
              <BsBoxArrowUpRight />
              Sell Online
            </span>
          </Link>
        </div>
      )}
    </div>
  );
};

export default MobileNav;


===== src/components/ui/Card.jsx =====
import React from "react";
import classNames from "classnames";

export function Card({ children, className = "", ...props }) {
  return (
    <div
      className={classNames(
        "rounded-2xl border border-gray-200 bg-white shadow-sm",
        className,
      )}
      {...props}
    >
      {children}
    </div>
  );
}

export function CardContent({ children, className = "", ...props }) {
  return (
    <div className={classNames("p-4", className)} {...props}>
      {children}
    </div>
  );
}


===== src/components/ui/Checkbox.jsx =====
const Checkbox = ({ label, id }) => (
  <div className=" w-full mb-4 grid grid-cols-3 md:grid-cols-5">
    <label
      className="text-[#747579]   pr-4 text-base font-bold col-span-1 md:col-span-1 text-right"
      htmlFor={id}
    >
      {label}
    </label>
    <input
      className="border border-gray-300 rounded focus:outline-none col-span-1 h-4 md:col-span-1"
      type="checkbox"
      id={id}
    />
  </div>
);

export default Checkbox;


===== src/components/ui/FormInput.jsx =====
const FormInput = ({ label, type, id, placeholder }) => (
  <div className="grid grid-cols-3 md:grid-cols-5">
    <label
      className="text-[#747579]  pr-4 text-base font-bold col-span-1 md:col-span-1 text-right"
      htmlFor={id}
    >
      {label}
    </label>
    <input
      className=" p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 text-base col-span-2 md:col-span-3"
      type={type}
      id={id}
      placeholder={placeholder}
    />
  </div>
);

export default FormInput;


===== src/components/ui/InfoPopover.jsx =====
"use client";

import React from "react";
import { Info } from "lucide-react";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";

export default function InfoPopover({ children, side = "top", iconSize = 16 }) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <button
          type="button"
          className="ml-1 text-gray-500 hover:text-gray-700 focus:outline-none"
        >
          <Info className={`w-${iconSize} h-${iconSize}`} />
        </button>
      </PopoverTrigger>
      <PopoverContent side={side} className="max-w-xs text-sm leading-snug">
        {children}
      </PopoverContent>
    </Popover>
  );
}


===== src/components/ui/InfoTooltip.jsx =====
"use client";

import { Info } from "lucide-react";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";

export default function InfoTooltip({
  content,
  iconSize = 14,
  className = "",
  side = "top",
}) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <button
          type="button"
          aria-label="More information"
          className={`text-muted-foreground hover:text-foreground focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded ${className}`}
        >
          <Info style={{ width: iconSize, height: iconSize }} />
        </button>
      </PopoverTrigger>
      <PopoverContent
        side={side}
        className="text-sm leading-snug text-gray-700 max-w-xs"
      >
        {typeof content === "string" ? <span>{content}</span> : content}
      </PopoverContent>
    </Popover>
  );
}


===== src/components/ui/Input.jsx =====
import React from "react";

const Input = () => {
  return (
    <div>
      <input type="text" placeholder="type something..." />
    </div>
  );
};

export default Input;


===== src/components/ui/Loading.jsx =====
"use client";
import React from "react";
import styled from "styled-components";

const Loader = () => {
  return (
    <StyledWrapper>
      <div className="loader" />
    </StyledWrapper>
  );
};

const StyledWrapper = styled.div`
  .loader {
    display: block;
    --height-of-loader: 4px;
    --loader-color: #9061f9;
    width: 100vw; /* Full width */
    height: var(--height-of-loader);
    border-radius: 0; /* No rounded corners for a top-bar look */
    background-color: rgba(0, 0, 0, 0.2);
    position: fixed; /* Stays at the top even when scrolling */
    top: 0;
    left: 0;
    z-index: 1000; /* Ensures loader is above other content */
  }

  .loader::before {
    content: "";
    position: absolute;
    background: var(--loader-color);
    top: 0;
    left: 0;
    width: 0%;
    height: 100%;
    border-radius: 0;
    animation: moving 2s ease-in-out infinite; /* Duration increased to 2s */
  }

  @keyframes moving {
    50% {
      width: 100%;
    }
    100% {
      width: 0;
      right: 0;
      left: unset;
    }
  }
`;

export default Loader;


===== src/components/ui/PasswordInput.jsx =====
// components/ui/PasswordInput.tsx
import React, { useState } from "react";
import { FaEye, FaEyeSlash } from "react-icons/fa";

const PasswordInput = ({ id, name, value, onChange, placeholder }) => {
  const [showPassword, setShowPassword] = useState(false);

  return (
    <div className="relative w-full space-y-2">
      <label
        htmlFor="password"
        className="block text-sm font-medium text-gray-700 text-left"
      >
        Password
      </label>
      <div className="relative">
        <input
          id={id}
          name={name}
          type={showPassword ? "text" : "password"}
          onChange={onChange}
          value={value}
          placeholder={placeholder}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 pr-12"
        />
        <button
          type="button"
          onClick={() => setShowPassword(!showPassword)}
          className="absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 cursor-pointer"
          aria-label={showPassword ? "Hide password" : "Show password"}
        >
          {showPassword ? (
            <FaEye className="text-xl" />
          ) : (
            <FaEyeSlash className="text-xl" />
          )}
        </button>
      </div>
    </div>
  );
};

export default PasswordInput;


===== src/components/ui/PlanCheckoutModal.jsx =====
"use client";

import React from "react";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";

export default function PlanCheckoutModal({ open, onClose, planId, billing }) {
  const router = useRouter();

  const handleCheckout = () => {
    if (!planId) return;
    router.push(`/onboarding/checkout/${planId}?billing=${billing}`);
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogTitle className="text-xl font-bold mb-2">
          Confirm Plan
        </DialogTitle>
        <p className="text-gray-600 text-sm mb-4">
          You‚Äôre about to continue to payment for your selected seller plan.
          Would you like to proceed?
        </p>
        <div className="flex justify-end gap-3">
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button
            onClick={handleCheckout}
            className="bg-purple-700 text-white hover:bg-purple-800"
          >
            Continue to Payment
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}


===== src/components/ui/PlanComparisonModal.jsx =====
// src/components/ui/PlanComparisonModal.jsx
"use client";

import React, { Fragment, useEffect, useMemo, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { CheckCircle, XCircle, Star, Award, Info } from "lucide-react";
import { Button } from "@/components/ui/button";
import axiosInstance from "@/lib/axiosInstance";
import InfoTooltip from "@/components/ui/InfoTooltip";
import infoRegistry from "@/constants/infoRegistry";

const CORE_FEATURES = ["max_products", "allow_bnpl", "allow_display_seller_contact"];
const fmtPrice = (n) => (Number(n) || 0).toLocaleString(undefined, { minimumFractionDigits: 2 });

export default function PlanComparisonModal({
  onPick,
  open,                // controlled (optional)
  onOpenChange,        // controlled (optional)
  hideTrigger = false, // hide default trigger button
}) {
  const controlled = typeof open === "boolean";
  const [internalOpen, setInternalOpen] = useState(false);
  const isOpen = controlled ? open : internalOpen;
  const setOpen = (v) => (controlled ? onOpenChange?.(v) : setInternalOpen(v));

  const [plans, setPlans] = useState([]);
  const [features, setFeatures] = useState([]);
  const [loading, setLoading] = useState(true);
  const [billing, setBilling] = useState("monthly"); // 'monthly' | 'weekly'

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        const { data: raw = [] } = await axiosInstance.get("/api/seller-plans/");

        const dyn = new Set();
        raw.forEach((p) => p.feature_matrix?.forEach((fm) => fm.feature?.name && dyn.add(fm.feature.name)));
        const dynamicFeatures = Array.from(dyn);

        const normalized = raw.map((p) => {
          const fm = {};
          dynamicFeatures.forEach((f) => {
            fm[f] = !!p.feature_matrix?.some((x) => x.feature?.name === f && x.enabled);
          });
          return {
            id: p.id,
            label: p.label,
            price_month: Number(p.price_per_month) || 0,
            price_week: Number(p.price_per_week) || 0,
            max_products: p.max_products,
            allow_bnpl: p.allow_bnpl,
            allow_display_seller_contact: p.allow_display_seller_contact,
            is_popular: !!p.is_popular,
            is_free: Number(p.price_per_month) === 0 || !!p.is_free,
            features: fm,
          };
        });

        if (!alive) return;
        setPlans(normalized);
        setFeatures(dynamicFeatures);
      } finally {
        alive && setLoading(false);
      }
    })();
    return () => { alive = false; };
  }, []);

  const columns = useMemo(
    () =>
      plans.map((p) => ({
        key: p.id,
        title: p.label,
        priceMonthly: p.price_month,
        priceWeekly: p.price_week,
        is_popular: p.is_popular,
        is_free: p.is_free,
        highlights: [
          { label: "Max listings", value: p.max_products, type: "number" },
          { label: "Buy Now Pay Later", value: p.allow_bnpl, type: "boolean" },
          { label: "Display phone number", value: p.allow_display_seller_contact, type: "boolean" },
        ],
      })),
    [plans]
  );

  // default trigger for uncontrolled use
  if (!controlled && !hideTrigger) {
    if (loading || plans.length === 0) {
      return <Button variant="outline" disabled className="opacity-60">Compare Plans</Button>;
    }
    return <Button variant="outline" onClick={() => setOpen(true)}>Compare Plans</Button>;
  }

  if (loading) return null;

  return (
    <Transition show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-[120]" onClose={() => setOpen(false)}>
        {/* Backdrop */}
        <Transition.Child as={Fragment}
          enter="ease-out duration-200" enterFrom="opacity-0" enterTo="opacity-100"
          leave="ease-in duration-150" leaveFrom="opacity-100" leaveTo="opacity-0">
          <div className="fixed inset-0 bg-black/40 backdrop-blur-[1px]" />
        </Transition.Child>

        {/* Sheet */}
        <Transition.Child as={Fragment}
          enter="ease-out duration-300" enterFrom="translate-y-full" enterTo="translate-y-0"
          leave="ease-in duration-200" leaveFrom="translate-y-0" leaveTo="translate-y-full">
          <Dialog.Panel className="fixed inset-x-0 bottom-0 mx-auto w-full max-w-5xl rounded-t-2xl bg-white shadow-xl ring-1 ring-black/5 dark:bg-[#0f1115] dark:ring-white/10">
            <div className="mx-auto mt-2 h-1.5 w-12 rounded-full bg-gray-300 dark:bg-gray-700" />

            {/* Header */}
            <div className="flex items-start justify-between px-5 pt-4 pb-3">
              <div>
                <Dialog.Title className="text-lg font-semibold">Compare Seller Plans</Dialog.Title>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  Review features across plans and pick what fits your shop best.
                </p>
              </div>

              {/* Billing toggle */}
              <div className="flex items-center gap-2">
                <span className={`text-xs font-medium ${billing === "monthly" ? "text-gray-900 dark:text-gray-100" : "text-gray-500 dark:text-gray-400"}`}>Monthly</span>
                <button
                  type="button"
                  onClick={() => setBilling((v) => (v === "monthly" ? "weekly" : "monthly"))}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition ${billing === "weekly" ? "bg-purple-600" : "bg-gray-300 dark:bg-gray-600"}`}
                  aria-label="Toggle billing cycle"
                >
                  <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${billing === "weekly" ? "translate-x-6" : "translate-x-1"}`} />
                </button>
                <span className={`text-xs font-medium ${billing === "weekly" ? "text-gray-900 dark:text-gray-100" : "text-gray-500 dark:text-gray-400"}`}>Weekly</span>

                <button
                  onClick={() => setOpen(false)}
                  className="ml-3 rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-700 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
                >
                  Close
                </button>
              </div>
            </div>

            {/* Plan ‚Äúcards‚Äù row inside the table header area */}
            <div className="-mx-4 overflow-x-auto px-4 md:mx-0">
              <div
                className="grid grid-cols-[112px_repeat(3,minmax(184px,1fr))] gap-3 px-4 pb-2"
                role="region"
                aria-label="Plan quick summary"
                style={{
                  WebkitMaskImage:
                    "linear-gradient(90deg, transparent 0, #000 16px, #000 calc(100% - 16px), transparent 100%)",
                  maskImage:
                    "linear-gradient(90deg, transparent 0, #000 16px, #000 calc(100% - 16px), transparent 100%)",
                }}
              >
                <div className="text-xs font-medium text-gray-500 dark:text-gray-400 flex items-center">Feature</div>
                {columns.map((c) => {
                  const price = billing === "weekly" ? c.priceWeekly : c.priceMonthly;
                  const isFree = (billing === "weekly" ? c.priceWeekly : c.priceMonthly) === 0 || c.is_free;
                  return (
                    <div key={c.key} className={[
                      "rounded-2xl border p-3 bg-white dark:bg-[#0f1115]",
                      c.is_popular ? "border-purple-500 ring-1 ring-purple-200 dark:ring-purple-800/50" : "border-gray-200 dark:border-gray-700",
                    ].join(" ")}>
                      <div className="flex items-center justify-between mb-1">
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-semibold">{c.title}</span>
                          {c.is_popular && (
                            <span className="inline-flex items-center gap-1 rounded-full bg-purple-600 px-2 py-0.5 text-[10px] font-medium text-white">
                              <Star className="h-3 w-3" /> Popular
                            </span>
                          )}
                          {!c.is_popular && isFree && (
                            <span className="inline-flex items-center gap-1 rounded-full bg-emerald-600 px-2 py-0.5 text-[10px] font-medium text-white">
                              <Award className="h-3 w-3" /> Free
                            </span>
                          )}
                        </div>
                      </div>

                      <div className="text-xl font-bold leading-5">
                        GHS {fmtPrice(price)}
                        <span className="ml-1 text-[11px] font-medium text-gray-600 dark:text-gray-400">
                          /{billing === "weekly" ? "wk" : "mo"}
                        </span>
                      </div>
                      <p className="mt-1 text-[11px] text-gray-500 dark:text-gray-400">Includes core selling tools</p>

                      {/* highlights */}
                      <ul className="mt-2 space-y-1.5 text-[13px]">
                        {c.highlights.map((h, i) => (
                          <li key={i} className="flex items-center gap-2">
                            {h.type === "boolean" ? (
                              h.value ? <CheckCircle className="h-3.5 w-3.5 text-emerald-500" /> : <XCircle className="h-3.5 w-3.5 text-rose-500" />
                            ) : (
                              <CheckCircle className="h-3.5 w-3.5 text-emerald-500" />
                            )}
                            <span>
                              {h.label}
                              {" "}{h.type === "number" && <span className="font-semibold">{h.value ?? "‚Äî"}</span>}
                            </span>
                          </li>
                        ))}
                      </ul>

                      <button
                        className={[
                          "mt-3 w-full rounded-lg px-3 py-2 text-center text-sm font-semibold transition",
                          c.is_popular ? "bg-purple-600 text-white hover:bg-purple-700" : "bg-gray-900 text-white hover:bg-black dark:bg-gray-100 dark:text-gray-900 dark:hover:bg-white",
                        ].join(" ")}
                        onClick={() => { onPick?.(c.key); setOpen(false); }}
                      >
                        {isFree ? "Get Started" : "Select plan"}
                      </button>
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Comparison matrix */}
            <div
              className="-mx-4 overflow-x-auto px-4 pb-4 md:mx-0"
              style={{
                WebkitMaskImage:
                  "linear-gradient(90deg, transparent 0, #000 16px, #000 calc(100% - 16px), transparent 100%)",
                maskImage:
                  "linear-gradient(90deg, transparent 0, #000 16px, #000 calc(100% - 16px), transparent 100%)",
              }}
            >
              <table className="min-w-full border-separate border-spacing-0">
                <thead className="sticky top-0 z-10 bg-white/95 backdrop-blur-sm dark:bg-[#0f1115]/95">
                  <tr className="text-left text-sm">
                    <th className="sticky left-0 z-20 w-36 bg-white px-4 py-3 font-medium dark:bg-[#0f1115]">
                      Feature
                    </th>
                    {columns.map((c) => (
                      <th key={c.key} className="min-w-[184px] px-3 py-2 text-center text-sm font-semibold">
                        {c.title}
                      </th>
                    ))}
                  </tr>
                </thead>

                <tbody>
                  <RowGroupHeader label="Core limits" />
                  {CORE_FEATURES.map((k, i) => (
                    <FeatureRow
                      key={k}
                      zebra={i % 2 === 1}
                      label={infoRegistry[k]?.label || k}
                      info={infoRegistry[k]?.description}
                      plans={plans}
                      render={(p) => renderCell(p[k])}
                    />
                  ))}

                  {features.length > 0 && <RowGroupHeader label="Advanced" />}
                  {features.map((f, i) => (
                    <FeatureRow
                      key={f}
                      zebra={i % 2 === 1}
                      label={infoRegistry[f]?.label || f}
                      info={infoRegistry[f]?.description || `More about ${f}`}
                      plans={plans}
                      render={(p) =>
                        p.features[f] ? (
                          <CheckCircle className="mx-auto h-4 w-4 text-emerald-600" />
                        ) : (
                          <XCircle className="mx-auto h-4 w-4 text-rose-500" />
                        )
                      }
                    />
                  ))}
                </tbody>
              </table>
            </div>

            {/* Footer note */}
            <div className="sticky bottom-0 flex items-center justify-between gap-3 border-t bg-white/95 px-5 py-3 text-xs text-gray-600 backdrop-blur-sm dark:border-gray-800 dark:bg-[#0f1115]/95 dark:text-gray-400">
              <span>Tap a plan header or button to pick it.</span>
              <span className="hidden sm:inline rounded-full bg-purple-50 px-2 py-1 font-medium text-purple-700 dark:bg-purple-900/40 dark:text-purple-200">
                You can change plans anytime.
              </span>
            </div>
          </Dialog.Panel>
        </Transition.Child>
      </Dialog>
    </Transition>
  );
}

/* helpers */
function RowGroupHeader({ label }) {
  return (
    <tr>
      <td colSpan={999} className="bg-gray-50 px-4 py-2 text-xs font-semibold uppercase tracking-wide text-gray-600 dark:bg-[#10141a] dark:text-gray-300">
        {label}
      </td>
    </tr>
  );
}

function FeatureRow({ label, info, render, plans, zebra }) {
  return (
    <tr className={zebra ? "bg-white dark:bg-[#0f1115]" : "bg-gray-50/70 dark:bg-[#10141a]/60"}>
      <td className="sticky left-0 z-10 w-36 bg-inherit px-4 py-3 text-[13px] font-medium">
        <div className="flex items-center gap-1">
          <span className="leading-4">{label}</span>
          {info && <InfoTooltip content={info} />}
        </div>
      </td>
      {plans.map((p, idx) => (
        <td
          key={p.id}
          className={`min-w-[184px] px-3 py-3 text-center text-sm ${idx > 0 ? "border-l border-gray-100 dark:border-gray-800" : ""}`}
        >
          {render(p)}
        </td>
      ))}
    </tr>
  );
}

function renderCell(val) {
  if (typeof val === "number") return <span className="text-sm font-semibold">{val}</span>;
  if (typeof val === "boolean") return val ? <CheckCircle className="mx-auto h-4 w-4 text-emerald-600" /> : <XCircle className="mx-auto h-4 w-4 text-rose-500" />;
  return <span>-</span>;
}

===== src/components/ui/PlanComparisonTable.jsx =====
"use client";

import React, { useEffect, useState } from "react";
import { CheckCircle, XCircle } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogTrigger,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import axiosInstance from "@/lib/axiosInstance";
import InfoTooltip from "@/components/ui/InfoTooltip";
import infoRegistry from "@/constants/infoRegistry";

const CORE_FEATURES = [
  "max_products",
  "allow_bnpl",
  "allow_display_seller_contact",
];

export default function PlanComparisonModal() {
  const [plans, setPlans] = useState([]);
  const [features, setFeatures] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    axiosInstance
      .get("/api/seller/plan-matrix/")
      .then((res) => {
        const rawPlans = res.data;

        const allFeaturesSet = new Set();
        rawPlans.forEach((plan) =>
          (plan.features || []).forEach((f) => allFeaturesSet.add(f)),
        );
        const allFeatures = Array.from(allFeaturesSet);

        const normalizedPlans = rawPlans.map((plan) => {
          const featureMap = {};
          allFeatures.forEach((f) => {
            featureMap[f] = plan.features?.includes(f) || false;
          });
          return {
            id: plan.id,
            name: plan.name,
            label: plan.label,
            price: plan.price_per_month,
            price_weekly: plan.price_per_week,
            max_products: plan.max_products,
            allow_bnpl: plan.allow_bnpl,
            allow_display_seller_contact: plan.allow_display_seller_contact,
            badge: plan.badge,
            features: featureMap,
          };
        });

        setFeatures(allFeatures);
        setPlans(normalizedPlans);
      })
      .catch(console.error)
      .finally(() => setLoading(false));
  }, []);

  if (loading || plans.length === 0) return null;

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Compare Plans</Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogTitle className="text-xl font-bold mb-4">
          Compare Seller Plans
        </DialogTitle>
        <div className="overflow-x-auto w-full">
          <table className="min-w-full table-auto text-sm border-collapse">
            <thead>
              <tr>
                <th className="text-left p-2 border-b">Feature</th>
                {plans.map((plan) => (
                  <th key={plan.id} className="text-center p-2 border-b">
                    <div className="flex flex-col items-center">
                      <span className="font-semibold">{plan.label}</span>
                      <span className="text-xs text-muted-foreground">
                        GHS {plan.price}
                      </span>
                      {plan.badge && (
                        <span className="mt-1 text-[10px] font-medium text-white bg-purple-600 rounded px-2 py-0.5">
                          {plan.badge}
                        </span>
                      )}
                    </div>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {CORE_FEATURES.map((key) => (
                <tr key={key} className="border-t">
                  <td className="p-2 font-medium">
                    <div className="flex items-center gap-1">
                      {infoRegistry[key]?.label || key}
                      <InfoTooltip content={infoRegistry[key]?.description} />
                    </div>
                  </td>
                  {plans.map((plan) => (
                    <td key={`${plan.id}-${key}`} className="text-center p-2">
                      {typeof plan[key] === "boolean" ? (
                        plan[key] ? (
                          <CheckCircle className="w-4 h-4 text-green-600 mx-auto" />
                        ) : (
                          <XCircle className="w-4 h-4 text-red-500 mx-auto" />
                        )
                      ) : (
                        <span className="text-sm font-semibold">
                          {plan[key]}
                        </span>
                      )}
                    </td>
                  ))}
                </tr>
              ))}

              {features.map((feature) => (
                <tr key={feature} className="border-t">
                  <td className="p-2 font-medium">
                    <div className="flex items-center gap-1">
                      {infoRegistry[feature]?.label || feature}
                      <InfoTooltip
                        content={
                          infoRegistry[feature]?.description ||
                          `More about ${feature}`
                        }
                      />
                    </div>
                  </td>
                  {plans.map((plan) => (
                    <td
                      key={`${plan.id}-${feature}`}
                      className="text-center p-2"
                    >
                      {plan.features[feature] ? (
                        <CheckCircle className="w-4 h-4 text-green-600 mx-auto" />
                      ) : (
                        <XCircle className="w-4 h-4 text-red-500 mx-auto" />
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </DialogContent>
    </Dialog>
  );
}


===== src/components/ui/PlanToggleFilter.jsx =====
"use client";

import { useState, useMemo, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Star, Eye, BadgeCheck, Circle } from "lucide-react";

const FILTERS = [
  { label: "All", value: "all", icon: Circle },
  { label: "Free", value: "free", icon: BadgeCheck },
  { label: "Popular", value: "popular", icon: Star },
  { label: "High Visibility", value: "visibility", icon: Eye },
];

export default function PlanToggleFilter({ plans = [], setFilteredPlans }) {
  const [active, setActive] = useState("all");
  const scrollerRef = useRef(null);

  const filtered = useMemo(() => {
    if (active === "all") return plans;
    if (active === "free") return plans.filter((p) => p.is_free);
    if (active === "popular") return plans.filter((p) => p.is_popular);
    if (active === "visibility") return plans.filter((p) => p.is_visible);
    return plans;
  }, [active, plans]);

  // push filtered plans upward whenever active/plans change
  useEffect(() => {
    setFilteredPlans?.(filtered);
  }, [filtered, setFilteredPlans]);

  const handleFilterChange = (value) => {
    setActive(value);
    // auto-scroll the selected chip into view on mobile
    queueMicrotask(() => {
      const el = scrollerRef.current?.querySelector(`[data-filter="${value}"]`);
      el?.scrollIntoView({ inline: "center", behavior: "smooth", block: "nearest" });
    });
  };

  return (
    <div className="-mx-4 overflow-x-auto px-4">
      <div
        ref={scrollerRef}
        className="flex flex-nowrap gap-2 pb-1 snap-x snap-mandatory"
        role="tablist"
        aria-label="Plan filters"
      >
        {FILTERS.map(({ label, value, icon: Icon }) => {
          const isActive = active === value;
          return (
            <Button
              key={value}
              data-filter={value}
              onClick={() => handleFilterChange(value)}
              variant={isActive ? "default" : "outline"}
              aria-pressed={isActive}
              role="tab"
              className={[
                "shrink-0 snap-start rounded-full px-3 py-1 text-sm inline-flex items-center gap-1",
                "focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2",
                "dark:focus-visible:ring-purple-400 dark:focus-visible:ring-offset-gray-900",
                isActive
                  ? // active chip
                    "bg-purple-600 text-white hover:bg-purple-700 dark:bg-purple-600 dark:text-white dark:hover:bg-purple-500"
                  : // inactive chip (light & dark)
                    "border border-gray-300 text-gray-800 hover:bg-gray-100 " +
                    "dark:border-gray-700 dark:text-gray-100 dark:hover:bg-gray-800/70",
              ].join(" ")}
              title={label}
            >
              <Icon className="h-4 w-4" />
              <span className="whitespace-nowrap">{label}</span>
            </Button>
          );
        })}
      </div>
    </div>
  );
}

===== src/components/ui/button.jsx =====
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils"; // Make sure you have this helper

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-xl text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none shadow-sm",
  {
    variants: {
      variant: {
        default: "bg-purple-600 text-white hover:bg-purple-700",
        destructive: "bg-red-600 text-white hover:bg-red-700",
        outline: "border border-gray-300 text-gray-800 hover:bg-gray-100",
        secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200",
        ghost: "bg-transparent hover:bg-gray-100",
        link: "text-purple-600 underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 px-3",
        lg: "h-11 px-6",
        icon: "h-10 w-10 p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        ref={ref}
        className={cn(buttonVariants({ variant, size }), className)}
        {...props}
      />
    );
  },
);

Button.displayName = "Button";


===== src/components/ui/details/Dummy.jsx =====
import React from "react";
import { FaHeart } from "react-icons/fa";
import { GoPerson } from "react-icons/go";
import { MdLocalPhone } from "react-icons/md";
import parse from "html-react-parser";

const Dummy = ({ title = "", description = "" }) => {
  return (
    <div>
      <div className="grid md:grid-cols-2 gap-5 lg:gap-20 ">
        <div>
          <div className="md:h-full space-y-2">
            <div className="space-y-4 border rounded-xl p-2">
              <div className="flex gap-5">
                <span>
                  <GoPerson className="h-16 w-16 border rounded-full text-gray-500" />
                </span>
                <div>
                  <h2 className="text-xl md:text-2xl font-bold tracking-wide">
                    Upfrica
                  </h2>
                  <p className="text-base">
                    <span className="mr-5 text-gray-400">5 followers</span>{" "}
                    <span className="text-green-500">417 Items</span>
                  </p>
                </div>
              </div>
              <div className="flex gap-2">
                <div className="text-base lg:text-xl font-bold border rounded-3xl w-1/2">
                  <button className="flex items-center gap-4  mx-auto py-2">
                    <span>
                      <FaHeart />
                    </span>
                    <span>Follow</span>
                  </button>
                </div>
                <div className="text-base lg:text-xl font-bold border rounded-3xl w-1/2">
                  <button className="flex flex-col mx-auto py-2">
                    <span>shop all items</span>
                  </button>
                </div>
              </div>
              <div className="   bg-[#A435F0] py-3 rounded-lg w-full flex items-center justify-center">
                <div className="flex items-center gap-2 ">
                  <span>
                    <MdLocalPhone
                      className="h-6 w-6 text-white
              "
                    />
                  </span>
                  <p className="text-white text-base lg:text-xl tracking-wide font-bold">
                    Click to view number
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-6 py-4">
          <h2 className="text-xl md:text-2xl font-medium tracking-wide">
            {title}
          </h2>
          <hr />
          <p className="text-base  leading-8">{parse(description?.body)}</p>

          <p className="text-xl">
            <span className=" font-bold mr-2">Seller location: </span> accra,
            Ghana
          </p>
        </div>
      </div>
    </div>
  );
};

export default Dummy;


===== src/components/ui/dialog.js =====
"use client";

import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

export const Dialog = DialogPrimitive.Root;
export const DialogTrigger = DialogPrimitive.Trigger;

export function DialogContent({ children, className = "", ...props }) {
  return (
    <DialogPrimitive.Portal>
      <DialogPrimitive.Overlay className="fixed inset-0 z-40 bg-black/50 backdrop-blur-sm" />
      <DialogPrimitive.Content
        className={`fixed z-50 left-1/2 top-1/2 w-full max-w-lg -translate-x-1/2 -translate-y-1/2 rounded-xl bg-white p-6 shadow-lg ${className}`}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="absolute top-4 right-4 text-gray-500 hover:text-gray-700">
          <X className="h-5 w-5" />
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPrimitive.Portal>
  );
}

export function DialogTitle({ children, className = "", ...props }) {
  return (
    <DialogPrimitive.Title
      className={`text-lg font-semibold text-gray-900 ${className}`}
      {...props}
    >
      {children}
    </DialogPrimitive.Title>
  );
}


===== src/components/ui/popover.jsx =====
"use client";

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

export const Popover = PopoverPrimitive.Root;
export const PopoverTrigger = PopoverPrimitive.Trigger;
export const PopoverContent = React.forwardRef(
  ({ className, ...props }, ref) => (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        ref={ref}
        className={`z-50 w-64 rounded-md border bg-white p-3 shadow-md outline-none ${className}`}
        sideOffset={8}
        {...props}
      />
    </PopoverPrimitive.Portal>
  ),
);
PopoverContent.displayName = PopoverPrimitive.Content.displayName;


===== src/components/ui/tooltip.jsx =====
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import { cn } from "@/lib/utils";

export function TooltipProvider({ ...props }) {
  return <TooltipPrimitive.Provider delayDuration={300} {...props} />;
}

export function Tooltip({ children, ...props }) {
  return <TooltipPrimitive.Root {...props}>{children}</TooltipPrimitive.Root>;
}

export const TooltipTrigger = TooltipPrimitive.Trigger;

export function TooltipContent({ className, sideOffset = 4, ...props }) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        sideOffset={sideOffset}
        className={cn(
          "z-50 max-w-xs rounded-md bg-black/90 px-3 py-1.5 text-xs text-white shadow-md animate-in fade-in-0 zoom-in-95",
          className,
        )}
        {...props}
      />
    </TooltipPrimitive.Portal>
  );
}


===== src/components/user/UserContent.jsx =====
import React from "react";
import Link from "next/link";

const UserContent = () => {
  // Sample data array
  const data = [
    {
      id: 1,
      createdAt: "2023-09-01",
      fullName: "John Doe",
      username: "johndoe",
      country: "USA",
      email: "john@example.com",
      accounts: 3,
      connectedAccounts: 2,
    },
    {
      id: 2,
      createdAt: "2023-09-02",
      fullName: "Jane Smith",
      username: "janesmith",
      country: "Canada",
      email: "jane@example.com",
      accounts: 5,
      connectedAccounts: 3,
    },
    // ... more objects
  ];

  return (
    <div className="bg-white shadow-2xl p-4 sm:p-6 md:p-8 rounded-md container mx-auto mt-4">
      {/* Header section: Title + Search + New user button */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-4">
        <h2 className="text-xl sm:text-2xl md:text-3xl font-bold">Users</h2>

        {/* Right side: Search & Button in a row for larger screens, column for small */}
        <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 w-full sm:w-auto">
          {/* Search box wrapper */}
          <div className="relative border rounded-md bg-white w-full sm:w-auto">
            <div className="relative flex items-center w-full h-12 rounded-lg focus-within:shadow-lg bg-white overflow-hidden">
              <div className="grid place-items-center h-full w-12 text-gray-300 pl-2">
                {/* Search icon (SVG or React Icons) */}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <input
                className="peer h-full w-full outline-none text-sm text-gray-700 pr-2 border-none"
                type="text"
                id="search"
                placeholder="Search users..."
              />
            </div>
          </div>

          {/* New user button */}
          <button className="text-white font-bold bg-[#1976D2] px-6 py-2 rounded-md hover:bg-blue-700 transition-colors w-full sm:w-auto">
            New user
          </button>
        </div>
      </div>

      <hr className="mb-4" />

      {/* Table section with horizontal scroll on small devices */}
      <div className="overflow-x-auto">
        <table className="min-w-full w-full text-sm sm:text-base bg-white">
          <thead>
            <tr className="bg-gray-100">
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                ID
              </th>
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                Created At
              </th>
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                Full Name
              </th>
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                Username
              </th>
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                Country
              </th>
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                Email
              </th>
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                Accounts
              </th>
              <th className="text-left py-2 px-4 hover:text-blue-500 whitespace-nowrap">
                Connected
              </th>
              <th className="text-left py-2 px-4"></th>
              <th className="text-left py-2 px-4"></th>
            </tr>
          </thead>
          <tbody>
            {data.map((item) => (
              <tr
                key={item.id}
                className="border-b last:border-b-0 hover:bg-gray-50 transition-colors"
              >
                <td className="py-3 px-4">{item.id}</td>
                <td className="py-3 px-4">{item.createdAt}</td>
                <td className="py-3 px-4">{item.fullName}</td>
                <td className="py-3 px-4">{item.username}</td>
                <td className="py-3 px-4 whitespace-nowrap">{item.country}</td>
                <td className="py-3 px-4">{item.email}</td>
                <td className="py-3 px-4">{item.accounts} accounts</td>
                <td className="py-3 px-4 whitespace-nowrap">
                  {item.connectedAccounts} connected
                </td>
                <td className="py-3 px-4 text-blue-600 hover:underline">
                  <Link href="/edit">Edit</Link>
                </td>
                <td className="py-3 px-4 text-red-500 hover:underline">
                  Destroy
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default UserContent;


===== src/components/user/Users.jsx =====
"use client";
import React, { useState } from "react";
import { IoArrowBack, IoMenu } from "react-icons/io5"; // 1) Import a hamburger icon or any icon you like
import Link from "next/link";
import { usePathname } from "next/navigation";
import { HiMiniXMark } from "react-icons/hi2";

const Users = () => {
  const [isOpen, setIsOpen] = useState(false); // 2) Track whether mobile sidebar is open

  const dashboardData = [
    { id: 1, name: "Dashboard", value: "dashboard" },
    { id: 2, name: "Announcements", value: "announcements" },
    { id: 3, name: "Users", value: "users" },
    { id: 4, name: "User Connected Accounts", value: "userConnectedAccounts" },
    { id: 5, name: "Accounts", value: "accounts" },
    { id: 6, name: "Account Users", value: "accountUsers" },
    { id: 7, name: "Plans", value: "plans" },
    { id: 8, name: "Pay Customers", value: "payCustomers" },
    { id: 9, name: "Pay Charges", value: "payCharges" },
    { id: 10, name: "Pay Payment Methods", value: "payPaymentMethods" },
    { id: 11, name: "Pay Subscriptions", value: "paySubscriptions" },
    { id: 12, name: "Ads", value: "ads" },
  ];

  const pathname = usePathname();

  return (
    <div className="flex">
      {/* 3) Mobile toggle button: hidden on lg screens */}
      <button
        className="lg:hidden p-4 text-gray-700"
        onClick={() => setIsOpen(true)} // open the sidebar
      >
        <IoMenu className="h-6 w-6" />
      </button>

      {/* 4) The Sidebar Container */}
      <div
        className={`
          fixed lg:static top-0 left-0 h-screen lg:h-auto 
          w-64  bg-white border-r border-gray-200 p-4 
          transform transition-transform duration-300 z-50
          ${isOpen ? "translate-x-0" : "-translate-x-full"} 
          lg:translate-x-0
        `}
      >
        {/* "Back to App" row */}
        <div className="flex justify-between items-center pb-4">
          <h2 className="flex items-center gap-2  text-base font-semibold w-[300px]">
            <IoArrowBack className="h-5 w-5" />
            Back
          </h2>
          {/* 6) Close button for mobile screens */}
          <button
            className="lg:hidden  text-sm text-gray-500 underline"
            onClick={() => setIsOpen(false)}
          >
            <HiMiniXMark className="h-6 w-6" />
          </button>
        </div>
        <hr />

        {/* 5) Links */}
        <div className="mt-4 space-y-4">
          {dashboardData.map((data) => (
            <Link href={`/${data.value}`} key={data.id} passHref>
              <p
                className={`cursor-pointer text-base lg:text-lg pb-2 font-medium 
                  ${pathname === `/${data.value}` ? "text-blue-500 font-bold" : "text-gray-700"} 
                  hover:text-blue-600
                `}
              >
                {data.name}
              </p>
            </Link>
          ))}
        </div>
      </div>

      {/* 7) Main Content Area (placeholder) */}
      {/* <div className="flex-1 ml-0 lg:ml-64 p-4">
        <h1 className="text-xl font-bold">Main Content</h1>
        <p className="mt-2 text-gray-600">
          This is where your page content goes.
        </p>
      </div> */}
    </div>
  );
};

export default Users;


===== src/constants/infoRegistry.js =====
const infoRegistry = {
  public_shop_page: {
    label: "Public Shop Page",
    description: (
      <>
        Get a public URL listing all your products ‚Äî great for sharing and SEO.
        <br />
        <a
          href="/help-center/shop-page"
          target="_blank"
          className="underline text-blue-400"
        >
          Learn more
        </a>
      </>
    ),
  },
  bulk_product_upload: {
    label: "Bulk Product Upload",
    description:
      "Upload many products at once using CSV. Ideal for large sellers.",
  },
  allow_bnpl: {
    label: "Buy Now Pay Later",
    description: (
      <>
        Enable products for Upfrica‚Äôs BNPL program.{" "}
        <a
          href="/help-center/bnpl"
          target="_blank"
          className="underline text-blue-400"
        >
          BNPL Terms
        </a>
      </>
    ),
  },
  max_products: {
    label: "Max Listings",
    description: "Maximum number of active listings allowed in your shop.",
  },
  allow_display_seller_contact: {
    label: "Display Phone Number",
    description:
      "Buyers can view your number directly on product and shop pages.",
  },
};

export default infoRegistry;


===== src/contexts/AuthContext.js =====
// src/contexts/AuthContext.js
"use client";

import { createContext, useContext, useEffect, useState } from "react";
import axiosInstance from "@/lib/axiosInstance";
import {
  getFromStorage as getItem,
  saveToStorage as setItem,
  removeFromStorage as removeItem,
} from "@/app/utils/storage";
import { deriveRawRoles } from "@/app/utils/roles";

const AuthContext = createContext();
const ME_ENDPOINT = "/api/users/me/";

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [hydrated, setHydrated] = useState(false);

  useEffect(() => {
    console.log("[Auth] useEffect: starting hydration");

    const savedToken = getItem("token");
    const savedUser = getItem("user");

    console.log("[Auth] Saved token:", savedToken);
    console.log("[Auth] Saved user from storage:", savedUser);

    if (savedToken) {
      setToken(savedToken);
      axiosInstance.defaults.headers.common["Authorization"] = `Token ${savedToken}`;
    }
    if (savedUser) setUser(savedUser);

    const hydrate = async () => {
      if (savedToken) {
        try {
          console.log("[Auth] Fetching /me...");
          const res = await axiosInstance.get(ME_ENDPOINT, { cache: "no-store" });

          console.log("[Auth] /me payload keys:", Object.keys(res.data || {}));
          console.log("[Auth] /me payload:", res.data);

          // ‚úÖ Inject derived roles as account_type if missing
          const roles = deriveRawRoles(res.data);
          const userWithRoles = {
            ...res.data,
            account_type: roles, // make sure downstream consumers see it
          };
          console.log("[Auth] derived roles:", roles);

          setUser(userWithRoles);
          setItem("user", userWithRoles);
        } catch (err) {
          console.error("‚ùå Failed to hydrate user:", err);
          logout();
        }
      } else {
        console.log("[Auth] No token found, skipping /me request");
      }
      setHydrated(true);
      console.log("[Auth] Hydration complete");
    };

    hydrate();
  }, []);

  const logout = () => {
    console.log("[Auth] Logging out...");
    setUser(null);
    setToken(null);
    removeItem("user");
    removeItem("token");
    delete axiosInstance.defaults.headers.common["Authorization"];
    console.log("[Auth] Logout complete, storage cleared");
  };

  const login = async (loginPayload) => {
    console.log("[Auth] Login called with payload:", loginPayload);

    const authToken = loginPayload?.token;
    if (!authToken) throw new Error("Missing token");

    setToken(authToken);
    setItem("token", authToken);
    axiosInstance.defaults.headers.common["Authorization"] = `Token ${authToken}`;

    try {
      console.log("[Auth] Fetching /me after login...");
      const res = await axiosInstance.get(ME_ENDPOINT, { cache: "no-store" });

      console.log("[Auth] /me payload keys (after login):", Object.keys(res.data || {}));
      console.log("[Auth] /me payload (after login):", res.data);

      const roles = deriveRawRoles(res.data);
      const userWithRoles = { ...res.data, account_type: roles };
      console.log("[Auth] derived roles (after login):", roles);

      setUser(userWithRoles);
      setItem("user", userWithRoles);
      setHydrated(true);
      return res.data?.onboarding || loginPayload?.onboarding || null;
    } catch (err) {
      console.error("‚ùå Failed to fetch user after login:", err);
      const fallbackRaw = {
        ...(loginPayload?.user || {}),
        onboarding: loginPayload?.onboarding || null,
      };
      const roles = deriveRawRoles(fallbackRaw);
      const fallback = { ...fallbackRaw, account_type: roles };
      console.log("[Auth] Using fallback user after login error:", fallback);

      setUser(fallback);
      setItem("user", fallback);
      setHydrated(true);
      return fallback.onboarding;
    }
  };

  const refreshUser = async () => {
    const authToken = token || getItem("token");
    console.log("[Auth] Refreshing user, token:", authToken);
    if (!authToken) return;
    try {
      axiosInstance.defaults.headers.common["Authorization"] = `Token ${authToken}`;
      const res = await axiosInstance.get(ME_ENDPOINT, { cache: "no-store" });

      console.log("[Auth] /me payload keys (refresh):", Object.keys(res.data || {}));
      console.log("[Auth] /me payload (refresh):", res.data);

      const roles = deriveRawRoles(res.data);
      const userWithRoles = { ...res.data, account_type: roles };
      console.log("[Auth] derived roles (refresh):", roles);

      setUser(userWithRoles);
      setItem("user", userWithRoles);
      return userWithRoles;
    } catch (err) {
      console.error("‚ùå Failed to refresh user:", err);
    }
  };

  const fullyReady = hydrated && !!token && !!user;

  // From now on, roles are always present on user.account_type
  const roles = user?.account_type || [];
  const isBuyer = roles.includes("buyer");
  const isSeller = roles.includes("seller") || roles.includes("seller_private") || roles.includes("seller_business");
  const isAgent = roles.includes("agent");
  const isAffiliate = roles.includes("affiliate");

  const onboarding = user?.onboarding || null;
  const requiresOnboarding = onboarding
    ? !onboarding.complete
    : (isSeller || isAgent) && !user?.onboarded;

  return (
    <AuthContext.Provider
      value={{
        user, setUser,
        token, setToken,
        hydrated, fullyReady,
        login, logout, refreshUser,
        // roles
        isBuyer, isSeller, isAgent, isAffiliate,
        // onboarding
        onboarding, requiresOnboarding,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("‚ùå useAuth must be used within an <AuthProvider>");
  return ctx;
}

===== src/contexts/OrderContext.js =====
// src/contexts/OrderContext.js
import { createContext, useContext } from "react";

export const OrderContext = createContext(null);

// Custom hook for accessing the context
export const useOrder = () => useContext(OrderContext);


===== src/contexts/RoleViewContext.js =====
// src/components/new-dashboard/RoleViewContext.js
"use client";

import React, { createContext, useContext, useEffect, useMemo, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";

/** Map any backend role to a UI role */
function normalizeOne(r) {
  if (!r) return null;
  if (r === "seller_private" || r === "seller_business") return "seller";
  if (["buyer", "seller", "agent", "affiliate"].includes(r)) return r;
  return null;
}

const RoleViewContext = createContext(null);

export function RoleViewProvider({ roles: rolesProp, defaultRole, children }) {
  const { user } = useAuth();

  // 1) Prefer roles from backend user
  const backendRoles = useMemo(() => {
    const raw = user?.account_type;
    const arr = Array.isArray(raw) ? raw : raw ? [raw] : [];
    return arr.filter(Boolean);
  }, [user?.account_type]);

  // 2) Fallback: roles passed via props
  const propRoles = useMemo(() => {
    const input = Array.isArray(rolesProp) ? rolesProp : rolesProp ? [rolesProp] : [];
    return input.filter(Boolean);
  }, [rolesProp]);

  // 3) Last resort: roles from cached user in localStorage
  const cachedRoles = useMemo(() => {
    if (typeof window === "undefined") return [];
    try {
      const saved = JSON.parse(localStorage.getItem("user") || "null");
      const raw = saved?.account_type;
      const arr = Array.isArray(raw) ? raw : raw ? [raw] : [];
      return arr.filter(Boolean);
    } catch {
      return [];
    }
  }, []);

  // Choose first non-empty source
  const rawRoles = useMemo(() => {
    return (backendRoles?.length && backendRoles)
      || (propRoles?.length && propRoles)
      || (cachedRoles?.length && cachedRoles)
      || [];
  }, [backendRoles, propRoles, cachedRoles]);

  // Collapse ‚Üí UI roles (seller_* ‚Üí seller), de-dupe, ensure at least buyer
  const displayRoles = useMemo(() => {
    const mapped = rawRoles.map(normalizeOne).filter(Boolean);
    const out = mapped.length ? mapped : ["buyer"];
    return Array.from(new Set(out));
  }, [rawRoles]);

  // Pick an initial valid role
  const pickInitial = () => {
    if (defaultRole && displayRoles.includes(defaultRole)) return defaultRole;
    if (typeof window !== "undefined") {
      const saved = localStorage.getItem("roleView");
      if (saved && displayRoles.includes(saved)) return saved;
    }
    return displayRoles[0];
  };

  const [roleView, setRoleView] = useState(pickInitial);

  // Keep roleView valid when roles change
  useEffect(() => {
    if (!displayRoles.length) return;
    if (!roleView || !displayRoles.includes(roleView)) {
      const next = pickInitial();
      setRoleView(next);
      if (typeof window !== "undefined") localStorage.setItem("roleView", next);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [displayRoles.join("|")]);

  // Dev logs (toggle off if noisy)
  useEffect(() => {
    console.log("üü¢ RoleViewProvider rawRoles (chosen):", rawRoles);
    console.log("   ‚Ü≥ from backend:", backendRoles, "prop:", propRoles, "cache:", cachedRoles);
    console.log("üîπ displayRoles (UI):", displayRoles);
    console.log("üìå roleView:", roleView);
  }, [rawRoles, backendRoles, propRoles, cachedRoles, displayRoles, roleView]);

  const value = useMemo(
    () => ({ roles: rawRoles, displayRoles, roleView, setRoleView }),
    [rawRoles, displayRoles, roleView]
  );

  return <RoleViewContext.Provider value={value}>{children}</RoleViewContext.Provider>;
}

export function useRoleView() {
  const ctx = useContext(RoleViewContext);
  if (!ctx) throw new Error("useRoleView must be used inside <RoleViewProvider>");
  return ctx;
}

===== src/hooks/useCountries.js =====
//src/hooks/useCountries.js
import { useEffect, useState } from 'react';
import { BASE_API_URL } from '@/app/constants';

export function useCountries(token) {
  const [countries, setCountries] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const res = await fetch(`${BASE_API_URL}/api/countries/`, {
          headers: token ? { Authorization: `Token ${token}` } : {},
        });
        const data = await res.json();
        if (mounted && Array.isArray(data)) setCountries(data);
      } catch (_) {
        if (mounted) setCountries([]);
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, [token]);

  return { countries, loading };
}

===== src/hooks/useEntitlements.js =====
// src/hooks/useEntitlements.js
"use client";
import { useEffect, useState, useMemo } from "react";
import axiosInstance from "@/lib/axiosInstance";

const ALIASES = {
  contact_display: "allow_display_seller_contact",
  shop_creation: "allow_shop_creation",
  bnpl: "allow_bnpl",
  storefront_unlock: "storefront_unlock",
  bulk_product_upload: "allow_bulk_product_upload",
};

// Set NEXT_PUBLIC_ENTS_NOCACHE=1 in .env.local if you want to bypass server cache in dev
const NOCACHE = typeof window !== "undefined" && process.env.NEXT_PUBLIC_ENTS_NOCACHE === "1";

export default function useEntitlements() {
  const [active, setActive] = useState(null);      // Set<string> of active flags
  const [states, setStates] = useState(new Map()); // Map<flag, {state, why_locked, source}>
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        setError(null);

        const url = `/api/users/me/entitlements/?full=1${NOCACHE ? "&nocache=1" : ""}`;
        const { data } = await axiosInstance.get(url);

        // Build "active" set from compact list
        const act = new Set();
        for (const code of data?.entitlements ?? []) {
          act.add(ALIASES[code] || code);
        }

        // Build detailed map from full list
        const map = new Map();
        for (const item of data?.entitlements_full ?? []) {
          const code = item?.feature_code || item?.code || item?.key || item?.name;
          if (!code) continue;
          const flag = ALIASES[code] || code;
          map.set(flag, {
            state: item?.state || (act.has(flag) ? "active" : "available"),
            why_locked: item?.why_locked || "",
            source: item?.source || "",
          });
        }

        // Ensure every "active" flag appears as active in the map (no accidental downgrade)
        for (const flag of act) {
          const existing = map.get(flag);
          if (!existing || existing.state !== "active") {
            map.set(flag, { state: "active", why_locked: "", source: existing?.source || "" });
          }
        }

        if (alive) {
          setActive(act);
          setStates(map);
        }
      } catch (e) {
        if (alive) setError(e?.message || "Failed to load entitlements");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => { alive = false; };
  }, []);

  const has = (flag) => !!(flag && active?.has(flag));

  // Never downgrade to "available" if active set says we have it
  const stateOf = (flag) => {
    const st = states.get(flag)?.state;
    if (active?.has(flag) && (!st || st === "available")) return "active";
    return st || (active?.has(flag) ? "active" : "available");
  };

  const whyLocked = (flag) => states.get(flag)?.why_locked || "";

  // Optionally expose a memoized snapshot if a component needs them
  const entitlements = useMemo(() => ({
    active: active ? new Set(active) : new Set(),
    states: new Map(states),
  }), [active, states]);

  return { loading, error, has, stateOf, whyLocked, entitlements };
}

===== src/hooks/useOnboardingGate.js =====
//src/hooks/useOnboardingGate.js
"use client";
import { useEffect } from "react";
import { usePathname, useRouter } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";

const SAFE = [
  "/login",
  "/signup",
  "/onboarding/account-type",
  "/onboarding/seller-plans",
  "/onboarding/checklist",
  "/agent/onboarding",
  "/affiliate/onboarding",
];

export function useOnboardingGate() {
  const { hydrated, token, onboarding } = useAuth();
  const router = useRouter();
  const pathname = usePathname();

  useEffect(() => {
    if (!hydrated || !token) return;
    if (SAFE.some((p) => pathname.startsWith(p))) return;

    if (onboarding && onboarding.complete === false && onboarding.target) {
      router.replace(onboarding.target);
    }
  }, [hydrated, token, onboarding, pathname, router]);
}

===== src/hooks/useTheme.js =====
// hooks/useTheme.js
import { useEffect, useState } from "react";

export default function useTheme() {
  const [theme, setTheme] = useState("system");

  useEffect(() => {
    const saved = localStorage.getItem("theme") || "system";
    applyTheme(saved);

    if (saved === "system") {
      const media = window.matchMedia("(prefers-color-scheme: dark)");
      const handleChange = () => applyTheme("system");
      media.addEventListener("change", handleChange);
      return () => media.removeEventListener("change", handleChange);
    }
  }, []);

  const applyTheme = (mode) => {
    const root = document.documentElement;
    if (mode === "dark") root.classList.add("dark");
    else if (mode === "light") root.classList.remove("dark");
    else {
      const prefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)",
      ).matches;
      prefersDark ? root.classList.add("dark") : root.classList.remove("dark");
    }
    localStorage.setItem("theme", mode);
    setTheme(mode);
  };

  return { theme, setTheme: applyTheme };
}


===== src/lib/axiosInstance.js =====
// lib/axiosInstance.js

import axios from "axios";

// üîß Create a reusable axios instance
const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || "http://127.0.0.1:8000",
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// ‚úÖ Inject token from localStorage (client-side only)
axiosInstance.interceptors.request.use(
  (config) => {
    if (typeof window !== "undefined") {
      try {
        const rawToken = localStorage.getItem("token");
        if (rawToken) {
          // Strip quotes if present (defensive)
          const cleanToken = rawToken.replace(/^"|"$/g, "").trim();
          config.headers.Authorization = `Token ${cleanToken}`;
        }
      } catch (err) {
        console.warn("‚ö†Ô∏è Failed to inject token from localStorage:", err);
      }
    }
    return config;
  },
  (error) => {
    console.error("‚ùå Axios request error:", error);
    return Promise.reject(error);
  }
);

// üö® Optional: Handle expired/invalid tokens globally
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (typeof window !== "undefined") {
      const status = error?.response?.status;

      if (status === 401 || status === 403) {
        console.warn("üîê Token might be invalid or expired. Status:", status);

        // Uncomment if you want to force logout on invalid token
        /*
        localStorage.removeItem("token");
        window.location.href = "/login"; // Or redirect to your auth route
        */
      }
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;

===== src/lib/cdn-image-loader.js =====
// src/lib/cdn-image-loader.js
import { fixImageUrl } from '@/lib/image';

// --- utils ---
const toURL = (src) => {
  try { return new URL(src); }
  catch { return new URL(src, 'https://www.upfrica.com'); } // base for relative
};

function normalizedWidth(u, width) {
  const w = Number(width);
  if (Number.isFinite(w) && w > 0) return Math.round(w);

  // fallbacks: ?w=.. then last numeric path segment (e.g. /400/300)
  const qp = Number(u.searchParams.get('w'));
  if (Number.isFinite(qp) && qp > 0) return Math.round(qp);

  const m = u.pathname.match(/\/(\d+)(?:\/(\d+))?(?=$|[/?#])/);
  if (m) {
    const p = Number(m[1]);
    if (Number.isFinite(p) && p > 0) return Math.round(p);
  }

  return 800; // sane default so width is always present
}

const pairRe = /\/(\d+)\/(\d+)(?=$|[/?#])/;

function rewritePicsum(u, width) {
  const W = normalizedWidth(u, width);
  let oldW = W, oldH = W;
  const m = u.pathname.match(pairRe);
  if (m) {
    oldW = parseInt(m[1], 10) || W;
    oldH = parseInt(m[2], 10) || W;
  }
  const newH = Math.max(1, Math.round((W * oldH) / oldW));
  if (m) u.pathname = u.pathname.replace(pairRe, `/${W}/${newH}`);
  else u.pathname = u.pathname.replace(/\/$/, '') + `/${W}/${newH}`;
  return u.toString();
}

function rewriteUnsplash(u, width, quality) {
  const W = normalizedWidth(u, width);
  u.searchParams.set('w', String(W));
  if (!u.searchParams.has('auto')) u.searchParams.set('auto', 'format');

  const q = Number(quality);
  if (Number.isFinite(q) && !u.searchParams.has('q')) u.searchParams.set('q', String(q));
  return u.toString();
}

function rewriteGeneric(u, width, quality) {
  const W = normalizedWidth(u, width);
  u.searchParams.set('w', String(W));
  const q = Number(quality);
  if (Number.isFinite(q) && !u.searchParams.has('q')) u.searchParams.set('q', String(q));
  return u.toString();
}

// --- loader entrypoint ---
export default function cdnImageLoader({ src, width, quality }) {
  if (!src) return src;

  const fixed = fixImageUrl(src);
  if (fixed.startsWith('data:') || fixed.startsWith('blob:')) return fixed;

  const u = toURL(fixed);
  const host = (u.hostname || '').toLowerCase();

  if (host === 'images.unsplash.com') {
    const existingQ = Number(u.searchParams.get('q'));
    const q = Number.isFinite(quality) ? quality : (Number.isFinite(existingQ) ? existingQ : 75);
    return rewriteUnsplash(u, width, q);
  }

  if (host === 'picsum.photos') {
    return rewritePicsum(u, width);
  }

  // media.upfrica.com, cloudfront, GCS, etc.
  return rewriteGeneric(u, width, quality);
}

===== src/lib/getCleanToken.js =====
// app/lib/getCleanToken.js
export function getCleanToken() {
  if (typeof window === 'undefined') return null;
  const raw = localStorage.getItem('token');
  return raw?.replace(/^"|"$/g, '').trim() || null;
}

===== src/lib/image.js =====
// src/lib/image.js
export const FALLBACK_IMAGE =
  'https://d3q0odwafjkyv1.cloudfront.net/50g59dwfx74fq23f6c2p5noqotgo';

const API_BASE = (process.env.NEXT_PUBLIC_MEDIA_BASE ||
  process.env.NEXT_PUBLIC_API_URL || ''
).replace(/\/+$/, '');

function absoluteMedia(path) {
  const p = String(path || '').replace(/^\/+/, '');
  const mediaPath = `/media/${p}`;
  return API_BASE ? `${API_BASE}${mediaPath}` : mediaPath;
}

// src/lib/image.js
function repairUrl(abs) {
  let s = String(abs || '').trim();

  // Pre-clean obvious typos and the missing slash after .net
  s = s
    .replace(/(cloudfront)\.ne\b/gi, '$1.net')      // .ne -> .net
    .replace(/(cloudfront\.net)(?![/:])/gi, '$1/'); // ensure "/"

  try {
    const u = new URL(s);

    // If the path was glued to the hostname (e.g. cloudfront.netabc123)
    const m = u.hostname.match(/^(.+\.cloudfront\.net)(.+)$/i);
    if (m) {
      u.hostname = m[1];
      u.pathname = '/' + m[2] + (u.pathname || '');
    }

    u.pathname = u.pathname
      .replace(/\/t\/t\//g, '/t/')
      .replace(/\/{2,}/g, '/');

    return u.toString();
  } catch {
    // Best-effort fallback
    return s
      .replace(/(cloudfront)\.ne\b/gi, '$1.net')
      .replace(/^((?:https?:)?\/\/[^/]+)([^/])/i, '$1/$2')
      .replace(/\/t\/t\//g, '/t/');
  }
}

export function fixImageUrl(u) {
  if (!u) return FALLBACK_IMAGE;
  let s = String(u).trim();
  if (!s || /^(null|none|undefined)$/i.test(s)) return FALLBACK_IMAGE;

  // If it looks like JSON array of images, try to parse and take the first
  if (s.startsWith('[')) {
    try {
      const arr = JSON.parse(s);
      const first = Array.isArray(arr) ? arr[0] : null;
      if (typeof first === 'string') s = first;
      else if (first && typeof first === 'object') s = first.url || first.image_url || first.secure_url || first.src || '';
    } catch { /* ignore */ }
  }

  if (/^https?:\/\//i.test(s) || s.startsWith('data:')) return repairUrl(s);
  if (s.startsWith('/media/')) return API_BASE ? `${API_BASE}${s}` : s;
  if (/^media\//i.test(s))    return API_BASE ? `${API_BASE}/${s}` : `/${s}`;
  if (/^direct_uploads\//i.test(s)) return absoluteMedia(s);
  if (/^[A-Za-z0-9][A-Za-z0-9._-]*$/.test(s)) return absoluteMedia(s);

  const cleaned = s.replace(/^\/+/, '');
  return repairUrl(API_BASE ? `${API_BASE}/${cleaned}` : `/${cleaned}`);
}

// --- helper to dig an image url out of many shapes -------------------------
function firstImageFromArray(arr) {
  for (const it of arr) {
    if (typeof it === 'string' && it.trim()) return it;
    if (it && typeof it === 'object') {
      const u = it.image_url || it.url || it.secure_url || it.src || it.path || it.image;
      if (typeof u === 'string' && u.trim()) return u;
    }
  }
  return null;
}

function pickCandidateImage(item) {
  if (!item || typeof item !== 'object') return null;

  // single string fields (ordered by likelihood)
  const singleKeys = [
    'product_image_url', 'product_image', 'thumbnail', 'thumb',
    'image_url', 'image', 'main_image', 'primary_image', 'picture',
    'preview', 'cover_image', 'seo_image',
  ];
  for (const k of singleKeys) {
    const v = item[k];
    if (typeof v === 'string' && v.trim() && !/^(null|none|undefined)$/i.test(v)) return v;
  }

  // arrays of strings/objects
  const arrayKeys = [
    'image_objects', 'imageObjects', 'images', 'photos', 'gallery',
    'media', 'pictures', 'thumbnails', 'product_images',
  ];
  for (const k of arrayKeys) {
    const v = item[k];
    if (Array.isArray(v)) {
      const first = firstImageFromArray(v);
      if (first) return first;
    }
  }

  // some APIs nest media under { media: { images: [...] } } or similar
  const nested = item.media || item.assets || item.primary_media;
  if (nested) {
    if (Array.isArray(nested)) {
      const first = firstImageFromArray(nested);
      if (first) return first;
    } else if (typeof nested === 'object') {
      for (const key of Object.keys(nested)) {
        const v = nested[key];
        if (Array.isArray(v)) {
          const first = firstImageFromArray(v);
          if (first) return first;
        }
      }
      const direct = nested.url || nested.image_url || nested.secure_url || nested.src;
      if (typeof direct === 'string' && direct.trim()) return direct;
    }
  }

  return null;
}

// Public pickers
export function pickProductImage(item) {
  return fixImageUrl(pickCandidateImage(item) || FALLBACK_IMAGE);
}

export function pickShopHeroImage(shop) {
  return fixImageUrl(
    pickCandidateImage(shop) ||
    shop?.top_banner || shop?.shop_logo || FALLBACK_IMAGE
  );
}

===== src/lib/products/api.js =====
// src/lib/products/api.js

// src/lib/products/api.js

import { BASE_API_URL } from "@/app/constants";

// üîπ Get product details by region and slug
export async function getProductBySlug(region, slug) {
  const res = await fetch(`${BASE_API_URL}/api/${region}/${slug}/`, {
    cache: "no-store",
  });

  if (res.status === 404) return null;

  if (!res.ok) {
    throw new Error(`Failed to fetch product: ${res.status}`);
  }

  return res.json();
}

// üîπ Get product reviews by product ID (when you have product.id)
export async function getProductReviewsFromProduct(productId) {
  const res = await fetch(`${BASE_API_URL}/api/products/${productId}/reviews/`, {
    cache: "no-store",
  });

  if (!res.ok) {
    throw new Error(`Failed to fetch reviews by product ID: ${res.status}`);
  }

  return res.json();
}

// üîπ Get product reviews by region and slug (when you have /[country]/[slug])
export async function getProductReviews(region, slug) {
  const res = await fetch(`${BASE_API_URL}/api/${region}/${slug}/reviews/`, {
    cache: "no-store",
  });

  if (!res.ok) {
    throw new Error(`Failed to fetch reviews: ${res.status}`);
  }

  const data = await res.json();

  // ‚úÖ Normalize the shape
  if (Array.isArray(data)) {
    return {
      reviews: data,
      average_rating: null,
      review_count: data.length,
      rating_percent: null,
    };
  }

  // Handle structured response with results and stats
  return {
    reviews: data.results || data.reviews || [],
    average_rating: data.average_rating ?? null,
    review_count: data.review_count ?? (data.results?.length || 0),
    rating_percent: data.rating_percent ?? null,
  };
}

===== src/lib/seller-contact.js =====
// src/lib/seller-contact.js

/** -------------------------------------------
 * Entitlement helpers
 * - Works with either a plain string[] from /entitlements
 *   OR a stateOf() getter that returns 'active' | 'available' | 'included_locked'
 * ------------------------------------------*/

/**
 * @param {Object} opts
 * @param {string[]} [opts.entitlements]  // e.g. ['contact_display','storefront_unlock'] or ['allow_display_seller_contact']
 * @param {(name:string)=>('active'|'available'|'included_locked'|undefined)} [opts.stateOf]
 * @param {boolean} [opts.requireStorefront=false]
 * @param {boolean} [opts.fallbackIfUnknown=false]  // ‚úÖ strict by default: don't show when unknown
 * @returns {{allowed:boolean, reason?:string, states?:Record<string,string|boolean|undefined>}}
 */
export function canDisplaySellerContact({
  entitlements,
  stateOf,
  requireStorefront = false,
  fallbackIfUnknown = false,
} = {}) {
  const entSet = Array.isArray(entitlements) ? new Set(entitlements) : null;
  const hasEntList = entSet !== null;

  // support alias names in entitlements
  const hasAny = (names = []) => {
    if (!entSet) return undefined;
    for (const n of names) if (entSet.has(n)) return true;
    return false;
  };

  const isActive = (s) => s === "active";
  const isLocked = (s) => s === "available" || s === "included_locked";

  // --- contact (prefer entitlements; fall back to state) ---
  const contactState = stateOf?.("allow_display_seller_contact");
  const contactFromEnt = hasAny(["contact_display", "allow_display_seller_contact"]);

  let contactAllowed;
  if (hasEntList) {
    // strict: must be entitled to display contact
    contactAllowed = contactFromEnt === true;
  } else {
    contactAllowed =
      isActive(contactState) ? true
      : isLocked(contactState) ? false
      : null; // unknown
  }

  // --- storefront (optional; prefer entitlements; fall back to state) ---
  const storeState = stateOf?.("storefront_unlock");
  const storeFromEnt = hasAny(["storefront_unlock", "allow_storefront_unlock", "allow_storefront"]);

  let storeAllowed;
  if (!requireStorefront) {
    storeAllowed = true;
  } else if (hasEntList) {
    storeAllowed = storeFromEnt === true;
  } else {
    storeAllowed =
      isActive(storeState) ? true
      : isLocked(storeState) ? false
      : null; // unknown
  }

  const isUnknown =
    contactAllowed === null || (requireStorefront && storeAllowed === null);

  const allowed = isUnknown
    ? fallbackIfUnknown
    : Boolean(contactAllowed && storeAllowed);

  // best-effort reason
  let reason = "";
  if (!allowed) {
    if (hasEntList) {
      if (contactAllowed === false) reason = "missing_entitlement";
      else if (requireStorefront && storeAllowed === false) reason = "missing_storefront_entitlement";
      else if (isUnknown) reason = "unknown";
    } else {
      if (contactAllowed === false) {
        reason =
          contactState === "included_locked" ? "kyc_required"
          : contactState === "available" ? "plan_locked"
          : "feature_locked";
      } else if (requireStorefront && storeAllowed === false) {
        reason =
          storeState === "included_locked" ? "kyc_required_storefront"
          : storeState === "available" ? "plan_locked_storefront"
          : "storefront_locked";
      } else if (isUnknown) {
        reason = "unknown";
      }
    }
  }

  return {
    allowed,
    reason,
    states: {
      // return actual state string if present; else boolean if known via entitlements; else undefined
      contact: contactState ?? (contactFromEnt === true ? true : undefined),
      storefront: storeState ?? (storeFromEnt === true ? true : undefined),
    },
  };
}

/** -------------------------------------------
 * Phone selection
 * ------------------------------------------*/

/**
 * Pick the number to display publicly on shop/PDP.
 * Prefers:
 *   1) phones tagged 'shop_public' AND primary
 *   2) 'shop_public' AND verified
 *   3) newest 'shop_public'
 *   4) otherwise: primary ‚Üí verified ‚Üí newest of all
 *
 * @param {Array<Object>} phones
 * @returns {null | {
 *   id:any, e164:string, display:string, hasWhatsapp:boolean,
 *   isPrimary:boolean, isVerified:boolean, uses:string[]
 * }}
 */
export function pickShopPhone(phones = []) {
  const list = Array.isArray(phones) ? phones.slice() : [];
  if (list.length === 0) return null;

  const withUse = list.filter((p) => Array.isArray(p.uses) && p.uses.includes("shop_public"));
  const pool = withUse.length ? withUse : list;

  const byUpdated = (a, b) =>
    new Date(b.updated_at || b.modified || 0) - new Date(a.updated_at || a.modified || 0);

  const chosen =
    pool.find((p) => p.is_primary) ||
    pool.find((p) => p.is_verified) ||
    pool.slice().sort(byUpdated)[0] ||
    null;

  if (!chosen) return null;

  const e164 = String(chosen.e164 || chosen.number || "").replace(/[^\d+]/g, "");
  return {
    id: chosen.id,
    e164,
    display: chosen.display || chosen.national || chosen.local || e164,
    hasWhatsapp: Array.isArray(chosen.uses) && chosen.uses.includes("whatsapp"),
    isPrimary: !!chosen.is_primary,
    isVerified: !!chosen.is_verified,
    uses: chosen.uses || [],
  };
}

/** Build a WhatsApp deep link for a given E.164 string */
export function whatsappUrl(e164) {
  const digits = String(e164 || "").replace(/[^\d]/g, "");
  return digits ? `https://wa.me/${digits}` : null;
}

===== src/lib/seo/builders.js =====
// src/lib/seo/builders.js
import { absUrl, stripHtml, truncate, SITE_BASE } from "./helpers";

/** ---------- Generic base builder ---------- */
export function buildBaseMetadata({
  title,
  description,
  canonicalPath,
  images,
  type = "website",
  imageAlt = "Upfrica",
  robots = { index: true, follow: true },
}) {
  const canonical = canonicalPath?.startsWith?.("http")
    ? canonicalPath
    : `${SITE_BASE}/${String(canonicalPath || "").replace(/^\//, "")}`;

  const imageList = (images || [])
    .filter(Boolean)
    .map((url) => ({ url, width: 1200, height: 630, alt: imageAlt }));

  return {
    title, // layout applies `%s | Upfrica`
    description,
    alternates: { canonical },
    openGraph: {
      type,
      title,
      description,
      url: canonical,
      images: imageList.length
        ? imageList
        : [{ url: `${SITE_BASE}/default-og-banner.jpg`, width: 1200, height: 630, alt: imageAlt }],
      siteName: "Upfrica",
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
      images: imageList.length ? imageList.map((i) => i.url) : [`${SITE_BASE}/default-og-banner.jpg`],
    },
    robots,
  };
}

/** ---------- Shared helpers ---------- */
export function pickOgImage({ shop, products }) {
  const prod = products?.[0] || products?.at?.(-1);
  const fromProd =
    prod?.thumbnail ||
    prod?.image_objects?.[0]?.image_url ||
    prod?.image_objects?.[0]?.url ||
    prod?.ordered_product_images?.[0];

  return (
    absUrl(shop?.top_banner) ||
    absUrl(shop?.shop_logo) ||
    absUrl(fromProd) ||
    `${SITE_BASE}/default-og-banner.jpg`
  );
}

export function pickShopSpecialty(shop) {
  return (
    (shop?.seo_specialty && String(shop.seo_specialty).trim()) ||
    (shop?.shop_attributes?.seo_specialty && String(shop.shop_attributes.seo_specialty).trim()) ||
    (shop?.shoptype?.name && String(shop.shoptype.name).trim()) ||
    "Shop"
  );
}

/** Build a stable, SEO-friendly description for shop pages */
function buildShopDescription({ shop, specialty, town, countryName, productsCount }) {
  const shopName = shop?.name || "Shop";
  const specialtyLower = String(specialty || "shop").toLowerCase();
  const loc = town || countryName || "your area";
  const count =
    Number.isFinite(productsCount) && productsCount > 0
      ? productsCount
      : (Number(shop?.active_listings) || 0);

  const tail = count ? ` Browse ${count}+ items.` : "";
  const desc = `${shopName} ‚Äî verified ${specialtyLower}. Fast delivery in ${loc}, buyer protection, warranty options.${tail}`;
  return desc;
}

/** ---------- Shop page metadata ---------- */
export function buildShopMetadata({ shop, products, region, slug, productsCount, robots }) {
  const shopName = (shop?.name || "Shop").slice(0, 60);
  const specialty = pickShopSpecialty(shop);
  const town = shop?.user?.town || "";
  const countryName = shop?.user?.country_name || shop?.user?.country || "";

  // Title: "Shop {Specialty} in {City}, {Country} ‚Äì {ShopName}"
  const loc = [town, countryName].filter(Boolean).join(", ");
  const baseTitle = loc ? `Shop ${specialty} in ${loc} ‚Äì ${shopName}` : `Shop ${specialty} ‚Äì ${shopName}`;
  const title = truncate(baseTitle, 60);

  // Description: prefer explicit custom meta if present, else our structured line
  const customMeta =
    shop?.seo_meta_description ||
    shop?.shop_attributes?.seo_meta_description ||
    null;

  const structured = buildShopDescription({
    shop,
    specialty,
    town,
    countryName,
    productsCount,
  });

  // If you *really* want to fall back to rich content when everything else is empty, add:
  const fallback = stripHtml(shop?.seo_content || "") || `${shopName}: Online shopping with buyer protection on Upfrica.`;

  const description = truncate(customMeta || structured || fallback, 155);

  const canonicalPath = `/${String(region || "").toLowerCase()}/shops/${slug}`;
  const ogImage = pickOgImage({ shop, products });

  return buildBaseMetadata({
    title,
    description,
    canonicalPath,
    images: [ogImage],
    imageAlt: `${shopName} ‚Äì ${specialty}${loc ? ` in ${loc}` : ""}`,
    robots,
  });
}

/** ---------- Product page metadata (unchanged) ---------- */
export function buildProductMetadata({ product, region, robots }) {
  const title = truncate(product?.title || "Product", 60);
  const description = truncate(
    stripHtml(product?.description || product?.seo_html || "") || "Buy on Upfrica.",
    155
  );
  const image =
    product?.thumbnail ||
    product?.image_objects?.[0]?.image_url ||
    product?.image_objects?.[0]?.url ||
    product?.ordered_product_images?.[0];

  const canonicalPath = `/${String(region || "").toLowerCase()}/${product?.seo_slug || product?.slug}`;
  return buildBaseMetadata({
    title,
    description,
    canonicalPath,
    images: [absUrl(image)],
    imageAlt: product?.title || "Product image",
    robots,
  });
}


/** ---------- Shop types page metadata (unchanged) ---------- */
export function buildShopTypeMetadata({ type, region, slug }) {
  const typeName = (type?.name || "Shops").toString();
  const cc = String(region || "").toUpperCase();

  // Title uses layout‚Äôs "%s | Upfrica" template
  const title = `Shop ${typeName} in ${cc}`;

  // Prefer curated fields from API; else fallback
  const description =
    (type?.final_seo_description && String(type.final_seo_description)) ||
    `Explore verified ${typeName.toLowerCase()} across ${cc}. Fast delivery and buyer protection.`;

  const banner = type?.banner_image_url;
  const canonicalPath = `/${String(region || "").toLowerCase()}/shoptypes/${slug}`;

  return buildBaseMetadata({
    title,
    description,
    canonicalPath,
    images: banner ? [banner] : [],
    type: "website",
  });
}

===== src/lib/seo/helpers.js =====
//src/lib/seo/helpers.js
export const SITE_BASE = (process.env.NEXT_PUBLIC_SITE_BASE_URL || "https://www.upfrica.com").replace(/\/$/, "");

export const absUrl = (url) => {
  if (!url) return null;
  if (/^https?:\/\//i.test(url)) return url;
  return `${SITE_BASE}/${String(url).replace(/^\//, "")}`;
};

export const stripHtml = (s = "") =>
  s
    .replace(/<style[\s\S]*?<\/style>/gi, " ")
    .replace(/<script[\s\S]*?<\/script>/gi, " ")
    .replace(/<[^>]+>/g, " ")
    .replace(/\s+/g, " ")
    .trim();

export const truncate = (s = "", n = 155) =>
  s.length <= n ? s : s.slice(0, n - 1).trimEnd() + "‚Ä¶";

===== src/lib/utils.js =====
// src/lib/utils.js
export function cn(...classes) {
  return classes.filter(Boolean).join(" ");
}
